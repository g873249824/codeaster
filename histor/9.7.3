

-----------------------------------------------------------------------

--------------------------------------------------------------------------------
--- AUTEUR granet       GRANET Sylvie          DATE 09/07/2010 - 01:49:28

--------------------------------------------------------------------------------
RESTITUTION FICHE 015383 DU 2010-07-22 17:03:31
TYPE anomalie concernant Code_Aster (VERSION 9.8)
TITRE
    Test THM -  erreur dxc3xa9veloppeur
FONCTIONNALITE
   Toutes les lois de couplage avec prise en compte du gaz nécessitent : 
   
   - De prendre une température de référence non nulle (sinon on a une division par zéro dans
   la loi des gaz parfaits). Cette température - renseignée sous THM_INIT - doit en outre
   être exprimée en Kelvin.
   On rajoute donc un test de positivité de cette valeur dans thmrcp (actuellement si
   l'utilisateur met 0, le code plante salement sans message d'erreur).
   
   - De prendre une pression de gaz de référence  non nulle (sinon division par zéro dans la
   dérivée de la masse volumique de gaz). Cette valeur est également renseignée dans
   THM_INIT. Idem : on rajoute un test de positivité dans thmrcp.
   
   
   On précise dans la doc de DEFI_MATERIAU U4.43.01 et dans la doc d'utilisation de la THM
   U2.04.05 que les températures et pressions de gaz de référence doivent être non nulles. On
   précise également que la température de référence doit être exprimée en Kelvin.
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : U4.43.01 U2.04.05
VALIDATION
    passage des cas test
DEJA RESTITUE DANS : 10.2.11
NB_JOURS_TRAV  : 0.1
--------------------------------------------------------------------------------
RESTITUTION FICHE 015440 DU 2010-08-19 13:17:12
TYPE anomalie concernant Code_Aster (VERSION 10.2)
TITRE
    En NEW10.2.11, les cas-tests wtnp126a et wtnp126b s'arretent en <F>_ERROR sur Rocks et Calibre 5.
FONCTIONNALITE
   Lors de la résolution de la fiche 015383, l'interdiction d'une valeur de référence en gaz
   égale à 0 a été faite de manière abusive  : elle a lieu pour les cas insaturés liquide
   gaz, mais pas pour les cas saturés gaz (loi de couplage hydraulique 'gaz'). C'est le cas
   du wtnp126 (loi 'gaz' + pression de référence gaz = 0).
   On leve donc cette interdiction pour la loi de comportement 'gaz'
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    passage de wtnp126a et b
DEJA RESTITUE DANS : 10.2.13
NB_JOURS_TRAV  : 0.1
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--- AUTEUR courtois     COURTOIS Mathieu       DATE 09/07/2010 - 01:49:28

--------------------------------------------------------------------------------
RESTITUTION FICHE 015411 DU 2010-08-05 09:36:09
TYPE anomalie concernant Code_Aster (VERSION 10.2)
TITRE
    CALC_TABLE et INFO
FONCTIONNALITE
   Problème
   --------
   
   CALC_TABLE, OPERATION='OPER' s'arrête en erreur avec INFO=2.
   
   
   Correction
   ----------
   
   En INFO=2, on affiche :
   Ajout de la colonne 'nom du paramètre' : [liste des valeurs...]
   
   Le format d'impression était erroné.
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    zzzz234d en INFO=2
DEJA RESTITUE DANS : 10.2.12
NB_JOURS_TRAV  : 0.5
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--- AUTEUR nistor       NISTOR Ionel           DATE 09/07/2010 - 01:49:29

--------------------------------------------------------------------------------
RESTITUTION FICHE 014649 DU 2010-02-17 13:02:33
TYPE anomalie concernant Code_Aster (VERSION 7.0)
TITRE
    DEFI_INTERF_DYNA : mise en majuscules automatiques des noms d'interfaces
FONCTIONNALITE
   Problème:
   ----------------------------------------
   Dans DEFI_INTERF_DYNA, les interfaces ne sont pas gérées par le nom du concept mais par le nom des interfaces 
   physiques qu'il contient, nom choisi par l'utilisateur et renseigné derrière le mot-clé NOM. Dans les sources 
   fortran qui récupèrent ces noms, on prend "soin" de les transformer en majuscules s'ils ont été rentrés en 
   minuscules. Mais de ce fait, un utilisateur qui a utilisé des minuscules pour les noms des interfaces de 
   façon cohérent (dans DEFI_INTERF_DYNA pour la définition et ensuite dans DEFI_MODELE_GENE ou MODE_ITER_CYCL 
   pour la construction du modèle réduit) verra sont calcul planter avec le message:
   
      !--------------------------------------------!
      ! <F> <ALGORITH15_85>               !
      !                                                           !
      ! l''interface de droite n'existe pas        !
      !   interface de nom intf_min                !
      !                                                            !
      !                                                             !
      ! Cette erreur est fatale. Le code s'arrete. !
      !-----------------------------------------------!
   Ca génère donc des plantages injustifiés.
   
   Solution:
   -------------------------------------------------------
   On supprime cette étape de passage en majuscules des noms des interfaces (plusieurs appels LXCAPS) et on 
   profite pour corriger le texte du message <ALGORITH15_85>, <ALGORITH15_86> et <ALGORITH15_87>::
   
      _(L'interface de droite/gauche/axe de nom %(k1)s n'existe pas        
         Conseil : vérifier si vous avez défini cette interface dans le modèle)
   A faire dans V9
   
   Impact dans les sources :
   -----------------------------------------------------
   defint.f
   algorith15.py
   
   Validation:
   -----------------------------------------------------
   Liste des cas-tests appellant DEFI_INTERF_DYNA
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    liste de cas-tests appelant DEFI_INTERF_DYNA
DEJA RESTITUE DANS : 10.2.13
NB_JOURS_TRAV  : 0.5
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--- AUTEUR pellet       PELLET Jacques         DATE 09/07/2010 - 01:49:29

--------------------------------------------------------------------------------
RESTITUTION FICHE 015393 DU 2010-07-27 14:07:33
TYPE anomalie concernant Code_Aster (VERSION 7.0)
TITRE
    CALC_VECT_ELEM pour une charge de pression ne marche pas avec les plaques/coques
FONCTIONNALITE
   Problème :
   ----------
   Th. De Soza a remarqué un bug dans la routine me2mme (CALC_VECT_ELEM) : on utilise parfois
   2 fois LPAIN(6)/LCHIN(6) pour 2 champs différents.
   Cela rend impossible (par exemple) le calcul de l'option CHAR_MECA_PRES_F pour les
   éléments de coque.
                                                                                            
                  
   Correction :
   ------------
   On modifie me2mme.f pour ne plus écraser LPAIN/LCHIN(6).
                                                                                            
                  
   Remarque :
   ----------
   Thomas demandait également de revoir plus généralement la programmation de me2mme.f.
   Je ne fais pas grand chose d'autre que de m'assurer que les 12 champs provenant du
   CARA_ELEM n'entrent pas en conflit entre eux ni avec les autres. Pour cela, je les
   numérote systématiquement entre 21 et 32.
                                                                                            
                  
   Je pense également qu'à l'issue du chantier CALC_CHAMP, la routine me2mme.f pourra
   bénéficier (commme les autres routines appelant calcul.f) de la routine permettant de
   remplir automatiquement les listes LPAIN et LCHIN.
    
    
   Liste des fichiers impactés par la correction de la fiche:  15393
     me2mme.f
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    xc3xa9tude jointe
DEJA RESTITUE DANS : 10.2.13
NB_JOURS_TRAV  : 0.15
--------------------------------------------------------------------------------
RESTITUTION FICHE 015428 DU 2010-08-16 07:17:03
TYPE anomalie concernant Code_Aster (VERSION 7.0)
TITRE
    Problxc3xa8me avec aster.dismoi
FONCTIONNALITE
   Problème:
   ---------
   Le code se plante salement lorsque l'on veut utiliser aster.dismoi dans un fichier de
   commande sur calibre5 en "debug".
                                                                                            
                 
   Correction :
   ------------
   Après avoir fait quelques "print", je me suis aperçu que le problème venait de l'argument
   CODMES de la routine DISMOI. Cet argument n'arrive pas correctement jusqu'au fortran.
                                                                                            
                 
   Avec l'accord de M. Courtois, dans astermodule.c, je fais pour codmes le meme traitement
   que pour les autres arguments "in" de type chaine (questi, concept et typeconcept) : on
   recopie l'argument dans une chaine temporaire dont on est sur qu'elle se termine par un "\0".
                                                                                            
                 
   Suite à cette correction, l'étude jointe va jusqu'au bout.
                                                                                            
                 
   NEW9 :
   ------
   Je propose de reporter cette petite correction en NEW9
    
    
   Liste des fichiers impactés par la correction de la fiche:  15428
     astermodule.c
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    xc3xa9tude jointe
DEJA RESTITUE DANS : 10.2.13
NB_JOURS_TRAV  : 0.2
--------------------------------------------------------------------------------
RESTITUTION FICHE 015449 DU 2010-08-23 14:10:23
TYPE anomalie concernant Code_Aster (VERSION 7.0)
TITRE
    un bug dans CREA_CHAMP/EXTR/TABLE pour les champs ELGA
FONCTIONNALITE
   Problème:
   ---------
   Dans la routne tabchs.f, quand on cherche le mode_local associé à une certaine grandeur
   pour une option donnée, l'indice de rangement de ce paramètre dans l'objet &CATA.TE.OPTMOD
   (variable IPOUT) peut varier d'un type_element à l'autre et il n'a pas de raison d'etre
   identique à l'indice global dans l'objet &CATA.OP.DESCOPT.
   La routine tabchs.f est donc bugguée.
                                                                                             
   Correction :
   ------------
   La correction proposée par E. Lorentz pour cette anomalie me convient : on repère le nom
   du paramètre cherché (NOMPAR), puis dans la boucle sur les type_elements, on regarde quel
   est l'indice de NOMPAR.
                                                                                             
   Resultats faux ? :
   ------------------
   Je ne pense pas que cette anomalie ait pu provoquer des résultats faux car ce bout de
   programme sert à calculer le nombre de points de Gauss du champ à créer. Pour que ce
   nombre soit faux, il faudrait qu'une option de calcul produise plusieurs champs ELGA sur
   des familles différentes et je ne crois pas que cette situation existe aujourd'hui.
    
    
   Liste des fichiers impactés par la correction de la fiche:  15449
     tabchs.f
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    rien de particulier
DEJA RESTITUE DANS : 10.2.13
NB_JOURS_TRAV  : 0.1
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--- AUTEUR desoza       DE SOZA Thomas         DATE 09/07/2010 - 01:49:30

--------------------------------------------------------------------------------
RESTITUTION FICHE 015451 DU 2010-08-25 08:03:30
TYPE anomalie concernant Code_Aster (VERSION 7.0)
TITRE
    Ecrasement aval dans CALC_NO pour le calcul des reactions nodales
FONCTIONNALITE
   Anomalie
   ========
   
   Dans le calcul joint, on plante au bout d'un calcul de 40 min dans CALC_NO si l'on demande
   le calcul des réactions nodales (REAC_NODA). Le même calcul sans REAC_NODA passe sans
   problème.
   
       # 
   ------------------------------------------------------------------------------------------ 
       #  COMMANDE NO :  0024            CONCEPT DE TYPE : evol_noli
       #  -------------                  ----------------- 
      RESU=CALC_NO(reuse = RESU,
                  CRITERE='RELATIF',
                  RESULTAT=RESU,
                  OPTION=('SIEF_NOEU_ELGA','FORC_NODA','REAC_NODA',),
                  PRECISION=9.9999999999999995E-07,
                  );
   
   *** glibc detected *** corrupted double-linked list: 0x600000000678eab0 ***
   Abort (core dumped) 
   
   
   Détails
   =======
   
   Le même calcul sur ma machine soulève un écrasement aval JEVEUX. Avec un valgrind on est
   un peu plus avancé : 
   
   ==26158== Invalid write of size 8
   ==26158==    at 0x8A20795: vtcmbl_ (vtcmbl.f:347)
   ==26158==    by 0x8809C60: ascova_ (ascova.f:190)
   ==26158==    by 0x867CD06: op0106_ (op0106.f:731)
   ==26158==    by 0x81C6529: ex0100_ (ex0100.f:66)
   ==26158==    by 0x81C2D4F: execop_ (execop.f:88)
   ==26158==    by 0x814196D: expass_ (expass.f:82)
   ==26158==    by 0x8108F1F: aster_oper (astermodule.c:2636)
   ==26158==    by 0x40805E9: PyCFunction_Call (methodobject.c:73)
   ==26158==    by 0x40CEE25: PyEval_EvalFrameEx (ceval.c:3573)
   ==26158==    by 0x40CF49F: PyEval_EvalFrameEx (ceval.c:3659)
   ==26158==    by 0x40CF49F: PyEval_EvalFrameEx (ceval.c:3659)
   ==26158==    by 0x40CF49F: PyEval_EvalFrameEx (ceval.c:3659)
   ==26158==  Address 0x6e3f478 is 74,008 bytes inside a block of size 74,012 alloc'd
   ==26158==    at 0x4022BF3: malloc (vg_replace_malloc.c:195)
   ==26158==    by 0x81B367C: hpalloc_ (hpalloc.c:29)
   ==26158==    by 0x8139105: jjalls_ (jjalls.f:149)
   ==26158==    by 0x81680B7: jxveuo_ (jxveuo.f:221)
   ==26158==    by 0x813C2D4: jjalty_ (jjalty.f:63)
   ==26158==    by 0x81432FC: jeveuo_ (jeveuo.f:139)
   ==26158==    by 0x8117B6F: wkvect_ (wkvect.f:38)
   ==26158==    by 0x8A1F236: vtcmbl_ (vtcmbl.f:237)
   ==26158==    by 0x8809C60: ascova_ (ascova.f:190)
   ==26158==    by 0x867CD06: op0106_ (op0106.f:731)
   ==26158==    by 0x81C6529: ex0100_ (ex0100.f:66)
   ==26158==    by 0x81C2D4F: execop_ (execop.f:88)
   ==26158== 
   
   Le problème se produit pour la raison suivante : lorsque l'on calcule les réactions
   nodales on doit récupérer les forces externes pour les soustraire aux forces nodales. Pour
   cela on utilise le couple ASASVE/ASCOVA. On fournit à ASCOVA le nom d'un vecteur dans
   lequel mettre le résultat de l'assemblage des forces externes (si ce dernier n'existe pas
   déjà, il est créé, sinon on prend celui qui est fourni)
   
   Cette opération est réalisée 3 fois : pour les forces fixes, les forces suiveuses et les
   forces pilotées et ce *à chaque numéro d'ordre*.
   
   Or pour les forces pilotées, on donne à ASCOVA un vecteur que l'on ne détruit pas par la
   suite : conséquence directe ASCOVA ne va recréer un vecteur à chaque fois mais réutiliser
   celui-ci. Du coup si le nombre d'équations change d'un pas de temps à un autre, on risque
   d'avoir des problèmes car on va recopier dans notre vecteur un autre de taille différente.
   
   C'est ce qui se produit ici car entre le 10ème et le 11ème pas de temps, le nombre
   d'inconnues augmente : on rajoute une CL.
   
   Correction
   ==========
   
   On corrige en détruisant bien le vecteur après utilisation de la même manière que pour le
   cas charges fixes et charges suiveuses. Ce bug existe depuis la 3.6.14 !
   
   Impact : op0106.f (reformatage du début de la routine également)
   
   Il n'y a pas de résultats faux : au pire on plante, au mieux JEVEUX détecte l'écrasement.
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    perso
DEJA RESTITUE DANS : 10.2.13
NB_JOURS_TRAV  : 0.5
--------------------------------------------------------------------------------
RESTITUTION FICHE 015487 DU 2010-09-02 12:26:03
TYPE anomalie concernant Code_Aster (VERSION 7.0)
TITRE
    En NEW10.2.13, les cas-tests ssna102f, ssnv129d, ssnv209f et zzzz237a s'arretent en fatal erreur sur Bull
FONCTIONNALITE
   Anomalie
   ========
   
   '''
   En NEW10.2.13, les cas-tests ssna102f, ssnv129d, ssnv209f et zzzz237a s'arretent en fatal
   erreur sur Bull.
   '''
   
   Il s'agit d'un plantage en ASSERT dans VTCMBL
   
   Analyse
   =======
   
   Suite à la fiche issue15451, on a blindé VTCMBL pour vérifier la cohérence des dimensions
   des objets d'un CHAM_NO entrant (.DESC, .REFE et .VALE) avec celui sortant fourni
   (facultativement) par l'utilisateur.
   
   Les tests qui font du AFFE_CHAR_CINE et du contact continu déclenchent cet ASSERT.
   
   En effet pour assembler le chargement cinématique on fait une combinaison linéaire entre
   U_imp_+ et U_imp_- et on demande le résultat dans un cham_no créé par VTCREB.
   
   U_imp_- le premier champ fourni avec VTCMBL et créé par duplication de DEPMOI. On va donc
   comparer les dimensions de DEPMOI et d'un cham_no créé par VTCREB. Elles ne sont pas
   identiques lorsque l'on fait du contact continu !
   
   C'est parce que en contact continu, on annule à chaque début de pas de temps les lagranges
   de C/F, par des appels successifs à CNSRED/CNSFUS et finalement CNSCNO.
   
   Or CNSCNO ne crée par un cham_no en accord avec la nomenclature des SD ! Les .DESC et
   .REFE n'ont pas les mêmes dimensions.
   
   Correction
   ==========
   
   On corrige CNSCNO et on ajoute une fonction check_ dans sd_cham_no.py pour vérifier le bon
   dimensionnement des cham_no (la taille des .DESC et .REFE dépend du type de représentation
   : variable ou constante).
   
   À faire en V9.
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    tests cassxc3xa9s
NB_JOURS_TRAV  : 0.5
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--- AUTEUR berard       BERARD Alexandre       DATE 09/07/2010 - 01:49:30

--------------------------------------------------------------------------------
RESTITUTION FICHE 015420 DU 2010-08-10 09:29:39
TYPE anomalie concernant Code_Aster (VERSION 7.0)
TITRE
    Erreur MACR_ECLA_PG dans l'xc3xa9clatement d'un TETRA comportant 15 points de Gauss
FONCTIONNALITE
   Problème
   ========
   
   En jouant avec la commande MACR_ECLA_PG, je me suis aperçu que l'éclatement d'un tétraèdre comportant 15 
   points de Gauss est incorrect : en effet, deux mailles s'interpénètrent dans le maillage éclaté.
   
   
   
   Résolution
   ==========
   
   L'erreur provient d'une connectivité erronée pour deux noeuds d'un des hexaèdres éclatés.
   Dans ecla3d.f, on effectue le remplacement suivant.
   
   <<<   CALL ECLACO(10,MXNBN2,CONNX,NBNO2, 16,26,28,17,19,32,31,18)
   
   >>>   CALL ECLACO(10,MXNBN2,CONNX,NBNO2, 16,26,28,17,19,32,30,20)
   
   
   
   Validation
   ==========
   
   On visualise le nouveau maillage éclaté sous Salome ; il ne semble plus y avoir de problèmes.
RESU_FAUX_VERSION_EXPLOITATION    :  NON
RESU_FAUX_VERSION_DEVELOPPEMENT   :  NON
RESTITUTION_VERSION_EXPLOITATION  :  OUI
RESTITUTION_VERSION_DEVELOPPEMENT :  OUI
IMPACT_DOCUMENTAIRE : 
VALIDATION
    Visualisation perso
NB_JOURS_TRAV  : 0.5
--------------------------------------------------------------------------------



========================================================================
=== Recapitulation des operations demandees pour toutes les restitutions
========================================================================


    TYPE Action    unite                      user      Auteur         nblg  ajout suppr.

       C MODIF supervis/astermodule          macocco K.MACOCCO         4180     11      5
 FORTRAN MODIF algeline/vtcmbl               macocco K.MACOCCO          379     13      6
 FORTRAN MODIF algorith/defint               macocco K.MACOCCO          297      1      5
 FORTRAN MODIF algorith/thmrcp               macocco K.MACOCCO         1747     17      3
 FORTRAN MODIF calculel/cnscno               macocco K.MACOCCO          343      5      3
 FORTRAN MODIF calculel/ecla3d               macocco K.MACOCCO         1022      2      3
 FORTRAN MODIF calculel/me2mme               macocco K.MACOCCO          609      4      4
 FORTRAN MODIF modelisa/tabchs               macocco K.MACOCCO          490     25      4
 FORTRAN MODIF prepost/op0106                macocco K.MACOCCO          925     66     49
  PYTHON MODIF Macro/calc_table_ops          macocco K.MACOCCO          178      8      8
  PYTHON MODIF Messages/algorith15           macocco K.MACOCCO          420      7      7
  PYTHON MODIF Messages/algorith17           macocco K.MACOCCO           50      7      1


        nb unites  nb lignes  ajouts  suppr.  difference
 AJOUT :    0           0         0                +0
 MODIF :   12       10640       166      98       +68
 SUPPR :    0           0                 0        +0
 DEPLA :    0           0 
         ----      ------     ------  ------   ------
 TOTAL :   12       10640       166      98       +68 
