      SUBROUTINE  AMUMPS(ACTION,SOLVEZ,MATASZ,VECASZ,SOLUZ,VCINEZ,IRET)
      IMPLICIT NONE
!           CONFIGURATION MANAGEMENT OF EDF VERSION
!&           CONFIGURATION MANAGEMENT OF EDF VERSION                   
!& MODIF AMUMPS MUMPS  DATE 19/05/2008   AUTEUR COURTOIS M.COURTOIS 
! ==================================================================
! COPYRIGHT (C) 1991 - 2005  EDF R&D              WWW.CODE-ASTER.ORG
!
! THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR
! MODIFY IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS
! PUBLISHED BY THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE
! LICENSE, OR (AT YOUR OPTION) ANY LATER VERSION.
! THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
! BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
! MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
! GENERAL PUBLIC LICENSE FOR MORE DETAILS.
!
! YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
! ALONG WITH THIS PROGRAM; IF NOT, WRITE TO : EDF R&D CODE_ASTER,
!    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
! ==================================================================
C--------------------------------------------------------------
C BUT : ROUTINE D'INTERFACE ENTRE LE CODE_ASTER ET LA BIBLIOTHEQUE
C       MUMPS DE RESOLUTION DE SYSTEMES LINEAIRES.
C
C IN : ACTION :
C     /'PRERES'  : POUR DEMANDER LA FACTORISATION
C     /'RESOUD'  : POUR DEMANDER LA DESCENTE/REMONTEE
C     /'DETR_MAT': POUR DEMANDER LA DESTRUCTION DE L'INSTANCE MUMPS
C                  ASSOCIEE A UNE MATRICE
C     /'RESOUD_CONTACT' : RESOLUTIONS SIMULTANEES DU CONTACT
C IN : SOLVEZ   (K19) : NOM DE LA SD SOLVEUR
C             (SI ACTION=PRERES/RESOUD)
C IN : MATAS (K19) : NOM DE LA MATR_ASSE
C             (SI ACTION=PRERES/RESOUD/DETR_MATR)
C IN : VECAS (K19) : NOM DU SECOND MEMBRE
C            (SI ACTION=RESOUD)
C IN : SOLU  (K19) : NOM DE LA SOLUTION
C            (SI ACTION=RESOUD)
C IN : VCINE (K19) : NOM DU CHAM_NO DE CHARGEMENT CINEMATIQUE
C            (SI ACTION=RESOUD)
C IN/OUT : IRET (I) : CODE_RETOUR :
C            0 : OK
C            2 : MATRICE NUMERIQUEMENT SINGULIERE (PRERES)
C         EN IN: NBRE DE RESOLUTIONS SIMULTANEES AVEC ACTION=
C                'RESOUD_CONTACT'
C
C
C---------------------------------------------------------------
      CHARACTER*(*) ACTION,MATASZ,VECASZ,SOLUZ,VCINEZ,SOLVEZ
      INTEGER IRET

#ifdef _HAVE_MUMPS

C============================================================
      INCLUDE 'mpif.h'
      INCLUDE 'dmumps_struc.h'
      INCLUDE 'zmumps_struc.h'
C============================================================

      INTEGER NMXINS,IPREM
      PARAMETER (NMXINS=5)
      TYPE (DMUMPS_STRUC) DMPS(NMXINS)
      TYPE (ZMUMPS_STRUC) ZMPS(NMXINS)
      INTEGER I,K,IERD,IBID,KXMPS,JSLVR,JREFA,JSLVI,NBSOL
      CHARACTER*1 ROUCS(NMXINS),ROUC,TYPM
      CHARACTER*4 ETAMAT,KBID,ETAMS(NMXINS),IMPR,ETAM
      CHARACTER*14 NU,NONUS(NMXINS),NONU
      CHARACTER*19 MATAS,SOLU,VECAS,NOMATS(NMXINS),VCINE
      CHARACTER*19 NOMAT,NOSOLV,SOLVEU,NOSOLS(NMXINS),K19B
      REAL*8 RBID,EPSMAX
      COMPLEX*16 CBID

C     -- ON STOCKE AU PLUS NMXINS INSTANCES DE XMUMPS_STRUC
C        (CHAQUE INSTANCE EST SOIT 1 DMPS SOIT 1 ZMPS)
      COMMON /SMUMPS/ DMPS,ZMPS,NONUS,NOMATS,NOSOLS,ETAMS,ROUCS

C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------------------
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL,LQUALI
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8,KCODE
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32, JEXNUM
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C----------------------------------------------------------------
      SAVE IPREM
      DATA  IPREM /0/
C----------------------------------------------------------------
      CALL JEMARQ()
      SOLVEU= SOLVEZ
      MATAS=MATASZ
      VECAS=VECASZ
      SOLU=SOLUZ
      VCINE=VCINEZ
      IF (ACTION(1:14).EQ.'RESOUD_CONTACT') THEN
        NBSOL=IRET
      ELSE
        NBSOL=1
      ENDIF
      
      
      IF (IPREM.EQ.0) THEN
C     --------------------------------
C INITIALISE LES NMXINS INSTANCES MUMPS POTENTIELLES
C NOMATS (NOM DE LA MATR_ASSE GLOBALE), NONUS (NUM_DDL), 
C NOSOLS (SD_SOLVEUR), ETAMS (?), ROUCS (R OU C)
        DO K=1,NMXINS
          NOMATS(K)=' '
          NONUS(K)=' '
          NOSOLS(K)=' '
          ETAMS(K)=' '
          ROUCS(K)=' '
        ENDDO
        IPREM=1
      ENDIF

C      1. RECHERCHE DE KXMPS (NUMERO DE L'INSTANCE XMUMPS) + 
C           ROUC (R OU C) :
C      -----------------------------------------------------
      CALL ASSERT(MATAS.NE.' ')

C        Y-A-T-IL DEJA UNE INSTANCE EN MEMOIRE POUR MATAS ?
      DO 1, K=1,NMXINS
        IF (NOMATS(K).EQ.MATAS) THEN
          KXMPS=K
          ROUC=ROUCS(KXMPS)
          GOTO 2
        ENDIF
1     CONTINUE
      IF (ACTION.EQ.'DETR_MAT') GO TO 9999

C        Y-A-T-IL ENCORE UNE PLACE LIBRE ?
      DO 4, K=1,NMXINS
        IF (NOMATS(K).EQ.' ') THEN
          KXMPS=K
          CALL JELIRA(MATAS//'.VALM','TYPE',IBID,ROUC)
          GOTO 2
        ENDIF
4     CONTINUE
      CALL U2MESS('F','FACTOR_60')
2     CONTINUE


C     2. QUELQUES VERIFICATIONS ET PETITES ACTIONS :
C     ----------------------------------------------
      IF (ACTION.EQ.'PRERES') THEN
         CALL DISMOI('F','NOM_NUME_DDL',MATAS,'MATR_ASSE',IBID,NU,IERD)
         CALL ASSERT(SOLVEU.NE.' ')

         CALL ASSERT(NOMATS(KXMPS).EQ.' ')
         CALL ASSERT(NOSOLS(KXMPS).EQ.' ')
         CALL ASSERT(NONUS(KXMPS).EQ.' ')
         CALL ASSERT(ETAMS(KXMPS).EQ.' ')
         CALL ASSERT(ROUCS(KXMPS).EQ.' ')

         ETAM='FNUM'
         NOMAT=MATAS
         NOSOLV=SOLVEU
         NONU=NU

         NOMATS(KXMPS)=NOMAT
         NOSOLS(KXMPS)=NOSOLV
         ETAMS(KXMPS)=ETAM
         NONUS(KXMPS)=NONU
         ROUCS(KXMPS)=ROUC


C        -- LA MATRICE EST-ELLE DEJA FACTORISEE ?
         CALL JEVEUO(NOMAT//'.REFA','E',JREFA)
         ETAMAT=ZK24(JREFA-1+8)
         IF (ETAMAT.EQ.'DECT') THEN
            CALL U2MESS('A','FACTOR_59')
            GOTO 9999
         ELSE
           ZK24(JREFA-1+8)='DECT'
         ENDIF

C        -- DDLS ELIMINES :
C        ELIMF (AFFE_CHARC_CINE)/ ELIML (AFFE_CHAR_MECA)
         CALL ASSERT(ZK24(JREFA-1+3).NE.'ELIMF')
         IF (ZK24(JREFA-1+3).EQ.'ELIML') CALL MTMCHC(NOMAT,'ELIMF')
         CALL ASSERT(ZK24(JREFA-1+3).NE.'ELIML')


      ELSE  IF (ACTION(1:6).EQ.'RESOUD') THEN
         NOMAT=NOMATS(KXMPS)
         NOSOLV=NOSOLS(KXMPS)
         ETAM=ETAMS(KXMPS)
         NONU=NONUS(KXMPS)
         ROUC=ROUCS(KXMPS)

         CALL ASSERT(SOLVEU.NE.' ')
         CALL ASSERT(VECAS.NE.' ')
         CALL ASSERT(SOLU.NE.' ')
         CALL ASSERT(SOLVEU.EQ.NOSOLV)
         CALL ASSERT(ETAM.EQ.'FNUM')
         CALL DISMOI('F','NOM_NUME_DDL',MATAS,'MATR_ASSE',IBID,NU,IERD)
         CALL ASSERT(NONU.EQ.NU)

      ELSE IF (ACTION=='DETR_MAT') THEN
         NOMAT=NOMATS(KXMPS)
         CALL ASSERT(MATAS.NE.' ')

      ELSE
         CALL ASSERT(.FALSE.)
      ENDIF

      IF (ROUC.EQ.'R') THEN
        CALL AMUMPR(ACTION,KXMPS,VECAS,SOLU,VCINE,NBSOL,IRET)
      ELSE IF (ROUC.EQ.'C') THEN
        CALL AMUMPC(ACTION,KXMPS,VECAS,SOLU,VCINE,IRET)
      ENDIF

      IF (ACTION.EQ.'PRERES') THEN
        CALL ASSERT((IRET.EQ.0).OR.(IRET.EQ.2))
        IF (IRET.EQ.2) CALL U2MESS('F','FACTOR_58')
      ENDIF

9999  CONTINUE
      CALL JEDEMA()

#endif
      END
