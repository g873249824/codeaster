      SUBROUTINE  AMUMPS(ACTION,SOLVEZ,MATASZ,RSOLU,CSOLU,VCINEZ,
     &                   NBSOL,IRET)
      IMPLICIT NONE
!           CONFIGURATION MANAGEMENT OF EDF VERSION
!& MODIF AMUMPS MUMPS  DATE 18/05/2009   AUTEUR LEFEBVRE J-P.LEFEBVRE 
! ==================================================================
! COPYRIGHT (C) 1991 - 2005  EDF R&D              WWW.CODE-ASTER.ORG
!
! THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR
! MODIFY IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS
! PUBLISHED BY THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE
! LICENSE, OR (AT YOUR OPTION) ANY LATER VERSION.
! THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
! BUT WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
! MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
! GENERAL PUBLIC LICENSE FOR MORE DETAILS.
!
! YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
! ALONG WITH THIS PROGRAM; IF NOT, WRITE TO : EDF R&D CODE_ASTER,
!    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
! ==================================================================
C--------------------------------------------------------------
C BUT : ROUTINE D'INTERFACE ENTRE LE CODE_ASTER ET LA BIBLIOTHEQUE
C       MUMPS DE RESOLUTION DE SYSTEMES LINEAIRES.
C
C IN : ACTION :
C     /'PRERES'  : POUR DEMANDER LA FACTORISATION
C     /'RESOUD'  : POUR DEMANDER LA DESCENTE/REMONTEE
C     /'DETR_MAT': POUR DEMANDER LA DESTRUCTION DE L'INSTANCE MUMPS
C                  ASSOCIEE A UNE MATRICE
C IN : SOLVEZ   (K19) : NOM DE LA SD SOLVEUR
C             (SI ACTION=PRERES/RESOUD)
C IN : MATAS (K19) : NOM DE LA MATR_ASSE
C             (SI ACTION=PRERES/RESOUD/DETR_MATR)
C VAR: RSOLU (R)   : EN ENTREE : VECTEUR SECOND MEMBRE (REEL)
C                    EN SORTIE : VECTEUR SOLUTION (REEL)
C             (SI ACTION=RESOUD)
C VAR: CSOLU (C)   : EN ENTREE : VECTEUR SECOND MEMBRE (COMPLEXE)
C                    EN SORTIE : VECTEUR SOLUTION (COMPLEXE)
C             (SI ACTION=RESOUD)
C IN : VCINE (K19) : NOM DU CHAM_NO DE CHARGEMENT CINEMATIQUE
C            (SI ACTION=RESOUD)
C IN : NBSOL (I) : NOMRE DE SYSTEMES A RESOUDRE
C OUT : IRET (I) : CODE_RETOUR :
C            0 : OK
C            2 : MATRICE NUMERIQUEMENT SINGULIERE (SI PRERES)
C
C
C---------------------------------------------------------------
      CHARACTER*(*) ACTION,MATASZ,VCINEZ,SOLVEZ
      INTEGER IRET,NBSOL
      REAL*8 RSOLU(*)
      COMPLEX*16 CSOLU(*)

#ifdef _HAVE_MUMPS

C============================================================
      INCLUDE 'mpif.h'
      INCLUDE 'dmumps_struc.h'
      INCLUDE 'zmumps_struc.h'
C============================================================

      INTEGER NMXINS,IPREM
      PARAMETER (NMXINS=5)
      TYPE (DMUMPS_STRUC) , TARGET  :: DMPS(NMXINS)
      TYPE (ZMUMPS_STRUC) , TARGET  :: ZMPS(NMXINS)
      TYPE (DMUMPS_STRUC) , POINTER :: XMPSK
      TYPE (ZMUMPS_STRUC) , POINTER :: YMPSK
      INTEGER K,IERD,IBID,KXMPS,JREFA,N,NSMDI,IFM,NIV
      CHARACTER*1  ROUCS(NMXINS),ROUC
      CHARACTER*4  ETAMAT,KBID,ETAMS(NMXINS),ETAM
      CHARACTER*14 NONUS(NMXINS),NONU,NU
      CHARACTER*19 MATAS,NOMATS(NMXINS),VCINE,
     &             NOMAT,NOSOLV,SOLVEU,NOSOLS(NMXINS)
      COMMON /SMUMPS1/ DMPS
      COMMON /SMUMPS2/ ZMPS
      COMMON /SMUMPS/  NONUS,NOMATS,NOSOLS,ETAMS,ROUCS
      
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------------------
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C----------------------------------------------------------------
      SAVE IPREM
      DATA  IPREM /0/
C----------------------------------------------------------------
      CALL JEMARQ()
      CALL INFNIV(IFM,NIV)
      SOLVEU= SOLVEZ
      MATAS=MATASZ
      VCINE=VCINEZ


      IF (IPREM.EQ.0) THEN
C     --------------------------------
C INITIALISE LES NMXINS INSTANCES MUMPS POTENTIELLES
C NOMATS (NOM DE LA MATR_ASSE GLOBALE), NONUS (NUM_DDL),
C NOSOLS (SD_SOLVEUR), ETAMS (?), ROUCS (R OU C)
        DO K=1,NMXINS
          NOMATS(K)=' '
          NONUS(K)=' '
          NOSOLS(K)=' '
          ETAMS(K)=' '
          ROUCS(K)=' '
        ENDDO
        IPREM=1
      ENDIF

C      1. RECHERCHE DE KXMPS (NUMERO DE L'INSTANCE XMUMPS) +
C           ROUC (R OU C) :
C      -----------------------------------------------------
      CALL ASSERT(MATAS.NE.' ')

C        Y-A-T-IL DEJA UNE INSTANCE EN MEMOIRE POUR MATAS ?

C     ON TEST LE NOM DE LA MATRICE, CELUI DU NUME_DDL, LE TYPE ET
C     LA TAILLE DU PB ASTER ET DU PB MUMPS ASSOCIE
      CALL DISMOI('F','NOM_NUME_DDL',MATAS,'MATR_ASSE',IBID,NU,IERD)
      CALL JELIRA(MATAS//'.VALM','TYPE',IBID,ROUC)
      CALL JELIRA(NU//'.SMOS.SMDI','LONMAX',NSMDI,KBID)

      KXMPS=1
      DO 1, K=1,NMXINS
        IF ((NOMATS(K).EQ.MATAS).AND.(NONUS(K).EQ.NU).AND.
     &      (ROUCS(K).EQ.ROUC)) THEN
          IF (ROUC.EQ.'R') THEN
            XMPSK=>DMPS(K)
            N=XMPSK%N
          ELSE IF (ROUC.EQ.'C') THEN
            YMPSK=>ZMPS(K)
            N=YMPSK%N
          ELSE
            CALL ASSERT(.FALSE.)
          ENDIF
          IF (NSMDI.EQ.N) THEN
            KXMPS=K
            ROUC=ROUCS(K)
            GOTO 2
          ENDIF
        ENDIF
1     CONTINUE
      IF (ACTION.EQ.'DETR_MAT') GO TO 9999

C        Y-A-T-IL ENCORE UNE PLACE LIBRE ?
      DO 4, K=1,NMXINS
        IF (NOMATS(K).EQ.' ') THEN
          KXMPS=K
          CALL JELIRA(MATAS//'.VALM','TYPE',IBID,ROUC)
          GOTO 2
        ENDIF
4     CONTINUE
      CALL U2MESS('F','FACTOR_60')
2     CONTINUE

C     2. QUELQUES VERIFICATIONS ET PETITES ACTIONS :
C     ----------------------------------------------
      IF (ACTION.EQ.'PRERES') THEN
         CALL DISMOI('F','NOM_NUME_DDL',MATAS,'MATR_ASSE',IBID,NU,IERD)
         CALL ASSERT(SOLVEU.NE.' ')

         CALL ASSERT(NOMATS(KXMPS).EQ.' ')
         CALL ASSERT(NOSOLS(KXMPS).EQ.' ')
         CALL ASSERT(NONUS(KXMPS).EQ.' ')
         CALL ASSERT(ETAMS(KXMPS).EQ.' ')
         CALL ASSERT(ROUCS(KXMPS).EQ.' ')
         ETAM='FNUM'
         NOMAT=MATAS
         NOSOLV=SOLVEU
         NONU=NU
         NOMATS(KXMPS)=NOMAT
         NOSOLS(KXMPS)=NOSOLV
         ETAMS(KXMPS)=ETAM
         NONUS(KXMPS)=NONU
         ROUCS(KXMPS)=ROUC

C        -- LA MATRICE EST-ELLE DEJA FACTORISEE ?
         CALL JEVEUO(NOMAT//'.REFA','E',JREFA)
         ETAMAT=ZK24(JREFA-1+8)
         IF (ETAMAT.EQ.'DECT') THEN
            CALL U2MESS('A','FACTOR_59')
            GOTO 9999
         ELSE
           ZK24(JREFA-1+8)='DECT'
         ENDIF

C        -- DDLS ELIMINES :
C        ELIMF (AFFE_CHARC_CINE)/ ELIML (AFFE_CHAR_MECA)
         CALL ASSERT(ZK24(JREFA-1+3).NE.'ELIMF')
         IF (ZK24(JREFA-1+3).EQ.'ELIML') CALL MTMCHC(NOMAT,'ELIMF')
         CALL ASSERT(ZK24(JREFA-1+3).NE.'ELIML')


      ELSE  IF (ACTION(1:6).EQ.'RESOUD') THEN
         CALL ASSERT(NBSOL.GE.1)
         NOMAT=NOMATS(KXMPS)
         NOSOLV=NOSOLS(KXMPS)
         ETAM=ETAMS(KXMPS)
         NONU=NONUS(KXMPS)
         ROUC=ROUCS(KXMPS)

         CALL ASSERT(SOLVEU.NE.' ')
         CALL ASSERT(SOLVEU.EQ.NOSOLV)
         CALL ASSERT(ETAM.EQ.'FNUM')
         CALL DISMOI('F','NOM_NUME_DDL',MATAS,'MATR_ASSE',IBID,NU,IERD)
         CALL ASSERT(NONU.EQ.NU)

      ELSE IF (ACTION=='DETR_MAT') THEN
         NOMAT=NOMATS(KXMPS)
         CALL ASSERT(MATAS.NE.' ')

      ELSE
         CALL ASSERT(.FALSE.)
      ENDIF

      IF (ROUC.EQ.'R') THEN
        CALL AMUMPR(ACTION,KXMPS,RSOLU,VCINE,NBSOL,IRET)
      ELSE IF (ROUC.EQ.'C') THEN
        CALL AMUMPC(ACTION,KXMPS,CSOLU,VCINE,NBSOL,IRET)
      ENDIF

      IF (ACTION.EQ.'PRERES') THEN
        CALL ASSERT((IRET.EQ.0).OR.(IRET.EQ.2))
        IF (IRET.EQ.2) CALL U2MESS('F','FACTOR_42')
      ENDIF

9999  CONTINUE
      CALL JEDEMA()

#else
      CALL U2MESS('F','FERMETUR_1')

#endif
      END
