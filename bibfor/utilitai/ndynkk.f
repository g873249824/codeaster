      CHARACTER*24 FUNCTION NDYNKK(SDDYNA,CHAINE)
C      
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF UTILITAI  DATE 23/09/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      CHARACTER*19  SDDYNA
      CHARACTER*(*) CHAINE
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (UTILITAIRE)
C
C INTERROGE SDDYNA POUR RENVOYER UNE CHAINE
C      
C ----------------------------------------------------------------------
C
C
C OUT NDYNKK : NOM DE LA SD DEDIEE 
C               - AU MULTI_APPUI OU
C               - A L'AMORTISSEMENT MODAL OU
C               - A LA PROJECTION MODALE
C IN  SDDYNA : NOM DE LA SD DEDIEE A LA DYNAMIQUE
C IN  CHAINE :  = / 'MULTI_APPUI' 
C                 / 'AMOR_MODAL'
C                 / 'PROJ_MODAL'
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      CHARACTER*24 NOSD ,TCHA  
      INTEGER      JNOSD,JTCHA 
      CHARACTER*24 VECENT     
      INTEGER      JVECEN       
      CHARACTER*24 VEOL ,VAOL
      INTEGER      JVEOL,JVAOL        
      CHARACTER*19 KAMMO
      LOGICAL      NDYNLO,LDYNA
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      LDYNA  = NDYNLO(SDDYNA,'DYNAMIQUE')
      NDYNKK = ' '      
C
C --- ACCES AUX OBJETS DE LA SD SDDYNA
C
      IF (LDYNA) THEN
        NOSD   = SDDYNA(1:15)//'.NOM_SD' 
        VEOL   = SDDYNA(1:15)//'.VEEL_OLD'  
        VAOL   = SDDYNA(1:15)//'.VEAS_OLD'        
        TCHA   = SDDYNA(1:15)//'.TYPE_CHA'
        VECENT = SDDYNA(1:15)//'.VECENT' 
        CALL JEVEUO(VECENT,'L',JVECEN)        
        CALL JEVEUO(NOSD  ,'L',JNOSD ) 
        CALL JEVEUO(VEOL  ,'E',JVEOL )
        CALL JEVEUO(VAOL  ,'E',JVAOL ) 
        CALL JEVEUO(TCHA  ,'L',JTCHA ) 
      ELSE
        GOTO 999
      ENDIF    
C
      IF(CHAINE(1:11).EQ.'MULTI_APPUI')THEN
        NDYNKK = ZK24(JNOSD+1-1)
      ELSEIF(CHAINE(1:10).EQ.'AMOR_MODAL')THEN
        NDYNKK = ZK24(JNOSD+2-1)
      ELSEIF(CHAINE(1:10).EQ.'PROJ_MODAL')THEN
        NDYNKK = ZK24(JNOSD+3-1)
C        
      ELSEIF(CHAINE(1:6).EQ.'DEPENT')THEN
        NDYNKK = ZK24(JVECEN+1-1)        
      ELSEIF(CHAINE(1:6).EQ.'VITENT')THEN
        NDYNKK = ZK24(JVECEN+2-1)
      ELSEIF(CHAINE(1:6).EQ.'ACCENT')THEN
        NDYNKK = ZK24(JVECEN+3-1)  
C
      ELSEIF(CHAINE(1:6).EQ.'STADYN')THEN
        NDYNKK = ZK24(JNOSD+4-1)         
C           
      ELSEIF(CHAINE(1:6).EQ.'VEFEDO')THEN
        NDYNKK = ZK24(JVEOL+1-1)          
      ELSEIF(CHAINE(1:6).EQ.'VEFSDO')THEN
        NDYNKK = ZK24(JVEOL+2-1)  
      ELSEIF(CHAINE(1:6).EQ.'VEDIDO')THEN
        NDYNKK = ZK24(JVEOL+3-1)
      ELSEIF(CHAINE(1:6).EQ.'VEDIDI')THEN
        NDYNKK = ZK24(JVEOL+4-1)
      ELSEIF(CHAINE(1:6).EQ.'VEFINT')THEN
        NDYNKK = ZK24(JVEOL+5-1)
      ELSEIF(CHAINE(1:6).EQ.'VEONDP')THEN
        NDYNKK = ZK24(JVEOL+6-1)
      ELSEIF(CHAINE(1:6).EQ.'VELAPL')THEN
        NDYNKK = ZK24(JVEOL+7-1)
      ELSEIF(CHAINE(1:6).EQ.'VESSTF')THEN
        NDYNKK = ZK24(JVEOL+8-1)
C
      ELSEIF(CHAINE(1:6).EQ.'CNFEDO')THEN
        NDYNKK = ZK24(JVAOL+1-1)          
      ELSEIF(CHAINE(1:6).EQ.'CNFSDO')THEN
        NDYNKK = ZK24(JVAOL+2-1)  
      ELSEIF(CHAINE(1:6).EQ.'CNDIDO')THEN
        NDYNKK = ZK24(JVAOL+3-1)
      ELSEIF(CHAINE(1:6).EQ.'CNDIDI')THEN
        NDYNKK = ZK24(JVAOL+4-1)
      ELSEIF(CHAINE(1:6).EQ.'CNFINT')THEN
        NDYNKK = ZK24(JVAOL+5-1)
      ELSEIF(CHAINE(1:6).EQ.'CNONDP')THEN
        NDYNKK = ZK24(JVAOL+6-1)
      ELSEIF(CHAINE(1:6).EQ.'CNLAPL')THEN
        NDYNKK = ZK24(JVAOL+7-1)
      ELSEIF(CHAINE(1:6).EQ.'CNSSTF')THEN
        NDYNKK = ZK24(JVAOL+8-1)
      ELSEIF(CHAINE(1:6).EQ.'CNCINE')THEN
        NDYNKK = ZK24(JVAOL+9-1)
      ELSEIF(CHAINE(1:6).EQ.'CNGRFL')THEN
        NDYNKK = ZK24(JVAOL+10-1)                
C        
      ELSEIF(CHAINE(1:6).EQ.'CHONDP')THEN
        NDYNKK = ZK24(JTCHA+1-1) 
      ELSEIF(CHAINE(1:6).EQ.'CHGRFL')THEN
        NDYNKK = ZK24(JTCHA+2-1) 
      ELSEIF(CHAINE(1:6).EQ.'VALMOD')THEN
        KAMMO  = ZK24(JNOSD+2-1)(1:19)
        NDYNKK = KAMMO(1:19)//'.VALM' 
      ELSEIF(CHAINE(1:6).EQ.'BASMOD')THEN
        KAMMO  = ZK24(JNOSD+2-1)(1:19)
        NDYNKK = KAMMO(1:19)//'.BASM'     
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
 999  CONTINUE      
C
      CALL JEDEMA()

      END
