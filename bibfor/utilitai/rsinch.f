      SUBROUTINE RSINCH(NOMSD,NOMCH,ACCES,RVAL,CHEXTR,PROLDR,PROLGA,
     &                  ISTOP,BASE,IER)
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER           ISTOP,IER
      REAL*8                              RVAL
      CHARACTER*(*)     NOMSD,NOMCH,ACCES,     CHEXTR,PROLDR,PROLGA
      CHARACTER*(*)           BASE
C ----------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF UTILITAI  DATE 26/04/2011   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C      INTERPOLATION D'UN CHAMP_19 A PARTIR D'1 SD RESULTAT-COMPOSE
C ----------------------------------------------------------------------
C IN  : NOMSD  : NOM DE LA STRUCTURE "RESULTAT"
C IN  : NOMCH  : NOM SYMBOLIQUE DU CHAMP CHERCHE.
C IN  : ACCES  : NOM SYMBOLIQUE DE LA VARIABLE D'ACCES.
C IN  : RVAL   : VALEUR REEL DE LA VARIABLE D'ACCES.
C IN  : CHEXTR : NOM DU CHAMP A CREER. (S'IL EXISTE, ON LE DETRUIT).
C IN  : PROLDR : 'CONSTANT', 'LINEAIRE', OU 'EXCLU'
C                          (PROLONGEMENT VOULU A DROITE)
C IN  : PROLGA : 'CONSTANT', 'LINEAIRE', OU 'EXCLU'
C                          (PROLONGEMENT VOULU A GAUCHE)
C IN  : ISTOP  :  EN CAS D'ERREUR D'INTERPOLATION:
C                 0  --> N'ECRIT PAS DE MESSAGE , NE FAIT PAS STOP.
C                 1  --> ECRIT MESSAGES , NE FAIT PAS STOP.
C                 2  --> ECRIT MESSAGES , FAIT STOP.
C IN  : BASE   : BASE DU CHAMP CREE
C
C OUT : IER    : CODE_RETOUR :
C                LE CHAMP EST CALCULE:
C                00 --> LE CHAMP EST INTERPOLE ENTRE 2 VALEURS.
C                01 --> LE CHAMP EST PROLONGE A GAUCHE.
C                02 --> LE CHAMP EST PROLONGE A DROITE.
C
C                LE CHAMP N'EST PAS CALCULE:
C                10 --> IL N'EXISTE AUCUN CHAMP POUR L'INTERPOLATION.
C                11 --> LE PROLONGEMENT A GAUCHE INTERDIT.
C                12 --> SI PROLONGEMENT A DROITE INTERDIT.
C                20 --> LA VARIABLE D'ACCES EST ILLICITE.
C ----------------------------------------------------------------------
C --------------- COMMUNS NORMALISES  JEVEUX  --------------------------
      CHARACTER*32 JEXNUM,JEXNOM
      COMMON /IVARJE/ZI(1)
      COMMON /RVARJE/ZR(1)
      COMMON /CVARJE/ZC(1)
      COMMON /LVARJE/ZL(1)
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
      INTEGER ZI
      REAL*8 ZR,R1,R2,RBASE
      REAL*8 VALR
      COMPLEX*16 ZC
      LOGICAL ZL
      INTEGER L1,L2
      CHARACTER*1 STP,BASE2
      CHARACTER*4 TYPE,TYSCA
      CHARACTER*8 ZK8,NOMOBJ,K8BID,K8DEBU,K8MAXI,K8ENT
      CHARACTER*19 CH1,CH2
      CHARACTER*8  PROLD2,PROLG2
      CHARACTER*19 NOMS2
      CHARACTER*16 ZK16,ACCE2,NOMC2
      CHARACTER*19 CHEXT2
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
C ---------------- FIN COMMUNS NORMALISES  JEVEUX  --------------------
      CHARACTER*24 VALK(3)
C
C
      CALL JEMARQ()
      ACCE2 = ACCES
      NOMS2 = NOMSD
      NOMC2 = NOMCH
      PROLD2 = PROLDR
      PROLG2 = PROLGA
      CHEXT2 = CHEXTR
      BASE2  = BASE
C
C     -- VERIFICATION DE LA VARIABLE D'ACCES:
C     ---------------------------------------
C
      CALL JENONU(JEXNOM(NOMS2//'.NOVA',ACCE2),IACCES)
      IF (IACCES.EQ.0) THEN
         IER = 20
         GO TO 9998
      END IF

      CALL JEVEUO(JEXNUM(NOMS2//'.TAVA',IACCES),'L',IATAVA)
      NOMOBJ = ZK8(IATAVA-1+1)
      K8DEBU = ZK8(IATAVA-1+2)
      CALL LXLIIS(K8DEBU,IDEBU,IER1)
      K8MAXI = ZK8(IATAVA-1+3)
      CALL LXLIIS(K8MAXI,IMAXI,IER2)
      CALL ASSERT((ABS(IER1)+ABS(IER2)).EQ.0)
      IF (IER2.NE.0) THEN
         IER = 20
         GO TO 9998
      END IF

      CALL JELIRA(NOMS2//NOMOBJ,'TYPE',IBID,TYPE)
      CALL JELIRA(NOMS2//NOMOBJ,'LTYP',ILOTY,K8BID)
      CALL CODENT(ILOTY,'G',K8ENT)
      TYSCA = TYPE(1:1)//K8ENT(1:3)
      IF (TYSCA.NE.'R8  ') THEN
         IER = 20
         GO TO 9998
      END IF

      CALL RSLIPA(NOMS2,ACCES,'&&RSINCH.LIR8',IAOBJ,NBORDR)


C     -- VERIFICATION DU NOM DE CHAMP:
C     --------------------------------
      CALL JENONU(JEXNOM(NOMS2//'.DESC',NOMC2),INOMCH)
      IF (INOMCH.EQ.0) THEN
         IER = 21
         GO TO 9998
      END IF
C
C     -- ON INTERPOLE :
C     -----------------
C
C     -- ON REPERE QUELS SONT LES CHAMPS EXISTANT REELLEMENT:
      CALL WKVECT('&&RSINCH.LEXI','V V L',NBORDR,IALEXI)
      CALL JENONU(JEXNOM(NOMS2//'.DESC',NOMC2),IBID)
      CALL JEVEUO(JEXNUM(NOMS2//'.TACH',IBID),'L',IATACH)
      NBORD2=0
      DO 1,I = 1,NBORDR
         IF (ZK24(IATACH-1+I) (1:1).EQ.' ') THEN
            ZL(IALEXI-1+I) = .FALSE.
         ELSE
            ZL(IALEXI-1+I) = .TRUE.
            NBORD2=NBORD2+1
         END IF
    1 CONTINUE
C
      CALL RSBARY(ZR(IAOBJ),NBORDR,.FALSE.,ZL(IALEXI),RVAL,I1,I2,IPOSIT)
      IF (IPOSIT.EQ.-2) THEN
         IER = 10
         GO TO 9998
      END IF
      CALL RSUTRO(NOMSD,I1,IP1,IERR1)
      CALL RSUTRO(NOMSD,I2,IP2,IERR2)
      CALL ASSERT(IERR1+IERR2.LE.0)
      RBASE = ZR(IAOBJ-1+I2) - ZR(IAOBJ-1+I1)
C
      CALL RSEXCH(NOMSD,NOMC2,IP1,CH1,L1)
      CALL RSEXCH(NOMSD,NOMC2,IP2,CH2,L2)
      CALL ASSERT(L1+L2.LE.0)
C
C     -- SI LES 2 POINTS IP1 ET IP2 ONT MEME ABSCISSE, ON RECOPIE
C     -- SIMPLEMENT LE CHAMP(IP1) DANS CHEXT2.
      IF (RBASE.EQ.0.0D0) THEN
        IF (IPOSIT.EQ.0) THEN
          CALL COPISD('CHAMP_GD',BASE2,CH1(1:19),CHEXT2(1:19))
          IER = 0
          GO TO 9998
        ELSE
C         -- CAS DE L'EVOL_XXX QUI N'A QU'UN SEUL INSTANT :
C            ON AUTORISE LE PROLONGEMENT CONSTANT ET ON ALARME
          CALL ASSERT(NBORD2.EQ.1)
          R1=1.D0
          R2=0.D0
          IF ((PROLD2.NE.'CONSTANT').OR.(PROLG2.NE.'CONSTANT')) THEN
            PROLD2 = 'CONSTANT'
            PROLG2 = 'CONSTANT'
            IF (RVAL.NE.ZR(IAOBJ-1+I1)) THEN
              CALL U2MESK('A','CALCULEL_28',1,NOMSD)
            ENDIF
          ENDIF
        END IF
      ELSE
        R1 = (ZR(IAOBJ-1+I2)-RVAL)/RBASE
        R2 = (RVAL-ZR(IAOBJ-1+I1))/RBASE
      END IF
C
C     -- INTERPOLATION VRAIE:
C     -----------------------
      IF (IPOSIT.EQ.0) THEN
         CALL BARYCH(CH1,CH2,R1,R2,CHEXT2,BASE2)
         IER = 0
         GO TO 9998
C
C        -- PROLONGEMENT A GAUCHE:
C        -------------------------
      ELSE IF (IPOSIT.EQ.-1) THEN
         IER = 1
         IF (PROLG2(1:8).EQ.'LINEAIRE') THEN
            CALL BARYCH(CH1,CH2,R1,R2,CHEXT2,BASE2)
         ELSE IF (PROLG2(1:8).EQ.'CONSTANT') THEN
            CALL COPISD('CHAMP_GD',BASE2,CH1(1:19),CHEXT2(1:19))
         ELSE
            IER = 11
         END IF
         GO TO 9998
C
C        -- PROLONGEMENT A DROITE:
C        -------------------------
      ELSE IF (IPOSIT.EQ.1) THEN
         IER = 2
         IF (PROLD2(1:8).EQ.'LINEAIRE') THEN
            CALL BARYCH(CH1,CH2,R1,R2,CHEXT2,BASE2)
         ELSE IF (PROLD2(1:8).EQ.'CONSTANT') THEN
            CALL COPISD('CHAMP_GD',BASE2,CH2(1:19),CHEXT2(1:19))
         ELSE
            IER = 12
         END IF
         GO TO 9998
C
      END IF
 9998 CONTINUE
C
C     -- MESSAGES, ARRET?
C     -------------------
      IF (ISTOP.EQ.0) THEN
         GO TO 9999
      ELSE IF (ISTOP.EQ.1) THEN
         STP = 'A'
      ELSE IF (ISTOP.EQ.2) THEN
         STP = 'F'
      END IF


      IF (IER.EQ.11) THEN
         CALL U2MESS(STP//'+','UTILITAI8_32')
      ELSE IF (IER.EQ.12) THEN
         CALL U2MESS(STP//'+','UTILITAI8_33')
      ELSE IF (IER.EQ.10) THEN
         VALK (1)= NOMC2
         CALL U2MESG(STP//'+','UTILITAI8_34',1,VALK,0,0,0,0.D0)
      ELSE IF (IER.EQ.20) THEN
         VALK (1)= ACCE2
         CALL U2MESG(STP//'+','UTILITAI8_35',1,VALK,0,0,0,0.D0)
      ELSE IF (IER.EQ.21) THEN
         VALK (1)= NOMC2
         CALL U2MESG(STP//'+','UTILITAI8_36',1,VALK,0,0,0,0.D0)
      END IF
C
      IF (IER.GE.10) THEN
         VALK (1) = NOMSD
         VALK (2) = NOMCH
         VALK (3) = ACCES
         VALR = RVAL
         CALL U2MESG(STP,'UTILITAI8_37',3,VALK,0,0,1,VALR)
      END IF
C
C
 9999 CONTINUE
      CALL JEDETR('&&RSINCH.LIR8')
      CALL JEDETR('&&RSINCH.LEXI')
C
      CALL JEDEMA()
      END
