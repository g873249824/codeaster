      SUBROUTINE NDCOEF(PHASE ,METHOD,SDDYNA,COEMAT)
C      
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF UTILITAI  DATE 19/12/2007   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      CHARACTER*10  PHASE
      CHARACTER*19  SDDYNA
      CHARACTER*16  METHOD(*)
      REAL*8        COEMAT(3)
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (SDDYNA - UTILITAIRE)
C
C DETERMINE LES COEFFICIENTS COEDEP,COEVIT,COEACC
C      
C ----------------------------------------------------------------------
C
C
C IN  SDDYNA : SD DEDIEE A LA DYNAMIQUE
C IN  PHASE  : PHASE DE CALCUL
C                  'PREDICTION'
C                  'CORRECTION'
C                  'FLAMBEMENT'
C                  'FORCES_INT'
C IN  METHOD : OPTION DE LA MATRICE
C OUT COEMAT : (1) - MULT. DEVANT LES DEPLACEMENTS (RIGIDITE)
C              (3) - MULT. DEVANT LES VITESSES (AMORTISSEMENT)
C              (2) - MULT. DEVANT LES ACCELERATIONS (MASSE)
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      LOGICAL    NDYNLO,LSTAT,LEXPL
      REAL*8     ZERO,UN
      PARAMETER (UN=1.D0,ZERO=0.D0)
      INTEGER    IFM,NIV
      REAL*8     NDYNRE,COEDEP,COEVIT,COEACC
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- INITIALISATIONS
C
      COEDEP = UN
      COEVIT = ZERO
      COEACC = ZERO
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... COEFFICIENTS POUR COMB. LIN.'//
     &                ' DES MATRICES EN DYNAMIQUE' 
      ENDIF      
C
C --- FONCTIONNALITES ACTIVEES
C    
      LSTAT  = NDYNLO(SDDYNA,'STATIQUE')      
      LEXPL  = NDYNLO(SDDYNA,'EXPLICITE') 
C        
      IF (LSTAT) THEN
        CALL ASSERT(.FALSE.)
      ENDIF 
C
      IF(PHASE.EQ.'PREDICTION')THEN
        IF(METHOD(5).EQ.'ELASTIQUE' .OR.  METHOD(5).EQ.'TANGENTE')THEN
           COEDEP = NDYNRE(SDDYNA,'COEDEP')
           COEVIT = NDYNRE(SDDYNA,'COEVIT')
           COEACC = NDYNRE(SDDYNA,'COEACC') 
        ENDIF
      ELSEIF(  PHASE.EQ.'CORRECTION'  .OR.
     &         PHASE.EQ.'FORCES_INT'  )THEN
        COEDEP = NDYNRE(SDDYNA,'COEDEP')
        COEVIT = NDYNRE(SDDYNA,'COEVIT')
        COEACC = NDYNRE(SDDYNA,'COEACC')
      ELSEIF (PHASE.EQ.'FLAMBEMENT') THEN 
        COEDEP = UN
        COEVIT = ZERO
        COEACC = ZERO     
      ELSEIF (PHASE.EQ.'EXPLICITE') THEN 
        IF(.NOT.LEXPL) THEN
          CALL ASSERT(.FALSE.)
        ENDIF           
        COEDEP = UN
        COEVIT = NDYNRE(SDDYNA,'COEVIT')
        COEACC = NDYNRE(SDDYNA,'COEACC')                  
      ELSE  
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- COEFFICIENTS DEVANT MATRICES
C      
      COEMAT(1) = UN
      COEMAT(2) = COEACC/COEDEP
      COEMAT(3) = COEVIT/COEDEP      
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... COEF. RIGIDITE      : ',
     &                 COEMAT(1) 
        WRITE (IFM,*) '<MECANONLINE> ... COEF. AMORTISSEMENT : ',
     &                 COEMAT(3) 
        WRITE (IFM,*) '<MECANONLINE> ... COEF. MASSE         : ',
     &                 COEMAT(2)           
      ENDIF
C

      CALL JEDEMA()

      END
