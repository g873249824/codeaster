      SUBROUTINE OPS013(ICMD,ICOND,IER)
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER           ICMD,ICOND,IER
C     ------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF SUPERVIS  DATE 05/12/2001   AUTEUR VABHHTS J.PELLET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
C TOLE CRP_20
C     MACRO_MATR_AJOU
C     ------------------------------------------------------------------
C     ----- DEBUT COMMUNS NORMALISES  JEVEUX  --------------------------
      INTEGER          ZI
      COMMON  /IVARJE/ ZI(1)
      REAL*8           ZR
      COMMON  /RVARJE/ ZR(1)
      COMPLEX*16       ZC
      COMMON  /CVARJE/ ZC(1)
      LOGICAL          ZL
      COMMON  /LVARJE/ ZL(1)
      CHARACTER*8      ZK8
      CHARACTER*16            ZK16
      CHARACTER*24                    ZK24
      CHARACTER*32                            ZK32
      CHARACTER*80                                    ZK80
      COMMON  /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     -----  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------
C     ------------------------------------------------------------------
      INTEGER       INFO,NMAIL,NGFLUI,NGINT,NMODEL,NMODE,NIREMP
      INTEGER       NCHNO,NMGEN,NNUMG,NNDBL,NMOSTA,NDREF,IVAL(1)
      CHARACTER*3   KSTOP
      CHARACTER*8   NOM, NOMNUM, GMFLUI,MAILLA,GMINT,MODEL,GRMA
      CHARACTER*8   MODMEC,CHAMNO,MODGEN,NUMGEN,NDBLE,MODSTA,MODST2
      CHARACTER*8   NOMMAT, NOMCMA, NOMINT,NOMFLU,CHARGE,POTEN,K8BID
      CHARACTER*8   MASSAJ, AMORAJ,RIGIAJ,CHARG2,NOFLUI,MAILLE,REP
      CHARACTER*8   RENU,PRECON
      CHARACTER*10  METH
      CHARACTER*16  NOMCMD,TABL(1)
      CHARACTER*24  TEXT
      REAL*8        TAILB,UN
C     ------------------------------------------------------------------
C
      CHARACTER*4 KVAL1
C
      DATA UN    /1.0D0/

C     ------------------------------------------------------------------
      CALL JEMARQ()
      IER = 0
      IF (ICOND .NE. -1) GOTO 9999
      LSTOP=3
C     ------------------------------------------------------------------
C
C     --- RECUPERATION DES ARGUMENTS SIMPLES DE LA MACRO
C     ------------ EN TANT QUE DONNEES
C
      CALL GETVID(' ','MAILLAGE'        ,1,1,1,MAILLA, NMAIL  )
      CALL GETVID(' ','GROUP_MA_FLUIDE' ,1,1,1,GMFLUI, NGFLUI )
      CALL GETVID(' ','GROUP_MA_INTERF' ,1,1,1,GMINT,  NGINT  )
      CALL GETVTX(' ','MODELISATION'    ,1,1,1,MODEL,  NMODEL )
      CALL GETVID(' ','MODE_MECA'       ,0,1,1,MODMEC, NMODE  )
      CALL GETVID(' ','DEPL_IMPO'       ,0,1,1,CHAMNO, NCHNO  )
      CALL GETVID(' ','MODELE_GENE'     ,0,1,1,MODGEN, NMGEN  )
      CALL GETVID(' ','NUME_DDL_GENE'   ,1,1,1,NUMGEN, NNUMG  )
      CALL GETVTX(' ','NOEUD_DOUBLE'    ,0,1,1,NDBLE,  NNDBLE )
      CALL GETVTX(' ','AVEC_MODE_STAT'  ,1,1,1,MODSTA, NMOSTA )
      CALL GETVR8(' ','DIST_REFE'       ,1,1,1,DREF,   NDREF  )
      CALL GETVIS(' ','INFO'            ,1,1,1,INFO,   NIMP   )
      CALL GETVID(' ','MODE_STAT',1,1,1,MODST2,NBSTA)
C
C     --- RECUPERATION DES ARGUMENTS SOUS MOTS CLES F DE LA MACRO
C     ------------ EN TANT QUE DONNEES
C     ------------MOT CLE FACTEUR 'FLUIDE'
C
      NOMCMD='MACRO_MATR_AJOU'
      CALL GETFAC('FLUIDE',IOCFLU)
      IF ( IOCFLU .EQ. 1 ) THEN
         CALL UTDEBM('I',NOMCMD,'TOUT LE DOMAINE FLUIDE SPECIFIE '//
     &              ' DANS GROUP_MA_INTERF ET GROUP_MA_FLUIDE '//
     &               ' SERA AFFECTE PAR LA MASSE VOLUMIQUE RHO: ')
         CALL GETVR8('FLUIDE','RHO',1,1,1,RHO,LN)

         CALL UTIMPR('S',' ',1, RHO)
         CALL UTFINM
      ENDIF
      IF ( IOCFLU .NE. 0 ) THEN
        CALL WKVECT('&&OPS013.RHO','V V R' ,IOCFLU,IADRHO)
        CALL WKVECT('&&OPS013.GRMAFLU','V V K8' ,IOCFLU,IADGMA)

        DO 10 IOCC = 1 , IOCFLU
          CALL GETVR8('FLUIDE','RHO',IOCC,1,1,RHO,LN)
          ZR(IADRHO+IOCC-1) = RHO
          CALL GETVID('FLUIDE','GROUP_MA',IOCC,1,1,GRMA,LNMA)
          CALL GETVID('FLUIDE','MAILLE',IOCC,1,1,MAILLE,LNMA1)
          CALL GETVTX('FLUIDE','TOUT',IOCC,1,1,REP,LNMA2)

          IF((LNMA.EQ.0).AND.IOCFLU.GT.1) THEN
            CALL UTMESS('F',NOMCMD,'CAS FLUIDES MULTIPLES: '//
     &              ' PRECISEZ LE GROUP_MA DANS LEQUEL VOUS  '//
     &               '  AFFECTEZ  LA MASSE VOLUMIQUE RHO ')
          ELSEIF(LNMA.NE.0.AND.IOCFLU.EQ.1) THEN
            CALL UTMESS('A',NOMCMD,'CAS FLUIDE SIMPLE: '//
     &              '  LE GROUP_MA DANS LEQUEL VOUS  '//
     &               '  AFFECTEZ  LA MASSE VOLUMIQUE RHO '//
     &              ' DOIT ETRE LA REUNION DE GROUP_MA_INTERF '//
     &              ' ET GROUP_MA_FLUIDE! ')
            ZK8(IADGMA+IOCC-1) = GRMA
          ELSE
            ZK8(IADGMA+IOCC-1) = GRMA
          ENDIF

 10     CONTINUE
      ENDIF

C
C     --- RECUPERATION DES ARGUMENTS SOUS LE MOT_CLE_F DDL-IMPO
C
      CALL GETFAC('DDL_IMPO',IOCDDL)
      IF ( IOCDDL .NE. 0 ) THEN

        NSOR=0
        NFLUI=0
        DO 20 IOCC = 1 , IOCDDL
          CALL GETVR8('DDL_IMPO','PRES_FLUIDE',IOCC,1,1,VAL,LFLU)
          IF(LFLU.NE.0) NFLUI=NFLUI+1
          CALL GETVR8('DDL_IMPO','PRES_SORTIE',IOCC,1,1,VAL,LSOR)
          IF(LSOR.NE.0) NSOR=NSOR+1
 20     CONTINUE
        IF(NFLUI.EQ.0) THEN
          CALL UTMESS('F',NOMCMD,'PRES_FLUIDE OBLIGATOIRE UNE FOIS')
        ENDIF
        IF(NSOR.NE.0) THEN
          CALL WKVECT('&&OPS013.NOSOR','V V K8' ,NSOR,IADNSO)
          CALL WKVECT('&&OPS013.GNSOR','V V K8',NSOR,IADGSO)
          CALL WKVECT('&&OPS013.PRES_SORTIE','V V R',NSOR,IADPSO)
        ENDIF
        I=0
        DO 21 IOCC=1,IOCDDL
          CALL GETVR8('DDL_IMPO','PRES_SORTIE',IOCC,1,1,VAL,LSOR)
          IF(LSOR.NE.0) THEN
            I=I+1
            ZR(IADPSO+I-1)  = VAL
            CALL GETVID('DDL_IMPO','NOEUD',IOCC,1,1,NOM,LNSO)
            ZK8(IADNSO+I-1) = NOM
            CALL GETVID('DDL_IMPO','GROUP_NO',IOCC,1,1,NOM,LGNSO)
            ZK8(IADGSO+I-1) = NOM
          ENDIF
21      CONTINUE
C EN PRINCIPE C EST TOUJOURS LE CAS
        CALL WKVECT('&&OPS013.NOFLU','V V K8' ,NFLUI,IADNFL)
        CALL WKVECT('&&OPS013.GNFLU','V V K8',NFLUI,IADGFL)
        CALL WKVECT('&&OPS013.PRES_FLUIDE','V V R',NFLUI,IADPFL)
        I=0
        DO 22 IOCC=1,IOCDDL
          CALL GETVR8('DDL_IMPO','PRES_FLUIDE',IOCC,1,1,VAL,LFLU)
          IF(LFLU.NE.0) THEN
            I=I+1
            ZR(IADPFL+I-1)  = VAL
            CALL GETVID('DDL_IMPO','NOEUD',IOCC,1,1,NOM,LNFL)
            ZK8(IADNFL+I-1) = NOM
            CALL GETVID('DDL_IMPO','GROUP_NO',IOCC,1,1,NOM,LGNFL)
            ZK8(IADGFL+I-1) = NOM
          ENDIF
22      CONTINUE

      ENDIF
C
C     --- RECUPERATION DES ARGUMENTS SOUS LE MOT_CLE_F ECOULEMENT
C
      CALL GETFAC('ECOULEMENT',IOCECL)
      IF ( IOCECL .NE. 0 ) THEN
        CALL WKVECT('&&OPS013.GRMA1','V V K8' ,IOCECL,IADMA1)
        CALL WKVECT('&&OPS013.GRMA2','V V K8' ,IOCECL,IADMA2)
        CALL WKVECT('&&OPS013.VNOR1','V V R',IOCECL,IADVN1)
        CALL WKVECT('&&OPS013.VNOR2','V V R',IOCECL,IADVN2)
        DO 30 IOCC = 1 , IOCECL
          CALL GETVID('ECOULEMENT','GROUP_MA_1',IOCC,1,1,NOM,LN)
          ZK8(IADMA1+IOCC-1) = NOM
          CALL GETVID('ECOULEMENT','GROUP_MA_2',IOCC,1,1,NOM,LN)
          ZK8(IADMA2+IOCC-1) = NOM
          CALL GETVR8('ECOULEMENT','VNOR_1',IOCC,1,1,VAL,LN)
          ZR(IADVN1+IOCC-1) = VAL
          CALL GETVR8('ECOULEMENT','VNOR_2',IOCC,1,1,VAL,LN)
          ZR(IADVN2+IOCC-1) = VAL
 30     CONTINUE
      ENDIF
C
C     --- RECUPERATION DES ARGUMENTS SOUS LE MOT_CLE_F FORC_AJOU
C
      CALL GETFAC('FORC_AJOU',IOCVEG)
      IF ( IOCVEG .NE. 0 ) THEN
        CALL WKVECT('&&OPS013.DIRECT','V V R',6*IOCVEG,IADDIR)
        CALL WKVECT('&&OPS013.VECTASSEGE','V V K8',IOCVEG,IADVEG)
        CALL WKVECT('&&OPS013.NBDIR','V V I',IOCVEG,IADNBD)
        NBNOMX = 0
        NBGRMX = 0
        IF (NBSTA.NE.0) THEN
           CALL WKVECT('&&OPS013.NBNO','V V I',IOCVEG,IADNBN)
           CALL WKVECT('&&OPS013.NBGR','V V I',IOCVEG,IADNBG)
        ENDIF
        DO 35 IOCC = 1 , IOCVEG
          CALL GETVR8('FORC_AJOU','DIRECTION',IOCC,1,0,VAL,NBD)
          NBDIR = -NBD
          CALL GETVR8('FORC_AJOU','DIRECTION',IOCC,1,NBDIR,
     +                 ZR(IADDIR+6*(IOCC-1)),NBD)
C          WRITE(6,*) 'DIR ',(ZR(IADDIR+6*(IOCC-1)+J-1),J=1,NBDIR)
          ZI(IADNBD+IOCC-1) = NBDIR
C          WRITE(6,*) 'NB ',ZI(IADNBD+IOCC-1)
          CALL GETVID('FORC_AJOU','VECTEUR',IOCC,1,1,NOM,LN)
          ZK8(IADVEG+IOCC-1) = NOM
C          WRITE(6,*) 'VECT ',ZK8(IADVEG+IOCC-1)

C     --- ON RECUPERE LES POINTS D'ANCRAGE ---
C
          CALL GETVID('FORC_AJOU','NOEUD',IOCC,1,0,K8BID,NBNO)
          IF (NBNO.NE.0.AND.NBSTA.NE.0) THEN
C
C        --- ON RECUPERE UNE LISTE DE NOEUDS ---
            NBNO = -NBNO
            ZI(IADNBN+IOCC-1) = NBNO
            NBNOMX = MAX(NBNOMX,NBNO)
          ELSEIF (NBNO.EQ.0.AND.NBSTA.NE.0) THEN
C
C        --- ON RECUPERE UNE LISTE DE GROUP_NO ---
            CALL GETVID('FORC_AJOU','GROUP_NO',IOCC,1,0,K8BID,NBGR)
            NBGR = -NBGR
            ZI(IADNBG+IOCC-1) = NBGR
            NBGRMX = MAX(NBGRMX,NBGR)
C
          ENDIF
 35     CONTINUE
        IF (NBSTA.NE.0) THEN
           IF (NBNOMX.NE.0) CALL WKVECT('&&OPS013.NOEU','V V K8',
     +      NBNOMX*IOCVEG,IADNOE)
           IF (NBGRMX.NE.0) CALL WKVECT('&&OPS013.GROU','V V K8',
     +      NBGRMX*IOCVEG,IADGRO)
           DO 34 IOCC = 1 , IOCVEG
C     --- ON RECUPERE LES POINTS D'ANCRAGE ---
C
             CALL GETVID('FORC_AJOU','NOEUD',IOCC,1,0,K8BID,NBNO)
             IF (NBNO.NE.0) THEN
C
C        --- ON RECUPERE UNE LISTE DE NOEUDS ---
               NBNO = -NBNO
               CALL GETVID('FORC_AJOU','NOEUD',
     +           IOCC,1,NBNO,ZK8(IADNOE+NBNOMX*(IOCC-1)),NBV)
             ELSE
C
C        --- ON RECUPERE UNE LISTE DE GROUP_NO ---
               CALL GETVID('FORC_AJOU','GROUP_NO',
     +                 IOCC,1,0,K8BID,NBGR)
               NBGR = -NBGR
               CALL GETVID('FORC_AJOU','GROUP_NO',
     +           IOCC,1,NBGR,ZK8(IADGRO+NBGRMX*(IOCC-1)),NBV)
C
             ENDIF
 34        CONTINUE
        ENDIF
      ENDIF
C      WRITE(6,*) 'IOCVEG IADVEG ',IOCVEG,IADVEG
C      WRITE(6,*) 'VECT_GENE ',(ZK8(IADVEG+IOCC-1),IOCC=1,IOCVEG)
C
C     --- RECUPERATION DES ARGUMENTS SOUS LE MOT_CLE_F SOLVEUR
C
         CALL GETVTX('SOLVEUR','METHODE',1,1,1,METH,IBID)
         IF (METH.EQ.'LDLT') THEN
            CALL GETVTX('SOLVEUR','RENUM',1,1,1,RENU,NRENU)
            CALL GETVIS('SOLVEUR','NPREC',1,1,1,NPREC,IBID)
            CALL GETVTX('SOLVEUR','STOP_SINGULIER',1,1,1,KSTOP,IBID)
         ELSEIF (METH.EQ.'GCPC') THEN
            CALL GETVIS('SOLVEUR','NMAX_ITER',1,1,1,NITER,IBID)
            CALL GETVR8('SOLVEUR','RESI_RELA',1,1,1,RELA,IBID)
            CALL GETVTX('SOLVEUR','PRE_COND',1,1,1,PRECON,NPRECO)
            CALL GETVIS('SOLVEUR','NIVE_REMPLISSAGE',1,1,1,NIREMP,IBID)
         ENDIF
C
C     --- RECUPERATION DES ARGUMENTS SOUS MOTS CLES  DE LA MACRO
C     ------------ EN TANT QUE RESULTATS
C

      CALL GETVID(' ','MATR_MASS_AJOU',0,1,1,MASSAJ,NMASS)
      CALL GETVID(' ','MATR_AMOR_AJOU',0,1,1,AMORAJ,NAMOR)
      CALL GETVID(' ','MATR_RIGI_AJOU',0,1,1,RIGIAJ,NRIGI)
C
C     --- DESTRUCTION DE LA COMMANDE COURANTE --
      IERUSR = 0
      CALL SMCDEL(ICMD,0,IERUSR)
      ICMD   = ICMD - 1
C     ---------------------------------------------------------------
C     DEFINITION DU MATERIAU FLUIDE PAR CARACTERISTIQUE
C     THERMIQUE EQUIVALENTE
C
C     --- COMMANDE DEFI_MATERIAU
C
       IF(IOCFLU.EQ.1) THEN
C CAS FLUIDE SIMPLE
         ICMD=ICMD+1
         CALL GCNCON('_',NOMMAT)
         CALL SMDCMD(ICMD,NOMMAT,'DEFI_MATERIAU',IERUSR)
         CALL SMDMCF('THER',IERUSR)
         CALL PUTVR8('LAMBDA',1,UN,IERUSR)
         CALL PUTVR8('RHO_CP',1,RHO,IERUSR)
         CALL SMFMCF(IERUSR)
         CALL SMFCMD(IERUSR)

C
C     --- COMMANDE AFFE_MATERIAU
C
         ICMD=ICMD+1

         CALL GCNCON('_',NOMCMA)
         CALL SMDCMD(ICMD,NOMCMA,'AFFE_MATERIAU',IERUSR)
         CALL PUTVID('MAILLAGE',1,MAILLA,IERUSR)
         CALL SMDMCF('AFFE',IERUSR)
         CALL PUTVID('GROUP_MA',1,GMFLUI,IERUSR)
         CALL PUTVID('MATER',1,NOMMAT,IERUSR)
         CALL SMFMCF(IERUSR)

         CALL SMDMCF('AFFE',IERUSR)
         CALL PUTVID('GROUP_MA',1,GMINT,IERUSR)
         CALL PUTVID('MATER',1,NOMMAT,IERUSR)
         CALL SMFMCF(IERUSR)
         CALL SMFCMD(IERUSR)
       ELSE
C CAS FLUIDES MULTIPLES

         CALL WKVECT('&&OPS013.MATERFLU','V V K8' ,IOCFLU,IMTFLU)
C COMMANDES DEFI MATERIAU
         DO 31 I=1,IOCFLU
           ICMD=ICMD+1
           CALL GCNCON('_',NOMMAT)
           CALL SMDCMD(ICMD,NOMMAT,'DEFI_MATERIAU',IERUSR)
           ZK8(IMTFLU+I-1)=NOMMAT
           CALL SMDMCF('THER',IERUSR)
           CALL PUTVR8('LAMBDA',1,UN,IERUSR)
           CALL PUTVR8('RHO_CP',1, ZR(IADRHO+I-1),IERUSR)
           CALL SMFMCF(IERUSR)
           CALL SMFCMD(IERUSR)
31       CONTINUE
C COMMANDE AFFE MATERIAU AVEC PLUSIEURS OCCURENCES D AFFE
           ICMD=ICMD+1
           CALL GCNCON('_',NOMCMA)
           CALL SMDCMD(ICMD,NOMCMA,'AFFE_MATERIAU',IERUSR)
           CALL PUTVID('MAILLAGE',1,MAILLA,IERUSR)
         DO 32 I=1,IOCFLU
           CALL SMDMCF('AFFE',IERUSR)
           CALL PUTVID('GROUP_MA',1,ZK8(IADGMA+I-1),IERUSR)
           CALL PUTVID('MATER',1,ZK8(IMTFLU+I-1),IERUSR)
           CALL SMFMCF(IERUSR)
32       CONTINUE
           CALL SMFCMD(IERUSR)
       ENDIF

C
C     --- COMMANDE AFFE_MODELE MODELE FLUIDE
C
         ICMD=ICMD+1

         CALL GCNCON('_',NOMFLU)
         CALL SMDCMD(ICMD,NOMFLU,'AFFE_MODELE',IERUSR)
         CALL PUTVID('MAILLAGE',1,MAILLA,IERUSR)
         CALL SMDMCF('AFFE',IERUSR)
         CALL PUTVID('GROUP_MA',1,GMFLUI,IERUSR)
         TABL(1)=MODEL
         IVAL(1)=8
         CALL PUTVTX('MODELISATION',1,TABL,IVAL,IERUSR)
         TABL(1)='THERMIQUE'
         IVAL(1)=9
         CALL PUTVTX('PHENOMENE',1,TABL,IVAL,IERUSR)
         CALL SMFMCF(IERUSR)
C
         CALL SMDMCF('AFFE',IERUSR)
         CALL PUTVID('GROUP_MA',1,GMINT,IERUSR)
         TABL(1)=MODEL
         IVAL(1)=8
         CALL PUTVTX('MODELISATION',1,TABL,IVAL,IERUSR)
         TABL(1)='THERMIQUE'
         IVAL(1)=9
         CALL PUTVTX('PHENOMENE',1,TABL,IVAL,IERUSR)
         CALL SMFMCF(IERUSR)
         CALL SMFCMD(IERUSR)
C
C     --- COMMANDE AFFE_MODELE MODELE INTERFACE
C
         ICMD=ICMD+1

         CALL GCNCON('_',NOMINT)
         CALL SMDCMD(ICMD,NOMINT,'AFFE_MODELE',IERUSR)
         CALL PUTVID('MAILLAGE',1,MAILLA,IERUSR)
         CALL SMDMCF('AFFE',IERUSR)
         CALL PUTVID('GROUP_MA',1,GMINT,IERUSR)
         TABL(1)=MODEL
         IVAL(1)=8
         CALL PUTVTX('MODELISATION',1,TABL,IVAL,IERUSR)
         TABL(1)='THERMIQUE'
         IVAL(1)=9
         CALL PUTVTX('PHENOMENE',1,TABL,IVAL,IERUSR)
         CALL SMFMCF(IERUSR)
         CALL SMFCMD(IERUSR)
C
C     --- COMMANDE AFFE_CHAR_THER  CONDITION
C         DE PRESSION IMPOSEE EN UN POINT OU UN GROUPE
C                    DU FLUIDE
C
         ICMD=ICMD+1

         CALL GCNCON('_',CHARGE)
         CALL SMDCMD(ICMD,CHARGE,'AFFE_CHAR_THER',IERUSR)
         CALL PUTVID('MODELE',1,NOMFLU,IERUSR)

      DO 40 IOCC = 1 ,NFLUI
C     ---  BOUCLE SUR LE NOMBRE D OCCURENCE DU MOT CLE FACTEUR
C          DDL IMPO AVEC MOT CLE PRES-FLUIDE

          CALL SMDMCF('TEMP_IMPO',IERUSR)
          IF(LNFL.NE.0) THEN
            CALL PUTVID('NOEUD',1,ZK8(IADNFL+IOCC-1),IERUSR)
          ELSEIF(LGNFL.NE.0) THEN
            CALL PUTVID('GROUP_NO',1,ZK8(IADGFL+IOCC-1),IERUSR)
          ENDIF
          CALL PUTVR8('TEMP',1,ZR(IADPFL+IOCC-1),IERUSR)
          CALL SMFMCF(IERUSR)
40     CONTINUE
          CALL SMFCMD(IERUSR)

C CALCUL DES MASSES, RIGIDITES ET AMORTISSEMENTS AJOUTES EN THEORIE
C                           POTENTIELLE
C                     COMMANDE CALC_MATR_AJOU
C                     CALCUL DE LA MASSE AJOUTEE

          IF(NMASS.NE.0) THEN
              ICMD=ICMD+1

              CALL SMDCMD(ICMD,MASSAJ,'CALC_MATR_AJOU',IERUSR)
              CALL PUTVID('MODELE_FLUIDE',1,NOMFLU,IERUSR)
              CALL PUTVID('MODELE_INTERFACE',1,NOMINT,IERUSR)
              TABL(1)='MASS_AJOU'
              IVAL(1)=9
              CALL PUTVTX('OPTION',1,TABL,IVAL,IERUSR)
              IF(NNUMG.NE.0) THEN
                CALL PUTVID('NUME_DDL_GENE',1,NUMGEN,IERUSR)
              ENDIF
              CALL PUTVID('CHARGE',1,CHARGE,IERUSR)
              CALL PUTVID('CHAM_MATER',1,NOMCMA,IERUSR)
              CALL PUTVIS('INFO',1,INFO,IERUSR)
              IF (NMODE.NE.0) THEN
                CALL PUTVID('MODE_MECA',1,MODMEC,IERUSR)
              ELSEIF (NCHNO.NE.0) THEN
                CALL PUTVID('CHAM_NO',1,CHAMNO,IERUSR)
              ELSEIF (NMGEN.NE.0) THEN
                CALL PUTVID('MODELE_GENE',1,MODGEN,IERUSR)
                TABL(1)=MODSTA
                IVAL(1)=3
                CALL PUTVTX('AVEC_MODE_STAT',1,TABL,IVAL,IERUSR)
                CALL PUTVR8('DIST_REFE',1,DREF,IERUSR)
              ENDIF
              IF (NNDBLE.NE.0) THEN
                TABL(1)=NDBLE
                IVAL(1)=3
                CALL PUTVTX('NOEUD_DOUBLE',1,TABL,IVAL,IERUSR)
              ENDIF
C             --- CHOIX SOLVEUR ---
              CALL SMDMCF('SOLVEUR',IERUSR)
              TABL(1)=METH
              IVAL(1)=10
              CALL PUTVTX('METHODE',1,TABL,IVAL,IERUSR)
              IF (METH.EQ.'LDLT') THEN
                 IF (NRENU.NE.0) THEN
                    TABL(1)=RENU
                    IVAL(1)=8
                    CALL PUTVTX('RENUM',1,TABL,IVAL,IERUSR)
                 ENDIF
                 CALL PUTVIS('NPREC',1,NPREC,IERUSR)
                 CALL PUTVTX('STOP_SINGULIER',1,KSTOP,LSTOP,IERUSR)
              ELSEIF (METH.EQ.'GCPC') THEN
                 CALL PUTVIS('NMAX_ITER',1,NITER,IERUSR)
                 CALL PUTVR8('RESI_RELA',1,RELA,IERUSR)
                 IF (NPRECO.NE.0) THEN
                    TABL(1)=PRECON
                    IVAL(1)=8
                    CALL PUTVTX('PRE_COND',1,TABL,IVAL,IERUSR)
                 ENDIF
                 CALL PUTVIS('NIVE_REMPLISSAGE',1,NIREMP,IERUSR)
              ENDIF
              CALL SMFMCF(IERUSR)
C
              CALL SMFCMD(IERUSR)
C
           ENDIF

C       CALCUL DE L'AMORTISSEMENT AJOUTE

          IF((NAMOR.NE.0).OR.(NRIGI.NE.0)) THEN

C ON DEFINIT UN NOUVEAU MODELE FLUIDE POUR CALCULER
C LE POTENTIEL STATIONNAIRE-AFFE_MODELE

            ICMD=ICMD+1

C ON AFFECTE LES MAILLES DU FLUIDE

            CALL GCNCON('_',NOFLUI)
            CALL SMDCMD(ICMD,NOFLUI,'AFFE_MODELE',IERUSR)
            CALL PUTVID('MAILLAGE',1,MAILLA,IERUSR)
            CALL SMDMCF('AFFE',IERUSR)
            CALL PUTVID('GROUP_MA',1,GMFLUI,IERUSR)
            TABL(1)=MODEL
            IVAL(1)=8
            CALL PUTVTX('MODELISATION',1,TABL,IVAL,IERUSR)
            TABL(1)='THERMIQUE'
            IVAL(1)=9
            CALL PUTVTX('PHENOMENE',1,TABL,IVAL,IERUSR)
            CALL SMFMCF(IERUSR)

C ON AFFECTE LES MAILLES D ENTRE ET SORTIE DU FLUIDE

            CALL SMDMCF('AFFE',IERUSR)
            CALL PUTVID('GROUP_MA',1,ZK8(IADMA1),IERUSR)
            TABL(1)=MODEL
            IVAL(1)=8
            CALL PUTVTX('MODELISATION',1,TABL,IVAL,IERUSR)
            TABL(1)='THERMIQUE'
            IVAL(1)=9
            CALL PUTVTX('PHENOMENE',1,TABL,IVAL,IERUSR)
            CALL SMFMCF(IERUSR)

C ON AFFECTE LES MAILLES DE SORTIE DU FLUIDE

            CALL SMDMCF('AFFE',IERUSR)
            CALL PUTVID('GROUP_MA',1,ZK8(IADMA2),IERUSR)
            TABL(1)=MODEL
            IVAL(1)=8
            CALL PUTVTX('MODELISATION',1,TABL,IVAL,IERUSR)
            TABL(1)='THERMIQUE'
            IVAL(1)=9
            CALL PUTVTX('PHENOMENE',1,TABL,IVAL,IERUSR)
            CALL SMFMCF(IERUSR)
            CALL SMFCMD(IERUSR)

C AFFECTATION DE LA CHARGE THERMIQUE-AFFE_CHAR_THER

         ICMD=ICMD+1

         CALL GCNCON('_',CHARG2)
         CALL SMDCMD(ICMD,CHARG2,'AFFE_CHAR_THER',IERUSR)
         CALL PUTVID('MODELE',1,NOFLUI,IERUSR)

      DO 50 I = 1 ,NSOR
C     ---  BOUCLE SUR LE NOMBRE D OCCURENCES DU MOT CLE FACTEUR
C          DDL IMPO AVEC LE MOT CLE PRES_SORTIE

          CALL SMDMCF('TEMP_IMPO',IERUSR)
          IF(LNSO.NE.0) THEN
            CALL PUTVID('NOEUD',1,ZK8(IADNSO+I-1),IERUSR)
          ELSEIF(LGNSO.NE.0) THEN
            CALL PUTVID('GROUP_NO',1,ZK8(IADGSO+I-1),IERUSR)
          ENDIF
          CALL PUTVR8('TEMP',1,ZR(IADPSO+I-1),IERUSR)
          CALL SMFMCF(IERUSR)
50     CONTINUE
C
      DO 60 IOCC = 1 ,IOCECL
C     ---  BOUCLE SUR LE NOMBRE D OCCURENCES DU MOT CLE FACTEUR
C          ECOULEMENT

          CALL SMDMCF('FLUX_REP',IERUSR)
          CALL PUTVID('GROUP_MA',1,ZK8(IADMA1+IOCC-1),IERUSR)
          CALL PUTVR8('FLUN',1,ZR(IADVN1+IOCC-1),IERUSR)
          CALL SMFMCF(IERUSR)
          CALL SMDMCF('FLUX_REP',IERUSR)
          CALL PUTVID('GROUP_MA',1,ZK8(IADMA2+IOCC-1),IERUSR)
          CALL PUTVR8('FLUN',1,ZR(IADVN2+IOCC-1),IERUSR)
          CALL SMFMCF(IERUSR)
60     CONTINUE
          CALL SMFCMD(IERUSR)
C
C APPEL A THER_LINEAIRE-POTENTIEL STATIONNAIRE
C
          ICMD=ICMD+1
C
         CALL GCNCON('_',POTEN)
         CALL SMDCMD(ICMD,POTEN,'THER_LINEAIRE',IERUSR)
         CALL PUTVID('MODELE',1,NOFLUI,IERUSR)
         CALL PUTVID('CHAM_MATER',1,NOMCMA,IERUSR)
         CALL SMDMCF('EXCIT',IERUSR)
         CALL PUTVID('CHARGE',1,CHARG2,IERUSR)
         CALL SMFMCF(IERUSR)
         CALL SMFCMD(IERUSR)
      ENDIF

C CALCUL AMORTISSEMENT PROPREMENT DIT

          IF((NAMOR.NE.0)) THEN
              ICMD=ICMD+1

              CALL SMDCMD(ICMD,AMORAJ,'CALC_MATR_AJOU',IERUSR)
              CALL PUTVID('MODELE_FLUIDE',1,NOMFLU,IERUSR)
              CALL PUTVID('MODELE_INTERFACE',1,NOMINT,IERUSR)
              TABL(1)='AMOR_AJOU'
              IVAL(1)=9
              CALL PUTVTX('OPTION',1,TABL,IVAL,IERUSR)
              IF(NNUMG.NE.0) THEN
                CALL PUTVID('NUME_DDL_GENE',1,NUMGEN,IERUSR)
              ENDIF
              CALL PUTVID('CHARGE',1,CHARGE,IERUSR)
              CALL PUTVID('CHAM_MATER',1,NOMCMA,IERUSR)
              CALL PUTVIS('INFO',1,INFO,IERUSR)
                IF (NMODE.NE.0) THEN
                  CALL PUTVID('MODE_MECA',1,MODMEC,IERUSR)
                ELSEIF (NCHNO.NE.0) THEN
                  CALL PUTVID('CHAM_NO',1,CHAMNO,IERUSR)
                ELSEIF (NMGEN.NE.0) THEN
                  CALL UTMESS('F ',NOMCMD,
     &                       'ERREUR : AMORTISSEMENT AJOUTE SUR '//
     &                       ' MODELE GENERALISE NON ENCORE IMPLANTE')
                ENDIF



C   APPEL A THER_LINEAIRE POUR CALCULER LE POTENTIEL

              CALL PUTVID('POTENTIEL',1,POTEN,IERUSR)
C             --- CHOIX SOLVEUR ---
              CALL SMDMCF('SOLVEUR',IERUSR)
              TABL(1)=METH
              IVAL(1)=10
              CALL PUTVTX('METHODE',1,TABL,IVAL,IERUSR)
              IF (METH.EQ.'LDLT') THEN
                 IF (NRENU.NE.0) THEN
                    TABL(1)=RENU
                    IVAL(1)=8
                    CALL PUTVTX('RENUM',1,TABL,IVAL,IERUSR)
                 ENDIF
                 CALL PUTVIS('NPREC',1,NPREC,IERUSR)
                 CALL PUTVTX('STOP_SINGULIER',1,KSTOP,LSTOP,IERUSR)
              ELSEIF (METH.EQ.'GCPC') THEN
                 CALL PUTVIS('NMAX_ITER',1,NITER,IERUSR)
                 CALL PUTVR8('RESI_RELA',1,RELA,IERUSR)
                 IF (NPRECO.NE.0) THEN
                    TABL(1)=PRECON
                    IVAL(1)=8
                    CALL PUTVTX('PRE_COND',1,TABL,IVAL,IERUSR)
                 ENDIF
                 CALL PUTVIS('NIVE_REMPLISSAGE',1,NIREMP,IERUSR)
              ENDIF
              CALL SMFMCF(IERUSR)
C
              CALL SMFCMD(IERUSR)
C
           ENDIF
C
C                      CALCUL DE LA RIGIDITE AJOUTEE
          IF(NRIGI.NE.0) THEN
              ICMD=ICMD+1
              CALL SMDCMD(ICMD,RIGIAJ,'CALC_MATR_AJOU',IERUSR)
              CALL PUTVID('MODELE_FLUIDE',1,NOMFLU,IERUSR)
              CALL PUTVID('MODELE_INTERFACE',1,NOMINT,IERUSR)
              TABL(1)='RIGI_AJOU'
              IVAL(1)=9
              CALL PUTVTX('OPTION',1,TABL,IVAL,IERUSR)
              IF(NNUMG.NE.0) THEN
                CALL PUTVID('NUME_DDL_GENE',1,NUMGEN,IERUSR)
              ENDIF
              CALL PUTVID('CHARGE',1,CHARGE,IERUSR)
              CALL PUTVID('CHAM_MATER',1,NOMCMA,IERUSR)
              CALL PUTVIS('INFO',1,INFO,IERUSR)
                IF (NMODE.NE.0) THEN
                  CALL PUTVID('MODE_MECA',1,MODMEC,IERUSR)
                ELSEIF (NCHNO.NE.0) THEN
                  CALL PUTVID('CHAM_NO',1,CHAMNO,IERUSR)
                ELSEIF (NMGEN.NE.0) THEN
                  CALL UTMESS('F ',NOMCMD,
     &                        'ERREUR : RIGIDITE AJOUTEE SUR '//
     &                      ' MODELE GENERALISE NON ENCORE IMPLANTEE')
                ENDIF
C   APPEL A THER_LINEAIRE POUR CALCULER LE POTENTIEL
              CALL PUTVID('POTENTIEL',1,POTEN,IERUSR)
C             --- CHOIX SOLVEUR ---
              CALL SMDMCF('SOLVEUR',IERUSR)
              TABL(1)=METH
              IVAL(1)=10
              CALL PUTVTX('METHODE',1,TABL,IVAL,IERUSR)
              IF (METH.EQ.'LDLT') THEN
                 IF (NRENU.NE.0) THEN
                    TABL(1)=RENU
                    IVAL(1)=8
                    CALL PUTVTX('RENUM',1,TABL,IVAL,IERUSR)
                 ENDIF
                 CALL PUTVIS('NPREC',1,NPREC,IERUSR)
                 CALL PUTVTX('STOP_SINGULIER',1,KSTOP,LSTOP,IERUSR)
              ELSEIF (METH.EQ.'GCPC') THEN
                 CALL PUTVIS('NMAX_ITER',1,NITER,IERUSR)
                 CALL PUTVR8('RESI_RELA',1,RELA,IERUSR)
                 IF (NPRECO.NE.0) THEN
                    TABL(1)=PRECON
                    IVAL(1)=8
                    CALL PUTVTX('PRE_COND',1,TABL,IVAL,IERUSR)
                 ENDIF
                 CALL PUTVIS('NIVE_REMPLISSAGE',1,NIREMP,IERUSR)
              ENDIF
              CALL SMFMCF(IERUSR)
C
              CALL SMFCMD(IERUSR)
C
           ENDIF
           WRITE(6,*) 'ICMD AV ',ICMD
C
      DO 70 IOCC = 1 , IOCVEG
C     ---  BOUCLE SUR LE NOMBRE DE VECTEURS A PROJETER
C
C     --- COMMANDE CALC_FORC_AJOU
C
         IF (NMASS.EQ.0) THEN
            CALL UTMESS('F',NOMCMD,
     +           'CALC_FORC_AJOU NECESSITE UNE MASS_AJOU')
         ENDIF
         ICMD = ICMD + 1
         NOM = ZK8(IADVEG+IOCC-1)
C         WRITE(6,*) 'IOCC NOM AV ',IOCC,NOM
         CALL SMDCMD(ICMD,NOM,'CALC_FORC_AJOU',IERUSR)
         NBDIR = ZI(IADNBD+IOCC-1)
         CALL PUTVR8('DIRECTION',NBDIR,ZR(IADDIR+6*(IOCC-1)),IERUSR)
         IF (NBSTA.NE.0) THEN
            CALL PUTVID('MODE_STAT',1,MODST2,IERUSR)
            NBNO = ZI(IADNBN+IOCC-1)
            IF (NBNO.NE.0) CALL PUTVID('NOEUD',NBNO,
     +       ZK8(IADNOE+NBNOMX*(IOCC-1)),IERUSR)
            NBGR = ZI(IADNBG+IOCC-1)
            IF (NBGR.NE.0) CALL PUTVID('GROUP_NO',NBGR,
     +       ZK8(IADGRO+NBGRMX*(IOCC-1)),IERUSR)
         ELSE
            TABL(1)='OUI'
            IVAL(1)=3
            CALL PUTVTX('MONO_APPUI',1,TABL,IVAL,IERUSR)
         ENDIF
         CALL PUTVID('MODELE_FLUIDE',1,NOMFLU,IERUSR)
         CALL PUTVID('MODELE_INTERFACE',1,NOMINT,IERUSR)
         IF (NNUMG.NE.0) THEN
            CALL PUTVID('NUME_DDL_GENE',1,NUMGEN,IERUSR)
         ENDIF
         CALL PUTVID('CHARGE',1,CHARGE,IERUSR)
         CALL PUTVID('CHAM_MATER',1,NOMCMA,IERUSR)
         CALL PUTVIS('INFO',1,INFO,IERUSR)
         IF (NMODE.NE.0) THEN
            CALL PUTVID('MODE_MECA',1,MODMEC,IERUSR)
         ELSEIF (NMGEN.NE.0) THEN
            CALL PUTVID('MODELE_GENE',1,MODGEN,IERUSR)
            TABL(1)=MODSTA
            IVAL(1)=3
            CALL PUTVTX('AVEC_MODE_STAT',1,TABL,IVAL,IERUSR)
            CALL PUTVR8('DIST_REFE',1,DREF,IERUSR)
         ENDIF
         IF (NNDBLE.NE.0) THEN
            TABL(1)=NDBLE
            IVAL(1)=3
            CALL PUTVTX('NOEUD_DOUBLE',1,TABL,IVAL,IERUSR)
         ENDIF
C             --- CHOIX SOLVEUR ---
         CALL SMDMCF('SOLVEUR',IERUSR)
         TABL(1)=METH
         IVAL(1)=10
         CALL PUTVTX('METHODE',1,TABL,IVAL,IERUSR)
         IF (METH.EQ.'LDLT') THEN
            IF (NRENU.NE.0) THEN
               TABL(1)=RENU
               IVAL(1)=8
               CALL PUTVTX('RENUM',1,TABL,IVAL,IERUSR)
            ENDIF
            CALL PUTVIS('NPREC',1,NPREC,IERUSR)
            CALL PUTVTX('STOP_SINGULIER',1,KSTOP,LSTOP,IERUSR)
         ELSEIF (METH.EQ.'GCPC') THEN
            CALL PUTVIS('NMAX_ITER',1,NITER,IERUSR)
            CALL PUTVR8('RESI_RELA',1,RELA,IERUSR)
            IF (NPRECO.NE.0) THEN
               TABL(1)=PRECON
               IVAL(1)=8
               CALL PUTVTX('PRE_COND',1,TABL,IVAL,IERUSR)
            ENDIF
            CALL PUTVIS('NIVE_REMPLISSAGE',1,NIREMP,IERUSR)
         ENDIF
         CALL SMFMCF(IERUSR)
C
         CALL SMFCMD(IERUSR)
 70   CONTINUE

C
C     ---  DESTRUCTION DES OBJETS DE TRAVAIL ---
C
C      IF ( IOCMAG .NE. 0 ) THEN
        CALL JEDETC('V','&&OPS013',1)
C      ENDIF

C
      IF ( IERUSR .GT. 0 ) THEN
         CALL UTMESS('E',NOMCMD,'ERREURS CONSTATEES DANS LA MACRO')
         IER = IER + IERUSR
      ENDIF
C
 9999 CONTINUE
      CALL JEDEMA()
      END
