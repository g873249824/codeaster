      SUBROUTINE IBDBGS ()
      IMPLICIT REAL*8 (A-H,O-Z)
C     ------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF SUPERVIS  DATE 17/10/2005   AUTEUR MCOURTOI M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C     OPTION DE DEBUG DEMANDE
C     ------------------------------------------------------------------
C            0 TOUT C'EST BIEN PASSE
C            1 ERREUR DANS LA LECTURE DE LA COMMANDE
C     ------------------------------------------------------------------
C     ----- DEBUT COMMUNS NORMALISES  JEVEUX  --------------------------
      INTEGER          ZI
      COMMON  /IVARJE/ ZI(1)
      REAL*8           ZR
      COMMON  /RVARJE/ ZR(1)
      COMPLEX*16       ZC
      COMMON  /CVARJE/ ZC(1)
      LOGICAL          ZL
      COMMON  /LVARJE/ ZL(1)
      CHARACTER*8      ZK8
      CHARACTER*16            ZK16
      CHARACTER*24                    ZK24
      CHARACTER*32                            ZK32
      CHARACTER*80                                    ZK80
      COMMON  /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     -----  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------
C     ----- DEBUT COMMON DE DEBUG JEVEUX
      INTEGER          LUNDEF,IDEBUG
      COMMON /UNDFJE/  LUNDEF,IDEBUG
      REAL*8           TBLOC
      COMMON /RTBLJE/  TBLOC
C ----------------------------------------------------------------------
      CHARACTER*3  REPONS
      CHARACTER*16 NOMCMD,CBID,MEMOIR, CMPIN, CMPOUT
      INTEGER SEGJVX,LSEGJV, LOUT
      REAL*8 VPARJV
C
C     --- OPTIONS PAR DEFAUT ---
      CALL JEMARQ()
      REPONS = 'NON'
      MEMOIR = 'RAPIDE'
      TBLOC=800.D0
C
      CALL GETVTX('DEBUG','JXVERI',1,1,1,REPONS,L)
      CALL GETRES(CBID,CBID,NOMCMD)
      ILGCMD = LXLGUT(NOMCMD)
      IF ( REPONS.NE.'OUI' .AND. REPONS.NE.'NON') THEN
         CALL UTDEBM('E',NOMCMD,'ARGUMENT ERRONE POUR LE MOT '//
     +                      'CLE "DEBUG JXVERI" ')
         CALL UTIMPK('S',':',1,REPONS)
         CALL UTIMPK('L','LES ARGUMENTS AUTORISES SONT',1,'OUI')
         CALL UTIMPK('S',',',1,'NON')
         CALL UTFINM()
      ENDIF
      IF ( REPONS .EQ. 'OUI') THEN
         CALL UTMESS('I',NOMCMD(:ILGCMD),'DEBUG JXVERI DEMANDE  ')
      ENDIF
      CALL WKVECT('&&SYS   .DEBUG','L V K8',1,LDBG)
      ZK8(LDBG) = REPONS

      CALL GETVTX('DEBUG','JEVEUX',1,1,1,REPONS,L)
      CALL GETRES(CBID,CBID,NOMCMD)
      ILGCMD = LXLGUT(NOMCMD)
      IF ( REPONS.NE.'OUI' .AND. REPONS.NE.'NON') THEN
         CALL UTDEBM('E',NOMCMD,'ARGUMENT ERRONE POUR LE MOT '//
     +                      'CLE "DEBUG JEVEUX" ')
         CALL UTIMPK('S',':',1,REPONS)
         CALL UTIMPK('L','LES ARGUMENTS AUTORISES SONT',1,'OUI')
         CALL UTIMPK('S',',',1,'NON')
         CALL UTFINM()
      ENDIF
      IF ( REPONS .EQ. 'OUI') THEN
         CALL UTMESS('I','SUPERVISEUR',
     +                  'EXECUTION DE JEVEUX EN MODE DEBUG')
         IDEBUG = 1
      ENDIF
C
      CALL GETVTX('DEBUG','ENVIMA',1,1,1,REPONS,L)
      IF ( REPONS .EQ. 'TES' ) THEN
         IFI = IUNIFI ( 'RESULTAT' )
         CALL IMPVEM  ( IFI )
      ENDIF
C
      CMPIN='ABORT'
      CALL GETVTX('ERREUR','ERREUR_F',1,1,1,CMPIN, L)
      IF(L.EQ.1)THEN
         CALL ONERRF(CMPIN, CMPOUT, LOUT)
      ENDIF
C
      CALL GETVTX('MEMOIRE','GESTION',1,1,1,MEMOIR,L)
      CALL GETVIS('MEMOIRE','TYPE_ALLOCATION',1,1,1,ISEG,L)
      IF (L.LE.0) ISEG = SEGJVX(-1)
      CALL GETVIS('MEMOIRE','TAILLE',1,1,1,ITAIL,L)
      IF (L.LE.0) ITAIL = LSEGJV(-1)
      CALL GETVR8('MEMOIRE','PARTITION',1,1,1,RVAL,L)
      IF (L.LE.0) THEN
        R8BID = -1.0D0
        RVAL = VPARJV(R8BID)
      ENDIF

      CALL GETVR8('MEMOIRE','TAILLE_BLOC',1,1,1,TBLOC,L)

      CALL GETRES(CBID,CBID,NOMCMD)
      ILGCMD = LXLGUT(NOMCMD)
      IF ( MEMOIR(1:8).NE.'COMPACTE' .AND.
     +     MEMOIR(1:6).NE.'RAPIDE') THEN
         CALL UTDEBM('E',NOMCMD,'ARGUMENT ERRONE POUR LE MOT '//
     +                   'CLE "MEMOIRE GESTION" ')
         CALL UTIMPK('S',':',1,MEMOIR)
         CALL UTIMPK('L','LES ARGUMENTS AUTORISES SONT',1,'COMPACTE')
         CALL UTIMPK('S',',',1,'RAPIDE')
         CALL UTFINM()
      ENDIF
      IF ( MEMOIR(1:8) .EQ. 'COMPACTE') THEN
         CALL UTMESS('I',NOMCMD(:ILGCMD),
     +               'MEMOIRE GESTION : "COMPACTE"')
         CALL JETYPR('DEBUT','XD',ISEG,ITAIL,RVAL)
      ELSE
         CALL JETYPR('DEFAUT','XX',ISEG,ITAIL,RVAL)
      ENDIF
      IF (ISEG .EQ. 2) THEN
        CALL UTMESS('I',NOMCMD(:ILGCMD),'TYPE ALLOCATION MEMOIRE 2')
      ELSE IF (ISEG .EQ. 3) THEN
        CALL UTMESS('I',NOMCMD(:ILGCMD),'TYPE ALLOCATION MEMOIRE 3')
        CALL UTDEBM('I',NOMCMD(:ILGCMD),'TAILLE DES SEGMENTS')
        CALL UTIMPI('S',' ',1,ITAIL)
        CALL UTFINM()
      ELSE IF (ISEG .EQ. 4) THEN
        CALL UTMESS('I',NOMCMD(:ILGCMD),'TYPE ALLOCATION MEMOIRE 4')
        CALL UTDEBM('I',NOMCMD(:ILGCMD),'TAILLE DES SEGMENTS')
        CALL UTIMPI('S',' ',1,ITAIL)
        CALL UTFINM()
        CALL UTDEBM('I',NOMCMD(:ILGCMD),
     +              'TAILLE DE LA PARTITION PRINCIPALE')
        CALL UTIMPR('S',' ',1,RVAL)
        CALL UTFINM()
      ENDIF
C
      CALL JEDEMA()
      END
