      SUBROUTINE CORICH(ACTION,CHAMP,ICHIN,ICHOUT)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ASSEMBLA  DATE 29/09/2006   AUTEUR VABHHTS J.PELLET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE VABHHTS J.PELLET
      IMPLICIT NONE
      CHARACTER*(*) ACTION,CHAMP
      INTEGER ICHIN,ICHOUT
C ----------------------------------------------------------------------
C  BUT :   GERER UN EVENTUEL LIEN ENTRE UN CHAMP (RESUELEM OU CHAM_NO)
C          ET LE NUMERO DE LA CHARGE AUQUEL IL EST ASSOCIE POUR POUVOIR
C          LUI APPLIQUER LE BON FONC_MULT.
C   CE LIEN EST UTILISE PAR LA ROUTINE ASASVE (RESUELEM)
C   CE LIEN EST UTILISE PAR LA ROUTINE ASCOVA (CHAM_NO)


C IN  ACTION  K1 : / 'E' : ON ECRIT UN LIEN
C                  / 'L' : ON LIT UN LIEN ECRIT AU PREALABLE
C                  / 'S' : ON SUPPRIME UN LIEN ECRIT AU PREALABLE
C IN          CHAMP   K19: NOM DU CHAMP
C IN     ICHIN     I : NUMERO DE LA CHARGE ASSOCIEE A CHAMP
C OUT    ICHOUT    I : NUMERO DE LA CHARGE ASSOCIEE A CHAMP
C ----------------------------------------------------------------------
C LE LIEN ENTRE CHAMP ET ICHIN EST CONSERVE DANS 2 OBJETS VOLATILS
C DE NOM : '&&CORICH.'//NOMU//'.REPT'
C          '&&CORICH.'//NOMU//'.NUCH'
C OU NOMU EST LE NOM DU CONCEPT UTILISATEUR RESULTAT DE LA COMMANDE

C CES OBJETS SONT DONC PROPRES A UNE COMMANDE (NOMU) UTILISANT
C LE MOT CLE EXCIT/FONC_MULT

C  CONVENTIONS :
C --------------
C SI ACTION='E', ICHOUT EST INUTILISE  (IBID)
C   SI ICHIN > 0 :ICHIN EST BIEN LA NUMERO DE LA CHARGE ASSOCIEE A CHAMP
C                 SI IL EXISTE UNE FONC_MULT, ELLE LUI SERA APPLIQUEE.
C   SI ICHIN = -1 :CHAMP N'EST ASSOCIE A AUCUNE FONC_MULT
C                 (CHARGEMENT DE DILATATION PAR EXEMPLE)
C   SI ICHIN = -2 :CHAMP EST "BIDON" : NUL OU INEXISTANT
C   SI ICHIN = 0 OU ICHIN < -2  : ERREUR FATALE.

C SI ACTION='L', ICHIN EST INUTILISE  (IBID)
C    SI ON A FAIT AU PREALABLE UN LIEN AVEC CHAMP, ON REND ICHOUT
C    SINON ON REND ICHOUT=0
C    ICHOUT=0  VEUT DIRE QUE LE CHAMP N'EST PAS RENSEIGNE :
C         SOIT IL NE L'A JAMAIS ETE, SOIT IL A ETE EFFACE (ACTION:'S')

C SI ACTION='S', ICHIN ET ICHOUT SONT INUTILISES  (IBID)
C    SI ON A FAIT AU PREALABLE UN LIEN AVEC CHAMP : OK
C    SINON  : ERREUR FATALE.

C ----------------------------------------------------------------------

C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------------------

      CHARACTER*32 JEXNUM,JEXNOM,JEXR8,JEXATR
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)

C --- FIN DECLARATIONS NORMALISEES JEVEUX ------------------------------

      INTEGER IRET,LONG,LONGMX,IBID,K,KK,JNUMIC
      CHARACTER*8 NOMU
      CHARACTER*16 NOMCMD,KBID
      CHARACTER*24 REPERT,NUMICH,NOMCH,REPTMP,NOMCH2

      CALL JEMARQ()

      CALL GETRES(NOMU,KBID,NOMCMD)
      REPERT = '&&CORICH.'//NOMU//'.REPT'
      NUMICH = '&&CORICH.'//NOMU//'.NUCH'
      REPTMP = '&&CORICH.REPTMP'


C     -- ALLOCATION DE REPERT ET NUMICH :
C     ------------------------------------------------------
      CALL JEEXIN(REPERT,IRET)
      IF (IRET.EQ.0) THEN
        CALL JECREO(REPERT,'V N K24')
        CALL JEECRA(REPERT,'NOMMAX',50,KBID)
        CALL WKVECT(NUMICH,'V V I',50,IBID)
      END IF


C     -- AGGRANDISSEMENT DE REPERT ET NUMICH SI NECESSAIRE:
C     ------------------------------------------------------
      CALL JELIRA(REPERT,'NOMMAX',LONGMX,KBID)
      CALL JELIRA(REPERT,'NOMUTI',LONG,KBID)
      IF (LONG.GT.LONGMX-1) THEN

        CALL JUVECA(NUMICH,2*LONGMX)

        CALL JEDUPO(REPERT,'V',REPTMP,.FALSE.)
        CALL JEDETR(REPERT)
        CALL JECREO(REPERT,'V N K24')
        CALL JEECRA(REPERT,'NOMMAX',2*LONGMX,KBID)
        DO 10,K = 1,LONG
          CALL JENUNO(JEXNUM(REPTMP,K),NOMCH)
          CALL JECROC(JEXNOM(REPERT,NOMCH))
   10   CONTINUE
        CALL JEDETR(REPTMP)

      END IF


C     -- CAS ACTION = 'E'
C     ------------------------------------------------------
      IF (ACTION.EQ.'E') THEN
        IF (ICHIN.EQ.0) CALL U2MESS('F','ASSEMBLA_13')
        IF (ICHIN.LT.-2) CALL U2MESS('F','ASSEMBLA_14')
        NOMCH = CHAMP(1:19)
        CALL JENONU(JEXNOM(REPERT,NOMCH),KK)
        IF (KK.EQ.0) CALL JECROC(JEXNOM(REPERT,NOMCH))
        CALL JENONU(JEXNOM(REPERT,NOMCH),KK)
        CALL JEVEUO(NUMICH,'E',JNUMIC)
        ZI(JNUMIC-1+KK) = ICHIN


C     -- CAS ACTION = 'L'
C     ------------------------------------------------------
      ELSE IF (ACTION.EQ.'L') THEN
        NOMCH = CHAMP(1:19)
        CALL JENONU(JEXNOM(REPERT,NOMCH),KK)
        IF (KK.EQ.0) THEN
          ICHOUT = 0
        ELSE
          CALL JEVEUO(NUMICH,'L',JNUMIC)
          ICHOUT = ZI(JNUMIC-1+KK)
        END IF


C     -- CAS ACTION = 'S'
C     ------------------------------------------------------
      ELSE IF (ACTION.EQ.'S') THEN
        NOMCH = CHAMP(1:19)
        CALL JENONU(JEXNOM(REPERT,NOMCH),KK)
        IF (KK.EQ.0) THEN
          CALL U2MESS('F','ASSEMBLA_15')
        ELSE
          CALL JEVEUO(NUMICH,'E',JNUMIC)
          ZI(JNUMIC-1+KK) = 0
        END IF


C     -- CAS ACTION IMPREVUE :
C     ------------------------------------------------------
      ELSE
        CALL U2MESS('F','ASSEMBLA_16')
      END IF


C     IMPRESSIONS POUR LE DEBUG :
C     ----------------------------
      IF (.FALSE.) THEN
        WRITE (6,*) 'CORICH FIN ',ACTION,' ',CHAMP,ICHIN,ICHOUT
        CALL JELIRA(REPERT,'NOMUTI',LONG,KBID)
        CALL JELIRA(REPERT,'NOMMAX',LONGMX,KBID)
        CALL JEVEUO(NUMICH,'L',JNUMIC)
        WRITE (6,*) 'CORICH FIN ETAT DU REP.: ',LONGMX,' ',LONG
        DO 20,K = 1,LONG
          CALL JENUNO(JEXNUM(REPERT,K),NOMCH2)
          WRITE (6,*) 'CORICH FIN ETAT DU REP.: ',K,' ',NOMCH2,' ',
     &      ZI(JNUMIC-1+K)
   20   CONTINUE
      END IF

      CALL JEDEMA()
      END
