      SUBROUTINE RESOUD(MATASS,MATPRE,SOLVEU,CHCINE,NSECM ,
     &                  CHSECM,CHSOLU,BASE  ,RSOLU ,CSOLU ,
     &                  CRITER,PREPOS,ISTOP ,IRET  )
C-----------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGELINE  DATE 18/12/2012   AUTEUR SELLENET N.SELLENET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================

C-----------------------------------------------------------------------
C BUT : RESOUDRE UN SYSTEME LINEAIRE D'EQUATIONS (REEL OU COMPLEXE)
C-----------------------------------------------------------------------
C
C ARGUMENTS :
C------------

C REMARQUES : ON PEUT APPELER RESOUD DE 2 FACONS
C   1) AVEC NSECM = 0 + CHSECM, CHSOLU, BASE
C   2) AVEC NSECM > 0 + RSOLU (OU CSOLU) + (CHSECM=CHSOLU=' ')
C      DANS CE CAS :
C        * LE SOLVEUR FETI EST IMPOSSIBLE
C
C IN/JXIN  K19 MATASS : MATR_ASSE PREMIER MEMBRE DU SYSTEME LINEAIRE
C IN/JXIN  K19 MATPRE : MATR_ASSE DE PRECONDITIONNEMENT
C                       POUR SOLVEUR ITERATIF GCPC (OU ' ' SINON)
C IN/JXIN  K19 SOLVEU : SD_SOLVEUR (OU ' ')
C                       SI SOLVEU=' ' ON PREND LE SOLVEUR DE MATASS
C IN/JXIN  K*  CHCINE : CHAMP ASSOCIE AUX CHARGES CINEMATIQUES (OU ' ')
C IN       I   NSECM  : / 0 => ON UTILISE CHSECM, CHSOLU, BASE
C                       / N => ON UTILISE RSOLU (OU CSOLU)
C                         N : NOMBRE DE SECONDS MEMBRES
C IN/JXIN  K*  CHSECM : CHAMP SECOND MEMBRE DU SYSTEME LINEAIRE
C IN/JXOUT K*  CHSOLU : CHAMP SOLUTION DU SYSTEME LINEAIRE
C IN       K*  BASE   : BASE SUR LAQUELLE ON CREE CHSOLU
C IN/OUT   R   RSOLU  : TABLEAU (*,NSECM)
C           EN ENTREE : VECTEUR DE REELS CONTENANT LES SECONDS MEMBRES
C           EN SORTIE : VECTEUR DE REELS CONTENANT LES SOLUTIONS
C IN/OUT   C   CSOLU  : TABLEAU (*,NSECM)
C                       IDEM RSOLU POUR LES COMPLEXES
C IN/JXOUT K*  CRITER : SD_CRITER (CRITERES DE CONVERGENCE)
C                       POUR SOLVEUR ITERATIF GCPC/FETI (OU ' ' SINON)
C IN       L   PREPOS : / .TRUE.  => ON FAIT LES PRE ET POST-TRAITEMENTS
C                                    DU SMB ET DE LA SOLUTION
C                       / .FALSE. => ON NE FAIT AUCUN TRAITEMENT
C                                    (EN MODAL PAR EXEMPLE)
C IN       I   ISTOP  : COMPORTEMENT EN CAS D'ERREUR (CE PARAMETRE N'A
C                       D'UTILITE QUE POUR UN SOLVEUR ITERATIF)
C                       / 0     : ON S'ARRETE EN <F>
C                       / 2     : ON CONTINUE SANS MESSAGE D'ERREUR
C                       / -9999 : ON PREND LA VALEUR DEFINIE DANS LA
C                                 SD_SOLVEUR POUR STOP_SINGULIER
C OUT      I   IRET   : CODE RETOUR
C                       / 0 : OK (PAR DEFAUT POUR SOLVEURS DIRECTS)
C                       / 1 : ECHEC (NOMBRE MAX. D'ITERATIONS ATTEINT)
C-----------------------------------------------------------------------
      IMPLICIT NONE

      CHARACTER*(*) MATASS,MATPRE,SOLVEU,CHCINE
      INTEGER       NSECM
      CHARACTER*(*) CHSECM,CHSOLU,BASE
      REAL*8        RSOLU(*)
      COMPLEX*16    CSOLU(*)
      CHARACTER*(*) CRITER
      LOGICAL       PREPOS
      INTEGER       ISTOP ,IRET
C-----------------------------------------------------------------------
      INCLUDE 'jeveux.h'

      INTEGER      IBID  ,IFM   ,NIV
      CHARACTER*3  KMPIC ,TYPE  ,TYP1  ,KBID
      CHARACTER*19 MATR19,MPRE19,SOLV19,CINE19
      CHARACTER*19 SECM19,CSOL19,CRIT19
      CHARACTER*24 METRES

      INTEGER      JSLVK ,JSLVR ,JSLVI ,IDBGAV,NEQ   ,NEQ1  ,IER   ,
     &             NITER ,LMAT  ,JVALS ,JTRAV ,JVAL2 ,IMD   ,JREFA ,
     &             ISTOPZ
      REAL*8       EPSI  ,RBID
      COMPLEX*16   CBID
      LOGICAL      DBG
      CHARACTER*1  FTYPE(2)
      DATA         FTYPE/'R','C'/
C ----------------------------------------------------------------------
      DBG=.TRUE.
      DBG=.FALSE.

      CALL JEMARQ()
      CALL INFNIV(IFM,NIV)
      CALL JEDBG2(IDBGAV,0)
      CALL UTTCPU('CPU.RESO.1','DEBUT',' ')
      CALL UTTCPU('CPU.RESO.5','DEBUT',' ')

      MATR19 = MATASS
      MPRE19 = MATPRE
      SOLV19 = SOLVEU
      CINE19 = CHCINE
      SECM19 = CHSECM
      CSOL19 = CHSOLU
      CRIT19 = CRITER

      CALL ASSERT(MATR19.NE.' ')
      CALL DISMOI('F','MPI_COMPLET',MATR19,'MATR_ASSE',IBID,KMPIC,IBID)

      IF (SOLV19.EQ.' ') CALL DISMOI('F','SOLVEUR',MATR19,'MATR_ASSE',
     &                               IBID,SOLV19,IBID)
      CALL JEVEUO(SOLV19//'.SLVK','L',JSLVK)
      CALL JEVEUO(SOLV19//'.SLVR','L',JSLVR)
      CALL JEVEUO(SOLV19//'.SLVI','L',JSLVI)
      METRES = ZK24(JSLVK)
      CALL ASSERT(METRES.NE.' ')
      IF (KMPIC.EQ.'NON') CALL ASSERT(METRES.EQ.'FETI' .OR.
     &                                METRES.EQ.'MUMPS'.OR.
     &                                METRES.EQ.'PETSC')

C     VERIFICATIONS ET INITIALISATIONS
      CALL ASSERT((ISTOP.EQ.0).OR.(ISTOP.EQ.2).OR.(ISTOP.EQ.-9999))
      IF (ISTOP.EQ.-9999) THEN
         ISTOPZ = ZI(JSLVI-1+8)
      ELSE
         ISTOPZ = ISTOP
      ENDIF
      IRET = 0

C     -- SI 'FETI', ON NE PEUT PAS APPELER MTDSCR :
      IF (METRES.NE.'FETI') THEN
        CALL MTDSCR(MATR19)
        CALL JEVEUO(MATR19//'.&INT','L',LMAT)
        NEQ=ZI(LMAT+2)
        TYPE=FTYPE(ZI(LMAT+3))
      ELSE
        IF (NSECM.GE.1) CALL U2MESS('F','FACTOR_13')
      ENDIF

      CALL ASSERT(NSECM.GE.0)
      CALL JEVEUO(MATR19//'.REFA','L',JREFA)
      IF ( ZK24(JREFA-1+11).EQ.'MATR_DISTR' ) THEN
        IMD=1
      ELSE
        IMD=0
      ENDIF
      IF (NSECM.EQ.0) THEN
        CALL ASSERT(SECM19.NE.' ')
        CALL ASSERT(CSOL19.NE.' ')
        IF (CSOL19.NE.SECM19) THEN
          CALL DETRSD('CHAMP_GD',CSOL19)
          CALL VTDEFS(CSOL19,SECM19,BASE,' ')
        ENDIF
        IF (METRES.NE.'FETI') THEN
          CALL JELIRA(SECM19//'.VALE','LONMAX',NEQ1,KBID)
          CALL JELIRA(SECM19//'.VALE','TYPE',IBID,TYP1)
          IF ( (NEQ1.NE.NEQ).AND.(IMD.EQ.0) ) THEN
            CALL U2MESS('F','FACTOR_67')
          ENDIF
          IF (TYP1.NE.TYPE) CALL U2MESS('F','FACTOR_68')

          CALL JEVEUO(SECM19//'.VALE','L',JVAL2)
          IF (IMD.EQ.0) THEN
            CALL WKVECT('&&RESOUD.TRAV','V V '//TYPE,NEQ,JTRAV)
            CALL JACOPO(NEQ,TYPE,JVAL2,JTRAV)
          ELSE
            CALL WKVECT('&&RESOUD.TRAV','V V '//TYPE,NEQ1,JTRAV)
            CALL JACOPO(NEQ1,TYPE,JVAL2,JTRAV)
          ENDIF
        ENDIF
      ELSE
        CALL ASSERT(SECM19.EQ.' ')
        CALL ASSERT(CSOL19.EQ.' ')
      ENDIF

      IF ((CINE19.NE.' ').AND.(METRES.NE.'FETI')) THEN
        CALL JELIRA(CINE19//'.VALE','TYPE',IBID,TYP1)
        CALL ASSERT(TYP1.EQ.TYPE)
      ENDIF





      IF (DBG) THEN
        IF (.NOT.(METRES.EQ.'FETI')) CALL CHEKSD(MATR19,'SD_MATR_ASSE',
     &      IER)
        IF (NSECM.EQ.0) CALL DBGOBJ(SECM19//'.VALE','OUI',6,
     &                              '&&RESOUD 2ND MEMBRE')
        CALL DBGOBJ(CINE19//'.VALE','OUI',6,'&&RESOUD CINE19')
        CALL DBGOBJ(MATR19//'.VALM','OUI',6,'&&RESOUD MATR.VALM')
        CALL DBGOBJ(MATR19//'.VALF','OUI',6,'&&RESOUD MATR.VALF')
        CALL DBGOBJ(MATR19//'.CONL','OUI',6,'&&RESOUD MATR.CONL')
        CALL DBGOBJ(MATR19//'.CCVA','OUI',6,'&&RESOUD MATR.CCVA')
      ENDIF




      IF (METRES.EQ.'LDLT' .OR. METRES.EQ.'MULT_FRONT') THEN
C     ----------------------------------------------------
        IF (NSECM.GT.0) THEN
          CALL RESLDL(SOLV19,MATR19,CINE19,NSECM,RSOLU,CSOLU,PREPOS)
        ELSE
          IF (TYPE.EQ.'R') THEN
            CALL RESLDL(SOLV19,MATR19,CINE19,1,ZR(JTRAV),CBID,PREPOS)
          ELSE
            CALL RESLDL(SOLV19,MATR19,CINE19,1,RBID,ZC(JTRAV),PREPOS)
          ENDIF
        ENDIF



      ELSEIF (METRES.EQ.'MUMPS') THEN
C     ----------------------------------------------------
        IF (NSECM.GT.0) THEN
          CALL AMUMPH('RESOUD',SOLV19,MATR19,RSOLU,CSOLU,
     &                 CINE19,NSECM,IRET,PREPOS)
        ELSE
          IF (TYPE.EQ.'R') THEN
            CALL AMUMPH('RESOUD',SOLV19,MATR19,ZR(JTRAV),CBID,
     &                 CINE19,1,IRET,PREPOS)
          ELSE
            CALL AMUMPH('RESOUD',SOLV19,MATR19,RBID,ZC(JTRAV),
     &                 CINE19,1,IRET,PREPOS)
          ENDIF
        ENDIF
        CALL ASSERT(IRET.EQ.0)



      ELSEIF (METRES.EQ.'FETI') THEN
C     ----------------------------------
        CALL RESFET(MATR19,CINE19,SECM19,CSOL19,NITER,CRIT19,SOLV19)



      ELSEIF (METRES.EQ.'GCPC') THEN
C     ----------------------------------
        NITER  = ZI(JSLVI-1+2)
        EPSI   = ZR(JSLVR-1+2)
        CALL ASSERT(TYPE.EQ.'R')
        IF (NSECM.GT.0) THEN
          CALL RESGRA(MATR19,MPRE19,CINE19   ,NITER ,EPSI  ,
     &                CRIT19,NSECM ,RSOLU    ,SOLV19,ISTOPZ,
     &                IRET  )
        ELSE
          CALL RESGRA(MATR19,MPRE19,CINE19   ,NITER ,EPSI  ,
     &                CRIT19,1     ,ZR(JTRAV),SOLV19,ISTOPZ,
     &                IRET  )
        ENDIF



      ELSEIF (METRES.EQ.'PETSC') THEN
C     ----------------------------------
        CALL ASSERT(TYPE.EQ.'R')
        IF (NSECM.GT.0) THEN
          CALL APETSC('RESOUD',SOLV19,MATR19,RSOLU    ,CINE19,
     &                NSECM   ,ISTOPZ,IRET  )
        ELSE
          CALL APETSC('RESOUD',SOLV19,MATR19,ZR(JTRAV),CINE19,
     &                1       ,ISTOPZ,IRET  )
        ENDIF

      ELSE
        CALL U2MESK('F','ALGELINE3_44',1,METRES)
      ENDIF


C     -- RECOPIE DANS LE CHAMP SOLUTION S'IL Y A LIEU :
      IF ((NSECM.EQ.0).AND.(METRES.NE.'FETI')) THEN
        CALL JEVEUO(CSOL19//'.VALE','E',JVALS)
        IF (IMD.EQ.0) THEN
          CALL JACOPO(NEQ,TYPE,JTRAV,JVALS)
        ELSE
          CALL JACOPO(NEQ1,TYPE,JTRAV,JVALS)
        ENDIF
      ENDIF
      CALL JEDETR('&&RESOUD.TRAV')




      IF (DBG.AND.(NSECM.EQ.0)) CALL DBGOBJ(CSOL19//'.VALE','OUI',6,
     &                              '&&RESOUD SOLU')


      CALL UTTCPU('CPU.RESO.1','FIN',' ')
      CALL UTTCPU('CPU.RESO.5','FIN',' ')
      CALL JEDBG2(IBID,IDBGAV)
      CALL JEDEMA()
      END
