      SUBROUTINE TLDLG3(METREZ,RENUM,ISTOP,LMAT,ILDEB,ILFIN,NDIGIT,
     &                  NDECI,ISINGU,NPVNEG,IRET)
      IMPLICIT NONE
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGELINE  DATE 22/07/2008   AUTEUR PELLET J.PELLET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2006  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C ======================================================================

C    BUT  FACTORISER UNE MATRICE ASSEMBLEE (LDLT OU MULT_FRONT)

C     IN  METRES :  /'LDLT' /'MULT_FRO'
C     IN  RENUM :  /'MD' /'MDA' /'METIS' /' ' (POUR MULT_FRONT)
C     IN  ISTOP :  /0 -> SI IRET>0 : ERREUR <F>
C                  /1 -> SI IRET=1 : ALARME <A>
C                        SI IRET=2 : ERREUR <F>
C                  /2 -> LE PROGRAMME NE S'ARRETE PAS
C                        ET N'IMPRIME AUCUN MESSAGE.
C     IN  LMAT  : DESCRIPTEUR DE LA MATRICE A FACTORISER
C     IN  ILDEB : NUMERO DE LA LIGNE DE DEPART DE FACTORISATION
C     IN  ILFIN : NUMERO DE LA LIGNE DE FIN    DE FACTORISITION

C    OUT  IRET : CODE RETOUR :
C                  /0 -> OK
C                  /1 -> LE NOMBRE DE DECIMALES PERDUES SUR LE
C                        TERME DIAGONAL DE L'EQUATION ISINGU
C                        EST SUPERIEUR A NDIGIT
C                  /2 -> LA FACTORISATION N'A PAS PU SE FAIRE
C                        JUSQU'AU BOUT.(ARRET A LA LIGNE ISINGU)
C                        SI UN PIVOT DEVIENT (EN MODULE) INFERIEUR
C                        A EPS=/1./R8GAEM()
C    OUT  NPVNEG : NOMBRE DE PIVOTS NEGATIFS SUR LA MATRICE
C                  FACTORISEE.
C                  CE NOMBRE N'A DE SENS QUE SI LA MATRICE EST
C                  DE TYPE REEL ET QUE IRET<2
C     IN  NDIGIT: NOMBRE MAX DE DECIMALES A PERDRE SUR LES TERMES
C                 DIAGONAUX DE LA MATRICE
C                 SI NDIGIT=0 ON PREND LA VALEUR PAR DEFAUT :8
C                 SI NDIGIT EST GRAND (99 PAR EX.) ON N'AURA
C                    JAMAIS D'ALARME.
C    OUT  NDECI : NOMBRE MAX DE DECIMALES PERDUES SUR LES TERMES
C                 DIAGONAUX DE LA MATRICE
C    OUT  ISINGU: NUMERO DE L'EQUATION OU LA PERTE DE DECIMALES
C                 EST MAXIMUM OU BIEN NUMERO DE L'EQUATION POUR
C                 LA QUELLE LA FACTORISATION S'EST ARRETEE

C     ------------------------------------------------------------------

C     ----- DEBUT COMMUNS NORMALISES  JEVEUX  --------------------------
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     -----  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------

      CHARACTER*1 CODMES,KBID
      CHARACTER*19 NOMA19,LIGREL,STOLCI
      CHARACTER*14 NU
      CHARACTER*(*) METREZ,RENUM
      CHARACTER*8 NOMNO,NOMCMP,TARDIF,METRES,METRE2
      CHARACTER*40 INFOBL,VALK(4)
      INTEGER ISTOP,LMAT,ILDEB,ILFIN,NDIGIT,NDIGI2,IRET,NPVNEG
      INTEGER IFM,NIV,JREFA,NOM,NEQ,ISCBL,ISCDI,LLIAI,IER
      INTEGER TYPVAR,TYPSYM,NBBLOC,ILFIN1,IBID
      INTEGER IEQ3,ISINGU,ISCHC,IEQ,NDECI,JDIGS,NPIVOT
      INTEGER NDECI1,NDECI2,IEQ4,NZERO,VALI(2)
      REAL*8 EPS,DMAX,DMIN,D1,R8MAEM

C     ------------------------------------------------------------------
      CALL JEMARQ()
      NOM = ZI(LMAT+1)
      NEQ = ZI(LMAT+2)
      TYPVAR = ZI(LMAT+3)
      TYPSYM = ZI(LMAT+4)
      NOMA19 = ZK24(NOM)
      METRES = METREZ

      IF ( METRES.NE.'LDLT' .AND. METRES.NE.'MULT_FRO' ) THEN
         CALL U2MESS ('F','ALGELINE4_1')
      ENDIF

C     -- DDLS ELIMINES :
      CALL JEVEUO(NOMA19//'.REFA','L',JREFA)
      CALL ASSERT(ZK24(JREFA-1+3).NE.'ELIMF')
      IF (ZK24(JREFA-1+3).EQ.'ELIML') CALL MTMCHC(NOMA19,'ELIMF')
      CALL ASSERT(ZK24(JREFA-1+3).NE.'ELIML')

      CALL DISMOI('F','NOM_NUME_DDL',NOMA19,'MATR_ASSE',IBID,NU,IBID)
C    -- ATTENTION : NU EST PEUT ETRE ' ' (MATR_ASSE_GENE)
      CALL ASSERT(NU.NE.' ')

      CALL INFNIV(IFM,NIV)
      IF (NIV.EQ.2) THEN
        WRITE (IFM,*) '<FACTOR> FACTORISATION DE LA MATRICE :',NOMA19
        IF (TYPSYM.EQ.1) WRITE (IFM,*) '<FACTOR> MATRICE SYMETRIQUE'
        IF (TYPSYM.EQ.0) WRITE (IFM,*) '<FACTOR> MATRICE NON-SYMETRIQUE'
        IF (TYPVAR.EQ.1) WRITE (IFM,*) '<FACTOR> MATRICE REELLE'
        IF (TYPVAR.EQ.2) WRITE (IFM,*) '<FACTOR> MATRICE COMPLEXE'
        WRITE (IFM,*) '<FACTOR> METHODE '//METRES
      END IF

      NPIVOT = 0

C     -- VALEUR DE NDIGIT PAR DEFAUT : 8
      IF (NDIGIT.EQ.0) THEN
        NDIGI2 = 8
      ELSE
        NDIGI2 = NDIGIT
      END IF


C     ON ALLOUE (SI NECESSAIRE) UN VECTEUR QUI CONTIENDRA
C     LA DIAGONALE "AVANT" ET LA DIAGONALE "APRES" :
      CALL DIAGAV(NOMA19,NEQ,TYPVAR,EPS)

      IF (ILFIN.LT.ILDEB .OR. ILFIN.GT.NEQ) THEN
        ILFIN1 = NEQ
      ELSE
        ILFIN1 = ILFIN
      END IF
      IRET = 0

      CALL ASSERT(ZK24(JREFA-1+2)(1:14).EQ.NU)
      STOLCI=NU//'.SLCS'

      IF (METRES.EQ.'LDLT') THEN
C     ---------------------------------------

C       -- ALLOCATION DE LA MATRICE FACTORISEE (.UALF)  ET RECOPIE
C          DE .VALM DANS .UALF
        IF ((NOMA19.NE.'&&OP0070.RESOC.MATR').AND.
     &      (NOMA19.NE.'&&OP0070.RESUC.MATR')) THEN
          CALL UALFCR(NOMA19,' ')
        ENDIF

        CALL JELIRA(NOMA19//'.UALF','NMAXOC',NBBLOC,KBID)

        CALL JEVEUO(STOLCI//'.SCDI','L',ISCDI)
        CALL JEVEUO(STOLCI//'.SCBL','L',ISCBL)
        CALL JEVEUO(STOLCI//'.SCHC','L',ISCHC)
        IF (TYPVAR.EQ.1) THEN
          IF (TYPSYM.EQ.1) THEN
            CALL TLDLR8(NOMA19,ZI(ISCHC),ZI(ISCDI),ZI(ISCBL),NPIVOT,NEQ,
     &                  NBBLOC,ILDEB,ILFIN1,EPS)
          ELSE IF (TYPSYM.EQ.0) THEN
            CALL TLDUR8(NOMA19,ZI(ISCHC),ZI(ISCDI),ZI(ISCBL),NPIVOT,NEQ,
     &                  NBBLOC/2,ILDEB,ILFIN1,EPS)
          END IF

        ELSE IF (TYPVAR.EQ.2) THEN
          IF (TYPSYM.EQ.1) THEN
            CALL TLDLC8(NOMA19,ZI(ISCHC),ZI(ISCDI),ZI(ISCBL),NPIVOT,NEQ,
     &                  NBBLOC,ILDEB,ILFIN1,EPS)
          ELSE IF (TYPSYM.EQ.0) THEN
            CALL TLDUC8(NOMA19,ZI(ISCHC),ZI(ISCDI),ZI(ISCBL),NPIVOT,NEQ,
     &                  NBBLOC/2,ILDEB,ILFIN1,EPS)
          END IF
        END IF


      ELSE IF (METRES.EQ.'MULT_FRO') THEN
C     ---------------------------------------
        IF (ZK24(JREFA-1+10).NE.'NOEU') CALL U2MESS('F','ALGELINE3_59')
        IF (TYPVAR.EQ.1) THEN
          CALL MULFR8(NOMA19,NPIVOT,NEQ,TYPSYM,EPS,RENUM)
        ELSE IF (TYPVAR.EQ.2) THEN
          CALL MLFC16(NOMA19,NPIVOT,NEQ,TYPSYM,EPS,RENUM)
        END IF

      END IF


C     -- CALCUL DE NPVNEG :
C     ---------------------
      IF (NPIVOT.LT.0) THEN
        NPVNEG = NPIVOT
      ELSE
        NPVNEG = 0
      END IF


C     -- CALCUL DU CODE RETOUR: IRET,NDECI ET ISINGU :
C     ------------------------------------------------
      IF (NPIVOT.GT.0) THEN
        IRET = 2
        NDECI = 9999
        ISINGU = NPIVOT
      ELSE

C     -- ON REGARDE CE QUE SONT DEVENUS LES TERMES DIAGONAUX :
C     -------------------------------------------------------
        CALL JEVEUO(NOMA19//'.DIGS','L',JDIGS)
        DMAX = 0.D0
        DMIN = R8MAEM()
        NZERO=0
        DO 10 IEQ = ILDEB,ILFIN1
          IF (TYPVAR.EQ.1) THEN
            D1 = ABS(ZR(JDIGS-1+IEQ)/ZR(JDIGS+NEQ-1+IEQ))
          ELSE
            D1 = ABS(ZC(JDIGS-1+IEQ)/ZC(JDIGS+NEQ-1+IEQ))
          ENDIF
          IF (D1.GT.DMAX) THEN
            DMAX = D1
            IEQ3 = IEQ
          END IF
          IF (D1.EQ.0.D0) THEN
            NZERO=NZERO+1
          ELSE
            IF (D1.LT.DMIN) THEN
              DMIN = D1
              IEQ4 = IEQ
            END IF
          END IF
   10   CONTINUE
        CALL ASSERT(DMAX.GT.0)

        NDECI1 = INT(LOG10(DMAX))
        NDECI2 = INT(LOG10(1.D0/DMIN))

        NDECI=NDECI1
        ISINGU = IEQ3

        IF (NDECI.GE.NDIGI2) THEN
          IRET = 1
        ELSE
          IRET = 0
        END IF
      END IF



C     -- EMISSION EVENTUELLE D'UN MESSAGE D'ERREUR :
C     ----------------------------------------------
      IF (ISTOP.EQ.2) THEN
        GO TO 20
      ELSE IF (IRET.EQ.0) THEN
        GO TO 20
      ELSE IF (ISTOP.EQ.1) THEN
        IF (IRET.EQ.1) THEN
          CODMES = 'A'
        ELSE IF (IRET.EQ.2) THEN
          CODMES = 'F'
        ELSE
          CALL ASSERT(.FALSE.)
        END IF
      ELSE IF (ISTOP.EQ.0) THEN
        CODMES = 'F'
      END IF

      VALI(1)= ISINGU
      VALI(2)= NDECI
      IF (NU.EQ.' ') THEN
        IF (IRET.EQ.1) THEN
          CALL U2MESG(CODMES,'FACTOR_10',0,VALK,2,VALI,0,0.D0)
        ELSE IF (IRET.EQ.2) THEN
          CALL U2MESG(CODMES,'FACTOR_11',0,VALK,1,VALI,0,0.D0)
        ENDIF

      ELSE
        CALL RGNDAS('NUME_DDL',NU,ISINGU,NOMNO,NOMCMP,TARDIF,LIGREL,
     &              INFOBL)
          VALK(1)=NOMNO
          VALK(2)=NOMCMP
          VALK(3)=LIGREL
          VALK(4)=INFOBL

        IF (TARDIF(1:4).EQ.'    ') THEN
          IF (IRET.EQ.1) THEN
            CALL U2MESG(CODMES,'FACTOR_20',4,VALK,2,VALI,0,0.D0)
          ELSE IF (IRET.EQ.2) THEN
            CALL U2MESG(CODMES,'FACTOR_21',4,VALK,1,VALI,0,0.D0)
          ENDIF

        ELSE

C         -- SI C'EST UN NOEUD DE LAGRANGE D'UNE LIAISON_DDL
C            ON IMPRIME LES NOEUDS CONCERNES PAR LA LIAISON :
          LLIAI= INDEX(INFOBL,'LIAISON_DDL')
          IF (LLIAI.GT.0) THEN
             CALL IMPPIV(NU,ISINGU)
             IF (IRET.EQ.1) THEN
               CALL U2MESG(CODMES,'FACTOR_30',4,VALK,2,VALI,0,0.D0)
             ELSE IF (IRET.EQ.2) THEN
               CALL U2MESG(CODMES,'FACTOR_31',4,VALK,1,VALI,0,0.D0)
             ENDIF
          ELSE
             IF (IRET.EQ.1) THEN
               CALL U2MESG(CODMES,'FACTOR_40',4,VALK,2,VALI,0,0.D0)
             ELSE IF (IRET.EQ.2) THEN
               CALL U2MESG(CODMES,'FACTOR_41',4,VALK,1,VALI,0,0.D0)
             ENDIF
          END IF
        END IF
      END IF


C     -- IMPRESSIONS INFO=2 :
C     ------------------------
   20 CONTINUE

      IF (NIV.EQ.2) THEN
        WRITE (IFM,*) '<FACTOR> APRES FACTORISATION :'
        IF (NZERO.GT.0) THEN
          WRITE(6,*) '<FACTOR> MATRICE NON DEFINIE POSITIVE.'
          WRITE(6,*) '<FACTOR> IL EXISTE ',NZERO,
     &               ' ZEROS SUR LA DIAGONALE.'
        END IF
        WRITE (IFM,*) '<FACTOR>  NB MAX. DECIMALES A PERDRE :',NDIGI2
        WRITE (IFM,*) '<FACTOR>  NB DECIMALES PERDUES       :',NDECI
        WRITE (IFM,*) '<FACTOR>  NUM. EQUATION LA PIRE      :',ISINGU
        WRITE (IFM,*) '<FACTOR>  NOMBRE PIVOTS NEGATIFS     :',-NPVNEG
        WRITE (IFM,*) '<FACTOR>  CODE ARRET (ISTOP)         :',ISTOP
        WRITE (IFM,*) '<FACTOR>  CODE RETOUR (IRET)         :',IRET

C     -- ALARME EVENTUELLE SI LE PIVOT DEVIENT TROP GRAND :
      IF (NDECI2.GE.NDIGI2) THEN
        ISINGU = IEQ4
        WRITE(IFM,*) '<FACTOR> PROBLEME FACTORISATION.'
        WRITE(IFM,*) '<FACTOR> LE PIVOT DEVIENT TRES GRAND',
     &     ' A LA LIGNE:',ISINGU
        WRITE(IFM,*) '<FACTOR> NOMBRE DE DECIMALES PERDUES:',
     &     NDECI2
        CALL DISMOI('F','NOM_NUME_DDL',NOMA19,'MATR_ASSE',IBID,NU,IBID)
        IF (NU.NE.' ') THEN
          CALL RGNDAS('NUME_DDL',NU,ISINGU,NOMNO,NOMCMP,TARDIF,LIGREL,
     &            INFOBL)
        WRITE(IFM,*) '<FACTOR> NOEUD:',NOMNO,' CMP:',NOMCMP
        END IF
      END IF
      END IF

      CALL JEDEMA()

      END
