      SUBROUTINE VP2TRU(METHOD,TY,ALPHA,BETA,SIGNES,A,NBVECT,W,Z,WK,
     &                  MXITER,IER,NITQR)
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER*1       TY
      CHARACTER*8       METHOD
      INTEGER           NBVECT,MXITER,IER,NITQR
      INTEGER VALI
      REAL*8            ALPHA(NBVECT),BETA(NBVECT),SIGNES(NBVECT)
      REAL*8            A(NBVECT,*),W(*),Z(*),WK(*)
      REAL*8 VALR(2)
C     ------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGELINE  DATE 03/08/2009   AUTEUR MEUNIER S.MEUNIER 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C     EXTENSION DE LA METHODE DE LANCZOS POUR TRIDIAGONALISER UN
C     FAISCEAU DE MATRICE INDEFINI
C     ------------------------------------------------------------------
C IN  METHOD : K8 : METHODE DE RESOLUTION
C         SI 'TRI_DIAG' : A EST CONSTRUITE A PARTIR DE ALPHA,BETA,SIGNES
C         SI 'ARNOLDI'  : A EST DEJA CONSTRUITE
C IN  TY : K1 : TYPE DE PROBLEME TRAITE A L'ORIGINE
C               'G' GENERALISE  ==> ELEMENTS PROPRES REELS
C               'Q' QUADRATIQUE ==> ELEMENTS PROPRES COMPLEXES
C IN  ALPHA : DIAGONALE DE LA MATRICE TRIDIAGONALE ('TRI_DIAG')
C IN  BETA  : SURDIAGONALE DE LA MATRICE TRIDIAGONALE ('TRI_DIAG')
C IN SIGNES:SIGNE POUR PASSER DE LA SUR A LA SOUS DIAGONALE('TRI_DIAG')
C OUT W : C : VALEURS PROPRES DU SYSTEME
C OUT ALPHA : R : PARTIE REELLE DES VALEURS PROPRES DU SYSTEME
C OUT BETA  : R : PARTIE IMAGINAIRE DES VALEURS PROPRES DU SYSTEME
C OUT Z : C : VECTEURS PROPRES DU SYSTEME
C OUT NITQR : NOMBRE D'ITERATIONS QR POUT ATTEIENDRE LA CONVERGENCE
C
C     ------------------------------------------------------------------
C
      IF (METHOD.EQ.'TRI_DIAG') THEN
        CALL MATINI(NBVECT,NBVECT,0.D0,A)
        A(1,1) = SIGNES(1) * ALPHA(1)
        A(1,2) = SIGNES(1) * BETA(2)
        DO 20 I = 2,NBVECT - 1
           A(I,I-1) = SIGNES(I) * BETA(I)
           A(I,I)   = SIGNES(I) * ALPHA(I)
           A(I,I+1) = SIGNES(I) * BETA(I+1)
   20   CONTINUE
        A(NBVECT,NBVECT-1) = SIGNES(NBVECT) * BETA(NBVECT)
        A(NBVECT,NBVECT)   = SIGNES(NBVECT) * ALPHA(NBVECT)
      ENDIF
C
      IVAL1 = 1
      IER = 0
      CALL VPHQRP(A,NBVECT,NBVECT,IVAL1,W,Z,NBVECT,WK,MXITER,IER,NITQR)
      IF (IER .NE. 0) THEN
         CALL U2MESS('F','ALGELINE3_57')
      ENDIF
C
      IF (TY .EQ. 'G' ) THEN
         DO 30 I = 1,NBVECT
            ALPHA(I) = W(2*I-1)
            IF (ABS(W(2*I)).GT.1.D-75) THEN
               WW = W(2*I)/W(2*I-1)
               VALI = I
               VALR (1) = W(2*I-1)
               VALR (2) = WW
               CALL U2MESG('I', 'ALGELINE4_65',0,' ',1,VALI,2,VALR)
            ENDIF
            BETA(I) = 0.D0
            DO 30 J = 1,NBVECT
               A(I,J) = Z(2*NBVECT* (J-1)+2*I-1)
   30    CONTINUE
      ELSE
         DO 40 I = 1,NBVECT
            ALPHA(I) = W(2*I)
            BETA (I) = W(2*I-1)
   40    CONTINUE
      ENDIF
C
      END
