      SUBROUTINE MLTPRE(NU,BASE,RENUM)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGELINE  DATE 23/01/2006   AUTEUR MABBAS M.ABBAS 
C RESPONSABLE JFBHHUC C.ROSE
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
      IMPLICIT NONE
      CHARACTER*(*) NU,RENUM
      CHARACTER*1 BASE
      CHARACTER*14 NUZ
      INTEGER NEC,IBID,IERD,I,ICOL
      CHARACTER*8 KBID,NOMGD
      CHARACTER*32 JEXNUM
      INTEGER IADIA,IHCOL,IABLO,IDELG,IDEEQ,IPRNO,DIAG,INUEQ
      INTEGER LGADJN,ADJNC1,ADJNC2,DESC
      INTEGER SUPND,ANC,NOUV,FILS,FRERE,LGSN,LFRONT,NBASS
      INTEGER DEBFSN,ADPILE,ADRESS,NBLIGN,LGBLOC,NCBLOC,LBD1,LBD2,RL
      INTEGER RL1,RL2,XADJ1,XADJ2,SEQ,PAREND,SUPND2,TRAV1,TRAV2
      INTEGER TRAV3,TRAV4,P,Q,INVP,PERM,INVSUP
      INTEGER LMAT,LGIND,GLOBAL,LOCAL,DECAL
      INTEGER MRL,INO,NBSN,IDDL,NBLOC,NEQ,NRL,LGPILE
      INTEGER N2,LT,LGLIST,DEB,VOIS,SUIT,GLOBA,LOCA
      INTEGER IRET,OPTNUM,IER,JRENU
      INTEGER NOEUD, DDL, PERMND, INVPND,SPNDND,DDLMOY,XADJD
C     ----- DEBUT COMMUNS NORMALISES  JEVEUX  --------------------------
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8,RENUM2
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     -----  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------
      CHARACTER*24 NOMLOC,NOMAD1,NOMAD2,NOMGLO,NOMADI
      CHARACTER*24 NOMDEB,NOMVOI,NOMSUI,NOPGLO,NOPLOC
      CHARACTER*24 NOMT01,NOMT02,NOMT04,NOMT05,NOMT06,NOMT07
      CHARACTER*24 NOMT08,NOMT12,NOMT13,NOMT14
      CHARACTER*24 NOMT15,NOMT16,NOMT17,NOMT18,NOMT19,NOMT20,NOMT21
      CHARACTER*24 NOMT22,NOMT23,NOMT24,NOMT25,NOMT26,NOMT27
      CHARACTER*24 NOMP01,NOMP02,NOMP03,NOMP04,NOMP05,NOMP06,NOMP07
      CHARACTER*24 NOMP08,NOMP09,NOMP10,NOMP11,NOMP12,NOMP13
      CHARACTER*24 NOMP14,NOMP15,NOMP16,NOMP17,NOMP18,NOMP19,NOMP20
      DATA NOMGLO/'              .MLTF.GLOB'/
      DATA NOMLOC/'              .MLTF.LOCL'/
      DATA NOMADI/'              .MLTF.ADNT'/
      DATA NOPGLO/'&&MLTPRE.NOMGLOBAL_PROV '/
      DATA NOPLOC/'&&MLTPRE.NOM_LOCAL_PROV '/
      DATA NOMAD1/'&&MLTPRE.ADJNC1    .    '/
      DATA NOMAD2/'&&MLTPRE.ADJNC2    .    '/
      DATA NOMDEB/'&&MLTPRE.DEBUT___VOISINS'/
      DATA NOMVOI/'&&MLTPRE.LISTE___VOISINS'/
      DATA NOMSUI/'&&MLTPRE.SUITE___VOISINS'/
C     DATA NOMCOL/'&&MLTPRE.TABLEAU_COLONNE'/
      DATA NOMT01/'&&MLTPRE.POINTEUR_TEMP01'/
      DATA NOMT02/'&&MLTPRE.POINTEUR_TEMP02'/
      DATA NOMT04/'&&MLTPRE.POINTEUR_TEMP04'/
      DATA NOMT05/'&&MLTPRE.POINTEUR_TEMP05'/
      DATA NOMT06/'&&MLTPRE.POINTEUR_TEMP06'/
      DATA NOMT07/'&&MLTPRE.POINTEUR_TEMP07'/
      DATA NOMT08/'&&MLTPRE.POINTEUR_TEMP08'/
      DATA NOMT12/'&&MLTPRE.POINTEUR_TEMP12'/
      DATA NOMT13/'&&MLTPRE.POINTEUR_TEMP13'/
      DATA NOMT14/'&&MLTPRE.POINTEUR_TEMP14'/
      DATA NOMT15/'&&MLTPRE.POINTEUR_TEMP15'/
      DATA NOMT16/'&&MLTPRE.POINTEUR_TEMP16'/
      DATA NOMT17/'&&MLTPRE.POINTEUR_TEMP17'/
      DATA NOMT18/'&&MLTPRE.POINTEUR_TEMP18'/
      DATA NOMT19/'&&MLTPRE.POINTEUR_TEMP19'/
      DATA NOMT20/'&&MLTPRE.POINTEUR_TEMP20'/
      DATA NOMT21/'&&MLTPRE.POINTEUR_TEMP21'/
      DATA NOMT22/'&&MLTPRE.POINTEUR_TEMP22'/
      DATA NOMT23/'&&MLTPRE.POINTEUR_TEMP23'/
      DATA NOMT24/'&&MLTPRE.POINTEUR_TEMP24'/
      DATA NOMT25/'&&MLTPRE.POINTEUR_TEMP25'/
      DATA NOMT26/'&&MLTPRE.POINTEUR_TEMP26'/
      DATA NOMT27/'&&MLTPRE.POINTEUR_TEMP27'/
      CALL JEMARQ()
      NUZ = NU

      CALL WKVECT(NUZ//'.MLTF.RENU',BASE//' V K8',1,JRENU)
      ZK8(JRENU) = RENUM

      CALL MLNMIN(NUZ,NOMP01,NOMP02,NOMP03,NOMP04,NOMP05,NOMP06,NOMP07,
     &            NOMP08,NOMP09,NOMP10,NOMP11,NOMP12,NOMP13,NOMP14,
     &            NOMP15,NOMP16,NOMP17,NOMP18,NOMP19,NOMP20)
      NOMGLO(1:14) = NU(1:14)
      NOMLOC(1:14) = NU(1:14)
      NOMADI(1:14) = NU(1:14)

      CALL JEEXIN(NOMGLO,IRET)
      IF (IRET.NE.0) CALL JEDETR(NOMGLO)
      CALL JEEXIN(NOMLOC,IRET)
      IF (IRET.NE.0) CALL JEDETR(NOMLOC)
      CALL JEEXIN(NOPGLO,IRET)
      IF (IRET.NE.0) CALL JEDETR(NOPGLO)
      CALL JEEXIN(NOPLOC,IRET)
      IF (IRET.NE.0) CALL JEDETR(NOPLOC)

      CALL JEVEUO(NUZ(1:14)//'.NUME.DELG','L',IDELG)
      CALL JEVEUO(NUZ(1:14)//'.NUME.DEEQ','L',IDEEQ)
      CALL JEVEUO(NUZ(1:14)//'.NUME.NUEQ','L',INUEQ)
      CALL JEVEUO(JEXNUM(NUZ(1:14)//'.NUME.PRNO',1),'L',IPRNO)
      CALL JEVEUO(NUZ(1:14)//'.SMOS.HCOL','L',ICOL)
      CALL JEVEUO(NUZ(1:14)//'.SMOS.ADIA','L',IADIA)
      CALL JEVEUO(NUZ(1:14)//'.SMOS.ABLO','L',IABLO)

      NEQ = ZI(IABLO+1)
      CALL JELIBE(NUZ(1:14)//'.SMOS.ABLO')
      DO 10 I = 1,NEQ
        IF (ZI(INUEQ+I-1).NE.I) THEN
          CALL UTDEBM('F','LA NUMEROTATION DEFINIE ',
     &                'PAR NUEQ N''EST PAS L''IDENTITE.')
          CALL UTIMPI('L','INDICE',1,I)
          CALL UTIMPI('L','NUEQ ',1,ZI(INUEQ+I-1))
          CALL UTFINM()
        END IF
   10 CONTINUE
      CALL JELIBE(NUZ(1:14)//'.NUME.NUEQ')
      LMAT = ZI(IADIA+NEQ-1)
C     LA STRUCTURE NOMADI A LA LONGUEUR EXACTE: LMAT
C     ET N' EST PAS SURDIMENSIONNEE COMME SMOS.IHCOL
      CALL WKVECT(NOMADI,BASE//' V I ',LMAT,IHCOL)
      DO 20 I = 0,LMAT - 1
        ZI(IHCOL+I) = ZI(ICOL+I)
   20 CONTINUE
      CALL JELIBE(NUZ(1:14)//'.SMOS.HCOL')


C     CALCUL DE MRL, NBRE MAXIMUM DE RELATIONS LINEAIRES
C     SERT A DIMENSIONNER AU PLUS JUSTE LE TABLEAU RL
      MRL = 1
      DO 30 IDDL = 1,NEQ
        IF (ZI(IDELG+IDDL-1).NE.0) THEN
          INO = ZI(IDEEQ+2* (IDDL-1))
          IF (INO.EQ.0) MRL = MRL + 1
        END IF

   30 CONTINUE

C     OBTENTION DE NEC
      CALL DISMOI('F','NOM_GD',NUZ(1:14),'NUME_DDL',IBID,NOMGD,IERD)
      CALL DISMOI('F','NB_EC',NOMGD,'GRANDEUR',NEC,KBID,IERD)

      CALL WKVECT(NOMP01,BASE//' V I ',5,DESC)
      CALL WKVECT(NOMP02,BASE//' V I ',NEQ+1,DIAG)
C     COPIE DE ADIA DANS DIAG
      DO 40 I = 1,NEQ
        ZI(DIAG+I) = ZI(IADIA+I-1)
   40 CONTINUE
      CALL JELIBE(NUZ(1:14)//'.SMOS.ADIA')
      ZI(DIAG) = 0


      CALL WKVECT(NOMT12,' V V I ',NEQ,P)
      CALL WKVECT(NOMT13,' V V I ',NEQ,Q)
C     ALLOCATION POUR LES CONDITIONS AUX LIMITES (DOUBLES LAGRANGES)
      CALL WKVECT(NOMT17,' V V I ',NEQ,LBD1)
      CALL WKVECT(NOMT19,' V V I ',NEQ,RL1)
      CALL WKVECT(NOMT20,' V V I ',NEQ,RL2)
      CALL WKVECT(NOMT18,' V V I ',NEQ,LBD2)
      CALL WKVECT(NOMT21,' V V I ',4*MRL,RL)
C-----------------------------------------------------------------
C     PREML0 TRAITE LES CONDITIONS AUX LIMITES PAR DOUBLE LAGRANGE

C     DONNEES   :
C     DELG, DEEQ, PRNO

C     RESULTATS :
C     N2        : NBRE DE DDL HORS LAGRANGE
C     LBD1(1:NEQ): LISTE DES LAGRANGE1 DE BLOQUAGE
C     LBD2(1:NEQ): LISTE DES LAGRANGE2 DE BLOQUAGE
C     RL1(1:NEQ): LISTE DES LAGRANGE1 DE RELA.LINEAIRE
C     RL2(1:NEQ): LISTE DES LAGRANGE2 DE RELA.LINEAIRE
C     RL(1:4,1:NEQ): TAB. DE TRAVAIL DES RELA.LINEAIRES
C     P ET Q : CORRESPONDANCE  DES DDL NON LAGRANGE ENTRE
C     LA NUMEROTATION (1:NEQ) ET (1:N2)
C     NRL       : NBRE DE RELATIONS LINEAIRES ENTRE DDL
C     LT        : PLACE NECESSAIRE POUR STOCKER LES VOISINAGES
C     SUPPLEMENTAIRES INDUITS PAR LES RELA. LINEAIRES
C------------------------------------------------------------

      CALL PREML0(NEQ,N2,ZI(DIAG),ZI(IHCOL),ZI(IDELG),ZI(IPRNO),
     &            ZI(IDEEQ),NEC,ZI(P),ZI(Q),ZI(LBD1),ZI(LBD2),ZI(RL),
     &            ZI(RL1),ZI(RL2),NRL,LT,LMAT)

      LGLIST = 1
      IER = 0
      IF (NRL.NE.0) LGLIST = LT
      CALL WKVECT(NOMDEB,' V V I ',NEQ,DEB)
   50 CONTINUE
      CALL WKVECT(NOMVOI,' V V I ',LGLIST,VOIS)
      CALL WKVECT(NOMSUI,' V V I ',LGLIST,SUIT)

C     PREMLA FABRIQUE LA LISTE CHAINE :( DEB, VOIS, SUIT)
C     VOISINAGE DE TOUS LES DDL RELIES PAR UNE RELATION LINEAIRE

      CALL PREMLA(NEQ,ZI(DIAG),ZI(IHCOL),LGLIST,NRL,ZI(RL),ZI(DEB),
     &            ZI(VOIS),ZI(SUIT),IER)
      IF (IER.GT.0) THEN
        CALL JEDETR(NOMVOI)
        CALL JEDETR(NOMSUI)
        LGLIST = 2*LGLIST
        GO TO 50
      END IF
      LGLIST = -IER

C------------------------------------------------------------------
C     PREML1 1)
C     FABRIQUE LA STRUCTURE (XADJ2,ADJNC2) QUI EST LA
C     RESTRICTION DE ADJNC1 AUX DDL NON LAGRANGE (1:N2)
C     2) APPEL GENMMD OU AMDBAR MINIMUM DEGRE SIMPLE OU
C     APPROXIMATE
C     DONNEES

C     DIAG, COL, DELG

C     RESULTATS

C     INVP, PERM : RENUMEROTATION DU MINIMUM DEGREE
C     SEQ (ALIAS PARENT)  : ARBORESCENCE
C     ADRESS     : POINTEURS POUR FACTORISATION SYMBOLIQUE
C     LGIND      : LONGUEUR DE TABLEAU POUR LA FACT. SYMB.
C     SUPND2(1:NBSN): DEFINITION DES SUPER-NOEUDS

C     TABLEAU DE TRAVAIL :
C     ADJNC2   : DETRUIT APRES PREML1
C     TRAV1,TRAV2,TRAV3,TRAV4

      CALL WKVECT(NOMP03,BASE//' V I ',NEQ+1,ADRESS)
      LGADJN = 2* (LMAT-NEQ)
   60 CONTINUE
      IF (NRL.NE.0) LGADJN = LGADJN + 2*LGLIST
C     NRL EST LE NOMBRE DE RELATIONS LINEAIRES ENTRE DDL
C     ON REND ARTIFICIELLEMENT UN LIEN ENTRE TOUS CES DL
C     IL SONT RANGES DANS UNE LISTE CHAINE ( DEB, VOIS,SUIT)
C     DE LONGUEUR LGLIST CALCULEE PAR PREMLA


C     OPTNUM =0 INDIQUE L'APPEL A GENMMD
C     OPTNUM =1 APPEL A AMDBAR : APPROXIMATE MINIMUM  DEGREE
C     OPTNUM =2 APPEL A METIS : MULTI LEVEL BISSECTION
      IF (RENUM.EQ.'MDA') THEN
        OPTNUM = 1
      ELSE IF (RENUM.EQ.'MD') THEN
        OPTNUM = 0
      ELSE IF (RENUM.EQ.'METIS') THEN
        OPTNUM = 2
      ELSE
        RENUM2 = RENUM
        CALL UTMESS('F','MLTPRE',' LA RENUMEROTATION '//RENUM2//
     &              ' EST INCOMPATIBLE AVEC LE SOLVEUR '//
     &              'MULTI_FRONTAL.')
      END IF
      IF (OPTNUM.EQ.1) THEN
C     POUR AMDBAR ON AUGMENTE LA LONGUEUR DE ADJNC2
        LGADJN = LGADJN + 2*NEQ
      END IF
      CALL WKVECT(NOMAD2,' V V I ',LGADJN,ADJNC2)

      DO 70 I = 0,LGADJN - 1
        ZI(I+ADJNC2) = 0
   70 CONTINUE
      CALL WKVECT(NOMP20,BASE//' V I ',NEQ,SEQ)
      CALL WKVECT(NOMT04,' V V I ', (NEQ+1),SUPND2)
      CALL WKVECT(NOMT14,' V V I ',NEQ,INVP)
      CALL WKVECT(NOMT15,' V V I ',NEQ,PERM)
      CALL WKVECT(NOMT02,' V V I ', (NEQ+1),XADJ2)
      CALL WKVECT(NOMT05,' V V I ', (NEQ+1),TRAV1)
      CALL WKVECT(NOMT06,' V V I ',NEQ,TRAV2)
      CALL WKVECT(NOMT07,' V V I ',NEQ,TRAV3)
      CALL WKVECT(NOMT08,' V V I ',NEQ,TRAV4)
      CALL WKVECT(NOMT16,' V V I ',NEQ,INVSUP)
C ALLOCATIONS SUPPLEMENTAIRES POUR LA RENUMEROTATION PAR NOEUDS
      CALL WKVECT(NOMT26,' V V I ',NEQ,NOEUD)
      CALL WKVECT(NOMT22,' V V I ',NEQ,DDL)
      CALL WKVECT(NOMT23,' V V I ',NEQ,INVPND)
      CALL WKVECT(NOMT24,' V V I ',NEQ,PERMND)
      CALL WKVECT(NOMT25,' V V I ',NEQ,SPNDND)
      CALL WKVECT(NOMT27,' V V I ',NEQ,XADJD)
C
      CALL PREML1( NEQ,N2,
     &            ZI(DIAG),ZI(IDELG),ZI(IHCOL),ZI(XADJ2),ZI(ADJNC2),
     &            ZI(SEQ),ZI(ADRESS),ZI(SUPND2),ZI(TRAV1),
     &            ZI(TRAV2),ZI(TRAV3),ZI(TRAV4),ZI(P),ZI(Q),ZI(INVP),
     &            ZI(PERM),LGIND,DDLMOY,NBSN,OPTNUM,LGADJN,
     &            NRL,ZI(DEB),ZI(VOIS),ZI(SUIT),IER,NEC,ZI(IPRNO),
     &            ZI(IDEEQ),ZI(NOEUD),ZI(DDL),ZI(INVPND),ZI(PERMND),
     &            ZI(SPNDND),ZI(XADJD))
      CALL JEDETR(NOMT25)
      CALL JEDETR(NOMT22)
      CALL JEDETR(NOMT23)
      CALL JEDETR(NOMT24)
      CALL JEDETR(NOMT26)
      CALL JEDETR(NOMT27)
      CALL JELIBE(NUZ(1:14)//'.NUME.PRNO')
      CALL JELIBE(NUZ(1:14)//'.NUME.DEEQ')
      CALL JEDETR(NOMAD2)
      IF (IER.GT.0) THEN
        LGADJN = IER
        GO TO 60
      END IF
      CALL JEDETR(NOMT02)
      CALL JELIBE(NOMDEB)
      CALL JELIBE(NOMVOI)
      CALL JELIBE(NOMSUI)
C----------------------------------------------------------------
C     PREMLC TERMINE LA NOUVELLE LA NOUVELLE NUMEROTATION ISSUE
C     ------ DU MIN. DEGRE EN AJOUTANT LES LAMBDA DE LAGRANGE
C     EN RESPECTANT LES CONTRAINTES D ENCADREMENT


C     DONNEES : SEQ ( (ALIAS PARENT) INUTILE APRES) NOMT03
C     SUPND2 ( INUTILE APRES) NOMT04
C     P,Q    ( INUTILE APRES) NOMT12,NOMT13
C     INVP, PERM
C     LBD1,LBD2,RL,RL1, RL2
C     DONNEES MODIFIEES
C     LGIND LONGUEUR DE GLOBAL ET LOCAL ( CREES PAR PREML2)
C     RESULTATS
C     SUPND   : DEFINITION DEFINITIVE DES SUPER-NOEUDS
C     (SUPND2+LAMBDA)
C     PAREND  : ARBORESCENCE
C     NOUV, ANC : RENUMEROTATION ISSUE DU MD ENTRE TOUS LES DDL.
      CALL WKVECT(NOMP04,BASE//' V I ',NEQ+1,SUPND)
      CALL WKVECT(NOMP05,BASE//' V I ',NEQ,PAREND)
      CALL WKVECT(NOMP14,BASE//' V I ',NEQ,ANC)
      CALL WKVECT(NOMP19,BASE//' V I ',NEQ,NOUV)
      CALL PREMLC(NEQ,ZI(DIAG),ZI(IHCOL),ZI(SEQ),ZI(PAREND),ZI(ANC),
     &            ZI(NOUV),ZI(SUPND),ZI(SUPND2),ZI(TRAV1),ZI(TRAV4),
     &            ZI(P),ZI(Q),ZI(LBD1),ZI(LBD2),ZI(RL),ZI(RL1),ZI(RL2),
     &            NRL,ZI(INVP),ZI(PERM),LGIND,DDLMOY,NBSN)
      CALL JEDETR(NOMT15)
      CALL JEDETR(NOMT17)
      CALL JEDETR(NOMT18)
      CALL JEDETR(NOMT19)
      CALL JEDETR(NOMT20)
      CALL JEDETR(NOMT21)
C----------------------------------------------------------------
C     COEFFICIENT DE SECURITE POUR LGIND QUI SERA TESTE DANS FACSMB
C     AU FUR ET A MESURE DE LA FABRICATION DE GLOBAL ET LOCAL
C      LGIND = (LGIND*15)/10
      LGIND = MAX(LGIND,10000)


      CALL WKVECT(NOMT01,' V V I ', (NEQ+1),XADJ1)
      CALL WKVECT(NOMAD1,' V V I ',LGADJN,ADJNC1)
      CALL JEVEUO(NOMDEB,'L',DEB)
      CALL JEVEUO(NOMVOI,'L',VOIS)
      CALL JEVEUO(NOMSUI,'L',SUIT)
      DO 80 I = 0,LGADJN - 1
        ZI(I+ADJNC1) = 0
   80 CONTINUE
C---------------------------------------------------------------
C     PREMLD  APPELLE CALADJ QUI FABRIQUE ADJNC1
C     DONNEES
C     DIAG ,COL,RL,NRL

C     RESULTATS
C     XADJ1,ADJNC1: LISTE DES VOISINS DE CHAQUE DDL DE NO + PETIT
C     OU + GRAND
C     TAB. DE TRAVAIL
C     TRAV1,TRAV2 VOIS SUIV : SERVENT DE LISTE CHAINEE POUR AJOUTER
C     LES CONNEXIONS ENTRE DDL RELA. LINEAIRE
C-----------------------------------------------------------------
      CALL PREMLD(NEQ,ZI(DIAG),ZI(IHCOL),ZI(XADJ1),ZI(ADJNC1),
     &            ZI(TRAV1),ZI(DEB),ZI(VOIS),ZI(SUIT),LGADJN,NRL)

      CALL JELIBE(NOMDEB)
      CALL JELIBE(NOMVOI)
      CALL JELIBE(NOMSUI)

C----------------------------------------------------------
C     PREML2 APPELLE :
C     FACSMB : FACTORISATION SYMBOLIQUE
C     MLTPOS : RENUMEROTATION DE L ARBORESCENCE
C     MLTBLC : DECOUPAGE EN BLOCS DE LA FACTORISEE
C     MLTPAS : PLACE DES TERMES INITIAUX DANS LA FACTORISEE
C     QUI SERONT DANS NOMADI A LA PLACE DE COL


      CALL WKVECT(NOMP06,BASE//' V I ',NBSN,FILS)
      CALL WKVECT(NOMP07,BASE//' V I ',NBSN,FRERE)
      CALL WKVECT(NOMP08,BASE//' V I ',NBSN,LGSN)
      CALL WKVECT(NOMP09,BASE//' V I ',NBSN,LFRONT)
      CALL WKVECT(NOMP10,BASE//' V I ',NBSN,NBASS)
      CALL WKVECT(NOMP12,BASE//' V I ',NBSN+1,DEBFSN)
      CALL WKVECT(NOMP13,BASE//' V I ',NBSN,ADPILE)
      CALL WKVECT(NOMP15,BASE//' V I ',NBSN,NBLIGN)
      CALL WKVECT(NOMP16,BASE//' V I ',NBSN,LGBLOC)
      CALL WKVECT(NOMP17,BASE//' V I ',NBSN,NCBLOC)
      CALL WKVECT(NOMP18,BASE//' V I ',NBSN,DECAL)
   90 CONTINUE
      CALL WKVECT(NOPGLO,' V V I ',LGIND,GLOBAL)
      CALL WKVECT(NOPLOC,' V V I ',LGIND,LOCAL)
      CALL PREML2(NEQ,ZI(DIAG),ZI(IHCOL),ZI(IDELG),ZI(XADJ1),ZI(ADJNC1),
     &            LGPILE,ZI(ADRESS),ZI(PAREND),ZI(FILS),ZI(FRERE),
     &            ZI(ANC),ZI(NOUV),ZI(SUPND),ZI(TRAV1),ZI(TRAV2),
     &            ZI(TRAV3),ZI(TRAV4),ZI(INVSUP),ZI(LOCAL),ZI(GLOBAL),
     &            ZI(LFRONT),ZI(NBLIGN),ZI(DECAL),ZI(LGSN),ZI(SUPND2),
     &            ZI(DEBFSN),ZI(SEQ),LMAT,ZI(ADPILE),ZI(P),ZI(Q),
     &            ZI(INVP),ZI(NBASS),ZI(NCBLOC),ZI(LGBLOC),NBLOC,LGIND,
     &            NBSN,IER)

C      CALL JELIBE(NUZ(1:14)//'.NUME.DELG')

      IF (IER.NE.0) THEN
        CALL JEDETR(NOPGLO)
        CALL JEDETR(NOPLOC)
        LGIND = IER
        GO TO 90
      END IF
      CALL JELIBE(NOMADI)
      ZI(DESC) = NEQ
      ZI(DESC+1) = NBSN
      ZI(DESC+2) = NBLOC
      ZI(DESC+3) = LGPILE
      ZI(DESC+4) = LMAT

      CALL JELIBE(NOMP01)
      CALL JEDETR(NOMP02)
      CALL JEDETR(NOMAD1)
      CALL JEDETR(NOMT01)
      CALL JEDETR(NOMT05)
      CALL JEDETR(NOMT06)
      CALL JEDETR(NOMT07)
      CALL JEDETR(NOMT08)
      CALL JEDETR(NOMT16)
      CALL JEDETR(NOMT04)
      CALL JEDETR(NOMT12)
      CALL JEDETR(NOMT13)
      CALL JEDETR(NOMT14)
      CALL JEDETR(NOMDEB)
      CALL JEDETR(NOMVOI)
      CALL JEDETR(NOMSUI)
      CALL JEDETR(NOMP05)
      CALL JEDETR(NOMP12)

C     LGIND DEVIENT LA LONGUEUR REELLE DE GLOBAL ET LOCALS
C     ON RECOPIE GLOBAL ET LOCAL DANS NOMGLO ET NOMLOC
C     SUIVANT LEUR LONGUEUR EXACTE
      LGIND = ZI(ADRESS+NBSN) - 1
      CALL WKVECT(NOMGLO,BASE//' V I ',LGIND,GLOBA)
      CALL WKVECT(NOMLOC,BASE//' V I ',LGIND,LOCA)
      DO 100 I = 0,LGIND - 1
        ZI(GLOBA+I) = ZI(GLOBAL+I)
        ZI(LOCA+I) = ZI(LOCAL+I)
  100 CONTINUE
      CALL JEDETR(NOPGLO)
      CALL JEDETR(NOPLOC)
      CALL JELIBE(NOMGLO)
      CALL JELIBE(NOMLOC)
      CALL JELIBE(NOMP03)
      CALL JELIBE(NOMP04)
      CALL JELIBE(NOMP06)
      CALL JELIBE(NOMP07)
      CALL JELIBE(NOMP08)
      CALL JELIBE(NOMP09)
      CALL JELIBE(NOMP10)
      CALL JELIBE(NOMP13)
      CALL JELIBE(NOMP14)
      CALL JELIBE(NOMP15)
      CALL JELIBE(NOMP16)
      CALL JELIBE(NOMP17)
      CALL JELIBE(NOMP18)
      CALL JELIBE(NOMP19)
      CALL JELIBE(NOMP20)
C     CALL JEIMPM ( 'MESSAGE','FIN DE MLTPRE ')
      CALL JEDEMA()
      END
