      SUBROUTINE TLDLG2(LMAT,NPREC,NSTOC,NOMSOL)

      IMPLICIT NONE
C     ------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGELINE  DATE 08/03/2004   AUTEUR REZETTE C.REZETTE 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
C        RECHERCHE DE MODES DE CORPS RIGIDE PAR DECOMPOSITION DE GAUSS
C     ------------------------------------------------------------------
C          POUR LE PROBLEME AUX VALEURS PROPRES :
C                        (K) X = 0
C          LA MATRICE (K) EST REELLE SYMETRIQUE
C          LES VALEURS PROPRES ET LES VECTEURS PROPRES SONT REELS
C          ON DECOMPOSE (K) SOUS LA FORME
C                        (  KEE   KER  )
C                        (  TKER  KRR  )
C          AVEC DIM DE KRR = NOMBRE DE MODES DE CORPS RIGIDE DE (K)
C          ET KEE INVERSIBLE
C          LES MODES DE CORPS RIGIDE SONT LES VECTEURS DE LA MATRICE
C                   (  KEE(-1)KER  )
C                   (     -ID(R)    )
C          ET OBTENUS AVEC DES ROUTINES DEVELOPPPEES POUR TRAITER LES
C          BLOCAGES CINEMATIQUES
C     ------------------------------------------------------------------
C    IN: LMAT    DESCRIPTEUR DE LA MATRICE
C                DONT ON CHERCHE LES MODES RIGIDES
C    IN: NPREC  SI DIFFERENT DE 0,NIVEAU DE PERTE DE DECIMALES A PARTIR
C                DUQUEL ON CONSIDERE QU'UN PIVOT EST NUL.SI 0, CE SERA 8
C   OUT: NSTOC   NOMBRE DE MODES DE CORPS RIGIDE
C   OUT: NOMSOL  NOM DE LA MATRICE DES MODES DE CORPS RIGIDE

C --------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ---------------------
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     -----  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------

      CHARACTER*4 ETAMAT,ETAMAB
      CHARACTER*19 NOMA19,NOMB19,LIGREL,STOMAT,NOMSOL
      CHARACTER*14 NU
      CHARACTER*8 NOMNO,NOMCMP,TARDIF
      CHARACTER*40 INFOBL
      COMPLEX*16 CBID
      INTEGER LMAT,NPREC,NDECI,ISINGU
      INTEGER NOM,NEQ,TYPVAR,TYPSYM,TYPSTO,NBBLOC
      INTEGER LMATB,IADIAB,IABLOB,IHCOLB,IDREFB,IBDIGS
      INTEGER IDREFE
      INTEGER NDIGI2,NSTOC,NPIVOT
      INTEGER IFM,NIV,PASS
      INTEGER I,IEQ,J,JEQ,ILIS
      INTEGER IOUIA
      REAL*8 EPS,EPSB,DMAX,D1
      INTEGER IBID
      INTEGER LXSOL,LSMB,LCINE,LCONI

C     ------------------------------------------------------------------
      CALL JEMARQ()


CC                EXTRACTION DES DONNEES DE LA MATRICE LMAT

      NOM = ZI(LMAT+1)
      NEQ = ZI(LMAT+2)
      TYPVAR = ZI(LMAT+3)
      TYPSYM = ZI(LMAT+4)
      TYPSTO = ZI(LMAT+6)
      NOMA19 = ZK24(NOM) (1:19)
      NBBLOC = ZI(LMAT+13)
      CALL JEVEUO(NOMA19//'.REFA','L',IDREFE)
      STOMAT = ZK24(IDREFE+2)

      CALL INFNIV(IFM,NIV)

      WRITE (IFM,*) 'RECHERCHE DE MODES RIGIDES DE LA MATRICE :',NOMA19
      WRITE (IFM,*) 'DESCRIPTION DE LA MATRICE ',NOMA19,':'
      IF (TYPSYM.EQ.1) WRITE (IFM,*) ' MATRICE SYMETRIQUE'
      IF (TYPSYM.EQ.0) WRITE (IFM,*) ' MATRICE NON-SYMETRIQUE'
      IF (TYPVAR.EQ.1) WRITE (IFM,*) ' MATRICE REELLE'
      IF (TYPVAR.EQ.2) WRITE (IFM,*) ' MATRICE COMPLEXE'
      IF (TYPSTO.EQ.1) WRITE (IFM,*) ' METHODE LDLT'
      IF (TYPSTO.EQ.2) WRITE (IFM,*) ' METHODE MULT_FRONT'
      CALL JELIRA(NOMA19//'.REFA','DOCU',IBID,ETAMAT)
      IF (ETAMAT.EQ.'DECP' .OR. ETAMAT.EQ.'DECT') THEN
        CALL UTMESS('F','TLDLG2','PAS DE DECOMPOSITION CAR '//
     &              'LA MATRICE EST DEJA DECOMPOSEE.')
        GO TO 110
      END IF

C                 PERTE DE DECIMALES POUR LAQUELLE ON
C                 CONSIDERE LE PIVOT NUL. DEFAUT: 8

      IF (NPREC.EQ.0) THEN
        NDIGI2 = 8
      ELSE
        NDIGI2 = NPREC
      END IF

      NSTOC = 0

CC    CE VECTEUR CONTIENDRA DES 0,ET LE NUMERO,LA OU ON A BLOQUE

      CALL WKVECT('&&POSMODRI','V V I ',NEQ,IOUIA)

CC               CREATION DE LA MATRICE TAMPON

      NOMB19 = '&&TLDLG2_COPIEMATA '
      CALL COPISD('MATR_ASSE','V',NOMA19,NOMB19)
      CALL MTDSCR(NOMB19)
      CALL JEVEUO(NOMB19//'.REFA','E',IDREFB)
      CALL JEVEUO(NOMB19//'.&INT','E',LMATB)
      CALL MTDSC2(ZK24(ZI(LMATB+1)),'ADIA','L',IADIAB)
      CALL MTDSC2(ZK24(ZI(LMATB+1)),'ABLO','L',IABLOB)
      CALL JEVEUO(ZK24(IDREFB+2) (1:19)//'.HCOL','L',IHCOLB)
C       CREATION DE L'OBJET .DIGS: DIAGONALE AVANT ET APRES
      CALL DIAGAV(NOMB19,NEQ,TYPVAR,TYPSTO,EPSB)
      CALL JEVEUO(NOMB19//'.DIGS','L',IBDIGS)


CC                RECHERCHE DES PIVOTS NULS

      IF (TYPSTO.EQ.1) THEN

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                            LDLT                            C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        IF (TYPVAR.EQ.1) THEN
          IF (TYPSYM.EQ.1) THEN
C          DEBUT BOUCLE: TANT QUE 'IL EXISTE PIVOT NUL'
   10       CONTINUE
            PASS = 0
C          FACTORISATION DE B (LDLT REELLE SYMETRIQUE)
            CALL TLDLR8(NOMB19,ZI(IHCOLB),ZI(IADIAB),ZI(IABLOB),NPIVOT,
     &                  NEQ,NBBLOC,1,NEQ,EPSB)

CC        DEBUT TEST PIVOT VRAIMENT NUL

            IF (NPIVOT.GE.1) THEN
              ISINGU = NPIVOT
              WRITE (IFM,*) 'PIVOT VRAIMENT NUL A LA LIGNE ',ISINGU
              CALL DISMOI('F','NOM_NUME_DDL',NOMA19,'MATR_ASSE',IBID,NU,
     &                    IBID)
              IF (NU.NE.' ') THEN
                CALL RGNDAS('NUME_DDL',NU,ISINGU,NOMNO,NOMCMP,TARDIF,
     &                      LIGREL,INFOBL)
                WRITE (IFM,*) '<NOEUD> ',NOMNO,' <CMP> ',NOMCMP
              ELSE
                CALL UTMESS('A','TLDLG2','NOM_NUME_DDL '//NOMA19//
     &                      ' NON TROUVE')
              END IF
CC      FIN EXTRACTION DE RENSEIGNEMENTS SUR DDL DU PIVOT NUL
              PASS = 1
              NSTOC = NSTOC + 1
              ZI(IOUIA-1+ISINGU) = NSTOC
              GO TO 30
            END IF

CC        FIN TEST PIVOT VRAIMENT NUL

CC        DEBUT BOUCLE TESTS Q-NULLITE DE PIVOT

            DO 20 IEQ = 1,NEQ
              D1 = ZR(IBDIGS-1+IEQ)/ZR(IBDIGS+NEQ-1+IEQ)
              IF (D1.GT.0) THEN
                NDECI = INT(LOG10(D1))
                ISINGU = IEQ
              ELSE
                NDECI = 0
              END IF
C         DEBUT TEST NULLITE DE PIVOT
              IF (NDECI.GE.NDIGI2) THEN

CC       EXTRACTION DE RENSEIGNEMENTS SUR DDL DU PIVOT NUL

                WRITE (IFM,*) 'PIVOT QUASIMENT NUL A LA LIGNE ',ISINGU
                WRITE (IFM,*) 'NOMBRE DE DECIMALES PERDUES : ',NDECI
                CALL DISMOI('F','NOM_NUME_DDL',NOMA19,'MATR_ASSE',IBID,
     &                      NU,IBID)
                IF (NU.NE.' ') THEN
                  CALL RGNDAS('NUME_DDL',NU,ISINGU,NOMNO,NOMCMP,TARDIF,
     &                        LIGREL,INFOBL)
                  WRITE (IFM,*) '<NOEUD> ',NOMNO,' <CMP> ',NOMCMP
                ELSE
                  CALL UTMESS('A','TLDLG2','NOM_NUME_DDL '//NOMA19//
     &                        ' NON TROUVE')
                END IF

CC       FIN EXTRACTION DE RENSEIGNEMENTS SUR DDL DU PIVOT NUL

                PASS = 1
                NSTOC = NSTOC + 1
                ZI(IOUIA-1+ISINGU) = NSTOC
              END IF

CC        FIN TEST DE NULLITE DU PIVOT

CC        FIN BOUCLE TESTS DE Q-NULLITE DU PIVOT

   20       CONTINUE

            IF (PASS.NE.0) THEN
              GO TO 30
            ELSE
              GO TO 40
            END IF

   30       CONTINUE

CC     REINITIALISATION DE B

            CALL DETRSD('MATR_ASSE',NOMB19)
            CALL JEDETC(' ',NOMB19//'.DIGS',1)
C        DESTRUCTION DE .DIGS PAS FAIT DANS DETRSD!
            NOMB19 = '&&TLDLG2_COPIEMATA '
            CALL COPISD('MATR_ASSE','V',NOMA19,NOMB19)
            CALL MTDSCR(NOMB19)
            CALL JEVEUO(NOMB19//'.REFA','E',IDREFB)
            CALL JEVEUO(NOMB19//'.&INT','E',LMATB)
            CALL MTDSC2(ZK24(ZI(LMATB+1)),'ADIA','L',IADIAB)
            CALL MTDSC2(ZK24(ZI(LMATB+1)),'ABLO','L',IABLOB)
            CALL JEVEUO(ZK24(IDREFB+2) (1:19)//'.HCOL','L',IHCOLB)
C       BLOCAGE 'CINEMATIQUE' DU/DES DDL A PIVOT NUL
            CALL ASLCHC('V',NOMB19,ZI(IOUIA),NSTOC,'ZERO')
            CALL DIAGAV(NOMB19,NEQ,TYPVAR,TYPSTO,EPSB)
            CALL JEVEUO(NOMB19//'.DIGS','L',IBDIGS)
            GO TO 10
   40       CONTINUE


CC   ON NE FONCTIONNE QU'AVEC DES MATRICES SYMETRIQUES REELLES

          ELSE
            CALL UTMESS('F','TLDLG2','MATRICE NON SYMETRIQUE')
          END IF
        ELSE
          CALL UTMESS('F','TLDLG2','MATRICE NON REELLE')
        END IF

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                    MULTIFRONTALE                         C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      ELSE IF (TYPSTO.EQ.2) THEN
        IF (TYPVAR.EQ.1) THEN
          IF (TYPSYM.EQ.1) THEN
C          DEBUT BOUCLE: TANT QUE 'IL EXISTE PIVOT NUL'
   50       CONTINUE
            PASS = 0
C          FACTORISATION DE B
            CALL MULFR8(NOMB19,NPIVOT,NEQ,TYPSYM,EPSB)

CC        DEBUT TEST PIVOT VRAIMENT NUL

            IF (NPIVOT.GE.1) THEN
              ISINGU = NPIVOT
              WRITE (IFM,*) 'PIVOT VRAIMENT NUL A LA LIGNE ',ISINGU
              CALL DISMOI('F','NOM_NUME_DDL',NOMA19,'MATR_ASSE',IBID,NU,
     &                    IBID)
              IF (NU.NE.' ') THEN
                CALL RGNDAS('NUME_DDL',NU,ISINGU,NOMNO,NOMCMP,TARDIF,
     &                      LIGREL,INFOBL)
                WRITE (IFM,*) '<NOEUD> ',NOMNO,' <CMP> ',NOMCMP
              ELSE
                CALL UTMESS('A','TLDLG2','NOM_NUME_DDL '//NOMA19//
     &                      ' NON TROUVE')
              END IF
CC      FIN EXTRACTION DE RENSEIGNEMENTS SUR DDL DU PIVOT NUL
              PASS = 1
              NSTOC = NSTOC + 1
              ZI(IOUIA-1+ISINGU) = NSTOC
            END IF

CC        FIN TEST PIVOT VRAIMENT NUL

CC        DEBUT BOUCLE TESTS Q-NULLITE DE PIVOT

            DO 60 IEQ = 1,NEQ

              D1 = ZR(IBDIGS-1+IEQ)/ZR(IBDIGS+NEQ-1+IEQ)
              IF (D1.GT.0) THEN
                NDECI = INT(LOG10(D1))
                ISINGU = IEQ
              ELSE
                NDECI = 0
              END IF
C           DEBUT TEST NULLITE DE PIVOT
              IF (NDECI.GE.NDIGI2) THEN

CC       EXTRACTION DE RENSEIGNEMENTS SUR DDL DU PIVOT NUL

                WRITE (IFM,*) 'PIVOT QUASIMENT NUL A LA LIGNE ',ISINGU
                WRITE (IFM,*) 'NOMBRE DE DECIMALES PERDUES : ',NDECI
                CALL DISMOI('F','NOM_NUME_DDL',NOMA19,'MATR_ASSE',IBID,
     &                      NU,IBID)
                IF (NU.NE.' ') THEN
                  CALL RGNDAS('NUME_DDL',NU,ISINGU,NOMNO,NOMCMP,TARDIF,
     &                        LIGREL,INFOBL)
                  WRITE (IFM,*) '<NOEUD> ',NOMNO,' <CMP> ',NOMCMP
                ELSE
                  CALL UTMESS('A','TLDLG2','NOM_NUME_DDL '//NOMA19//
     &                        ' NON TROUVE')
                END IF
CC       FIN EXTRACTION DE RENSEIGNEMENTS SUR DDL DU PIVOT NUL

                PASS = 1
                NSTOC = NSTOC + 1
                ZI(IOUIA-1+ISINGU) = NSTOC
              END IF

CC        FIN TEST DE Q-NULLITE DU PIVOT

CC        FIN BOUCLE TESTS DE Q-NULLITE DU PIVOT

   60       CONTINUE

            IF (PASS.NE.0) THEN
              GO TO 70
            ELSE
              GO TO 80
            END IF

   70       CONTINUE

CC     REINITIALISATION DE B

            CALL DETRSD('MATR_ASSE',NOMB19)
            CALL JEDETC(' ',NOMB19//'.DIGS',1)
C      PAS FAIT DANS DETRSD!
            NOMB19 = '&&TLDLG2_COPIEMATA '
            CALL COPISD('MATR_ASSE','V',NOMA19,NOMB19)
            CALL MTDSCR(NOMB19)
            CALL JEVEUO(NOMB19//'.REFA','E',IDREFB)
            CALL JEVEUO(NOMB19//'.&INT','E',LMATB)
            CALL MTDSC2(ZK24(ZI(LMATB+1)),'ADIA','L',IADIAB)
            CALL MTDSC2(ZK24(ZI(LMATB+1)),'ABLO','L',IABLOB)
            CALL JEVEUO(ZK24(IDREFB+2) (1:19)//'.HCOL','L',IHCOLB)
C       BLOCAGE 'CINEMATIQUE' DU/DES DDL A PIVOT NUL
            CALL ASMCHC('V',NOMB19,STOMAT,ZI(IOUIA),NSTOC,'ZERO')
            CALL DIAGAV(NOMB19,NEQ,TYPVAR,TYPSTO,EPSB)
            CALL JEVEUO(NOMB19//'.DIGS','L',IBDIGS)
            GO TO 50

   80       CONTINUE

          ELSE
            CALL UTMESS('F','TLDLG2','MATRICE NON SYMETRIQUE')
          END IF
        ELSE
          CALL UTMESS('F','TLDLG2','MATRICE NON REELLE')
        END IF
      ELSE
        CALL UTMESS('F','TLDLG2','TYPE DE STOCKAGE INCONNU')
      END IF

CC            FIN RECHERCHE DES PIVOTS NULS

CC            DEBUT CALCUL DE MODES DE CORPS RIGIDE


      CALL JELIRA(NOMB19//'.REFA','DOCU',IBID,ETAMAB)
      ETAMAB = 'DECT'
      CALL JEECRA(NOMB19//'.REFA','DOCU',IBID,ETAMAB)
      WRITE (IFM,7900)
      WRITE (IFM,*) 'TLDLG2: NB DE MODES DE CORPS RIGIDE'//
     &  ' DETECTES: ',NSTOC

      IF (NSTOC.GT.7) THEN
        CALL UTMESS('A','TLDLG2','ATTENTION PLUS DE SIX'//
     &              ' MODES DE CORPS RIGIDE DETECTES')
      END IF
      IF (NSTOC.EQ.0) THEN
        GO TO 110
      END IF

CC     DETERMINATION DES MODES RIGIDES

      CALL MTDSCR(NOMB19)
      CALL JEVEUO(NOMB19//'.&INT','E',LMATB)

      CALL WKVECT(NOMB19//'.CONI','V V I ',NEQ,LCONI)
      CALL WKVECT(NOMSOL,'V V R ',NEQ*NSTOC,LXSOL)
      CALL WKVECT('&&TLSECCIN','V V R ',NEQ*NSTOC,LCINE)

      ILIS = 1
      DO 90 JEQ = 1,NEQ
        IF (ZI(IOUIA+JEQ-1).NE.0) THEN
          ZI(LCONI+JEQ-1) = 1
          ZR(LCINE+ (ILIS-1)*NEQ+JEQ-1) = -1.D0
          ILIS = ILIS + 1
        END IF
   90 CONTINUE

      DO 100 ILIS = 1,NSTOC
        CALL CSMBGG(LMATB,ZR(LXSOL+ (ILIS-1)*NEQ),
     &              ZR(LCINE+ (ILIS-1)*NEQ),CBID,CBID,'R')
  100 CONTINUE

      CALL MRCONL(LMATB,0,' ',ZR(LXSOL),NSTOC)
      CALL MRCOND(LMATB,0,ZR(LXSOL),NSTOC)
      CALL RLDLGG(LMATB,ZR(LXSOL),CBID,NSTOC)
      CALL MRCOND(LMATB,0,ZR(LXSOL),NSTOC)



C           NETTOYAGE ET SORTIE
C      CALL UTFINM()
  110 CONTINUE
      WRITE (IFM,8000)
      CALL JEDETC(' ','&&POSMODRI',1)
      CALL JEDETC(' ','&&TLDDLBLO',1)
      CALL JEDETC(' ','&&TLSECCIN',1)
      CALL JEDETC(' ','&&TLDLG2_COPIEMATA ',1)

      CALL JEDEMA()

 7900 FORMAT (72X,/)
 8000 FORMAT (72 ('-'),/)
      END
