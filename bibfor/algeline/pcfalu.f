      SUBROUTINE PCFALU(N,INC,IPC,INX,IPX,INDEX,IMP)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGELINE  DATE 03/05/2000   AUTEUR VABHHTS J.PELLET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER INC(N),IPC(*),INDEX(*)
      INTEGER INX(0:N),IPX(*)

C FONCTION  INC;IPC ------------>INX;IPX
C           SYMETRIQUE           PLEINE FORMAT LU


C  CALCUL DU NOMBRE DE COEFS PAR LIGNE COMPLETE
C        SANS LA DIAGONALE
C 111111111111111111111111111111111111111111111

C  DEMI-LIGNE
      INDEX(1) = 0
      DO 10 I = 2,N
        INDEX(I) = INC(I) - INC(I-1) - 1
   10 CONTINUE
C  SYMETRIQUES
      DO 30 I = 2,N
        II1 = INC(I-1) + 1
        II2 = INC(I)
        DO 20 II = II1,II2 - 1
          J = IPC(II)
          INDEX(J) = INDEX(J) + 1
   20   CONTINUE
   30 CONTINUE

      IF (IMP.EQ.1) THEN
        II1 = INDEX(1)
        II2 = INDEX(1)
        DO 40 I = 2,N
          II1 = MIN(II1,INDEX(I))
          II2 = MAX(II2,INDEX(I))
   40   CONTINUE
C       WRITE (6,*) ' MATRICE PLEINE NOMBRE DE COEFFS PAR LIGNE '
C       WRITE (6,*) '     MIN ',II1
C       WRITE (6,*) '     MAX ',II2
      END IF

C CALCUL NOUVEAU INX POINTEUR DEBUT DE LIGNE
C                             QUI SE DECALE ENSUITE
C 222222222222222222

      INX(0) = 0
      INX(1) = 1
      DO 50 I = 2,N
        INX(I) = INX(I-1) + INDEX(I-1)
   50 CONTINUE
      IF (IMP.EQ.1) THEN
C       WRITE (6,*) 'POINTEUR DEBUT DE LIGNE LU '
C       WRITE (6,*) (INX(I),I=1,5)
C       WRITE (6,*) (INX(I),I=N-5,N)
      END IF

C CALCUL NOUVEAUX IPX
C    INX(I)= DEBUT LIGNE I DE L
C    INDEX(I)=POINTEUR DERNIER COEF LIGNE I DE U
C 33333333333333333333333

      INDEX(1) = 0
      DO 70 I = 2,N
        II1 = INC(I-1) + 1
        II2 = INC(I)
        KKK = INX(I) - 1
        DO 60 II = II1,II2 - 1
          KKK = KKK + 1
          IPX(KKK) = IPC(II)
C     call jxveri(' ',' ')
C  SYMETRIQUES
          J = IPC(II)
          INDEX(J) = INDEX(J) + 1
          IPX(INDEX(J)) = I
   60   CONTINUE
        INDEX(I) = KKK
   70 CONTINUE

C  TRANSFORMATION DE INX DE DEBUT EN FIN DE LIGNE DE LU
C 44444444444444444444444444444444444444444444444444444
      INX(0) = 0
      DO 80 I = 1,N - 1
        INX(I) = INX(I+1) - 1
   80 CONTINUE
      INX(N) = INDEX(N)

      IF (IMP.EQ.1) THEN
        DO 90 I = 1,5
C         WRITE (6,*) ' '
C         WRITE (6,*) ' LIGNE ',I
          II1 = INX(I-1) + 1
          II2 = INX(I)
C         WRITE (6,*) ('(',IPX(II),')',II=II1,II2)
   90   CONTINUE
      END IF
      END
