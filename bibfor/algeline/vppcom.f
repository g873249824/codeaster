      SUBROUTINE VPPCOM(LCOMOD,ICOM1,ICOM2,RESUI,RESUR,RESUK,
     &                  NBPARI,NBPARR,NBPARK,MXRESF,
     &                  VECTR,NCONV,NEQ,TYPRES)
      IMPLICIT NONE
      LOGICAL       LCOMOD
      INTEGER       ICOM1,ICOM2,NBPARI,NBPARR,NBPARK,NCONV,NEQ,MXRESF,
     &              RESUI(*)
      REAL*8        VECTR(*),RESUR(*)
      CHARACTER*16  TYPRES
      CHARACTER*(*) RESUK(*)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGELINE  DATE 02/04/2013   AUTEUR BOITEAU O.BOITEAU 
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C     ----------------------------------------------------------------
C     COMMUNICATION DES VECTEURS PROPRES ET SD ASSOCIEES POUR MACRO
C     MODE_MECA //
C     IN  LCOMOD      :  LOG  : MACRO_MODE_MECA// OR NOT  
C     IN  ICOM1/ICOM2 :  IN   : PARAMETRES // ASSOCIES A LCOMOD=.TRUE.
C     IN/OUT RESUI/RESUR/RESUK: VECTEURS I/R/K : VECTEURS ASSOCIES A LA 
C                               SD_MODE_MECA A PRODUIRE.
C     IN NBPARI/NBPARR/NBPARK : IN : NBRE DE COLONNES DES CES SDS.
C     IN MXRESF       :  IN   : NBRE DE LIGNES UTILISEES POUR CES SDS.
C     IN/OUT VECTR    : R     : VECTEURS PROPRES REELS
C     IN/OUT NCONV    :  IN   : NBRE DE MODES PROPRES CONVERGES DU PROC
C                (EN IN), NBRE TOTAL DE MODES CV (EN OUT).
C     IN NEQ          :  IN   : TAILLE DU PROBLEME
C     IN TYPRES       :  IN   : TYPE DE RESULTATS (DYNAMIQUE OU FLAMB)
C     ----------------------------------------------------------------
      INCLUDE 'jeveux.h'

C     --- VARIABLES LOCALES
      INTEGER      NCONVL,NCONVG,NCONVM,RANGL,RANGLL,
     &             MPICOW,MPICOU,MPICO0,
     &             IBID,L1,L2,IZERO,I,IDECAL,J,I8,SOMINT,MAXINT,
     &             JLCOM,JLBUFF,JLBUFS,IFM,NIV,
     &             IETFIN,IETDEB,IETRAT,IETMAX
      INTEGER*4    COMCOU,I4
      REAL*8       RETFIN,RBID
      COMPLEX*16   CBID
      CHARACTER*1  K1BID
      CHARACTER*24 KLCOM,K24BUF,K24BUS,K24B
C      LOGICAL      LCPU

      CALL JEMARQ()
      CALL INFNIV(IFM,NIV)
C     --- POUR MESURER LE TEMPS CONSOMMEE DS LES ETAPES DE OP0045
C     --- IL FAUT AUSSI DECOMMENTER LES APPELS A SYSTEM_CLOCK (UTILES
C     --- MAIS REFUSES PAR L'AGLA).
C      LCPU=.TRUE.
C      LCPU=.FALSE.
      IZERO=0
      K24BUF='&&OP0045.BUFFMPI'
      K24BUS='&&OP0045.BUFFMPI.SAVE'
      KLCOM='&&OP0045.LCOMOD1'
      IF (LCOMOD) THEN
        MPICOW=COMCOU(0)
        MPICOU=COMCOU(1)
C       --- ON EST CENSE FONCTIONNER JUSQUE LA EN COM LOCAL
C       --- (POUR SOLVEUR LINEAIRE DU SOLVEUR MODAL)
        IF (MPICOW.EQ.MPICOU) CALL ASSERT(.FALSE.)
        CALL MPIEXE('MPI_RANG_SIZE',MPICOU,IBID,RANGL,IBID)
C       ----------------------------------------------------------------
C       --- STEP 0: COMM AU SEIN DU COM_WORLD
C       ----------------------------------------------------------------
C       --- ON REMET LE MPICOW POUR LES COMS DE NCONVG ET DE KLCOM.
C       --- ON GARDE LE COM LOCAL MPICOU POUR LE BCAST ULTERIEUR
C       --- ON PREPARE UN COM LOCAL RESERVE A TOUS LES PROCS DE 
C       --- RANGL=0: MPICO0
C       --- DANS CE NEW COM MPICO0, LE RANG EST NOTE RANGLL. IL DOIT
C       --- ETRE IDENTIQUE A ICOM1-1.
        CALL MPIEXE('AFFE_COMM_REFE',MPICOW,IBID,1,IBID)
        CALL MPICM1('BARRIER',K1BID,IBID,IBID,IBID,RBID,CBID)
C        IF (LCPU) THEN
C          CALL MPICM1('BARRIER',K1BID,IBID,IBID,IBID,RBID,CBID)
C          CALL SYSTEM_CLOCK(IETDEB,IETRAT,IETMAX)
C        ENDIF
        IF (RANGL.EQ.0) THEN
          L1=1
        ELSE
          L1=2
        ENDIF
        CALL MPIEXE('MPI_COMM_SPLIT',MPICOW,MPICO0,L1,ICOM1)
        IF (MPICOW.EQ.MPICO0) CALL ASSERT(.FALSE.)
        CALL MPIEXE('MPI_RANG_SIZE',MPICO0,IBID,RANGLL,L2)
        IF ((L2.NE.ICOM2).AND.(RANGL.EQ.0)) CALL ASSERT(.FALSE.)
        IF ((RANGLL.NE.(ICOM1-1)).AND.(RANGL.EQ.0)) CALL ASSERT(.FALSE.)

C       --- VECTEUR DES DECALAGES (NCONV) PAR PROC POUR VECTEURS PROPRES
C       --- CALCUL ET AFFECTATION DU NBRE TOTAL DE MODES CONVERGES
        CALL WKVECT(KLCOM,'V V I',ICOM2,JLCOM)
        CALL VECINT(ICOM2,IZERO,ZI(JLCOM))
C       --- NCONVL: NBRE DE MODES CONVERGES DU CALCUL ASSOCIE AU PROC
C       --- ZI(JLCOM+ICOM1-1)=NCONVL SI RANGL=0, 0 SINON
C       --- NCONV=NCONVG: NBRE DE MODES CONVERGES TOTAL
C       --- NCONVM=MAX(NCONVL) (POUR DIMENSIONNER BUFFER DE COM)
        NCONVL=NCONV
        IF (RANGL.EQ.0) ZI(JLCOM+ICOM1-1)=NCONVL
        CALL MPICM1('MPI_SUM','I',ICOM2,IBID,ZI(JLCOM),RBID,CBID)
        NCONVG=SOMINT(ICOM2,ZI(JLCOM))
        IF (NCONVG.LE.0) CALL ASSERT(.FALSE.)
        NCONV=NCONVG
        NCONVM=MAXINT(ICOM2,ZI(JLCOM))
        IF (NCONVM.LE.0) CALL ASSERT(.FALSE.)

C       ----------------------------------------------------------------
C       --- STEP 1: COMM ENTRE LES MAITRES DE CHAQUE SOUS-BANDES
C       ----------------------------------------------------------------
C       --- ON AFFECTE LE COMCO0 POUR COMMUNIQUER ENTRE SOUS-BANDES
C       --- LES VECTEURS PROPRES
C       --- PUIS COMM DES &&OP0045.RESU_R
C       --- COMM DES &&OP0045.RESU_I ET K
        CALL MPICM1('BARRIER',K1BID,IBID,IBID,IBID,RBID,CBID)
        CALL MPIEXE('AFFE_COMM_REFE',MPICO0,IBID,1,IBID)
        IF (RANGL.EQ.0) THEN
C         --- 2 BUFFERS: K24BUF POUR LE BCAST, LE K24BUS POUR SAUVE
C         --- GARDER LES VECTEURS PROPRES EN ATTENDANT LEUR COMM AUX
C         --- AUTRES PROCESSUS DE MPICO0.
          CALL WKVECT(K24BUF,'V V R',NCONVM*NEQ,JLBUFF)
          CALL WKVECT(K24BUS,'V V R',NCONVM*NEQ,JLBUFS)
          I4=NCONVL*NEQ
          CALL DCOPY(I4,VECTR,1,ZR(JLBUFS),1)
          DO 115 I=1,ICOM2
            IDECAL=0
            DO 114 J=1,I-1
              IDECAL=IDECAL+ZI(JLCOM+J-1)
  114       CONTINUE
            IF (IDECAL.LT.0) CALL ASSERT(.FALSE.)
            I8=NEQ*ZI(JLCOM+I-1)
            I4=I8
            IF (I.EQ.ICOM1) CALL DCOPY(I4,ZR(JLBUFS),1,ZR(JLBUFF),1)
            CALL MPICM1('BCASTP','R',I8,I-1,IBID,ZR(JLBUFF),CBID)
            CALL DCOPY(I4,ZR(JLBUFF),1,VECTR(1+IDECAL*NEQ),1)
  115     CONTINUE
          CALL JEDETR(K24BUS)
          CALL JEDETR(K24BUF)

          CALL COMATR('T','R',ICOM2,ICOM1-1,ZI(JLCOM),0,0,IBID,
     &                MXRESF,NBPARR,RESUR,0,0,CBID)
          CALL COMATR('T','I',ICOM2,ICOM1-1,ZI(JLCOM),MXRESF,NBPARI,
     &                RESUI,0,0,RBID,0,0,CBID)
        ENDIF

C       ----------------------------------------------------------------
C       --- STEP 2: BARRIERE SUR LE COM_WORLD AU CAS OU
C       ----------------------------------------------------------------
C       -- ON AFFECTE LE COMCOW POUR QUE TOUS LES PROCS S'ATTENDENT
        CALL MPIEXE('AFFE_COMM_REFE',MPICOW,IBID,1,IBID)
        CALL MPICM1('BARRIER',K1BID,IBID,IBID,IBID,RBID,CBID)
C        IF (LCPU) THEN
C          CALL SYSTEM_CLOCK(IETFIN)
C          RETFIN=REAL(IETFIN-IETDEB)/REAL(IETRAT)
C          WRITE(IFM,*)'<VPPCOM> COUT COM 1  VP + ZR/ZI: ',RETFIN
C          CALL SYSTEM_CLOCK(IETDEB,IETRAT,IETMAX)
C        ENDIF

C       ----------------------------------------------------------------
C       --- STEP 3: COM AU SEIN DE CHAQUE SOUS-BANDES
C       ----------------------------------------------------------------
C       --- ON AFFECTE LE COMCOU POUR COMMUNIQUER AU SEIN
C       --- D'UNE SOUS-BANDE.
        CALL MPIEXE('AFFE_COMM_REFE',MPICOU,IBID,1,IBID)

C       --- POUR GAGNER DU TEMPS, ON ENVOIE VP PAR VP
C       --- ON COMMUNIQUE LES VECTEURS PROPRES EN SOUS-PAQUETS DE REELS
C       --- DE TAILLE =< SIZBMPI POUR EVITER LES PBS DE CONTENTIONS
C       --- MEMOIRE ET LES LIMITES DES ENTIERS COURTS MPI.
        DO 116 I=1,NCONVG
          CALL MPICM1('BCASTP','R',NEQ,0,IBID,VECTR(1+(I-1)*NEQ),CBID)
  116   CONTINUE
C       --- ON COMMUNIQUE LES PETITS OBJETS SUIVANTS    
        CALL MPICM1('BCAST','R',NBPARR*MXRESF,0,IBID,RESUR,CBID)
        CALL MPICM1('BCAST','I',NBPARI*MXRESF,0,RESUI,RBID,CBID)

C       ----------------------------------------------------------------
C       --- STEP 4: BARRIERE SUR LE COM_WORLD AU CAS OU
C       ----------------------------------------------------------------
C       --- ON AFFECTE LE COMCOW POUR QUE TOUS LES PROCS S'ATTENDENT
        CALL MPIEXE('AFFE_COMM_REFE',MPICOW,IBID,1,IBID)
        CALL MPICM1('BARRIER',K1BID,IBID,IBID,IBID,RBID,CBID)
C        IF (LCPU) THEN
C          CALL SYSTEM_CLOCK(IETFIN)
C          RETFIN=REAL(IETFIN-IETDEB)/REAL(IETRAT)
C          WRITE(IFM,*)'<VPPCOM> COUT COM 2  VP + ZR/ZI: ',RETFIN
C        ENDIF

C       --- ON REMET LE COM LOCAL AU CAS OU
        CALL MPIEXE('AFFE_COMM_REFE',MPICOU,IBID,1,IBID)

C       ----------------------------------------------------------------
C       --- STEP 5: INIT DIVERSES.
C       ----------------------------------------------------------------
        IF (TYPRES(1:9).NE.'DYNAMIQUE') THEN
          DO 121 I=1,NCONVG
            RESUI(I)=I
  121     CONTINUE
        ENDIF
        DO 125 I=1,NBPARK
          J=1+(I-1)*MXRESF
          K24B=RESUK(J)
          IF (K24B.NE.RESUK(J+1)) CALL ASSERT(.FALSE.)
          CALL VECINK(NCONVG,K24B,RESUK(J))
  125   CONTINUE
C       ----------------------------------------------------------------
C       --- STEP 6: MENAGE.
C       ----------------------------------------------------------------
        CALL JEDETR(KLCOM)
        CALL MPIEXE('MPI_COMM_FREE',MPICO0,IBID,IBID,IBID)
      ENDIF

      CALL JEDEMA()

      END
