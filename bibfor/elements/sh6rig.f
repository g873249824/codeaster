      SUBROUTINE SH6RIG(XETEMP,PARA,RE)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ELEMENTS  DATE 03/07/2012   AUTEUR PELLET J.PELLET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C TOLE CRP_20
C
C               ELEMENT SHB6
C
      IMPLICIT NONE
      INTEGER IRDC
C
      REAL*8 XE(18),RE(18,18),XETEMP(18)
      REAL*8 XXG5(5),PXG5(5),XCOQ(3,3),BKSIP(3,6,5),B(3,6)
      REAL*8 XCENT(3),PPP(3,3),PPPT(3,3)
      REAL*8 XL(3,3),XXX(3),YYY(3)
      REAL*8 TMPTAB(6,18),TMPKE(18,18),CMATLO(6,6)
      REAL*8 TMPKE2(18,18)
      REAL*8 GB(6,2),GS(6,2),XXGB(3,2)
      REAL*8 LAMBDA,PARA(11)
C
      REAL*8 DJ(3,3),BKSIP1(3,6),XEL(18),XRRE(18,18)
      REAL*8 XXH(2,3),XB01(18),XB02(18),B5(6,18)
      REAL*8 B1(6,18),B2(6,18),B3(3,6),B4(6,18)
      REAL*8 BTOT1(6,18),BTOT1T(18,6)
      REAL*8 BTOT2(6,18),BTOT2T(18,6)
      REAL*8 XH01(36),XH02(36),UJ(3,3)
C
CCCCCCCCCCCCCC ENTREES CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C    ON CALCULE LA MATRICE DE RAIDEUR
C    XETEMP : Coordonnées des noeuds de l'élément
C    PARA   : Paramètres de matériaux et loi de comportement
C              (VOIR te0473.f)
CCCCCCCCCCCCCC SORTIE CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C    RE        MATRICE DE RAIDEUR
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C INITIALISATIONS
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C INFOS:
C XE EST RANGE COMME CA: (XNOEUD1 YNOEUD1 ZNOEUD1, XNOEUD2 YNOEUD2
C... ZNOEUD2)
C DANS SHB6_TEST_NUM: ATTENTION A LA NUMEROTATION DES NOEUDS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C-----------------------------------------------------------------------
      INTEGER I ,IA ,IP ,J ,K 
      REAL*8 AJ ,AJAC ,COELA1 ,COELA2 ,ELT ,RBID ,TT1 
      REAL*8 TT2 ,UNS2 ,UNS3 ,XAJAC ,XCOOEF ,XMU ,XNU 
      REAL*8 XXL1 ,XXL2 ,ZETA ,ZLAMB 
C-----------------------------------------------------------------------
      DATA GB/0.D0,-1.D0,0.D0,0.D0,1.D0,0.D0,
     &        0.D0,0.D0,-1.D0,0.D0,0.D0,1.D0/
C
C VB: COORD DES NOEUDS DANS REPERE DE REFERENCE
C
C      DATA VB/ 0.D0, 1.D0, 0.D0, 0.D0, 1.D0, 0.D0,
C     &         0.D0, 0.D0, 1.D0, 0.D0, 0.D0, 1.D0,
C     &        -1.D0,-1.D0,-1.D0, 1.D0, 1.D0, 1.D0/
C
C ON DEFINIT LES POINTS GAUSS ET LES POIDS
C
      XXG5(1) = -0.906179845938664D0
      XXG5(2) = -0.538469310105683D0
      XXG5(3) =  0.D0
      XXG5(4) =  0.538469310105683D0
      XXG5(5) =  0.906179845938664D0
C
      PXG5(1) =  0.236926885056189D0
      PXG5(2) =  0.478628670499366D0
      PXG5(3) =  0.568888888888889D0
      PXG5(4) =  0.478628670499366D0
      PXG5(5) =  0.236926885056189D0
C
      UNS3    = 1.D0/3.D0
      UNS2    = 1.D0/2.D0
C     ON FAIT UNE COPIE DE XETEMP DANS XE
      DO 10 I = 1,18
         XE(I) = XETEMP(I)
   10 CONTINUE
C
C TYPE DE LOI DE COMPORTEMENT:
C     IRDC = 1 : SHB6 MEME TYPE QUE SHB8 DANS PLEXUS
C     IRDC = 2 : C.P.
C     IRDC = 3 : 3D COMPLETE
C
      IRDC = NINT(PARA(5))
C
C      IF(ICLE.EQ.2)THEN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                  C
C ON CALCULE LA RAIDEUR : SORTIE DANS RE                           C
C                                                                  C
C SI IETAN = 1 , ALORS ON CALCULE AUSSI                            C
C                LA MATRICE TANGENTE PLASTIQUE                     C
C                                                                  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C INITIALISATION LONGUEUR DES COTES
C CALCUL DES COEFF D ELANCEMENT A METTRE DANS LA MATRICE DE CPT
C
      XXL1 = 0.D0
      XXL2 = 0.D0
      TT1  = 0.D0
      TT2  = 0.D0
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C STABILISATION ADAPTATIVE EN FONCTION DE LA DISTORTION DE L'ELEMENT
C
      DO 40 I=1,3
C DISTANCE ENTRE 1 ET 4 (EPAISSEUR)
         TT1   = TT1+(XE(I+9)-XE(I))**2
C DISTANCE ENTRE 3 ET 6 (EPAISSEUR)
         TT2   = TT2+(XE(I+15)-XE(I+6))**2
C DISTANCE ENTRE 1 ET 2
         XXL1  = XXL1+(XE(I+3)-XE(I))**2
C DISTANCE ENTRE 2 ET 3
         XXL2  = XXL2+(XE(I+6)-XE(I+3))**2
  40  CONTINUE
      XXL1   = SQRT(XXL1)
      XXL2   = SQRT(XXL2)
      TT1    = UNS2*(SQRT(TT1)+SQRT(TT2))
      COELA1 = 5.D0/6.D0
      COELA2 = 5.D0/6.D0
C ELANCEMENT DANS DIRECTION 2
      ELT    = 6.D0*TT1/XXL1
      IF(COELA1.GT.ELT) COELA1=ELT
C ELANCEMENT DANS DIRECTION 1
      ELT    = 6.D0*TT1/XXL2
      IF(COELA2.GT.ELT) COELA2=ELT
C POUR L'INSTANT, ON NE MET PAS EN SERVICE:
      COELA1 = 1.D0
      COELA2 = 1.D0
C
      CALL R8INIR(324,0.D0,RE,1)
      CALL R8INIR(36,0.D0,CMATLO,1)
C ON DEFINIT CMATLOC: MATRICE DE COMPORTEMENT
C
      XNU = PARA(2)
      LAMBDA = PARA(1)*PARA(2)/(1.D0-PARA(2)*PARA(2))
      XMU = 0.5D0*PARA(1)/ (1.D0+PARA(2))
      CMATLO(1,1) = LAMBDA + 2.D0*XMU
      CMATLO(2,2) = LAMBDA + 2.D0*XMU
      IF (IRDC.EQ.1) THEN
C COMPORTEMENT SHB6 PLEXUS
        CMATLO(3,3) = PARA(1)
      ENDIF
C
      IF (IRDC.EQ.2) THEN
C COMPORTEMENT C.P.
         CMATLO(3,3) = 0.D0
      ENDIF
C
      CMATLO(1,2) = LAMBDA
      CMATLO(2,1) = LAMBDA
      CMATLO(4,4) = XMU
      CMATLO(5,5) = XMU
      CMATLO(6,6) = XMU
C
      IF (IRDC.EQ.3) THEN
C COMPORTEMENT LOI TRIDIM MMC 3D
         XNU = PARA(2)
         XCOOEF = PARA(1)/((1.D0+XNU)*(1.D0-2.D0*XNU))
         CMATLO(1,1) = (1.D0-XNU)*XCOOEF
         CMATLO(2,2) = (1.D0-XNU)*XCOOEF
         CMATLO(3,3) = (1.D0-XNU)*XCOOEF
         CMATLO(1,2) = XNU*XCOOEF
         CMATLO(2,1) = XNU*XCOOEF
         CMATLO(1,3) = XNU*XCOOEF
         CMATLO(3,1) = XNU*XCOOEF
         CMATLO(2,3) = XNU*XCOOEF
         CMATLO(3,2) = XNU*XCOOEF
         CMATLO(4,4) = (1.D0-2.D0*XNU)*0.5D0*XCOOEF
         CMATLO(5,5) = (1.D0-2.D0*XNU)*0.5D0*XCOOEF
         CMATLO(6,6) = (1.D0-2.D0*XNU)*0.5D0*XCOOEF
      ENDIF
C
      DATA XB01/1.D0,0.D0,0.D0,
     &          0.D0,1.D0,0.D0,
     &          0.D0,0.D0,1.D0,
     &          1.D0,1.D0,0.D0,
     &          0.D0,0.D0,0.D0,
     &          0.D0,0.D0,0.D0/
      DATA XB02/0.D0,0.D0,0.D0,
     &         0.D0,0.D0,0.D0,
     &         0.D0,0.D0,0.D0,
     &         0.D0,0.D0,0.D0,
     &         0.D0,0.45D0,0.45D0,
     &         0.45D0,0.D0,0.45D0/
C
C Définition des coeficients constants C1---->C36 qui servent à faire
C des projections:
      DATA XH01/1.D0,1.D0,0.D0,0.D0,0.D0,0.D0,
     &          0.D0,0.D0,1.D0,1.D0,0.D0,0.D0,
     &          0.D0,0.D0,0.D0,0.D0,1.D0,1.D0,
     &          1.D0,1.D0,1.D0,1.D0,0.D0,0.D0,
     &          0.D0,0.D0,0.D0,0.D0,0.D0,0.D0,
     &          0.D0,0.D0,0.D0,0.D0,0.D0,0.D0/
      DATA XH02/0.D0,0.D0,0.D0,0.D0,0.D0,0.D0,
     &          0.D0,0.D0,0.D0,0.D0,0.D0,0.D0,
     &          0.D0,0.D0,0.D0,0.D0,0.D0,0.D0,
     &          0.D0,0.D0,0.D0,0.D0,0.D0,0.D0,
     &          0.D0,0.D0,0.45D0,0.45D0,0.45D0,0.45D0,
     &          0.45D0,0.45D0,0.D0,0.D0,0.45D0,0.45D0/
C
      DO 710 IP=1,5
C
C DEFINITION DES 3 POINTS COQUES
C
         ZETA  = XXG5(IP)
         ZLAMB = 0.5D0*(1.D0-ZETA)
         DO 70 I=1,3
            DO 60 J=1,3
               XCOQ(J,I) = ZLAMB*XE((I-1)*3+J)
     &                   + (1.D0-ZLAMB)*XE((I-1+3)*3+J)
   60       CONTINUE
   70    CONTINUE
C
C CALCUL DE PPP 3*3 PASSAGE DE GLOBAL A LOCAL,COQUE
C XCENT : COORD GLOBAL DU CENTRE DE L'ELEMENT
C
         CALL RLOSH6(XCOQ,XCENT,PPP,XL,XXX,YYY,RBID)
         DO 90 I = 1,3
          DO 80 J = 1,3
            PPPT(J,I) = PPP(I,J)
   80     CONTINUE
   90    CONTINUE
C
C
C Transformer XE_Global en local XE_LOC
C
         CALL R8INIR(18,0.D0,XEL,1)
         DO 100 I=1,6
            XEL(3*I-2)=PPP(1,1)*XE(3*I-2)+PPP(2,1)*XE(3*I-1)+
     &                  PPP(3,1)*XE(3*I)
            XEL(3*I-1)=PPP(1,2)*XE(3*I-2)+PPP(2,2)*XE(3*I-1)+
     &                  PPP(3,2)*XE(3*I)
            XEL(3*I)=PPP(1,3)*XE(3*I-2)+PPP(2,3)*XE(3*I-1)+
     &                PPP(3,3)*XE(3*I)
  100    CONTINUE
C
         CALL S6KSIB(BKSIP1)
C
         CALL R8INIR(18,0.D0,B3,1)
         CALL S6CALB(BKSIP1,XEL,B3,XAJAC)
C
         CALL ASSEBG(B1,B3,XB01)
C
         CALL ASSEBG(B4,B3,XB02)
C
         CALL SH6KSI(5,XXG5,BKSIP)
C
C CALCUL DES FONCTIONS DE FORME  GS
C XXGB = X  * GB
C
         CALL R8INIR(6,0.D0,XXGB,1)
         DO 130 J=1,3
           DO 120 IA=1,2
              DO 110 K=1,6
               XXGB(J,IA) = XXGB(J,IA)+GB(K,IA)*XEL(J+3*K-3)
  110         CONTINUE
  120      CONTINUE
  130    CONTINUE
C
C GS = (BBB)  * XXGB
C
         CALL R8INIR(12,0.D0,GS,1)
         DO 160 I=1,6
           DO 150 IA=1,2
              DO 140 J=1,3
                GS(I,IA)=GS(I,IA) + B3(J,I)*XXGB(J,IA)
  140         CONTINUE
  150      CONTINUE
  160    CONTINUE
C
C GS = GB - GS
C
         DO 180 I=1,2
           DO 170 J=1,6
             GS(J,I)= (GB(J,I) - GS(J,I))*UNS2
  170      CONTINUE
  180    CONTINUE
C
         CALL S6CALB(BKSIP(1,1,IP),XEL,B,AJAC)
C
C
C IL NE RESTE PLUS QU'A FAIRE: BGL_LOCT * C * BGL_LOC
C
C
C---   DJ = BKSIP * TRANSPOSE(XNOE)
C
         CALL MATINI(3,3,0.D0,DJ)
         DO 230 I=1,3
           DO 220 J=1,3
              DO 210 K=1,6
                DJ(J,I)=DJ(J,I)+BKSIP(J,K,IP)*XEL((K-1)*3+I)
  210         CONTINUE
  220      CONTINUE
  230    CONTINUE
C
C-----   UJ(J,I)  MATRICE INVERSE DE DJ(J,I)
C
         CALL MATINV('S',3,DJ,UJ,AJ)
         XXH(1,1)=XXG5(IP)*UJ(1,1)+UNS3*UJ(1,3)
         XXH(1,2)=XXG5(IP)*UJ(2,1)+UNS3*UJ(2,3)
         XXH(1,3)=XXG5(IP)*UJ(3,1)+UNS3*UJ(3,3)
         XXH(2,1)=XXG5(IP)*UJ(1,2)+UNS3*UJ(1,3)
         XXH(2,2)=XXG5(IP)*UJ(2,2)+UNS3*UJ(2,3)
         XXH(2,3)=XXG5(IP)*UJ(3,2)+UNS3*UJ(3,3)
C
C Définition de la matrice B2:
C
         CALL R8INIR(108,0.D0,B2,1)
         DO 240 J=1,6
          B2(1,J)=XH01(1)*XXH(1,1)*GS(J,1)+XH01(2)*XXH(2,1)*GS(J,2)
          B2(1,J+6)= XH01(3)*XXH(1,2)*GS(J,1)+XH01(4)*XXH(2,2)*GS(J,2)
          B2(1,J+12)=XH01(5)*XXH(1,3)*GS(J,1)+XH01(6)*XXH(2,3)*GS(J,2)
C
          B2(2,J)=XH01(7)*XXH(1,1)*GS(J,1)+XH01(8)*XXH(2,1)*GS(J,2)
          B2(2,J+6)=XH01(9)*XXH(1,2)*GS(J,1)+XH01(10)*XXH(2,2)*GS(J,2)
          B2(2,J+12)=XH01(11)*XXH(1,3)*GS(J,1)+XH01(12)*XXH(2,3)*GS(J,2)
C
          B2(3,J)=XH01(13)*XXH(1,1)*GS(J,1)+XH01(14)*XXH(2,1)*GS(J,2)
          B2(3,J+6)=XH01(15)*XXH(1,2)*GS(J,1)+XH01(16)*XXH(2,2)*GS(J,2)
          B2(3,J+12)=XH01(17)*XXH(1,3)*GS(J,1)+XH01(18)*XXH(2,3)*GS(J,2)
C
          B2(4,J)=XH01(19)*XXH(1,2)*GS(J,1)+XH01(20)*XXH(2,2)*GS(J,2)
          B2(4,J+6)=XH01(21)*XXH(1,1)*GS(J,1)+XH01(21)*XXH(2,1)*GS(J,2)
C
          B2(5,J+6)=XH01(27)*XXH(1,3)*GS(J,1)+XH01(28)*XXH(2,3)*GS(J,2)
          B2(5,J+12)=XH01(29)*XXH(1,2)*GS(J,1)+XH01(30)*XXH(2,2)*GS(J,2)
C
          B2(6,J)=XH01(31)*XXH(1,3)*GS(J,1)+XH01(32)*XXH(2,3)*GS(J,2)
          B2(6,J+12)=XH01(35)*XXH(1,1)*GS(J,1)+XH01(36)*XXH(2,1)*GS(J,2)
  240    CONTINUE
C
C
C Définition de la matrice B5:
C
         CALL R8INIR(108,0.D0,B5,1)
         DO 250 J=1,6
          B5(1,J)=XH02(1)*XXH(1,1)*GS(J,1)+XH02(2)*XXH(2,1)*GS(J,2)
          B5(1,J+6)=XH02(3)*XXH(1,2)*GS(J,1)+XH02(4)*XXH(2,2)*GS(J,2)
          B5(1,J+12)=XH02(5)*XXH(1,3)*GS(J,1)+XH02(6)*XXH(2,3)*GS(J,2)

          B5(2,J)=XH02(7)*XXH(1,1)*GS(J,1)+XH02(8)*XXH(2,1)*GS(J,2)
          B5(2,J+6)=XH02(9)*XXH(1,2)*GS(J,1)+XH02(10)*XXH(2,2)*GS(J,2)
          B5(2,J+12)=XH02(11)*XXH(1,3)*GS(J,1)+XH02(12)*XXH(2,3)*GS(J,2)

          B5(3,J)=XH02(13)*XXH(1,1)*GS(J,1)+XH02(14)*XXH(2,1)*GS(J,2)
          B5(3,J+6)=XH02(15)*XXH(1,2)*GS(J,1)+XH02(16)*XXH(2,2)*GS(J,2)
          B5(3,J+12)=XH02(17)*XXH(1,3)*GS(J,1)+XH02(18)*XXH(2,3)*GS(J,2)

          B5(4,J)=XH02(19)*XXH(1,2)*GS(J,1)+XH02(20)*XXH(2,2)*GS(J,2)
          B5(4,J+6)=XH02(21)*XXH(1,1)*GS(J,1)+XH02(21)*XXH(2,1)*GS(J,2)

          B5(5,J+6)=XH02(27)*XXH(1,3)*GS(J,1)+XH02(28)*XXH(2,3)*GS(J,2)
          B5(5,J+12)=XH02(29)*XXH(1,2)*GS(J,1)+XH02(30)*XXH(2,2)*GS(J,2)
C
          B5(6,J)=XH02(31)*XXH(1,3)*GS(J,1)+XH02(32)*XXH(2,3)*GS(J,2)
          B5(6,J+12)=XH02(35)*XXH(1,1)*GS(J,1)+XH02(36)*XXH(2,1)*GS(J,2)
  250    CONTINUE
C
         CALL R8INIR(108,0.D0,BTOT1,1)
         DO 280 I=1,6
            DO 270 J=1,18
              BTOT1(I,J)= B1(I,J)+B2(I,J)
  270      CONTINUE
  280    CONTINUE
C
         DO 300 I = 1,6
          DO 290 J = 1,18
            BTOT1T(J,I) = BTOT1(I,J)
  290     CONTINUE
  300    CONTINUE
C
         CALL R8INIR(108,0.D0,BTOT2,1)
         DO 320 I=1,6
            DO 310 J=1,18
              BTOT2(I,J)= B4(I,J)+B5(I,J)
  310       CONTINUE
  320    CONTINUE
C
         DO 340 I = 1,6
            DO 330 J = 1,18
              BTOT2T(J,I) = BTOT2(I,J)
  330       CONTINUE
  340    CONTINUE
C
         CALL R8INIR(108,0.D0,TMPTAB,1)
         CALL R8INIR(324,0.D0,TMPKE,1)
         CALL R8INIR(324,0.D0,TMPKE2,1)
         CALL MULMAT(6,6,18,CMATLO,BTOT1,TMPTAB)
         CALL MULMAT(18,6,18,BTOT1T,TMPTAB,TMPKE2)
C
C ASSEMBLAGE: KE=KE + POIDS*JACOBIAN*TMPKE
C
         DO 400 J=1,6
            DO 390 I=1,18
               TMPKE(I,(J-1)*3+1)=TMPKE2(I,J)
               TMPKE(I,(J-1)*3+2)=TMPKE2(I,J+6)
               TMPKE(I,(J-1)*3+3)=TMPKE2(I,J+12)
  390       CONTINUE
  400    CONTINUE
         CALL R8INIR(324,0.D0,TMPKE2,1)
         DO 420 I=1,6
            DO 410 J=1,18
               TMPKE2((I-1)*3+1,J)=TMPKE(I,J)
               TMPKE2((I-1)*3+2,J)=TMPKE(I+6,J)
               TMPKE2((I-1)*3+3,J)=TMPKE(I+12,J)
  410       CONTINUE
  420    CONTINUE
C
         DO 440 I=1,18
            DO 430 J=1,18
               XRRE(I,J)= UNS2*AJAC*PXG5(IP)*TMPKE2(I,J)
  430       CONTINUE
  440    CONTINUE
C
         CALL KLOCGL(XRRE,PPPT)
C
         DO 460 I=1,18
            DO 450 J=1,18
               RE(I,J)= RE(I,J)+XRRE(I,J)
  450       CONTINUE
  460    CONTINUE
C
         CALL R8INIR(108,0.D0,TMPTAB,1)
         CALL R8INIR(324,0.D0,TMPKE,1)
         CALL R8INIR(324,0.D0,TMPKE2,1)
         CALL MULMAT(6,6,18,CMATLO,BTOT2,TMPTAB)
         CALL MULMAT(18,6,18,BTOT2T,TMPTAB,TMPKE2)
C
C ASSEMBLAGE: KE=KE + POIDS*JACOBIAN*TMPKE
C
         DO 640 J=1,6
           DO 630 I=1,18
            TMPKE(I,(J-1)*3+1)=TMPKE2(I,J)
            TMPKE(I,(J-1)*3+2)=TMPKE2(I,J+6)
            TMPKE(I,(J-1)*3+3)=TMPKE2(I,J+12)
  630      CONTINUE
  640    CONTINUE
         CALL R8INIR(324,0.D0,TMPKE2,1)
         DO 660 I=1,6
           DO 650 J=1,18
             TMPKE2((I-1)*3+1,J)=TMPKE(I,J)
             TMPKE2((I-1)*3+2,J)=TMPKE(I+6,J)
             TMPKE2((I-1)*3+3,J)=TMPKE(I+12,J)
  650      CONTINUE
  660    CONTINUE
C
         DO 680 J=1,18
           DO 670 I=1,18
            XRRE(I,J)= UNS2*AJAC*PXG5(IP)*TMPKE2(I,J)
  670      CONTINUE
  680    CONTINUE
C
         CALL KLOCGL(XRRE,PPPT)
C
         DO 700 J=1,18
           DO 690 I=1,18
             RE(I,J)= RE(I,J)+XRRE(I,J)
  690      CONTINUE
  700    CONTINUE
C
         CALL R8INIR(108,0.D0,TMPTAB,1)
         CALL R8INIR(324,0.D0,TMPKE,1)
         CALL R8INIR(324,0.D0,TMPKE2,1)
         CALL MULMAT(6,6,18,CMATLO,BTOT1,TMPTAB)
         CALL MULMAT(18,6,18,BTOT2T,TMPTAB,TMPKE2)
C
C ASSEMBLAGE: KE=KE + POIDS*JACOBIAN*TMPKE
C
         DO 684 J=1,6
           DO 683 I=1,18
            TMPKE(I,(J-1)*3+1)=TMPKE2(I,J)
            TMPKE(I,(J-1)*3+2)=TMPKE2(I,J+6)
            TMPKE(I,(J-1)*3+3)=TMPKE2(I,J+12)
  683      CONTINUE
  684    CONTINUE
         CALL R8INIR(324,0.D0,TMPKE2,1)
         DO 686 I=1,6
           DO 685 J=1,18
             TMPKE2((I-1)*3+1,J)=TMPKE(I,J)
             TMPKE2((I-1)*3+2,J)=TMPKE(I+6,J)
             TMPKE2((I-1)*3+3,J)=TMPKE(I+12,J)
  685      CONTINUE
  686    CONTINUE
C
         DO 688 J=1,18
           DO 687 I=1,18
            XRRE(I,J)= UNS2*AJAC*PXG5(IP)*TMPKE2(I,J)
  687      CONTINUE
  688    CONTINUE
C
         CALL KLOCGL(XRRE,PPPT)
C
         DO 701 J=1,18
           DO 689 I=1,18
             RE(I,J)= RE(I,J)+XRRE(I,J)
  689      CONTINUE
  701    CONTINUE
C
         CALL R8INIR(108,0.D0,TMPTAB,1)
         CALL R8INIR(324,0.D0,TMPKE,1)
         CALL R8INIR(324,0.D0,TMPKE2,1)
         CALL MULMAT(6,6,18,CMATLO,BTOT2,TMPTAB)
         CALL MULMAT(18,6,18,BTOT1T,TMPTAB,TMPKE2)
C
C ASSEMBLAGE: KE=KE + POIDS*JACOBIAN*TMPKE
C
         DO 703 J=1,6
           DO 702 I=1,18
            TMPKE(I,(J-1)*3+1)=TMPKE2(I,J)
            TMPKE(I,(J-1)*3+2)=TMPKE2(I,J+6)
            TMPKE(I,(J-1)*3+3)=TMPKE2(I,J+12)
  702      CONTINUE
  703    CONTINUE
         CALL R8INIR(324,0.D0,TMPKE2,1)
         DO 705 I=1,6
           DO 704 J=1,18
             TMPKE2((I-1)*3+1,J)=TMPKE(I,J)
             TMPKE2((I-1)*3+2,J)=TMPKE(I+6,J)
             TMPKE2((I-1)*3+3,J)=TMPKE(I+12,J)
  704      CONTINUE
  705    CONTINUE
C
         DO 707 J=1,18
           DO 706 I=1,18
            XRRE(I,J)= UNS2*AJAC*PXG5(IP)*TMPKE2(I,J)
  706      CONTINUE
  707    CONTINUE
C
         CALL KLOCGL(XRRE,PPPT)
C
         DO 709 J=1,18
           DO 708 I=1,18
             RE(I,J)= RE(I,J)+XRRE(I,J)
  708      CONTINUE
  709    CONTINUE
  710 CONTINUE
      END
