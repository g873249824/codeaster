      SUBROUTINE TE0062(OPTION,NOMTE)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ELEMENTS  DATE 13/06/2012   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.

C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.

C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C ----------------------------------------------------------------------
C CALCUL DES FLUX AUX POINTS DE GAUSS
C ELEMENTS ISO 3D  OPTION : 'FLUX_ELGA '
C     ENTREES  ---> OPTION : OPTION DE CALCUL
C              ---> NOMTE  : NOM DU TYPE ELEMENT
C----------------------------------------------------------------------
C CORPS DU PROGRAMME
      IMPLICIT NONE

C PARAMETRES D'APPELS
      INCLUDE 'jeveux.h'
      CHARACTER*16 OPTION,NOMTE


      INTEGER ICODRE(3)
      CHARACTER*8 NOMRES(3)
      CHARACTER*16 PHENOM
      REAL*8 VALRES(3),LAMBDA,FLUXX,FLUXY,FLUXZ,TPG,DFDX(27),DFDY(27),
     &       DFDZ(27),POIDS,LAMBOR(3),FLUGLO(3),FLULOC(3),P(3,3),
     &       DIRE(3),ORIG(3),POINT(3),ANGL(3),R8PREM,
     &       R8DGRD,ALPHA,BETA
      INTEGER JGANO,IPOIDS,IVF,IDFDE,IGEOM,IMATE,NNO,KP,
     &        NPG1,I,IFLUX,ITEMPS,ITEMPE,L,N1,N2,NDIM,
     &        ICAMAS,NUNO,NNOS
      LOGICAL ANISO,GLOBAL

C====
C 1.1 PREALABLES: RECUPERATION ALDRESSES FONCTIONS DE FORMES...
C====
      CALL ELREF4(' ','RIGI',NDIM,NNO,NNOS,NPG1,IPOIDS,IVF,IDFDE,JGANO)

C====
C 1.2 PREALABLES LIES AUX RECHERCHES DE DONNEES GENERALES
C====
      CALL JEVECH('PGEOMER','L',IGEOM)
      CALL JEVECH('PMATERC','L',IMATE)
      CALL JEVECH('PTEMPSR','L',ITEMPS)
      CALL JEVECH('PTEMPER','L',ITEMPE)
      CALL JEVECH('PFLUX_R','E',IFLUX)
      CALL RCCOMA(ZI(IMATE),'THER',PHENOM,ICODRE)

C====
C 1.3 PREALABLES LIES A LA RECUPERATION DES DONNEES MATERIAUX EN
C     THERMIQUE LINEAIRE ISOTROPE OU ORTHOTROPE
C====
      IF (PHENOM.EQ.'THER') THEN
        NOMRES(1) = 'LAMBDA'
        CALL RCVALB('FPG1',1,1,'+',ZI(IMATE),' ',PHENOM,1,'INST',
     &              ZR(ITEMPS),1,NOMRES,LAMBDA,ICODRE,1)
        ANISO = .FALSE.
      ELSE IF (PHENOM.EQ.'THER_ORTH') THEN
        NOMRES(1) = 'LAMBDA_L'
        NOMRES(2) = 'LAMBDA_T'
        NOMRES(3) = 'LAMBDA_N'
        CALL RCVALB('FPG1',1,1,'+',ZI(IMATE),' ',PHENOM,1,'INST',
     &              ZR(ITEMPS),3,NOMRES,VALRES,ICODRE,1)
        LAMBOR(1) = VALRES(1)
        LAMBOR(2) = VALRES(2)
        LAMBOR(3) = VALRES(3)
        ANISO = .TRUE.
      ELSE IF (PHENOM.EQ.'THER_NL') THEN
        ANISO = .FALSE.
      ELSE
        CALL U2MESS('F','ELEMENTS2_63')
      END IF

C====
C 1.4 PREALABLES LIES A L'ANISOTROPIE
C====
      GLOBAL = .FALSE.
      IF (ANISO) THEN
        CALL JEVECH('PCAMASS','L',ICAMAS)
        IF (ZR(ICAMAS).GT.0.D0) THEN
          GLOBAL = .TRUE.
          ANGL(1) = ZR(ICAMAS+1)*R8DGRD()
          ANGL(2) = ZR(ICAMAS+2)*R8DGRD()
          ANGL(3) = ZR(ICAMAS+3)*R8DGRD()
          CALL MATROT(ANGL,P)
        ELSE
          ALPHA = ZR(ICAMAS+1)*R8DGRD()
          BETA = ZR(ICAMAS+2)*R8DGRD()
          DIRE(1) = COS(ALPHA)*COS(BETA)
          DIRE(2) = SIN(ALPHA)*COS(BETA)
          DIRE(3) = -SIN(BETA)
          ORIG(1) = ZR(ICAMAS+4)
          ORIG(2) = ZR(ICAMAS+5)
          ORIG(3) = ZR(ICAMAS+6)
        END IF
      END IF

C====
C 2. CALCULS TERMES DE FLUX
C====
      DO 40 KP = 1,NPG1
        L = (KP-1)*NNO
        CALL DFDM3D ( NNO, KP, IPOIDS, IDFDE,
     &                ZR(IGEOM), DFDX, DFDY, DFDZ, POIDS )

C     CALCUL DE T ET DE GRAD(T) AUX POINTS DE GAUSS
        TPG = 0.0D0
        FLUXX = 0.0D0
        FLUXY = 0.0D0
        FLUXZ = 0.0D0
        IF (.NOT.GLOBAL .AND. ANISO) THEN
          POINT(1) = 0.D0
          POINT(2) = 0.D0
          POINT(3) = 0.D0
          DO 10 NUNO = 1,NNO
            POINT(1) = POINT(1) + ZR(IVF+L+NUNO-1)*ZR(IGEOM+3*NUNO-3)
            POINT(2) = POINT(2) + ZR(IVF+L+NUNO-1)*ZR(IGEOM+3*NUNO-2)
            POINT(3) = POINT(3) + ZR(IVF+L+NUNO-1)*ZR(IGEOM+3*NUNO-1)
   10     CONTINUE
          CALL UTRCYL(POINT,DIRE,ORIG,P)
        END IF

        DO 20 I = 1,NNO
          TPG = TPG + ZR(ITEMPE-1+I)*ZR(IVF+L+I-1)
          FLUXX = FLUXX + ZR(ITEMPE-1+I)*DFDX(I)
          FLUXY = FLUXY + ZR(ITEMPE-1+I)*DFDY(I)
          FLUXZ = FLUXZ + ZR(ITEMPE-1+I)*DFDZ(I)
   20   CONTINUE

        IF (PHENOM.EQ.'THER_NL') CALL RCVALB('FPG1',1,1,'+',ZI(IMATE),
     &             ' ',PHENOM,1,'TEMP', TPG,1,'LAMBDA',LAMBDA,ICODRE,1)

        IF (.NOT.ANISO) THEN
          FLUGLO(1) = LAMBDA*FLUXX
          FLUGLO(2) = LAMBDA*FLUXY
          FLUGLO(3) = LAMBDA*FLUXZ
        ELSE
          FLUGLO(1) = FLUXX
          FLUGLO(2) = FLUXY
          FLUGLO(3) = FLUXZ
          N1 = 1
          N2 = 3
          CALL UTPVGL(N1,N2,P,FLUGLO,FLULOC)
          FLULOC(1) = LAMBOR(1)*FLULOC(1)
          FLULOC(2) = LAMBOR(2)*FLULOC(2)
          FLULOC(3) = LAMBOR(3)*FLULOC(3)
          N1 = 1
          N2 = 3
          CALL UTPVLG(N1,N2,P,FLULOC,FLUGLO)
        END IF

        ZR(IFLUX+ (KP-1)*3)   = -FLUGLO(1)
        ZR(IFLUX+ (KP-1)*3+1) = -FLUGLO(2)
        ZR(IFLUX+ (KP-1)*3+2) = -FLUGLO(3)
   40 CONTINUE
C FIN ------------------------------------------------------------------
      END
