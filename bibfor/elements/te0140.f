      SUBROUTINE TE0140(OPTION,NOMTE)
      IMPLICIT REAL*8 (A-H,O-Z)
C     ------------------------------------------------------------------
C MODIF ELEMENTS  DATE 22/11/2001   AUTEUR VABHHTS J.PELLET 
C ======================================================================
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
      CHARACTER*16 OPTION,NOMTE
C     ------------------------------------------------------------------
C     CALCULE LA MATRICE DE RIGIDITE ELEMENTAIRE DES ELEMENTS DE POUTRE
C     D'EULER ET DE TIMOSHENKO
C     ------------------------------------------------------------------
C IN  OPTION : K16 : NOM DE L'OPTION A CALCULER
C       'RIGI_MECA '     : CALCUL DE LA MATRICE DE RIGIDITE
C       'RIGI_FLUI_STRU' : CALCUL DE LA MATRICE DE RIGIDITE (ABS_CURV)
C IN  NOMTE  : K16 : NOM DU TYPE ELEMENT
C       'MECA_POU_D_E' : POUTRE DROITE D'EULER       (SECTION VARIABLE)
C       'MECA_POU_D_T' : POUTRE DROITE DE TIMOSHENKO (SECTION VARIABLE)
C       'MECA_POU_C_T' : POUTRE COURBE DE TIMOSHENKO(SECTION CONSTANTE)
C       'MECA_POU_D_EM' : POUTRE DROITE D'EULER (SECTION MULTIFIBRES)
C     ------------------------------------------------------------------

C     ----- DEBUT COMMUNS NORMALISES  JEVEUX  --------------------------
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     -----  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------

      PARAMETER (NBRES=2)
      REAL*8 VALRES(NBRES)
      CHARACTER*2 CODRES(NBRES)
      CHARACTER*8 NOMPAR,NOMRES(NBRES)
      CHARACTER*16 CH16,OPTI
      REAL*8 PGL(3,3),PGL1(3,3),PGL2(3,3),KLV(78)
C     ------------------------------------------------------------------
      DATA NOMRES/'E','NU'/
C     ------------------------------------------------------------------
      ZERO = 0.D0
      DEUX = 2.D0
C     ------------------------------------------------------------------

C     --- RECUPERATION DES CARACTERISTIQUES MATERIAUX ---

      IF (OPTION(1:9).EQ.'RIGI_MECA') THEN
        OPTI = 'ELAS'
      ELSE IF (OPTION(1:14).EQ.'RIGI_FLUI_STRU') THEN
        OPTI = 'ELAS_FLUI'
      ELSE
        CH16 = OPTION
        CALL UTMESS('F','ELEMENTS DE POUTRE (TE0140)',
     &              'L''OPTION "'//CH16//'" EST INCONNUE')
      END IF

      CALL JEVECH('PMATERC','L',IMATE)
      IF (OPTION(1:14).EQ.'RIGI_MECA_TANG') THEN
        CALL TECACH(.TRUE.,.FALSE.,'PTEMPPR',1,ITEMPE)
      ELSE
        CALL TECACH(.TRUE.,.FALSE.,'PTEMPER',1,ITEMPE)
      END IF
      IF (ITEMPE.EQ.0) THEN
        NBPAR = 0
        NOMPAR = ' '
        VALPAR = ZERO
      ELSE
        NBPAR = 1
        NOMPAR = 'TEMP'
        VALPAR = ZR(ITEMPE)
      END IF
      CALL RCVALA(ZI(IMATE),OPTI,NBPAR,NOMPAR,VALPAR,NBRES,NOMRES,
     &            VALRES,CODRES,'FM')
      E = VALRES(1)
      XNU = VALRES(2)

C     --- RECUPERATION DES ORIENTATIONS ---

      CALL JEVECH('PCAORIE','L',LORIEN)

C     --- CALCUL DE LA MATRICE DE RIGIDITE LOCALE ---

      IF (NOMTE(1:13).EQ.'MECA_POU_D_EM') THEN
        CALL PMFRIG(NOMTE,E,XNU,KLV)
      ELSE
        CALL PORIGI(NOMTE,E,XNU,KLV)
      END IF

      CALL JEVECH('PMATUUR','E',LMAT)

      IF (NOMTE(1:12).EQ.'MECA_POU_D_E' .OR.
     &    NOMTE(1:12).EQ.'MECA_POU_D_T') THEN
        NNO = 2
        NC = 6
        CALL MATROT(ZR(LORIEN),PGL)
        CALL UTPSLG(NNO,NC,PGL,KLV,ZR(LMAT))

      ELSE IF (NOMTE(1:12).EQ.'MECA_POU_C_T') THEN
        CALL JEVECH('PGEOMER','L',LX)
        LX = LX - 1
        XL = SQRT((ZR(LX+4)-ZR(LX+1))**2+ (ZR(LX+5)-ZR(LX+2))**2+
     &       (ZR(LX+6)-ZR(LX+3))**2)
        CALL JEVECH('PCAARPO','L',LRCOU)
        RAD = ZR(LRCOU)
        ANGARC = ZR(LRCOU+1)
        ANGS2 = TRIGOM('ASIN',XL/ (DEUX*RAD))
        CALL MATRO2(ZR(LORIEN),ANGARC,ANGS2,PGL1,PGL2)
        CALL CHGREP('LG',PGL1,PGL2,KLV,ZR(LMAT))

      ELSE
        CH16 = NOMTE
        CALL UTMESS('F','ELEMENTS DE POUTRE (TE0140)',
     &              '"'//CH16//'"    NOM D''ELEMENT INCONNU.')
      END IF

      END
