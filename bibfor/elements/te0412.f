      SUBROUTINE TE0412(OPTION,NOMTE)
      IMPLICIT NONE
      INCLUDE 'jeveux.h'
      CHARACTER*16      OPTION,NOMTE

C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ELEMENTS  DATE 25/03/2013   AUTEUR LEBOUVIER F.LEBOUVIER 
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C
C FONCTIONS REALISEES:
C
C      CALCUL DE LA DENSITE D'ENERGIE POTENTIELLE THERMOELASTIQUE
C      A L'EQUILIBRE POUR LES ELEMENTS :
C             - LINEAIRE      : DKT, DST, Q4GG, DKTG ET Q4GG
C             - NON-LINEAIRE  : DKT, DKTG ET Q4GG
C      .SOIT AUX POINTS D'INTEGRATION : OPTION 'ENEL_ELGA'
C      .SOIT AUX NOEUDS               : OPTION 'ENEL_ELNO'
C      .SOIT L INTEGRALE PAR ELEMENT  : OPTION 'ENEL_ELEM'
C
C      OPTIONS : 'ENEL_ELGA'
C                'ENEL_ELEM'
C
C ENTREES  ---> OPTION : OPTION DE CALCUL
C          ---> NOMTE  : NOM DU TYPE ELEMENT
C.......................................................................

      INTEGER    NNOMX
      PARAMETER (NNOMX=4)
      INTEGER    NBSM,NBSIG
      PARAMETER (NBSM=3)
      INTEGER    NPGMX
      PARAMETER (NPGMX=4)

      REAL*8   PGL(3,3)
      REAL*8   EPS(3),KHI(3),GAM(2)
      REAL*8   BF(3,3*NNOMX),BM(3,2*NNOMX),UM(2,NNOMX),UF(3,NNOMX)
      REAL*8   UL(6,NNOMX),QSI,ETA,XYZL(3,4),JACOB(5),POIDS,CARA(25)
      REAL*8   NMM(NBSM),MFF(NBSM)
      REAL*8   ENELM(NPGMX),ENELF(NPGMX)
      REAL*8   ENELT(NPGMX),ENELC(NPGMX),ENEMF(NPGMX)
      REAL*8   ENT,ENM,ENF,ENC,ENMF
      REAL*8   EFFINT(32),EFFORT(32),DEGPG(32)
      REAL*8   ALPHA, BETA, R8DGRD
      REAL*8   T2EV(4),T2VE(4), C, S
      REAL*8   DMEPS(3),DFKHI(3),DCGAM(3)
      REAL*8   DF(9),DM(9),DMF(9),DC(4),DCI(4)
      REAL*8   DMC(3,2),DFC(3,2)
      REAL*8   T1VE(9)


      INTEGER  NDIM,NNO,NNOEL,NPG,IPOIDS,ICOOPG,IVF,IDFDX,IDFD2,JGANO
      INTEGER  JGEOM,IPG,INO,JDEPM,ISIG,JSIG,IDENER,IRET
      INTEGER  ICOMPO,ICONTP,JVARI,NBVAR,IVPG
      INTEGER  MULTIC
      INTEGER  JCARA

      CHARACTER*16 VALK(3),OPTIO2
      LOGICAL  DKQ,DKG,LKIT,COUPMF

      NBSIG = 6
      IF (NOMTE.EQ.'MEDKQU4 ' .OR.
     &     NOMTE.EQ.'MEDSQU4 ' .OR.
     &     NOMTE.EQ.'MEQ4QU4 ') THEN
        DKQ = .TRUE.
        DKG = .FALSE.
      ELSEIF (NOMTE.EQ.'MEDKQG4 ' .OR.
     &        NOMTE.EQ.'MEQ4GG4' ) THEN
        DKQ = .TRUE.
        DKG = .TRUE.
        NBSIG = 8
      ELSEIF (NOMTE.EQ.'MEDKTR3 ' .OR.
     &        NOMTE.EQ.'MEDSTR3 ' .OR.
     &        NOMTE.EQ.'MET3TR3 ') THEN
        DKQ = .FALSE.
        DKG = .FALSE.
      ELSEIF (NOMTE.EQ.'MEDKTG3 ' .OR.
     &        NOMTE.EQ.'MET3GG3 ') THEN
        DKQ = .FALSE.
        DKG = .TRUE.
        NBSIG = 8
      ELSE
        CALL U2MESK('F','ELEMENTS_34',1,NOMTE)
      END IF

      CALL ELREF5(' ','RIGI',NDIM,NNO,NNOEL,NPG,IPOIDS,ICOOPG,
     +                                         IVF,IDFDX,IDFD2,JGANO)

      CALL JEVECH('PGEOMER','L',JGEOM)

      IF (NNO.EQ.3) THEN
         CALL DXTPGL ( ZR(JGEOM), PGL )
      ELSE IF (NNO.EQ.4) THEN
         CALL DXQPGL ( ZR(JGEOM), PGL, 'S', IRET )
      END IF

      CALL UTPVGL(NNO,3,PGL,ZR(JGEOM),XYZL)

      IF ( DKQ ) THEN
         CALL GQUAD4(XYZL,CARA)
      ELSE
         CALL GTRIA3(XYZL,CARA)
      END IF
C
C --- INITIALISATION
C
      CALL R8INIR(NPGMX,0.D0,ENELT,1)
      CALL R8INIR(NPGMX,0.D0,ENELM,1)
      CALL R8INIR(NPGMX,0.D0,ENELF,1)
      CALL R8INIR(NPGMX,0.D0,ENELC,1)
      CALL R8INIR(NPGMX,0.D0,ENEMF,1)
      ENT = 0.0D0
      ENM = 0.0D0
      ENF = 0.0D0
      ENC = 0.0D0
      ENMF= 0.0D0
C
C - ON REGARDE SI ON EST EN LINEAIRE OU ENN NON-LINEAIRE
C
      CALL TECACH('NNN','PCOMPOR','L',1,ICOMPO,IRET)

      IF(IRET.EQ.0) THEN
C
      LKIT = ZK16(ICOMPO)(1:7).EQ.'KIT_DDI'

      IF ( ZK16(ICOMPO)(1:4).EQ.'ELAS'   .OR.
     &     ZK16(ICOMPO)(1:4).EQ.'ENDO'   .OR.
     &     ZK16(ICOMPO)(1:6).EQ.'MAZARS' .OR.
     &     ZK16(ICOMPO)(1:7).EQ.'GLRC_DM'.OR.
     &     ZK16(ICOMPO)(1:11).EQ.'GLRC_DAMAGE'.OR.
     &   (LKIT  .AND. ZK16(ICOMPO+7)(1:7).EQ.'GLRC_DM' )
     &   ) THEN


      IF (OPTION.EQ.'ENEL_ELGA') THEN
        CALL JEVECH('PDEPLAR','L',JDEPM)
        IF (.NOT.DKG) THEN
C ---     PASSAGE DES CONTRAINTES DANS LE REPERE INTRINSEQUE :
          CALL COSIRO(NOMTE,'PCONTRR','L','UI','G',ICONTP,'S')
        ELSE
          CALL JEVECH ( 'PCONTRR' , 'L' , ICONTP )
        ENDIF
      ELSE IF(OPTION.EQ.'ENEL_ELEM') THEN
        CALL JEVECH('PDEPLR','L',JDEPM)
        IF (.NOT.DKG) THEN
C ---     PASSAGE DES CONTRAINTES DANS LE REPERE INTRINSEQUE :
          CALL COSIRO(NOMTE,'PCONTPR','L','UI','G',ICONTP,'S')
        ELSE
          CALL JEVECH ( 'PCONTPR' , 'L' , ICONTP )
        ENDIF
      ENDIF


      IF(DKG .AND. (LKIT .OR. ZK16(ICOMPO)(1:11).EQ.'GLRC_DAMAGE'.OR.
     &   ZK16(ICOMPO)(1:4).EQ.'ELAS')) THEN
        IF (OPTION.EQ.'ENEL_ELGA') THEN
          CALL JEVECH('PVARIGR','L',JVARI)
        ELSE IF(OPTION.EQ.'ENEL_ELEM') THEN
          CALL JEVECH('PVARIPR','L',JVARI)
        ENDIF
      ENDIF
      IF((.NOT. LKIT) .OR. (.NOT. DKG)) THEN
        CALL UTPVGL(NNO,6,PGL,ZR(JDEPM),UL)

C       -- PARTITION DU DEPLACEMENT EN MEMBRANE/FLEXION :
C       -------------------------------------------------
        DO 30,INO = 1,NNOEL
          UM(1,INO) =  UL(1,INO)
          UM(2,INO) =  UL(2,INO)
          UF(1,INO) =  UL(3,INO)
          UF(2,INO) =  UL(5,INO)
          UF(3,INO) = -UL(4,INO)
   30   CONTINUE
      ENDIF

C     -- CALCUL DES CONTRAINTES GENERALISEES :
C     -------------------------------------------------
      IF(DKG) THEN
        DO 40 IPG = 1, NPG
          DO 50 ISIG = 1, NBSIG
            EFFORT((IPG-1)*NBSIG + ISIG) =
     &               ZR(ICONTP-1 + (IPG-1)*8 + ISIG )
 50       CONTINUE
 40     CONTINUE
C --- CALCUL DES MATRICES DE CHANGEMENT DE REPERES 
C
C     T2EV : LA MATRICE DE PASSAGE (2X2) : UTILISATEUR -> INTRINSEQUE
C     T2VE : LA MATRICE DE PASSAGE (2X2) : INTRINSEQUE -> UTILISATEUR
C
        CALL JEVECH ('PCACOQU', 'L', JCARA)
        ALPHA = ZR(JCARA+1) * R8DGRD()
        BETA  = ZR(JCARA+2) * R8DGRD()
        CALL COQREP(PGL,ALPHA,BETA,T2EV,T2VE,C,S)
C
C --- PASSAGE DU VECTEUR DES EFFORTS GENERALISES AUX POINTS
C --- D'INTEGRATION DU REPERE LOCAL AU REPERE INTRINSEQUE
C
        CALL DXEFRO(NPG,T2EV,EFFORT,EFFINT)
      ELSE
        CALL DXEFFI ( OPTION, NOMTE, PGL, ZR(ICONTP),NBSIG, EFFINT )
      ENDIF

C ---- BOUCLE SUR LES POINTS D'INTEGRATION :
C      ===================================
      DO 20 IPG = 1, NPG

        QSI = ZR(ICOOPG-1+NDIM*(IPG-1)+1)
        ETA = ZR(ICOOPG-1+NDIM*(IPG-1)+2)
        IF ( DKQ ) THEN
          CALL JQUAD4 ( XYZL, QSI, ETA, JACOB )
          POIDS = ZR(IPOIDS+IPG-1)*JACOB(1)
          CALL DXQBM ( QSI, ETA, JACOB(2), BM )
          CALL DKQBF ( QSI, ETA, JACOB(2), CARA, BF )
        ELSE
          POIDS = ZR(IPOIDS+IPG-1)*CARA(7)
          CALL DXTBM ( CARA(9), BM )
          CALL DKTBF ( QSI, ETA, CARA, BF )
        ENDIF

        IF(DKG .AND. LKIT) THEN
          READ (ZK16(ICOMPO-1+2),'(I16)') NBVAR
          IVPG = JVARI + (IPG-1)*NBVAR + 10
          DO 55 ISIG = 1, NBSM
            EPS(ISIG) = ZR(IVPG + ISIG )
            KHI(ISIG) = ZR(IVPG + ISIG + 3)
 55       CONTINUE
        ELSE

C         -- CALCUL DE EPS, KHI :
C         -----------------------------------
          CALL PMRVEC('ZERO',3,2*NNOEL,BM, UM, EPS)
          CALL PMRVEC('ZERO',3,3*NNOEL,BF, UF, KHI)

          IF(ZK16(ICOMPO)(1:11).EQ.'GLRC_DAMAGE') THEN
            READ (ZK16(ICOMPO-1+2),'(I16)') NBVAR
            IVPG = JVARI + (IPG-1)*NBVAR - 1
            DO 57 ISIG = 1, NBSM
              EPS(ISIG) = EPS(ISIG) - ZR(IVPG + ISIG )
              KHI(ISIG) = KHI(ISIG) - ZR(IVPG + ISIG + 3)
 57         CONTINUE
          ENDIF
        ENDIF

C  --    CALCUL DE LA DENSITE D'ENERGIE POTENTIELLE ELASTIQUE :
C        ==========================================================
         IF ((OPTION.EQ.'ENEL_ELGA').OR.
     &       (OPTION.EQ.'ENEL_ELEM')) THEN

C  --      DENSITE D'ENERGIE POTENTIELLE ELASTIQUE AU POINT
C  --      D'INTEGRATION COURANT
C          ---------------------
           CALL R8INIR(NBSM,0.D0,NMM,1)
           CALL R8INIR(NBSM,0.D0,MFF,1)

              DO 70 ISIG = 1, NBSM
                 NMM(ISIG) = EFFINT((IPG-1)*NBSIG + ISIG)
                 MFF(ISIG) = EFFINT((IPG-1)*NBSIG + ISIG +3)
  70          CONTINUE

           DO 600 JSIG = 1, NBSM
              ENELM(IPG)  = ENELM(IPG)  + 0.5D0*NMM(JSIG)*EPS(JSIG)
              ENELF(IPG)  = ENELF(IPG)  + 0.5D0*MFF(JSIG)*KHI(JSIG)
  600      CONTINUE
           ENELT(IPG) = ENELM(IPG) + ENELF(IPG)

           ENM = ENM + ENELM(IPG)*POIDS
           ENF = ENF + ENELF(IPG)*POIDS
           ENT = ENT + ENELT(IPG)*POIDS
         ENDIF
C
  20    CONTINUE
        ENDIF
C
C --- CALCUL DES OPTIONS ENEL_ELGA ELEM_ELEM DANS LE CAS LINEAIRE
C     POUR LES ELEMENTS DKT, DST, Q4G, DKTG ET Q4GG
C
      ELSE 

        IF (OPTION.EQ.'ENEL_ELGA') THEN
          CALL JEVECH('PDEPLAR','L',JDEPM)
        ELSE IF(OPTION.EQ.'ENEL_ELEM') THEN
          CALL JEVECH('PDEPLR','L',JDEPM)
        ENDIF

        CALL UTPVGL(NNO,6,PGL,ZR(JDEPM),UL)

        CALL DXMATE('RIGI',DF,DM,DMF,DC,DCI,DMC,DFC,NNO,PGL,MULTIC,
     &               COUPMF,T2EV,T2VE,T1VE)

C     -- CALCUL DES DEFORMATIONS GENERALISEES AUX POINTS DE GAUSS
C     -----------------------------------------------------------
        OPTIO2='DEGE_ELGA'
        IF (NOMTE.EQ.'MEDKTR3' .OR.
     &      NOMTE.EQ.'MEDKTG3' ) THEN
           CALL DKTEDG(XYZL,OPTIO2,PGL,UL,DEGPG,MULTIC)
        ELSE IF (NOMTE.EQ.'MEDSTR3' ) THEN
           CALL DSTEDG(XYZL,OPTIO2,PGL,UL,DEGPG)
        ELSE IF (NOMTE.EQ.'MEDKQU4' .OR.
     &           NOMTE.EQ.'MEDKQG4' ) THEN
           CALL DKQEDG(XYZL,OPTIO2,PGL,UL,DEGPG)
        ELSE IF (NOMTE.EQ.'MEDSQU4' ) THEN
           CALL DSQEDG(XYZL,OPTIO2,PGL,UL,DEGPG)
        ELSE IF (NOMTE.EQ.'MEQ4QU4'.OR.
     &           NOMTE.EQ.'MEQ4GG4' ) THEN
           CALL Q4GEDG(XYZL,OPTIO2,PGL,UL,DEGPG)
        ELSE IF (NOMTE.EQ.'MET3TR3'.OR.
     &           NOMTE.EQ.'MET3GG3') THEN
           CALL T3GEDG(XYZL,OPTIO2,PGL,UL,DEGPG)
        END IF

C ---- BOUCLE SUR LES POINTS D'INTEGRATION :
C      ===================================
        DO 80 IPG = 1, NPG

          QSI = ZR(ICOOPG-1+NDIM*(IPG-1)+1)
          ETA = ZR(ICOOPG-1+NDIM*(IPG-1)+2)
          IF ( DKQ ) THEN
            CALL JQUAD4 ( XYZL, QSI, ETA, JACOB )
            POIDS = ZR(IPOIDS+IPG-1)*JACOB(1)
          ELSE
            POIDS = ZR(IPOIDS+IPG-1)*CARA(7)
          ENDIF

C  --    CALCUL DE LA DENSITE D'ENERGIE POTENTIELLE ELASTIQUE :
C        ==========================================================
          IF ((OPTION.EQ.'ENEL_ELGA').OR.
     &         (OPTION.EQ.'ENEL_ELEM')) THEN
C
            DO 90 ISIG = 1, NBSM
              EPS(ISIG) =  DEGPG((IPG-1)*8 + ISIG)
              KHI(ISIG) =  DEGPG((IPG-1)*8 + ISIG +3)
              IF(ISIG.LE.2) THEN
                GAM(ISIG) =  DEGPG((IPG-1)*8 + ISIG +6)
              ENDIF
  90        CONTINUE
C
C --- CALCUL DES PRODUITS :
C           MEMBRANE     : [DM]{EPSI}
C           FLEXION      : [DF]{KHI}
C           CISAILLEMENT : [DC]{GAM}
C
            EPS(3) = EPS(3)*2.D0
            KHI(3) = KHI(3)*2.D0

            CALL PMRVEC('ZERO',3,3, DM, EPS, DMEPS)
            CALL PMRVEC('ZERO',3,3, DF, KHI, DFKHI)
            CALL PMRVEC('ZERO',2,2, DC, GAM, DCGAM)

            DO 650 ISIG = 1, NBSM
              ENELM(IPG)  = ENELM(IPG)  + 0.5D0*EPS(ISIG)*DMEPS(ISIG)
              ENELF(IPG)  = ENELF(IPG)  + 0.5D0*KHI(ISIG)*DFKHI(ISIG)
              IF(ISIG.LE.2) THEN
                ENELC(IPG)  = ENELC(IPG)  + 0.5D0*GAM(ISIG)*DCGAM(ISIG)
              ENDIF
  650      CONTINUE

C --- COUPLAGE MEMBRANE - FLEXION (ELAS_COQUE)

           IF(COUPMF) THEN
             CALL PMRVEC('ZERO',3,3, DMF, EPS, DMEPS)
             CALL PMRVEC('ZERO',3,3, DMF, KHI, DFKHI)

             DO 110 ISIG=1,NBSM
               ENEMF(IPG)= ENEMF(IPG)+0.5D0*(EPS(ISIG)*DFKHI(ISIG)+
     &                                        KHI(ISIG)*DMEPS(ISIG)) 
110          CONTINUE
           ENDIF

             ENELT(IPG) = ENELM(IPG) + ENELF(IPG)+ 
     &                     ENELC(IPG) + ENEMF(IPG)
             ENM  = ENM  + ENELM(IPG)*POIDS
             ENF  = ENF  + ENELF(IPG)*POIDS
             ENC  = ENC  + ENELC(IPG)*POIDS
             ENMF = ENMF + ENEMF(IPG)*POIDS
             ENT  = ENT  + ENELT(IPG)*POIDS
          ENDIF
C
  80    CONTINUE

      ENDIF

C ---- RECUPERATION DU CHAMP DES DENSITES D'ENERGIE DE DEFORMATION
C ---- ELASTIQUE EN SORTIE
C      -------------------
      IF (OPTION.EQ.'ENEL_ELGA') THEN
        CALL JEVECH('PENERDR','E',IDENER)
      ELSE IF(OPTION.EQ.'ENEL_ELEM') THEN
        CALL JEVECH('PENERD1','E',IDENER)
      ENDIF
C
C --- OPTION ENEL_ELGA
C     ================
        IF (OPTION.EQ.'ENEL_ELGA') THEN
          DO 100 IPG = 1, NPG
            ZR(IDENER-1+(IPG-1)*5 +1) = ENELT(IPG)
            ZR(IDENER-1+(IPG-1)*5 +2) = ENELM(IPG)
            ZR(IDENER-1+(IPG-1)*5 +3) = ENELF(IPG)
            ZR(IDENER-1+(IPG-1)*5 +4) = ENELC(IPG)
            ZR(IDENER-1+(IPG-1)*5 +5) = ENEMF(IPG)
 100      CONTINUE
C
C --- OPTION ENEL_ELEM
C     ================
        ELSEIF (OPTION.EQ.'ENEL_ELEM') THEN
          ZR(IDENER   ) = ENT
          ZR(IDENER +1) = ENM
          ZR(IDENER +2) = ENF
          ZR(IDENER +3) = ENC
          ZR(IDENER +4) = ENMF
        ELSE
C
C  --- OPTION NON DISPONIBLE
C      =====================
          VALK(1) = OPTION
          VALK(2) = NOMTE
          VALK(3) = ZK16(ICOMPO)
          CALL U2MESK('F','ELEMENTS_88',3,VALK)
        ENDIF

      END
