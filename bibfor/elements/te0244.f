      SUBROUTINE TE0244 ( OPTION , NOMTE )
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ELEMENTS  DATE 09/11/2012   AUTEUR DELMAS J.DELMAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C ----------------------------------------------------------------------
C    - FONCTION REALISEE:  CALCUL DES VECTEURS ELEMENTAIRES
C                          OPTION : 'CHAR_THER_EVOLNI'
C                          ELEMENTS 2D ISOPARAMETRIQUES
C
C    - ARGUMENTS:
C        DONNEES:      OPTION       -->  OPTION DE CALCUL
C                      NOMTE        -->  NOM DU TYPE ELEMENT
C
C THERMIQUE NON LINEAIRE LUMPE SANS HYDRATATION, NI SECHAGE
C----------------------------------------------------------------------
C CORPS DU PROGRAMME
C TOLE CRP_20
      IMPLICIT NONE

C PARAMETRES D'APPEL
      INCLUDE 'jeveux.h'

      CHARACTER*16       NOMTE,OPTION


      CHARACTER*8   ELREFE, ALIAS8
      INTEGER ICODRE
      REAL*8        BETA,DBETA,LAMBDA,R8BID,DFDX(9),DFDY(9),POIDS,
     &              R,TPG,THETA,DELTAT,DTPGDX,DTPGDY,COORSE(18),TPGBUF,
     &              VECTT(9),VECTI(9),DLAMBD,
     &              DIFF,TPSEC,CHAL,HYDRPG(9)
      INTEGER       NDIM,NNO,NNOS,KP,NPG,I,J,K,ITEMPS,JGANO,
     &              IPOIDS,IVF,IDFDE,IGEOM,IMATE,ICOMP,IFON(3),
     &              ITEMP,IVECTT,IVECTI,C(6,9),ISE,NSE,NNOP2,
     &              NPG2,IPOID2,IVF2,IDFDE2,ISECHF,ISECHI,IBID,
     &              IHYDR
      LOGICAL       LAXI,LTEATT,LHYD

C====
C 1.1 PREALABLES: RECUPERATION ADRESSES FONCTIONS DE FORMES...
C====
      CALL ELREF1(ELREFE)
C
      IF ( LTEATT(' ','LUMPE','OUI')) THEN
         CALL TEATTR(' ','S','ALIAS8',ALIAS8,IBID)
         IF(ALIAS8(6:8).EQ.'QU9')  ELREFE='QU4'
         IF(ALIAS8(6:8).EQ.'TR6')  ELREFE='TR3'
         CALL ELREF4(ELREFE,'NOEU',NDIM,NNO,NNOS,NPG2,IPOID2,IVF2,
     &            IDFDE2,JGANO)
      ELSE
         CALL ELREF4(ELREFE,'MASS',NDIM,NNO,NNOS,NPG2,IPOID2,IVF2,
     &            IDFDE2,JGANO)
      ENDIF
C
      CALL ELREF4(ELREFE,'RIGI',NDIM,NNO,NNOS,NPG,IPOIDS,IVF,IDFDE,
     &            JGANO)

      IF (LTEATT(' ','AXIS','OUI')) THEN
        LAXI = .TRUE.
      ELSE
        LAXI = .FALSE.
      ENDIF

C====
C 1.2 PREALABLES LIES AUX RECHERCHES DE DONNEES GENERALES
C====

      CALL JEVECH('PGEOMER','L',IGEOM )
      CALL JEVECH('PMATERC','L',IMATE )
      CALL JEVECH('PTEMPSR','L',ITEMPS)
      CALL JEVECH('PTEMPER','L',ITEMP )
      CALL JEVECH('PCOMPOR','L',ICOMP)
      CALL JEVECH('PVECTTR','E',IVECTT)
      CALL JEVECH('PVECTTI','E',IVECTI)

C====
C 1.3 PREALABLES LIES A L'HYDRATATION ET AU SECHAGE
C====
       IF(ZK16(ICOMP)(1:5).EQ.'SECH_') THEN
         IF(ZK16(ICOMP)(1:12).EQ.'SECH_GRANGER'.OR.
     &      ZK16(ICOMP)(1:10).EQ.'SECH_NAPPE') THEN
           CALL JEVECH('PTMPCHI','L',ISECHI)
           CALL JEVECH('PTMPCHF','L',ISECHF)
         ELSE
C          POUR LES AUTRES LOIS, PAS DE CHAMP DE TEMPERATURE
C          ISECHI ET ISECHF SONT FICTIFS
           ISECHI = ITEMP
           ISECHF = ITEMP
         ENDIF
      ENDIF
C
      DELTAT = ZR(ITEMPS+1)
      THETA  = ZR(ITEMPS+2)
      IF(ZK16(ICOMP)(1:5).NE.'SECH_') THEN
         CALL NTFCMA (ZI(IMATE),IFON)
      ENDIF
C====
C 1.4 PREALABLES LIES A L'HYDRATATION
C====
        IF (ZK16(ICOMP)(1:9).EQ.'THER_HYDR') THEN
          LHYD = .TRUE.
          CALL JEVECH('PHYDRPM','L',IHYDR )
          CALL RCVALB('FPG1',1,1,'+',ZI(IMATE),' ','THER_HYDR',0,
     &                 ' ',R8BID,1,'CHALHYDR',CHAL,ICODRE,1)
          DO 150 KP = 1,NPG2
             K = NNO*(KP-1)
             HYDRPG(KP)=0.D0
             DO 160 I = 1,NNO
                HYDRPG(KP)=HYDRPG(KP)+ZR(IHYDR)*ZR(IVF2+K+I-1)
 160         CONTINUE
 150      CONTINUE
        ELSE
          LHYD = .FALSE.
        ENDIF
C====
C 1.5 PREALABLES LIES AUX ELEMENTS LUMPES
C====
C  CALCUL ISO-P2 : ELTS P2 DECOMPOSES EN SOUS-ELTS LINEAIRES

      CALL CONNEC(NOMTE,NSE,NNOP2,C)
      DO 10 I=1,NNOP2
        VECTT(I)=0.D0
        VECTI(I)=0.D0
10    CONTINUE

C====
C 2. CALCULS DU TERME DE RIGIDITE DE L'OPTION
C====
C ----- 2EME FAMILLE DE PTS DE GAUSS/BOUCLE SUR LES SOUS-ELEMENTS

      DO 200 ISE=1,NSE

        IF (ZK16(ICOMP)(1:5).EQ.'THER_') THEN

        DO 305 I=1,NNO
          DO 305 J=1,2
            COORSE(2*(I-1)+J) = ZR(IGEOM-1+2*(C(ISE,I)-1)+J)
305     CONTINUE

        DO 301 KP=1,NPG
          K=(KP-1)*NNO
          CALL DFDM2D ( NNO,KP,IPOIDS,IDFDE,COORSE,DFDX,DFDY,POIDS )
          R      = 0.D0
          TPG    = 0.D0
          DTPGDX = 0.D0
          DTPGDY = 0.D0
          DO 302 I=1,NNO
C CALCUL DE T- ET DE SON GRADIENT
            TPG    = TPG    + ZR(ITEMP-1+C(ISE,I))  * ZR(IVF+K+I-1)
            DTPGDX = DTPGDX + ZR(ITEMP-1+C(ISE,I))  * DFDX(I)
            DTPGDY = DTPGDY + ZR(ITEMP-1+C(ISE,I))  * DFDY(I)
302       CONTINUE
          IF (LAXI) THEN
            DO 303 I=1,NNO
C CALCUL DE R POUR JACOBIEN
              R      = R      + COORSE(2*(I-1)+1)     * ZR(IVF+K+I-1)
303         CONTINUE
            POIDS = POIDS*R
          ENDIF

C CALCUL DES CARACTERISTIQUES MATERIAUX
C ON LES EVALUE AVEC TPG=T-
          TPGBUF = TPG
          CALL RCFODE (IFON(2),TPGBUF,LAMBDA,DLAMBD)
C
C CALCUL STD A 2 OUTPUTS (LE DEUXIEME NE SERT QUE POUR LA PREDICTION)

          DO 320 I=1,NNO
             VECTT(C(ISE,I)) = VECTT(C(ISE,I))- POIDS *
     &          (1.0D0-THETA)*LAMBDA*(DFDX(I)*DTPGDX+DFDY(I)*DTPGDY)
             VECTI(C(ISE,I)) = VECTI(C(ISE,I))- POIDS *
     &          (1.0D0-THETA)*LAMBDA*(DFDX(I)*DTPGDX+DFDY(I)*DTPGDY)
320       CONTINUE
C FIN DE LA BOUCLE SUR LES PT DE GAUSS
301     CONTINUE

C====
C 3. CALCULS DU TERME DE RIGIDITE DE L'OPTION
C====
C ------- 3EME FAMILLE DE PTS DE GAUSS -----------

        DO 405 I=1,NNO
          DO 405 J=1,2
            COORSE(2*(I-1)+J) = ZR(IGEOM-1+2*(C(ISE,I)-1)+J)
405     CONTINUE

        DO 401 KP=1,NPG2
          K=(KP-1)*NNO
          CALL DFDM2D ( NNO,KP,IPOIDS,IDFDE2,COORSE,DFDX,DFDY,POIDS )
          R      = 0.D0
          TPG    = 0.D0
          DO 402 I=1,NNO
C CALCUL DE T-
            TPG    = TPG  + ZR(ITEMP-1+C(ISE,I)) * ZR(IVF2+K+I-1)
402       CONTINUE
          IF (LAXI) THEN
            DO 403 I=1,NNO
C CALCUL DE R POUR JACOBIEN
              R      = R    + COORSE(2*(I-1)+1)    * ZR(IVF2+K+I-1)
403         CONTINUE
            POIDS = POIDS*R
          ENDIF

C CALCUL DES CARACTERISTIQUES MATERIAUX
C ON LES EVALUE AVEC TPG=T-
          TPGBUF = TPG
          CALL RCFODE (IFON(1),TPGBUF,BETA,DBETA)
          IF(LHYD) THEN
C THER_HYDR
            DO 420 I=1,NNO
              VECTT(C(ISE,I)) = VECTT(C(ISE,I)) + POIDS *
     &         ((BETA-CHAL*HYDRPG(KP))*ZR(IVF2+K+I-1)/DELTAT)
              VECTI(C(ISE,I)) = VECTI(C(ISE,I)) + POIDS *
     &       ((DBETA*TPG-CHAL*HYDRPG(KP))*ZR(IVF2+K+I-1)/DELTAT)
420        CONTINUE
          ELSE
C THER_NL
C CALCUL A 2 OUTPUTS (LE DEUXIEME NE SERT QUE POUR LA PREDICTION)

            DO 421 I=1,NNO
              VECTT(C(ISE,I)) = VECTT(C(ISE,I)) + POIDS *
     &          BETA/DELTAT*ZR(IVF2+K+I-1)
              VECTI(C(ISE,I)) = VECTI(C(ISE,I)) + POIDS *
     &          DBETA*TPG/DELTAT*ZR(IVF2+K+I-1)
421         CONTINUE
C FIN BOUCLE LHYD
          ENDIF
C FIN DE BOUCLE SUR LES PT DE GAUSS
401     CONTINUE

       ELSE IF (ZK16(ICOMP)(1:5).EQ.'SECH_') THEN

C        CALCULS DU TERME DE RIGIDITE DE L'OPTION

        DO 307 I=1,NNO
          DO 307 J=1,2
            COORSE(2*(I-1)+J) = ZR(IGEOM-1+2*(C(ISE,I)-1)+J)
307     CONTINUE

          DO 310 KP=1,NPG
            K=(KP-1)*NNO
            CALL DFDM2D(NNO,KP,IPOIDS,IDFDE,COORSE,DFDX,DFDY,POIDS)
            R      = 0.D0
            TPG    = 0.D0
            DTPGDX = 0.D0
            DTPGDY = 0.D0
            TPSEC  = 0.D0
            DO 308 I=1,NNO
              R      = R      + COORSE(2*(I-1)+1)     *ZR(IVF+K+I-1)
              TPG    = TPG    + ZR(ITEMP-1+C(ISE,I))  *ZR(IVF+K+I-1)
              DTPGDX = DTPGDX + ZR(ITEMP-1+C(ISE,I))  *DFDX(I)
              DTPGDY = DTPGDY + ZR(ITEMP-1+C(ISE,I))  *DFDY(I)
              TPSEC  = TPSEC  + ZR(ISECHI-1+C(ISE,I)) *ZR(IVF+K+I-1)
308         CONTINUE
            CALL RCDIFF(ZI(IMATE), ZK16(ICOMP), TPSEC,  TPG, DIFF )
            IF (LAXI) POIDS = POIDS*R
C
            DO 309 I=1,NNO
               VECTT(C(ISE,I)) = VECTT(C(ISE,I))
     &         + POIDS *(
     &           -(1.0D0-THETA)*DIFF*(DFDX(I)*DTPGDX+DFDY(I)*DTPGDY) )
               VECTI(C(ISE,I)) = VECTT(C(ISE,I))
309         CONTINUE
310       CONTINUE

C  CALCULS DU TERME DE MASSE DE L'OPTION

       DO 311 I=1,NNO
          DO 311 J=1,2
            COORSE(2*(I-1)+J) = ZR(IGEOM-1+2*(C(ISE,I)-1)+J)
311     CONTINUE

          DO 314 KP=1,NPG2
            K=(KP-1)*NNO
            CALL DFDM2D(NNO,KP,IPOID2,IDFDE2,COORSE,DFDX,DFDY,POIDS)
            R      = 0.D0
            TPG    = 0.D0
            DO 312 I=1,NNO
              R      = R      + COORSE(2*(I-1)+1)     *ZR(IVF2+K+I-1)
              TPG    = TPG    + ZR(ITEMP-1+C(ISE,I))  *ZR(IVF2+K+I-1)
312         CONTINUE
            IF (LAXI) POIDS = POIDS*R
C
            DO 313 I=1,NNO
               VECTT(C(ISE,I)) = VECTT(C(ISE,I)) + POIDS *
     &          ( TPG/DELTAT*ZR(IVF2+K+I-1) )
               VECTI(C(ISE,I)) = VECTT(C(ISE,I))
313         CONTINUE
314       CONTINUE

        ENDIF
C FIN DE BOUCLE SUR LES SOUS-ELEMENTS
200   CONTINUE

C MISE SOUS FORME DE VECTEUR
      DO 500 I=1,NNOP2
        ZR(IVECTT-1+I)=VECTT(I)
        ZR(IVECTI-1+I)=VECTI(I)
500   CONTINUE
C FIN ------------------------------------------------------------------
      END
