      SUBROUTINE TURIGI(NOMTE,NBRDDL,K)
      IMPLICIT NONE
C MODIF ELEMENTS  DATE 16/10/2007   AUTEUR SALMONA L.SALMONA 
C ======================================================================
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.

C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.

C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
      CHARACTER*16 NOMTE
      INTEGER NBRDDL,NC
      INTEGER NDIM,NNOS,IDFDK,JDFD2,JGANO
      REAL*8 B(4,NBRDDL),K(NBRDDL,NBRDDL)
C ......................................................................

C    - FONCTION REALISEE:  CALCUL DES MATRICES ELEMENTAIRES
C                          TUYAU
C                          OPTION : RIGI_MECA
C    - ARGUMENTS:
C        DONNEES:      B, MASS1,MASS,K : MATRICES
C                      DIMENSIONNEES PAR LE TE0582 APPELANT

C ......................................................................

C --------- DEBUT DECLARATIONS NORMALISEES  JEVEUX --------------------

      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C --------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ---------------------

C     VARIABLES LOCALES

      INTEGER NBRES,ICOUDE,JNBSPI,NBSECM,NBCOUM
      PARAMETER (NBRES=9)
      CHARACTER*8 NOMRES(NBRES),NOMPAR
      CHARACTER*2 CODRET(NBRES)
      PARAMETER (NBSECM=32,NBCOUM=10)
      REAL*8 POICOU(2*NBCOUM+1),POISEC(2*NBSECM+1)
      REAL*8 VALRES(NBRES),VALPAR,THETA,TMINF,TMMOY,TMSUP
      REAL*8 E,NU,H,A,L
      REAL*8 PI,DEUXPI,FI,SINFI
      REAL*8 BETA,CISAIL,G,POIDS,R,R8PI,RAYON
      REAL*8 C(4,4),XPG(4)
      REAL*8 PGL(3,3),PGL4(3,3)
      REAL*8 PGL1(3,3),PGL2(3,3),PGL3(3,3),OMEGA
      INTEGER NNO,NPG,NBCOU,NBSEC,M
      INTEGER IPOIDS,IVF,IRET,INO
      INTEGER IMATE,ITEMP,IMATUU,ICAGEP,IGEOM,NBPAR
      INTEGER IGAU,ICOU,ISECT,I,J,LORIEN,ICOUD2,MMT
      INTEGER JCOOPG,ITABM(8)

      CALL ELREF5(' ','RIGI',NDIM,NNO,NNOS,NPG,IPOIDS,JCOOPG,IVF,IDFDK,
     &            JDFD2,JGANO)

C     DIMENSION DE LA MATRICE STOCKEE SOUS FORME VECTEUR
      NC = NBRDDL* (NBRDDL+1)/2

      PI = R8PI()
      DEUXPI = 2.D0*PI

      CALL JEVECH('PNBSP_I','L',JNBSPI)
      NBCOU = ZI(JNBSPI-1+1)
      NBSEC = ZI(JNBSPI-1+2)

C     -- CALCUL DES POIDS DES COUCHES ET DES SECTEURS:
      POICOU(1) = 1.D0/3.D0
      DO 10 I = 1,NBCOU - 1
        POICOU(2*I) = 4.D0/3.D0
        POICOU(2*I+1) = 2.D0/3.D0
   10 CONTINUE
      POICOU(2*NBCOU) = 4.D0/3.D0
      POICOU(2*NBCOU+1) = 1.D0/3.D0
      POISEC(1) = 1.D0/3.D0
      DO 20 I = 1,NBSEC - 1
        POISEC(2*I) = 4.D0/3.D0
        POISEC(2*I+1) = 2.D0/3.D0
   20 CONTINUE
      POISEC(2*NBSEC) = 4.D0/3.D0
      POISEC(2*NBSEC+1) = 1.D0/3.D0


      CALL JEVECH('PGEOMER','L',IGEOM)
      CALL JEVECH('PCAGEPO','L',ICAGEP)
      H = ZR(ICAGEP+1)
      A = ZR(ICAGEP) - H/2.D0
C A= RMOY, H = EPAISSEUR


      M = 3
      IF (NOMTE.EQ.'MET6SEG3') M = 6



      DO 30 I = 1,NPG
        XPG(I) = ZR(JCOOPG-1+I)
   30 CONTINUE
C     --- RECUPERATION DES ORIENTATIONS ---
      CALL JEVECH('PCAORIE','L',LORIEN)
      CALL CARCOU(ZR(LORIEN),L,PGL,RAYON,THETA,PGL1,PGL2,PGL3,PGL4,NNO,
     &            OMEGA,ICOUD2)
      IF (ICOUD2.GE.10) THEN
        ICOUDE = ICOUD2 - 10
        MMT = 0
        IF (H/A.GT. (0.25D0)) THEN
          CALL U2MESS('A','ELEMENTS4_54')
        END IF
      ELSE
        ICOUDE = ICOUD2
        MMT = 1
      END IF
      CALL JEVECH('PMATERC','L',IMATE)
      NOMRES(1) = 'E'
      NOMRES(2) = 'NU'

C       -- CALCUL DES TEMPERATURES INF, SUP ET MOY
C          (MOYENNE DES NNO NOEUDS) ET DES COEF. DES POLY. DE DEGRE 2 :
C          ------------------------------------------------------------
      CALL MOYTEM('RIGI',NPG,3,'+',VALPAR,IRET)
      NBPAR = 1
      NOMPAR = 'TEMP'

      CALL RCVALA(ZI(IMATE),' ','ELAS',NBPAR,NOMPAR,VALPAR,2,NOMRES,
     &            VALRES,CODRET,'FM')
      E = VALRES(1)
      NU = VALRES(2)
C DEFINITION DE LA MATRICE DE COMPORTEMENT C

      BETA = 1.D0/ (1.D0-NU**2)
      G = 1.D0/ (2.D0* (1.D0+NU))
      CISAIL = 1.D0

C ON MULTIPLIERA PAR E PLUS LOIN

      C(1,1) = BETA
      C(1,2) = NU*BETA
      C(1,3) = 0.D0
      C(1,4) = 0.D0

      C(2,1) = NU*BETA
      C(2,2) = BETA
      C(2,3) = 0.D0
      C(2,4) = 0.D0

      C(3,1) = 0.D0
      C(3,2) = 0.D0
      C(3,3) = G
      C(3,4) = 0.D0

      C(4,1) = 0.D0
      C(4,2) = 0.D0
      C(4,3) = 0.D0
      C(4,4) = G*CISAIL


C     FIN DE LA CONSTRUCTION DE LA MATRICE DE COMPORTEMENT C

C  INITIALISATION DE LA MATRICE K

      DO 60 I = 1,NBRDDL
        DO 50 J = 1,NBRDDL
          K(I,J) = 0.D0
   50   CONTINUE
   60 CONTINUE


C BOUCLE SUR LES POINTS DE GAUSS

      DO 90 IGAU = 1,NPG

C BOUCLE SUR LES POINTS DE SIMPSON DANS L'EPAISSEUR

        DO 80 ICOU = 1,2*NBCOU + 1
          IF (MMT.EQ.0) THEN
            R = A
          ELSE
            R = A + (ICOU-1)*H/ (2.D0*NBCOU) - H/2.D0
          END IF

C BOUCLE SUR LES POINTS DE SIMPSON SUR LA CIRCONFERENCE

          DO 70 ISECT = 1,2*NBSEC + 1
            IF (ICOUDE.EQ.0) THEN
              CALL BCOUDE(IGAU,ICOU,ISECT,L,H,A,M,NNO,NBCOU,
     &                    NBSEC,ZR(IVF),ZR(IDFDK),ZR(JDFD2),MMT,B)
              POIDS = ZR(IPOIDS-1+IGAU)*POICOU(ICOU)*POISEC(ISECT)*
     &                (L/2.D0)*H*DEUXPI/ (4.D0*NBCOU*NBSEC)*R

            ELSE IF (ICOUDE.EQ.1) THEN
              FI = (ISECT-1)*DEUXPI/ (2.D0*NBSEC)
C               FI = FI - OMEGA
              SINFI = SIN(FI)
              L = THETA* (RAYON+R*SINFI)
              CALL BCOUDC(IGAU,ICOU,ISECT,H,A,M,OMEGA,XPG,NNO,
     &                    NBCOU,NBSEC,ZR(IVF),ZR(IDFDK),ZR(JDFD2),RAYON,
     &                    THETA,MMT,B)
              POIDS = ZR(IPOIDS-1+IGAU)*POICOU(ICOU)*POISEC(ISECT)*
     &                (L/2.D0)*H*DEUXPI/ (4.D0*NBCOU*NBSEC)*R

            END IF
C  LE DERNIER TERME C'EST R DU  R DFI DX DZETA

            CALL KCOUDE(NBRDDL,POIDS,B,C,K)
   70     CONTINUE
   80   CONTINUE
   90 CONTINUE

C FIN DU CALCUL DE LA MATRICE DE RIGIDITE

C MULTIPLICATION PAR LE MODULE DE YOUNG E

      DO 110 I = 1,NBRDDL
        DO 100 J = 1,NBRDDL
          K(I,J) = E*K(I,J)
  100   CONTINUE
  110 CONTINUE

C  CHANGEMENT DE REPERE :
C  PASSAGE DU REPERE LOCAL AU REPERE GLOBAL

      IF (ICOUDE.EQ.0) THEN
        CALL KLG(NNO,NBRDDL,PGL,K)
      ELSE IF (ICOUDE.EQ.1) THEN
        CALL KLGCOU(NNO,NBRDDL,PGL1,PGL2,PGL3,PGL4,K)
      END IF

C STOCKAGE DE LA MATRICE DE RIGIDITE

      CALL JEVECH('PMATUUR','E',IMATUU)
      CALL MAVEC(K,NBRDDL,ZR(IMATUU),NC)

  120 CONTINUE
      END
