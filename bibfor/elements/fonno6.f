      SUBROUTINE FONNO6 (RESU,NOMA,NDIM,INA,NBNOSE,ISEG,NSEG,NOE,INDR,
     &                   NBNOEL,IFL,VNOR,VDIR,BASSEG,VECT,SENS)
      IMPLICIT NONE
      INCLUDE 'jeveux.h'
      CHARACTER*8         RESU, NOMA
      INTEGER             NDIM,INA,NBNOSE,ISEG,NOE(4,4)
      INTEGER             INDR(2),NBNOEL,IFL,NSEG
      REAL*8              VDIR(2,3),VNOR(2,3),VECT(3),SENS
      CHARACTER*19        BASSEG

C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ELEMENTS  DATE 13/06/2012   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C TOLE CRS_1404
C     ----------------------------------------------------------------
C     BUTS :
C        - VERIFIER LA COHERENCE DES 2 VECTEURS DIRECTION
C        - DANS LE CAS SYME : DETERMINER LA BONNE DIRECTION
C
C     ----------------------------------------------------
C
C  ENTREES
C       RESU   : NOM DU CONCEPT RESULTAT
C       NOMA   : NOM DU MAILLAGE
C       NDIM   : DIMENSION DU MODELE
C       INA    : INDICE DU NOEUD SOMMET DANS LA LISTE DES NOEUDS DU
C                FOND DE FISSURE
C       NBNOSE : NOMBRE DE NOEUD PAR SEGMENT
C       ISEG   : INDICE DU SEGMENT DU FOND DE FISSURE COURANT
C       NSEG   : NOMBRES DE SEGMENTS DU FOND DE FISSURE
C       NOE    : NOEUDS DES FACES CONTENANT NA et NB ET APPARTENANT AUX
C                MAILLES CONNECTEES AU NOEUD SOMMET COURANT
C                ET AUX LEVRES
C       INDR   : INDICES DES FACES LIBRES DANS LA LISTE DES FACES
C                DES MAILLES CONNECTEES AU FOND DE FISSURE
C       NBNOEL : NOMBRE DE NOEUDS SOMMETS PAR ELEMENTS
C       VNOR   : VECTEUR NORMAL A LA SURFACE DE LA FISSURE
C       VDIR   : VECTEUR DANS LA DIRECTION DE PROPAGATION
C  ENTREE/SORTIE
C       IFL    : INDICE DE LA FACE A CONSIDERER (FACE DE LA LEVRE)
C                (CELUI-CI N'EST CALCULE UNE FOIS POUR TOUTE AU DEBUT)
C       BAFEFO : BASES LOCALES PAR SEGMENT DU FOND (NORMEE)

C       ----------------------------------------------------
C
      INTEGER       JMALE,IAMASE,ITYP,IATYMA,JTANO,JTANE,JBASSE
      INTEGER       I,J,IRET,INP,COMPT,INO
      INTEGER       ILEV,ITANO,ITANE
      INTEGER       NBLEV,NN
      REAL*8        S,NDIR,NNOR,ALPHA,R8PI,ANGMAX,BETA,DDOT
      REAL*8        VECDIR(NDIM),VECNOR(NDIM),VNPREC(NDIM)
      REAL*8        TRIGOM,P
      CHARACTER*6   SYME
      CHARACTER*8   K8B, TYPE
      PARAMETER    (ANGMAX=2.5D0)
      INTEGER      IARG

C     -----------------------------------------------------------------
C
      CALL JEMARQ()

      CALL GETVTX (' ', 'SYME', 1,IARG,1, SYME, IRET)

C     DIRECTION TANGENTE AU POINT ORIGINE
      CALL JEEXIN(RESU//'.DTAN_ORIGINE',ITANO)
      IF (ITANO.NE.0) CALL JEVEUO (RESU//'.DTAN_ORIGINE','L',JTANO)

C     DIRECTION TANGENTE AU POINT EXTREMITE
      CALL JEEXIN(RESU//'.DTAN_EXTREMITE',ITANE)
      IF (ITANE.NE.0) CALL JEVEUO (RESU//'.DTAN_EXTREMITE','L',JTANE)

      CALL JEEXIN(RESU//'.LEVRESUP.MAIL',ILEV)

C     RECUPERATION DE L'ADRESSE DE LA BASE PAR SEGMENT DU FOND
      CALL JEVEUO(BASSEG,'E',JBASSE)


C     1) VERIFICATION DE LA COHERENCE DES 2 VECTEURS DIRECTION
C     --------------------------------------------------------

C     ALPHA = ANGLE ENTRE LES 2 VECTEURS (EN DEGRES)
      S = VDIR(1,1)*VDIR(2,1) + VDIR(1,2)*VDIR(2,2)
     &                        + VDIR(1,3)*VDIR(2,3)

C     ATTENTION, NE JAMAIS UTILISER LA FONCTION FORTRAN ACOS
      ALPHA = TRIGOM('ACOS',S)*180.D0/R8PI()

C     CAS DE FOND "DOUBLE" : ON FEINTE EN FAISANT CROIRE QUE L'ON
C     EST DANS UNE CONFIG SYMETRIQUE
      CALL JEEXIN(RESU//'.FOND_SUP.NOEU',IRET)
      IF (IRET.NE.0) SYME='OUI'

C     CAS SYMETRIQUE, OU CAS DES FONDS DOUBLES
      IF (SYME.EQ.'OUI') THEN

C       ANGLE DOIT ETRE EGAL A 180+-2,5 DEGRES, SINON CA VEUT DIRE
C       QUE L'HYPOTHESE DE LEVRES COLLEES EST FAUSSE : ON PLANTE
        IF (ABS(ALPHA-180.D0).GT.ANGMAX) CALL U2MESS('F','RUPTURE0_34')

      ELSEIF (SYME.EQ.'NON') THEN

C       ANGLE DOIT ETRE EGAL A 0+-5 DEGRES, SINON CA VEUT DIRE
C       QUE L'HYPOTHESE DE LEVRES COLLEES EST FAUSSE : ON PLANTE
        IF (ABS(ALPHA).GT.2.D0*ANGMAX) CALL U2MESS('F','RUPTURE0_34')

      ENDIF


C     2) DANS LE CAS SYMETRIQUE, RECHERCHE DU BON VECTEUR DIRECTION
C     CETTE OPERATION N'EST FAITE QU'UNE SEULE FOIS POUR ISEG=1
C     -------------------------------------------------------------

      IF (SYME.EQ.'OUI'.AND.ISEG.EQ.1) THEN

C       CAS OU LES LEVRES SONT DONNEES
        IF (ILEV.NE.0) THEN

          CALL JEVEUO (RESU//'.LEVRESUP.MAIL', 'L', JMALE )
          CALL JELIRA (RESU//'.LEVRESUP.MAIL', 'LONUTI', NBLEV, K8B)

          CALL JEVEUO (NOMA//'.TYPMAIL','L',IATYMA)

C         BOUCLE SUR LES MAILLES DES LEVRES POUR TROUVER LE BON COTE
          DO 200 I=1,NBLEV
            CALL JENONU(JEXNOM(NOMA//'.NOMMAI',ZK8(JMALE-1 + I)),IRET)
            CALL JEVEUO(JEXNUM(NOMA//'.CONNEX',IRET),'L',IAMASE)
            ITYP = IATYMA-1+IRET
            CALL JENUNO(JEXNUM('&CATA.TM.NOMTM',ZI(ITYP)),TYPE)
            CALL DISMOI('F','NBNO_TYPMAIL',TYPE,'TYPE_MAILLE',
     &                 NN,K8B,IRET)
            DO 210 INP=1,2
              COMPT=0
              DO 220 J=1,NN
                DO 230 INO=1,NBNOEL
                  IF (ZI(IAMASE-1 + J).EQ.NOE(INDR(INP),INO)) THEN
                    COMPT = COMPT+1
                  ENDIF
  230           CONTINUE
  220         CONTINUE
C             ON A TROUVE UNE FACE COINCIDENTE A UNE LEVRE, ON SORT
              IF (COMPT.EQ.NBNOEL) THEN
                IFL = INP
                GOTO 300
              ENDIF
  210       CONTINUE
  200     CONTINUE

C       SI LES LEVRES NE SONT PAS DONNEES, ON TENTE AVEC DTAN_ORIG
        ELSEIF (ITANO.NE.0) THEN

C         LE VECTEUR DIRECTION RETENU EST CELUI DANS LE SENS DE DTAN_ORI
          S = ZR(JTANO)*VDIR(1,1) + ZR(JTANO+1)*VDIR(1,2)
     &                            + ZR(JTANO+2)*VDIR(1,3)

          IF (S.GE.0D0) THEN
            IFL=1
          ELSE
C           ON EST SUR QUE CELUI CI EST BON CAR L'ANGLE EST ENVIRON 180
            IFL=2
          ENDIF

C       SINON, ON PLANTE CAR ON NE SAIT PAS QUELLE DIRECTION CHOISIR
        ELSE
          CALL U2MESS('F','RUPTURE0_8')
        ENDIF

      ENDIF

 300  CONTINUE

C     3) CALCUL DES VRAIS VECTEURS DIRECTION ET NORMAL
C     ------------------------------------------------

C     CAS OU IL FAUT PRENDRE LA MOYENNE DES 2 VECTEURS
      IF (SYME.EQ.'NON') THEN

        CALL ASSERT(IFL.EQ.0)

        NDIR = SQRT(    (VDIR(1,1)+VDIR(2,1))**2
     &                + (VDIR(1,2)+VDIR(2,2))**2
     &                + (VDIR(1,3)+VDIR(2,3))**2   )

        NNOR = SQRT(    (VNOR(1,1)+VNOR(2,1))**2
     &                + (VNOR(1,2)+VNOR(2,2))**2
     &                + (VNOR(1,3)+VNOR(2,3))**2   )

        DO 310 I=1,NDIM
          VECDIR(I) = (VDIR(1,I)+VDIR(2,I))/NDIR
          VECNOR(I) = SENS*(VNOR(1,I)+VNOR(2,I))/NNOR
 310    CONTINUE

C       LE VECTEUR NORMALE DOIT ALLER DE LA LEVRE INF
C       VERS LA LEVRE SUP
        IF ((ISEG.EQ.1) .AND. (ILEV.NE.0)) THEN
          P = DDOT(NDIM,VECNOR,1,VECT,1)
          IF (P .LT. 0.D0) THEN
            SENS = -1.D0
            DO 320 I=1,NDIM
              VECNOR(I) = SENS*VECNOR(I)
 320        CONTINUE
          ENDIF
        ENDIF

C     CAS OU IL NE FAUT PRENDRE QU'UN SEUL VECTEUR
      ELSEIF (SYME.EQ.'OUI') THEN

        CALL ASSERT(IFL.NE.0)

        NDIR = SQRT(    VDIR(IFL,1)**2
     &                + VDIR(IFL,2)**2
     &                + VDIR(IFL,3)**2  )

        NNOR = SQRT(    VNOR(IFL,1)**2
     &                + VNOR(IFL,2)**2
     &                + VNOR(IFL,3)**2  )

        DO 330 I=1,NDIM
          VECDIR(I) = VDIR(IFL,I)/NDIR
          VECNOR(I) = SENS*VNOR(IFL,I)/NNOR
 330    CONTINUE

C       LE VECTEUR NORMALE DOIT ALLER DE LA LEVRE INF
C       VERS LA LEVRE SUP
        IF ((ISEG.EQ.1) .AND. (ILEV.NE.0)) THEN
          P = DDOT(NDIM,VECNOR,1,VECT,1)
          IF (P .LT. 0.D0) THEN
            SENS = -1.D0
            DO 340 I=1,NDIM
              VECNOR(I) = SENS*VECNOR(I)
 340        CONTINUE
          ENDIF
        ENDIF

      ENDIF


C     4) VERIFICATION DE LA COHERENCE DE DTAN_ORIG/EXTR ET AFFECTATION
C     ----------------------------------------------------------------

C     SI DTAN_ORIG EST DONNE, ON VERIFIE QU'IL EST DANS LE BON SENS
      IF (ITANO.NE.0.AND.ISEG.EQ.1) THEN
        S = DDOT(NDIM,ZR(JTANO),1,VECDIR,1)
        IF (S.LE.0.D0) CALL U2MESR('A','RUPTURE0_35',3,VECDIR)
        DO 410 I=1,NDIM
          VECDIR(I) = ZR(JTANO-1+I)
 410    CONTINUE
      ENDIF

C     SI DTAN_EXTR EST DONNE, ON VERIFIE QU'IL EST DANS LE BON SENS
      IF (ITANE.NE.0.AND.ISEG.EQ.NSEG) THEN
        S = DDOT(NDIM,ZR(JTANE),1,VECDIR,1)
        IF (S.LE.0.D0) CALL U2MESR('A','RUPTURE0_36',3,VECDIR)
        DO 420 I=1,NDIM
          VECDIR(I) = ZR(JTANE-1+I)
 420    CONTINUE
      ENDIF


C     5) ECRITURE DE LA BASE PAR SEGMENT DU FOND
C     -------------------------------------------

        DO 510 I=1,NDIM
          ZR(JBASSE-1+2*NDIM*(ISEG-1)+I)      = VECNOR(I)
          ZR(JBASSE-1+2*NDIM*(ISEG-1)+I+NDIM) = VECDIR(I)
 510    CONTINUE


C     6) VERIF QUE LE VECTEUR NORMAL N'EST PAS TROP DIFFERENT DU
C     VECTEUR NORMAL DU SEGMENT PRECEDENT (ON TOLERE 10 DEGRES)
C     ---------------------------------------------------------
C
      IF (ISEG.GT.1) THEN
C       RECUP DU VECTEUR NORMAL PRECEDENT
        DO 610 I=1,NDIM
          VNPREC(I) = ZR(JBASSE-1+2*NDIM*(ISEG-2)+I)
 610    CONTINUE
        S = DDOT(NDIM,VECNOR,1,VNPREC,1)
        BETA = TRIGOM('ACOS',S)*180.D0/R8PI()
        IF (ABS(BETA).GT.10.D0) CALL U2MESS('A','RUPTURE0_61')
      ENDIF

      CALL JEDEMA()
      END
