      SUBROUTINE GCOU2D ( BASE, RESU, NOMA, NOMNO, NOEUD, COOR, RINF,
     &                    RSUP, MODULE, LDIREC, DIR )
      IMPLICIT   NONE
      REAL*8              RINF, RSUP, MODULE, DIR(3), COOR(*)
      CHARACTER*1         BASE
      CHARACTER*8               NOMA,        NOEUD
      CHARACTER*24        RESU,       NOMNO
      LOGICAL             LDIREC

C     ------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ELEMENTS  DATE 15/01/2008   AUTEUR GENIAUT S.GENIAUT 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C
C FONCTION REALISEE:
C
C     OPTION COURONNE EN 2D
C     ---------------------
C
C 1.  POUR LE NOEUD DU FOND DE FISSURE ON RECUPERE
C     LE TRIPLET ( MODULE(THETA), RINF, RSUP )
C
C 2.  ENSUITE ON CALCUL THETA SUR TOUT LES NOEUDS DU MAILLAGE
C
C     ------------------------------------------------------------------
C ENTREE:
C        RESU   : NOM DU CONCEPT DE TYPE CHAM_NO
C        NOMA   : NOM DU MAILLAGE
C        NOMNO  : NOM DE L'OBJET CONTENANT LES NOEUDS DU MAILLAGE
C        NOEUD  : NOM DU NOEUD DU FOND DE FISSURE
C        COOR   : COORDONNEES DES NOEUDS
C        RINF   : RAYON INFERIEURE DE LA COURONNE
C        RSUP   : RAYON SUPERIEURE DE LA COURONNE
C        MODULE : MODULE(THETA)
C        DIR    : DIRECTION DU CHAMPS THETA
C        LDIREC : INDIQUE SI LA DIRECTION A ETE DONNEE
C
C SORTIE:
C        DIR    : DIRECTION DU CHAMPS THETA NORMALISEE
C     ------------------------------------------------------------------
C --------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ---------------------
C
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
      CHARACTER*32       JEXNUM , JEXNOM
C --------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ---------------------
C
      INTEGER       ITHETA, I, IREFE, IDESC, NUM, IERD, NBEL, NUMA
      INTEGER       NEC,IBID,JFOND,NUMFON,N1,N2,NDIM,JGT
      PARAMETER     (NDIM=2)
      REAL*8        XM, YM, XI, YI, EPS, D, NORME, ALPHA, VALX, VALY
      REAL*8        R8PREM
      CHARACTER*8   K8B,FISS
      CHARACTER*16  K16B,NOMCMD
      CHARACTER*19  GRLT,CHGRS
      CHARACTER*24  CHAMNO
C     ------------------------------------------------------------------
C
      CALL JEMARQ()
      EPS = 1.D-06

      CALL GETRES(K8B,K16B,NOMCMD)
      N1=1
      N2=0
          WRITE(6,*)'NOMCMD ',NOMCMD

      IF (NOMCMD.EQ.'CALC_G') THEN
C       CAS CLASSIQUE (N1 NON NUL) OU CAS X-FEM (N2 NON NUL) 
        CALL GETVID ( 'THETA','FOND_FISS', 1,1,1,K8B,N1)
        CALL GETVID ( 'THETA','FISSURE'  , 1,1,1,FISS,N2)
      ENDIF

C     DANS LE CAS X-FEM, SI LA DIRECTION A ETE DONNEE, ON LA GARDE FIXE
C     SI ELLE N'A PAS ETE DONNEE, ON PREND UNE DIRECTION VARIABLE QUI
C     VAUT LE GRADIENT DE LA LEVEL SET TANGENTE
C
      IF (LDIREC) THEN 

C     --- LA DIRECTION DE THETA EST DONNEE, ON LA NORME ---
C
        NORME = 0.D0
        DO 1 I = 1,2
           NORME =  NORME + DIR(I)*DIR(I)
1       CONTINUE
        NORME = SQRT(NORME)
        DIR(1) = DIR(1)/NORME
        DIR(2) = DIR(2)/NORME

      ENDIF
C
C     --- RECUPERATION DU NUMERO DE NOEUD DU FOND DE FISSURE ---
C
      IF (N1.NE.0) THEN
        CALL JENONU ( JEXNOM(NOMNO,NOEUD), NUM )
      ELSEIF (N2.NE.0) THEN
        NUM = 0
      ENDIF
C
C  .DESC
      CHAMNO = RESU(1:19)//'.DESC'
      CALL DISMOI('F','NB_EC','DEPL_R','GRANDEUR',NEC,K8B,IBID)
      CALL WKVECT ( CHAMNO, BASE//' V I', 2+NEC, IDESC )
C
      CALL JEECRA ( CHAMNO, 'DOCU', 0, 'CHNO' )
      CALL JENONU ( JEXNOM('&CATA.GD.NOMGD','DEPL_R'), NUMA )
      ZI(IDESC+1-1) = NUMA
      ZI(IDESC+2-1) = -2
      ZI(IDESC+3-1) = 6
C
C  .REFE
      CHAMNO = RESU(1:19)//'.REFE'
      CALL WKVECT ( CHAMNO, BASE//' V K24', 2, IREFE )
      ZK24(IREFE+1-1) = NOMA//'                '
C
C  .VALE
      CHAMNO = RESU(1:19)//'.VALE'
      CALL DISMOI('F','NB_NO_MAILLA',NOMA,'MAILLAGE',NBEL,K8B,IERD)
      CALL WKVECT ( CHAMNO, BASE//' V R', 2*NBEL, ITHETA )
C
C     --- CALCUL DE THETA ---

C     CAS CLASSIQUE
      IF (N1.NE.0) THEN
C       NOEUD DU FOND DE FISSURE
        ZR(ITHETA + (NUM-1)*2 + 1 - 1) = MODULE*DIR(1)
        ZR(ITHETA + (NUM-1)*2 + 2 - 1) = MODULE*DIR(2)
        XI = COOR((NUM-1)*3+1)
        YI = COOR((NUM-1)*3+2)
C     CAS X-FEM
      ELSEIF (N2.NE.0) THEN
        CALL GETVIS('THETA','NUME_FOND',1,1,1,NUMFON,IBID)
        CALL JEVEUO(FISS//'.FONDFISS','L',JFOND)
        XI = ZR(JFOND-1+4*(NUMFON-1)+1)
        YI = ZR(JFOND-1+4*(NUMFON-1)+2)
        IF (.NOT.LDIREC) THEN
          CALL U2MESS('I','XFEM_10')
C         RÉCUPÉRATION DU GRADIENT DE LST
          GRLT = FISS//'.GRLTNO'
          CHGRS = '&&GCOU2D.GRLT'
          CALL CNOCNS(GRLT,'V',CHGRS)
          CALL JEVEUO(CHGRS//'.CNSV','L',JGT)
        ENDIF
      ENDIF

C 
C BOUCLE SUR LES AUTRES NOEUDS COURANTS DU MAILLAGE
C
      
      DO 500 I=1,NBEL
         IF ( I .NE. NUM ) THEN
            XM = COOR((I-1)*3+1)
            YM = COOR((I-1)*3+2)
            D  = SQRT((XI-XM)*(XI-XM)+(YI-YM)*(YI-YM))
            ALPHA = (D-RINF)/(RSUP-RINF)
            IF (.NOT.LDIREC) THEN
              DIR(1) = ZR(JGT-1+NDIM*(I-1)+1)
              DIR(2) = ZR(JGT-1+NDIM*(I-1)+2)            
              NORME  = SQRT(DIR(1)**2+DIR(2)**2)
C             IL SE PEUT QUE EN CERTAINS POINTS, LE GRADIENT SOIT NUL
C             CES POINTS SONT NORMALEMENT HORS COURONNE THETA
              IF (NORME.LE.R8PREM()) THEN
                IF ((ABS(ALPHA-1).GT.EPS).AND.((ALPHA-1).LE.0)) THEN
                  CALL JENUNO(JEXNUM(NOMA//'.NOMNOE',I),K8B)
                  CALL U2MESK('F','XFEM_12',1,K8B)
                ENDIF
                NORME = 1.D0
              ENDIF
              DIR(1) = DIR(1)/NORME
              DIR(2) = DIR(2)/NORME
            ENDIF
            VALX = MODULE*DIR(1)
            VALY = MODULE*DIR(2)
            IF ((ABS(ALPHA).LE.EPS).OR.(ALPHA.LT.0)) THEN
               ZR(ITHETA+(I-1)*2+1-1) = VALX
               ZR(ITHETA+(I-1)*2+2-1) = VALY
            ELSE IF((ABS(ALPHA-1).LE.EPS).OR.((ALPHA-1).GT.0)) THEN
               ZR(ITHETA+(I-1)*2+1-1) = 0.D0
               ZR(ITHETA+(I-1)*2+2-1) = 0.D0
            ELSE
               ZR(ITHETA+(I-1)*2+1-1) = (1-ALPHA)*VALX
               ZR(ITHETA+(I-1)*2+2-1) = (1-ALPHA)*VALY
            ENDIF
         ENDIF
500   CONTINUE
C
      IF (.NOT.LDIREC) CALL DETRSD('CHAM_NO_S',CHGRS)

      CALL JEDEMA()
      END
