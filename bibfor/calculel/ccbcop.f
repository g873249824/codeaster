      SUBROUTINE CCBCOP(NEWCAL,TYPESD,RESUIN,RESUOU,LISORD,
     &                  NBORDR,LISCHA,NBCHAR,TYPCHA,MODELE,
     &                  CARAEL)
      IMPLICIT NONE
      INTEGER      NBORDR,NBCHAR
      CHARACTER*4  TYPCHA
      CHARACTER*8  RESUOU,RESUIN,MODELE,CARAEL
      CHARACTER*16 TYPESD
      CHARACTER*19 LISORD,LISCHA
      LOGICAL      NEWCAL
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF CALCULEL  DATE 13/09/2011   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE SELLENET N.SELLENET
C ----------------------------------------------------------------------
C  CALC_CHAMP - BOUCLE SUR LA LISTE D'OPTION ET APPEL A CALCOP
C  -    -       -  -                  --
C ----------------------------------------------------------------------
C
C  ROUTINE PREPARANT L'APPEL A CALCOP
C
C IN  :
C   NEWCAL L    BOOLEEN INDIQUANT SI LA SD DOIT ETRE CREEE
C   TYPESD K16  TYPE DES SD SUR LESQUELLES ON TRAVAILLE
C   RESUIN K8   NOM DE LA SD IN
C   RESUOU K8   NOM DE LA SD OUT
C   LISORD K19  NOM DE LA LISTE DES NUMEROS D'ORDRE
C   NBORDR I    NOMBRE DE NUMEROS D'ORDRE
C   LISCHA K19  NOM DE LA LISTE DE CHARGES
C   NBCHAR I    NOMBRE DE CHARGES
C   TYPCHA K4   TYPE DE CHARGE
C   MODELE K8   NOM DU MODELE
C   CARAEL K8   NOM DU CHAMP DES CARACTERISTIQUES ELEMENTAIRES
C ----------------------------------------------------------------------
C   ----- DEBUT DECLARATIONS NORMALISEES  JEVEUX ---------------------
      INTEGER        ZI
      COMMON /IVARJE/ZI(1)
      REAL*8         ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16     ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL        ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8    ZK8
      CHARACTER*16          ZK16
      CHARACTER*24                  ZK24
      CHARACTER*32                          ZK32
      CHARACTER*80                                  ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     ----- FIN  DECLARATIONS  NORMALISEES  JEVEUX ---------------------
      CHARACTER*6 NOMPRO
      PARAMETER  (NOMPRO='CCBCOP')
C
      INTEGER      LTYMO,JORDR,JCHA,IERD,IBID,IRET
      INTEGER      JREFE,IOCC,NBCHRE,III,IFM,NIV
      INTEGER      L1,L2,L3,L4,L5,L6,IPUIS,NBAC,NBPA,NBPARA,JPARA
      INTEGER      IAUX,J,IADOU,IADIN,IORDR,NBROPT,JOPT,IOPT
C
      REAL*8       COEF,PHASE
C
      COMPLEX*16   CCOEF
C
      CHARACTER*8  TYPE
      CHARACTER*8  K8B
      CHARACTER*16 TYPEMO,OPTION
      CHARACTER*19 REFE,MASSE,LISOPT,CHDYNR,CHDEPL
      CHARACTER*24 SOP,NOMPAR,LIGREL
C
      LOGICAL      EXIPLA
C
      CALL JEMARQ()
C
      CALL INFMAJ()
      CALL INFNIV(IFM,NIV)
C
C     ON RECUPERE LE TYPE DE MODE : DYNAMIQUE OU STATIQUE
      TYPEMO = ' '
      IF (TYPESD.EQ.'MODE_MECA') THEN
        CALL RSADPA(RESUIN,'L',1,'TYPE_MODE',1,0,LTYMO,K8B)
        TYPEMO=ZK16(LTYMO)
      ENDIF
C
C     RECUPERATION DE LA LISTE DE NUMEROS D'ORDRE
      CALL JEVEUO(LISORD,'L',JORDR)
      IF (NEWCAL) THEN
        CALL RSCRSD('G',RESUOU,TYPESD,NBORDR)
        CALL TITRE
      ENDIF
C
C     REDUCTION DU LIGREL SUR LA BASE DE GROUP_MA, GROUP_NO, ETC.
      CALL EXLIMA(' ',0,'V',MODELE,LIGREL)
C
      CALL DISMOI('F','EXI_POUX',LIGREL,'LIGREL',IBID,K8B,IERD)
C     SPECIAL POUTRE A LA POUX...
      IF (K8B(1:3).EQ.'OUI') THEN
C       ON VERIFIE SI DERIERE LE TYPESD MODE_MECA ON TROUVE UN MODE_DYN
        IF ((TYPESD.EQ.'MODE_MECA'.AND.TYPEMO(1:8).EQ.'MODE_DYN') .OR.
     &      TYPESD.EQ.'DYNA_TRANS' .OR. TYPESD.EQ.'MODE_ACOU' .OR.
     &      TYPESD.EQ.'DYNA_HARMO') THEN
          REFE=RESUIN
          SOP='MASS_MECA'
          CALL JEVEUO(REFE//'.REFD','L',JREFE)
          MASSE=ZK24(JREFE+1)(1:19)
          IF (MASSE(1:8).NE.'        ')
     &     CALL DISMOI('C','SUR_OPTION',MASSE,'MATR_ASSE',IBID,SOP,IERD)
          CALL RSEXCH(RESUIN,'DEPL',1,CHDEPL,IRET)
          CHDYNR='&&MECALM.M.GAMMA'
          CALL COPICH('V',CHDEPL(1:19),CHDYNR)
        ENDIF
        CALL JEVEUO(LISCHA,'L',JCHA)
C       VERIFIE L'UNICITE DE LA CHARGE REPARTIE
        IOCC=0
        CALL COCHRE(ZK8(JCHA),NBCHAR,NBCHRE,IOCC)
        IF (NBCHRE.GT.1) THEN
          CALL U2MESS('A','CALCULEL2_92')
          GOTO 30
        ENDIF
        DO 10 III=1,NBCHAR
          CALL GETVID('EXCIT','FONC_MULT',III,1,1,K8B,L1)
          CALL GETVID('EXCIT','FONC_MULT_C',III,1,1,K8B,L2)
          CALL GETVR8('EXCIT','COEF_MULT',III,1,1,COEF,L3)
          CALL GETVC8('EXCIT','COEF_MULT_C',III,1,1,CCOEF,L4)
          CALL GETVR8('EXCIT','PHAS_DEG',III,1,1,PHASE,L5)
          CALL GETVIS('EXCIT','PUIS_PULS',III,1,1,IPUIS,L6)
          IF (L1.NE.0 .OR. L2.NE.0 .OR. L3.NE.0 .OR. L4.NE.0 .OR.
     &        L5.NE.0 .OR. L6.NE.0) THEN
            IF (NBCHRE.EQ.0) THEN
              CALL U2MESS('A','CALCULEL2_93')
            ENDIF
          ENDIF
  10    CONTINUE
      ENDIF
C     FIN DES POUTRES POUX
C
C     ON VERIFIE QUE CARA_ELEM EST RENSEIGNES POUR LES COQUES
      EXIPLA=.FALSE.
      CALL DISMOI('F','EXI_COQ1D',MODELE,'MODELE',IBID,K8B,IERD)
      IF (K8B(1:3).EQ.'OUI') EXIPLA=.TRUE.
      CALL DISMOI('F','EXI_COQ3D',MODELE,'MODELE',IBID,K8B,IERD)
      IF (K8B(1:3).EQ.'OUI') EXIPLA=.TRUE.
      CALL DISMOI('F','EXI_PLAQUE',MODELE,'MODELE',IBID,K8B,IERD)
      IF (K8B(1:3).EQ.'OUI') EXIPLA=.TRUE.
C
      IF (EXIPLA.AND.CARAEL.EQ.' ') THEN
        CALL U2MESS('A','CALCULEL2_94')
        GOTO 30
      ENDIF
C
C     RECOPIE DES PARAMETRES DANS LA NOUVELLE SD RESULTAT
      IF (NEWCAL) THEN
        NOMPAR='&&'//NOMPRO//'.NOMS_PARA '
        CALL RSNOPA(RESUIN,2,NOMPAR,NBAC,NBPA)
        NBPARA=NBAC+NBPA
C
        CALL JEVEUO(NOMPAR,'L',JPARA)
        DO 40,IAUX=1,NBORDR
          IORDR=ZI(JORDR+IAUX-1)
          DO 50 J=1,NBPARA
            CALL RSADPA(RESUIN,'L',1,ZK16(JPARA+J-1),IORDR,1,IADIN,TYPE)
            CALL RSADPA(RESUOU,'E',1,ZK16(JPARA+J-1),IORDR,1,IADOU,TYPE)
C
            IF (TYPE(1:1).EQ.'I') THEN
              ZI(IADOU)=ZI(IADIN)
            ELSEIF (TYPE(1:1).EQ.'R') THEN
              ZR(IADOU)=ZR(IADIN)
            ELSEIF (TYPE(1:1).EQ.'C') THEN
              ZC(IADOU)=ZC(IADIN)
            ELSEIF (TYPE(1:3).EQ.'K80') THEN
              ZK80(IADOU)=ZK80(IADIN)
            ELSEIF (TYPE(1:3).EQ.'K32') THEN
              ZK32(IADOU)=ZK32(IADIN)
            ELSEIF (TYPE(1:3).EQ.'K24') THEN
              ZK24(IADOU)=ZK24(IADIN)
            ELSEIF (TYPE(1:3).EQ.'K16') THEN
              ZK16(IADOU)=ZK16(IADIN)
            ELSEIF (TYPE(1:2).EQ.'K8') THEN
              ZK8(IADOU)=ZK8(IADIN)
            ENDIF
   50     CONTINUE
   40   CONTINUE
        CALL JEDETR(NOMPAR)
      ENDIF
C
C     FABRICATION DE LA LISTE DES OPTIONS
      LISOPT = '&&'//NOMPRO//'.LIS_OPTION'
      CALL CCLOPU(RESUIN,RESUOU,LISORD,NBORDR,LISOPT,NBROPT)
      CALL JEVEUO(LISOPT,'L',JOPT)
C
C     BOUCLE SUR LES OPTIONS DEMANDEES PAR L'UTILISATEUR
      DO 20 IOPT=1,NBROPT
C
        OPTION=ZK16(JOPT+IOPT-1)
C
        IF ( (OPTION.EQ.'FORC_NODA').OR.
     &       (OPTION.EQ.'REAC_NODA') ) THEN
          CALL CCFNRN(OPTION,TYPESD,RESUIN,RESUOU,LISORD)
        ELSE
          CALL CALCOP(OPTION,RESUIN,RESUOU,LISORD,NBORDR,
     &                LISCHA,NBCHAR,TYPCHA,TYPESD,NBCHRE,
     &                IOCC,SOP,IRET)
C
          IF ( IRET.NE.0 ) CALL ASSERT(.FALSE.)
        ENDIF
  20  CONTINUE
C
  30  CONTINUE
C
      CALL JEDETR(LISOPT)
      CALL JEDEMA()
C
      END
