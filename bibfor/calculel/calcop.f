      SUBROUTINE CALCOP(OPTION,LISOPT,RESUIN,RESUOU,LISORD,
     &                  NBORDR,LISCHA,NCHARG,CHTYPE,TYPESD,
     &                  CODRET)
      IMPLICIT NONE
C     --- ARGUMENTS ---
      INCLUDE 'jeveux.h'

      CHARACTER*32 JEXNOM
      INTEGER      NBORDR,NCHARG,CODRET
      CHARACTER*4  CHTYPE
      CHARACTER*8  RESUIN,RESUOU
      CHARACTER*16 OPTION,TYPESD
      CHARACTER*19 LISCHA,LISORD
      CHARACTER*(*)LISOPT
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF CALCULEL  DATE 05/02/2013   AUTEUR DELMAS J.DELMAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C ----------------------------------------------------------------------
C  CALC_CHAMP - CALCUL D'UNE OPTION
C               ----         --
C ----------------------------------------------------------------------
C
C  ROUTINE DE BASE DE CALC_CHAMP
C
C IN  :
C   OPTION  K16  NOM DE L'OPTION A CALCULER
C   RESUIN  K8   NOM DE LA STRUCTURE DE DONNEES RESULTAT IN
C   RESUOU  K8   NOM DE LA STRUCTURE DE DONNEES RESULTAT OUT
C   NBORDR  I    NOMBRE DE NUMEROS D'ORDRE
C   LISORD  K19  LISTE DE NUMEROS D'ORDRE
C   LISCHA  K19  NOM DE L'OBJET JEVEUX CONTENANT LES CHARGES
C   NCHARG  I    NOMBRE DE CHARGES
C   CHTYPE  K4   TYPE DES CHARGES
C   TYPESD  K16  TYPE DE LA STRUCTURE DE DONNEES RESULTAT
C
C IN/OUT :
C   LISOPT  K19  LISTE D'OPTIONS A METTRE SUR LA BASE GLOBALE
C                ATTENTION CETTE LISTE PEUT ETRE MODIFIEE PAR CALCOP
C                LES OPTIONS DECLENCHEES SONT SUPPRIMEES DE LA LISTE
C
C OUT :
C   CODRET  I    CODE RETOUR (0 SI OK, 1 SINON)
C ----------------------------------------------------------------------
C RESPONSABLE SELLENET N.SELLENET
      LOGICAL      EXITIM,EXIPOU,OPTDEM

      INTEGER      NOPOUT,JLISOP,IOP,IBID,NBORD2,LRES,N0,N1,N2,N3,POSOPT
      INTEGER      NBTROU,MINORD,MAXORD,JLINST,IORDR,NBORDL
      INTEGER      NUMORD,IEXCIT,IRET,NPASS,NBMA,CODRE2,JLIOPG,NBOPT
      INTEGER      INDK16,JACALC,NORDM1,JPARA,NBCHRE,IOCCUR,GETEXM

      REAL*8       R8B

      COMPLEX*16   C16B

      CHARACTER*1  BASOPT
      CHARACTER*5  NUMOPT
      CHARACTER*8  MODELE,CARAEL,K8B
      CHARACTER*8  NOMAIL,NOBASE
      CHARACTER*11 NOBAOP
      CHARACTER*16 OPTIO2,TYPMCL(4),MOTCLE(4)
      CHARACTER*19 EXCIT,NONBOR
      CHARACTER*24 CHAOUT,LIGREL,MATECO,LIGRES
      CHARACTER*24 NOLIOP,LISINS,MESMAI,LACALC,SUROPT
      INTEGER      IARG
C
      LOGICAL      LIGMOD
C
      CALL JEMARQ()
      CODRET = 1
      NPASS = 0
      NOBASE = '&&CALCOP'
C
C     ON CONSERVE CES OPTIONS POUR PERMETTRE LE CALCUL DANS STANLEY
      IF ( (OPTION.EQ.'ERTH_ELEM').OR.
     &     (OPTION.EQ.'ERTH_ELNO') ) GOTO 9999

      IF ( (OPTION.EQ.'ERME_ELEM').OR.
     &     (OPTION.EQ.'ERME_ELNO').OR.
     &     (OPTION.EQ.'QIRE_ELEM').OR.
     &     (OPTION.EQ.'QIRE_ELNO') ) GOTO 9999

      IF ( (OPTION.EQ.'SIZ1_NOEU').OR.
     &     (OPTION.EQ.'SIZ2_NOEU').OR.
     &     (OPTION.EQ.'ERZ1_ELEM').OR.
     &     (OPTION.EQ.'ERZ2_ELEM').OR.
     &     (OPTION.EQ.'QIZ1_ELEM').OR.
     &     (OPTION.EQ.'QIZ2_ELEM') ) GOTO 9999

      IF ( (OPTION.EQ.'SING_ELEM').OR.
     &     (OPTION.EQ.'SING_ELNO') ) GOTO 9999
C
      CALL CCLIOP('OPTION',OPTION,NOBASE,NOLIOP,NOPOUT)
      IF ( NOPOUT.EQ.0 ) GOTO 9999
C
      NONBOR = NOBASE//'.NB_ORDRE'
      LACALC = NOBASE//'.ACALCULER'
C
      CALL JEVEUO(NOLIOP,'L',JLISOP)
C
      JLIOPG = 0
      NBOPT = 0
      IF ( LISOPT.NE.' ' ) THEN
        CALL JEVEUO(LISOPT,'E',JLIOPG)
        CALL JELIRA(LISOPT,'LONMAX',NBOPT,K8B)
      ENDIF
C
      EXITIM = .FALSE.
      CALL JENONU(JEXNOM(RESUIN//'           .NOVA','INST'),IRET)
      IF (IRET.NE.0) EXITIM = .TRUE.

      CALL RSORAC(RESUIN,'TOUT_ORDRE',IBID,R8B,K8B,C16B,R8B,K8B,
     &            NBORD2,1,NBTROU)
      IF ( NBTROU.LT.0 ) NBTROU = -NBTROU
      CALL WKVECT(NONBOR,'V V I',NBTROU,LRES)
      CALL RSORAC(RESUIN,'TOUT_ORDRE',IBID,R8B,K8B,C16B,R8B,
     &            K8B,ZI(LRES),NBTROU,NBORD2)
C     ON EN EXTRAIT LE MIN ET MAX DES NUMEROS D'ORDRE DE LA SD_RESUTLAT
      MINORD = ZI(LRES)
      MAXORD = ZI(LRES+NBORD2-1)

      CALL RSLESD(RESUIN,MINORD,MODELE,MATECO(1:8),CARAEL,EXCIT,IEXCIT)
      CALL RSADPA(RESUIN,'L',1,'MODELE',MINORD,0,JPARA,K8B)
      IF ( ZK8(JPARA).NE.MODELE ) THEN
        CALL U2MESS('A','CALCULEL_24')
      ENDIF
C
      CALL DISMOI('F','NOM_MAILLA',MODELE,'MODELE',IBID,NOMAIL,IRET)
C
      CALL CCVEPO(MODELE,RESUIN,LISCHA,NCHARG,TYPESD,
     &            NBCHRE,IOCCUR,SUROPT,LIGREL,EXIPOU)
C
      IF ( OPTION(6:9).EQ.'NOEU' ) THEN
        NBMA = 0
        N0 = GETEXM(' ','GROUP_MA')
        N1 = GETEXM(' ','MAILLE')
        MESMAI = '&&OP0106.MES_MAILLES'
        IF ( N0+N1.NE.0 ) THEN
          CALL GETVTX(' ','MAILLE',1,IARG,0,K8B,N2)
          CALL GETVTX(' ','GROUP_MA',1,IARG,0,K8B,N3)
          IF  ( N2+N3.NE.0 ) THEN
            MOTCLE(1) = 'GROUP_MA'
            MOTCLE(2) = 'MAILLE'
            TYPMCL(1) = 'GROUP_MA'
            TYPMCL(2) = 'MAILLE'
            CALL RELIEM(' ',NOMAIL,'NU_MAILLE',' ',1,2,MOTCLE,TYPMCL,
     &                MESMAI,NBMA)
          ENDIF
        ENDIF
      ENDIF
C
C     PREMIER PASSAGE POUR DETERMINER LES OPTIONS REELLEMENT A CALCULER
C     EN PRENANT EN COMPTE LA DEPENDANCE
C     PAR EXEMPLE SI SIGM_NOEU A BESOIN DE SIGM_ELNO QUI A BESOIN DE
C     SIGM_ELGA ET QUE SIGM_ELNO EST PRESENTE ALORS ON N'A PAS BESOIN
C     DE CALCULER SIGM_ELGA
      CALL WKVECT(LACALC,'V V I',NOPOUT,JACALC)
C
C     PAR DEFAUT, ON DOIT TOUT CALCULER
C     ON COMMENCE PAR CALCULER LA LISTE DE NUMEROS D'ORDRE
      DO 5 IOP = 1,NOPOUT
        OPTIO2 = ZK24(JLISOP+IOP-1)(1:16)
C
        OPTDEM = .FALSE.
        IF ( OPTION.EQ.OPTIO2 ) OPTDEM = .TRUE.
C
        CALL CCLORD(IOP,NBORDR,LISORD,NOBASE,OPTDEM,
     &              MINORD,MAXORD,RESUIN,RESUOU,LISINS)
        ZI(JACALC-1+IOP) = 1
   5  CONTINUE
C
C     PUIS ON RETIRE LES OPTIONS DONT LE CALCUL N'EST PAS UTILE
      DO 10 IOP = NOPOUT-1,1,-1
        OPTIO2 = ZK24(JLISOP+IOP-1)(1:16)
C
        CALL CCLODR(IOP,NBORDR,LISORD,NOBASE,MINORD,
     &              MAXORD,RESUIN,RESUOU,LACALC)
   10 CONTINUE

C
C     COMME ON PARCOURT LES OPTIONS DANS L'ORDRE INVERSE DES DEPENDANCES
C     ON SAIT QUE LES LISTES D'INSTANT SERONT CORRECTEMENT CREES
      NOBAOP = NOBASE//'.OP'
      DO 20 IOP = 1,NOPOUT
        IF ( ZI(JACALC-1+IOP).EQ.0 ) GOTO 20
        OPTIO2 = ZK24(JLISOP+IOP-1)(1:16)
C
        OPTDEM = .FALSE.
        IF ( OPTION.EQ.OPTIO2 ) OPTDEM = .TRUE.
C
C       RECUPERATION DE LA LISTE DE NUMERO D'ORDRE
        CALL CODENT(IOP,'D0',NUMOPT)
        LISINS = NOBAOP//NUMOPT
        CALL JEVEUO(LISINS,'L',JLINST)
        NBORDL = ZI(JLINST)
C
C       SI L'OPTION CALCULEE ICI EST DEMANDEE PAR
C       L'UTILISATUER, ON LA MET SUR LA BASE GLOBALE
        BASOPT = 'G'
        IF ( OPTIO2.NE.OPTION ) BASOPT = 'V'
C
        IF ( NBOPT.NE.0 ) THEN
          POSOPT = INDK16(ZK16(JLIOPG),OPTIO2,1,NBOPT)
          IF ( POSOPT.NE.0 ) BASOPT = 'G'
C         CE BLOC A ETE AJOUTE POUR LE CAS OU UNE OPTION1 A DECLENCHE
C         LE CALCUL D'UNE OPTION2 MAIS QUE CETTE OPTION2 EST ENSUITE
C         REDEMANDEE DANS LE MEME CALC_CHAMP PAR L'UTILISATEUR
          IF ( .NOT.OPTDEM.AND.POSOPT.NE.0 )
     &      ZK16(JLIOPG+POSOPT-1) = ' '
        ENDIF
C
        IF ( OPTDEM.AND.(NBORDL.EQ.0) ) THEN
          CALL U2MESK('A','CALCCHAMP_1',1,OPTIO2)
        ENDIF
C
        CODRE2 = 0
        LIGREL = ' '
        LIGRES = ' '
        DO 30 IORDR = 1,NBORDL
          LIGMOD = .FALSE.
          NUMORD = ZI(JLINST+IORDR+2)
C
C         NORDM1 NE SERT QUE POUR ENDO_ELGA
          NORDM1 = NUMORD-1
C
          IF ( OPTIO2(6:9).EQ.'NOEU' ) THEN
C
            CALL MEDOM2(MODELE,MATECO,CARAEL,LISCHA,NCHARG,CHTYPE,
     &                  RESUIN,NUMORD,NBORDR,'V',NPASS,LIGREL)
C
            IF ( LIGRES.NE.LIGREL ) LIGMOD = .TRUE.
C
            CALL CCCHNO(OPTIO2,NUMORD,RESUIN,RESUOU,CHAOUT,
     &                  MESMAI,NOMAIL,MODELE,CARAEL,BASOPT,
     &                  LIGREL,LIGMOD,CODRE2)
C
          ELSEIF ( OPTIO2(6:7).EQ.'EL' ) THEN
C
            IF ( OPTION.EQ.'SIRO_ELEM' ) THEN
              CALL SRMEDO(MODELE,MATECO,CARAEL,LISCHA,NCHARG,CHTYPE,
     &                    RESUIN,NUMORD,NBORDR,BASOPT,NPASS,LIGREL)
            ELSE
              CALL MEDOM2(MODELE,MATECO,CARAEL,LISCHA,NCHARG,CHTYPE,
     &                    RESUIN,NUMORD,NBORDR,BASOPT,NPASS,LIGREL)
            ENDIF
C
            CALL CCCHEL(OPTIO2,MODELE,RESUIN,RESUOU,NUMORD,
     &                  NORDM1,MATECO,CARAEL,TYPESD,LIGREL,
     &                  EXIPOU,EXITIM,LISCHA,NBCHRE,IOCCUR,
     &                  SUROPT,BASOPT,CHAOUT)
            IF ( CHAOUT.EQ.' ' ) GOTO 20
C
          ENDIF
C
          CALL EXISD('CHAMP_GD',CHAOUT,IRET)
          IF ( BASOPT.EQ.'G' ) THEN
            IF (IRET.EQ.0) THEN
              CODRET = 1
              CALL U2MESK('A','CALCULEL2_89',1,OPTIO2)
            ELSE
              CALL RSNOCH(RESUOU,OPTIO2,NUMORD)
            ENDIF
          ENDIF
C
          IF (EXIPOU) CALL JEDETC('V','&&MECHPO',1)
          CALL DETRSD('CHAM_ELEM_S',CHAOUT)
C
          LIGRES = LIGREL
   30   CONTINUE
C
   20 CONTINUE
C
      CODRET = 0
C
C     NETTOYAGE
      CALL JEDETR(NONBOR)
      CALL JEDETR(LACALC)
      CALL CCNETT(NOBASE,NOPOUT)
      IF ( OPTION(6:9).EQ.'NOEU'.AND.NBMA.NE.0 ) CALL JEDETR(MESMAI)

 9999 CONTINUE

      CALL JEDEMA()

      END
