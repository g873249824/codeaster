      SUBROUTINE CAZOCM(CHAR  ,MOTFAC,NDIM  ,FORMUL,IZONE )
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF MODELISA  DATE 06/05/2008   AUTEUR CNGUYEN C.NGUYEN 
C ======================================================================
C COPYRIGHT (C) 1991 - 2008  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      CHARACTER*8  CHAR
      CHARACTER*16 MOTFAC     
      INTEGER      NDIM,IZONE
      CHARACTER*16 FORMUL
C      
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (METHODE MAILLEE - LECTURE DONNEES)
C
C LECTURE DES PRINCIPALES CARACTERISTIQUES DU CONTACT 
C CONCERNANT L'APPARIEMENT ET SES OPTIONS
C      
C ----------------------------------------------------------------------
C
C
C IN  CHAR   : NOM UTILISATEUR DU CONCEPT DE CHARGE
C IN  FORMUL : TYPE DE FORMULATION 'DISCRETE' OU 'CONTINUE'
C IN  MOTFAC : MOT-CLE FACTEUR (VALANT 'CONTACT')
C IN  NDIM   : NOMBRE DE DIMENSIONS DU PROBLEME
C IN  IZONE  : INDICE POUR LIRE LES DONNEES DANS AFFE_CHAR_MECA
C
C -------------- DEBUT DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C ---------------- FIN DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER      CFMMVD,ZMETH,ZTOLE,ZDIRN
      INTEGER      NOC
      CHARACTER*24 METHCO,TOLECO
      INTEGER      JMETH ,JTOLE     
      CHARACTER*24 DIRAPP,DIRNOR
      INTEGER      JDIRAP,JDIRNO
      CHARACTER*24 JEUSUP,JEUFO1,JEUFO2,JEUFO3
      INTEGER      JJSUP,JJFO1,JJFO2,JJFO3      
      CHARACTER*16 LISSA,VALK(2)
      CHARACTER*16 APPA,NORM,APTY,TYPNOR
      REAL*8       DIR(3),NOOR,R8PREM
      REAL*8       TOLJ,TOLA
      CHARACTER*8  JEUF1,JEUF2
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ
C
C --- INITIALISATIONS
C
      TOLJ   = 0.D0  
      TOLA   = 0.D0   
      JEUF1  = ' '
      JEUF2  = ' ' 
C
C --- LECTURE DES STRUCTURES DE DONNEES DE CONTACT
C 
      METHCO = CHAR(1:8)//'.CONTACT.METHCO'
      TOLECO = CHAR(1:8)//'.CONTACT.TOLECO'       
      DIRAPP = CHAR(1:8)//'.CONTACT.DIRAPP'
      DIRNOR = CHAR(1:8)//'.CONTACT.DIRNOR'      
      JEUSUP = CHAR(1:8)//'.CONTACT.JSUPCO'
      JEUFO1 = CHAR(1:8)//'.CONTACT.JFO1CO'
      JEUFO2 = CHAR(1:8)//'.CONTACT.JFO2CO'
      JEUFO3 = CHAR(1:8)//'.CONTACT.JFO3CO'           
C
      CALL JEVEUO(DIRAPP,'E',JDIRAP)
      CALL JEVEUO(DIRNOR,'E',JDIRNO)
      CALL JEVEUO(METHCO,'E',JMETH )
      CALL JEVEUO(JEUFO1,'E',JJFO1 )
      CALL JEVEUO(JEUFO2,'E',JJFO2 )
      CALL JEVEUO(JEUFO3,'E',JJFO3 )      
      CALL JEVEUO(JEUSUP,'E',JJSUP )
      CALL JEVEUO(TOLECO,'E',JTOLE )    
C
      ZMETH = CFMMVD('ZMETH')
      ZTOLE = CFMMVD('ZTOLE')   
      ZDIRN = CFMMVD('ZDIRN')        
C
C --- RECUPERATION DU TYPE D'APPARIEMENT
C
      CALL GETVTX(MOTFAC,'APPARIEMENT',IZONE,1,1,APPA,NOC)
C
      IF (FORMUL.EQ.'DISCRETE') THEN
        IF (APPA(1:5) .EQ. 'NODAL') THEN
          ZI(JMETH+ZMETH*(IZONE-1)+1) = 0
        ELSEIF (APPA(1:9) .EQ. 'MAIT_ESCL') THEN
          ZI(JMETH+ZMETH*(IZONE-1)+1) = 1       
        ELSE
          VALK(1) = APPA
          VALK(2) = 'APPARIEMENT'
          CALL U2MESK('F','CONTACT3_3',2,VALK)
        END IF               
      ELSEIF (FORMUL.EQ.'CONTINUE') THEN
        IF (APPA(1:9) .EQ. 'MAIT_ESCL') THEN
          ZI(JMETH+ZMETH*(IZONE-1)+1) = 1       
        ELSE
          VALK(1) = APPA
          VALK(2) = 'APPARIEMENT'
          CALL U2MESK('F','CONTACT3_3',2,VALK)
        END IF      
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- RECUPERATION DE L'ENVIRONNEMENT DE RECHERCHE: NOEUD_BOUCLE UNIQ
C
      ZI(JMETH+ZMETH*(IZONE-1)+5) = 1
C
C --- LISSAGE
C
      CALL GETVTX(MOTFAC,'LISSAGE',IZONE,1,1,LISSA,NOC)
      IF (LISSA(1:3) .EQ. 'NON') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+10) = 0
      ELSEIF (LISSA(1:3) .EQ. 'OUI') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+10) = 1  
      ELSE
        VALK(1) = LISSA
        VALK(2) = 'LISSAGE'
        CALL U2MESK('F','CONTACT3_3',2,VALK) 
      END IF
C
C --- RECH. APPARIEMENT DANS UNE DIRECTION FIXE: DIRE_APPA
C     
      CALL GETVTX(MOTFAC,'TYPE_APPA',IZONE,1,1,APTY,NOC)
      IF (APTY(1:6) .EQ. 'PROCHE') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+9) = 0
      ELSEIF (APTY(1:4) .EQ. 'FIXE') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+9) = 1
        CALL GETVR8(MOTFAC,'DIRE_APPA',IZONE,1,3,DIR,NOC)
        CALL NORMEV(DIR   ,NOOR  )
        IF (NOOR.LE.R8PREM()) THEN
          CALL U2MESS('F','CONTACT3_15')
        ENDIF
        ZR(JDIRAP+3*(IZONE-1))   = DIR(1)
        ZR(JDIRAP+3*(IZONE-1)+1) = DIR(2)
        ZR(JDIRAP+3*(IZONE-1)+2) = DIR(3)        
      ELSE
        VALK(1) = APTY
        VALK(2) = 'TYPE_APPA'
        CALL U2MESK('F','CONTACT3_3',2,VALK) 
      END IF      
C
C --- PARAMETRE APPARIEMENT: DIST_MAIT/DIST_ESCL
C
        CALL GETVID(MOTFAC,'DIST_MAIT',IZONE,1,1,JEUF1,NOC)
        IF (NOC .NE. 0) ZK8(JJFO1+IZONE-1) = JEUF1
        CALL GETVID(MOTFAC,'DIST_ESCL',IZONE,1,1,JEUF2,NOC)
        IF (NOC .NE. 0) ZK8(JJFO2+IZONE-1) = JEUF2
C
C --- PARAMETRE APPARIEMENT: TOLE_PROJ_EXT
C --- TOLE_PROJ_EXT <0: LA PROJECTION HORS DE LA MAILLE EST INTERDITE
C --- TOLE_PROJ_EXT >0: LA PROJECTION HORS DE LA MAILLE EST AUTORISEE
C ---                    MAIS LIMITEE PAR TOLJ
C
      CALL GETVR8(MOTFAC,'TOLE_PROJ_EXT',IZONE,1,1,TOLJ,NOC)
      IF (TOLJ .LT. 0.D0) THEN
        ZR(JTOLE+ZTOLE*(IZONE-1)) = -1.D0
      ELSE
        ZR(JTOLE+ZTOLE*(IZONE-1)) = TOLJ
      END IF
C
C --- PARAMETRE APPARIEMENT: TOLE_APPA
C --- TOLE_APPA <0: ON APPARIE QUELQUE SOIT LA DISTANCE ESCLAVE/MAITRE
C --- TOLE_APPA >0: ON APPARIE SI DISTANCE ESCLAVE/MAITRE<TOLE
C
      CALL GETVR8(MOTFAC,'TOLE_APPA',IZONE,1,1,TOLA,NOC)
      IF (TOLA .LT. 0.D0) THEN
        ZR(JTOLE+ZTOLE*(IZONE-1)+6) = -1.D0
      ELSE
        ZR(JTOLE+ZTOLE*(IZONE-1)+6) = TOLA
      END IF
C
C --- TYPE DE NORMALE
C
      CALL GETVTX(MOTFAC,'NORMALE',IZONE,1,1,NORM,NOC)
C
      IF (NORM(1:4) .EQ. 'MAIT') THEN
        IF (NORM(5:9).EQ.'_ESCL') THEN
          ZI(JMETH+ZMETH*(IZONE-1)+8) = 1
        ELSE 
          ZI(JMETH+ZMETH*(IZONE-1)+8) = 0
        ENDIF  
      ELSEIF (NORM(1:4) .EQ. 'ESCL') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+8) = 2  
      ELSE
        VALK(1) = NORM
        VALK(2) = 'NORMALE'
        CALL U2MESK('F','CONTACT3_3',2,VALK)
      END IF       
C 
C --- DEFINITION DU TYPE DE NORMALE - MAITRE
C      
      CALL GETVTX(MOTFAC,'VECT_MAIT',IZONE,1,1,TYPNOR,NOC)
C      
      IF (TYPNOR.EQ.'AUTO') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+11) = 0
      ELSEIF  (TYPNOR.EQ.'FIXE') THEN 
        IF (ZI(JMETH+ZMETH*(IZONE-1)+8).NE.0) THEN
          CALL U2MESS('F','CONTACT3_50')
        ENDIF
        IF (ZI(JMETH+ZMETH*(IZONE-1)+10).EQ.1) THEN
          CALL U2MESS('F','CONTACT3_54')
        ENDIF
        ZI(JMETH+ZMETH*(IZONE-1)+11) = 1
        CALL GETVR8(MOTFAC,'MAIT_FIXE',IZONE,1,3,DIR,NOC)
        IF (NOC.EQ.0) THEN
          CALL ASSERT(.FALSE.)
        ENDIF
        CALL NORMEV(DIR   ,NOOR  )
        IF (NOOR.LE.R8PREM()) THEN
          CALL U2MESS('F','CONTACT_15')
        ENDIF      
        ZR(JDIRNO+ZDIRN*(IZONE-1))   = DIR(1)
        ZR(JDIRNO+ZDIRN*(IZONE-1)+1) = DIR(2)
        ZR(JDIRNO+ZDIRN*(IZONE-1)+2) = DIR(3)               
      ELSEIF  (TYPNOR.EQ.'VECT_Y') THEN 
        IF (ZI(JMETH+ZMETH*(IZONE-1)+8).NE.0) THEN
          CALL U2MESS('F','CONTACT3_51')
        ENDIF    
        IF (ZI(JMETH+ZMETH*(IZONE-1)+10).EQ.1) THEN
          CALL U2MESS('F','CONTACT3_54')
        ENDIF          
        ZI(JMETH+ZMETH*(IZONE-1)+11) = 2
        CALL GETVR8(MOTFAC,'MAIT_VECT_Y',IZONE,1,3,DIR,NOC)
        IF (NOC.EQ.0) THEN
          CALL ASSERT(.FALSE.)
        ENDIF 
        CALL NORMEV(DIR   ,NOOR  )
        IF (NOOR.LE.R8PREM()) THEN
          CALL U2MESS('F','CONTACT_16')
        ENDIF   
        ZR(JDIRNO+ZDIRN*(IZONE-1))   = DIR(1)
        ZR(JDIRNO+ZDIRN*(IZONE-1)+1) = DIR(2)
        ZR(JDIRNO+ZDIRN*(IZONE-1)+2) = DIR(3)                     
      ELSE
        VALK(1) = TYPNOR
        VALK(2) = 'VECT_MAIT'
        CALL U2MESK('F','CONTACT3_3',2,VALK)
      END IF         
C 
C --- DEFINITION DU TYPE DE NORMALE - ESCLAVE
C      
      CALL GETVTX(MOTFAC,'VECT_ESCL',IZONE,1,1,TYPNOR,NOC)
C      
      IF (TYPNOR.EQ.'AUTO') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+12) = 0
      ELSEIF  (TYPNOR.EQ.'FIXE') THEN 
        IF (ZI(JMETH+ZMETH*(IZONE-1)+8).NE.2) THEN
          CALL U2MESS('F','CONTACT3_52')
        ENDIF  
        IF (ZI(JMETH+ZMETH*(IZONE-1)+10).EQ.1) THEN
          CALL U2MESS('F','CONTACT3_54')
        ENDIF            
        ZI(JMETH+ZMETH*(IZONE-1)+12) = 1
        CALL GETVR8(MOTFAC,'ESCL_FIXE',IZONE,1,3,DIR,NOC)
        IF (NOC.EQ.0) THEN
          CALL ASSERT(.FALSE.)
        ENDIF
        CALL NORMEV(DIR   ,NOOR  )
        IF (NOOR.LE.R8PREM()) THEN
          CALL U2MESS('F','CONTACT_15')
        ENDIF      
        ZR(JDIRNO+ZDIRN*(IZONE-1)+3) = DIR(1)
        ZR(JDIRNO+ZDIRN*(IZONE-1)+4) = DIR(2)
        ZR(JDIRNO+ZDIRN*(IZONE-1)+5) = DIR(3)                    
      ELSEIF  (TYPNOR.EQ.'VECT_Y') THEN 
        IF (ZI(JMETH+ZMETH*(IZONE-1)+8).NE.2) THEN
          CALL U2MESS('F','CONTACT3_53')
        ENDIF  
        IF (ZI(JMETH+ZMETH*(IZONE-1)+10).EQ.1) THEN
          CALL U2MESS('F','CONTACT3_54')
        ENDIF               
        ZI(JMETH+ZMETH*(IZONE-1)+12) = 2
        CALL GETVR8(MOTFAC,'ESCL_VECT_Y',IZONE,1,3,DIR,NOC)
        IF (NOC.EQ.0) THEN
          CALL ASSERT(.FALSE.)
        ENDIF
        CALL NORMEV(DIR   ,NOOR  )
        IF (NOOR.LE.R8PREM()) THEN
          CALL U2MESS('F','CONTACT_16')
        ENDIF  
        ZR(JDIRNO+ZDIRN*(IZONE-1)+3) = DIR(1)
        ZR(JDIRNO+ZDIRN*(IZONE-1)+4) = DIR(2)
        ZR(JDIRNO+ZDIRN*(IZONE-1)+5) = DIR(3)                        
      ELSE
        VALK(1) = TYPNOR
        VALK(2) = 'VECT_ESCL'
        CALL U2MESK('F','CONTACT3_3',2,VALK)
      END IF                
C
      CALL JEDEMA()
      END
