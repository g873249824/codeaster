      SUBROUTINE CHARTH(FONREE)
      IMPLICIT NONE
      CHARACTER*4 FONREE
C---------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF MODELISA  DATE 10/10/2006   AUTEUR VABHHTS J.PELLET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.

C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.

C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================

C      OPERATEURS :     AFFE_CHAR_THER ET AFFE_CHAR_THER_F

C      MOTS-CLES ACTUELLEMENT TRAITES:
C        SOURCE
C        ECHANGE
C        TEMP_IMPO
C        FLUX_REP
C        ECHANGE_PAROI
C        GRAD_TEMP_INIT
C        LIAISON_DDL
C        LIAISON_GROUP
C        RAYONNEMENT
C---------------------------------------------------------------------
C --------------- DEBUT COMMUNS NORMALISES  JEVEUX  --------------------
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     ----------- FIN COMMUNS NORMALISES  JEVEUX  ----------------------
      INTEGER IBID,IGREL,INEMA,IRET,NDIM
      CHARACTER*8 CHAR,NOMA
      CHARACTER*16 TYPE,OPER,MOTFAC
      CHARACTER*19 LIGRCH,LIGRMO
C     ------------------------------------------------------------------


      CALL GETRES(CHAR,TYPE,OPER)

C --- NOMS DE LIGREL, MAILLAGE , DIMENSION DU PB

      CALL CAGENE(CHAR,OPER,LIGRMO,NOMA,NDIM)

C --- ALLOCATION DU LIGREL DE CHARGE (MOTS-CLE: TEMP_IMPO,
C                          ECHANGE_PAROI, LIAISON_DDL, LIAISON_GROUP )

      CALL ALLIGR(CHAR,OPER,NOMA,FONREE,LIGRCH)

C --- TEMP_IMPO ---

      IGREL = 0
      INEMA = 0

C --- SOURCE ---

      CALL CBSOUR(CHAR,NOMA,LIGRMO,NDIM,FONREE)

C --- CONVECTION ---

      CALL CBCONV(CHAR)

C --- FLUX_REP ---

      CALL CBFLUX(CHAR,NOMA,LIGRMO,NDIM,FONREE)

C --- FLUX_NL

      CALL CBFLNL(CHAR,NOMA,LIGRMO,FONREE)

C --- RAYONNEMENT ---

      CALL CBRAYO(CHAR,NOMA,LIGRMO,NDIM,FONREE)

C --- ECHANGE ---

      CALL CBECHA(CHAR,NOMA,LIGRMO,NDIM,FONREE)

C --- ECHANGE_PAROI ---

      CALL CAECHP(CHAR,LIGRCH,LIGRMO,IGREL,INEMA,NOMA,FONREE)

C --- GRADIENT INITIAL ---

      CALL CBGRAI(CHAR,NOMA,LIGRMO,NDIM,FONREE)

C --- TEMP_IMPO ---

      MOTFAC = 'TEMP_IMPO       '
      CALL CADDLI(OPER,MOTFAC,FONREE,CHAR)

C --- LIAISON_DDL ---

      CALL CALIAI(FONREE,CHAR)

C --- LIAISON_GROUP ---

      CALL CALIAG(FONREE,CHAR)

C --- LIAISON_UNIF ---

      CALL CAGROU(FONREE,CHAR)

C --- LIAISON_CHAMNO ---

      IF (FONREE.EQ.'REEL') THEN
        CALL CALICH(CHAR)
      END IF


C --- LIAISON_MAIL ---

      IF (FONREE.EQ.'REEL') THEN
        CALL CALIRC(CHAR)
      END IF


C --- REDECOUPAGE DU LIGREL DE CHARGE
C       EN FONCTION DE LA TAILLE MAX DES .RESL
C     + INITIALISATION DES TYPE_ELEMENT
      CALL JEEXIN(LIGRCH//'.NOMA',IRET)
      IF (IRET.NE.0) THEN
        CALL ADALIG(LIGRCH)
        CALL INITEL(LIGRCH)
        CALL JEECRA(LIGRCH//'.NOMA','DOCU',IBID,'THER')
      END IF



      CALL JEDETC('V',CHAR,1)
   10 CONTINUE
      END
