      SUBROUTINE OP0030()
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF MODELISA  DATE 21/09/2011   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
C      
C ----------------------------------------------------------------------
C
C COMMANDE:  DEFI_CONTACT
C      
C ----------------------------------------------------------------------
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      IFM,NIV
      INTEGER      IRET,IBID,NOC,NDIM,IATYPE
      CHARACTER*4  K4BID
      CHARACTER*8  NOMA,NOMO,CHAR
      CHARACTER*16 K16BID,PHENO,OPER
      CHARACTER*16 FORMUL
      CHARACTER*19 LIGRMO,LIGRET,LIGREL,LIGRCH
      INTEGER      IFORM  
      LOGICAL      CFDISL,LALLV
      CHARACTER*24 DEFICO  
      INTEGER      IARG
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C -- TITRE
C
      CALL INFMAJ()
      CALL INFDBG('CONTACT',IFM,NIV) 
C
C --- INITIALISATIONS
C
      FORMUL = ' '
      IFORM  = 0    
      OPER   = 'XXXXXXXXXXMEXX'  
      LIGRET = '&&OP0030.LIGRET'
      LIGREL = '&&OP0030.LIGREL' 
C
C --- CONCEPT RESULTAT
C      
      CALL GETRES(CHAR  ,K16BID,K16BID)
      DEFICO = CHAR(1:8)//'.CONTACT'
C
C --- NOMS DE LIGREL, MAILLAGE , DIMENSION DU PB
C
      CALL CAGENE(CHAR  ,OPER  ,LIGRMO,NOMA  ,NDIM  )
      NOMO   = LIGRMO(1:8)   
C
C --- LIGREL DE CHARGE
C      
      LIGRCH = CHAR//'.CHME.LIGRE'
      CALL WKVECT(CHAR//'.TYPE','G V K8',1,IATYPE)
      ZK8(IATYPE) = 'MECA_RE'          
C      
C --- VERIFICATION QUE LE MODELE EST DE TYPE MECANIQUE
C
      CALL DISMOI('F'   ,'PHENOMENE',NOMO  ,'MODELE',IBID  ,
     &            PHENO ,IRET)
C
C --- RECUPERATION DE LA FORMULATION (UNIQUE !)
C
      CALL GETVTX(' ','FORMULATION',1,IARG,1,FORMUL,NOC   ) 
      IF (NOC.EQ.0) THEN
        CALL ASSERT(.FALSE.)     
      ENDIF      
C
      IF (FORMUL.EQ.'DISCRETE') THEN
        IFORM   = 1
      ELSEIF (FORMUL.EQ.'CONTINUE') THEN
        IFORM   = 2
      ELSEIF (FORMUL.EQ.'XFEM') THEN
        IFORM   = 3
      ELSEIF (FORMUL.EQ.'LIAISON_UNIL') THEN
        IFORM   = 4        
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF 
C
C --- LECTURE DES DONNEES
C
      IF (IFORM.EQ.4) THEN
        CALL CALIUN(CHAR ,NOMA ,NOMO )
      ELSE
        CALL CALICO(CHAR ,NOMA ,NOMO ,NDIM  ,IFORM ,
     &              LIGRET)
      ENDIF
C
C --- TYPES DE CONTACT
C      
      LALLV  = CFDISL(DEFICO,'ALL_VERIF')        
C
C --- AJOUT LIGREL ELEMENTS TARDIFS METHODE CONTINUE
C
      IF (IFORM.EQ.2) THEN
        IF (.NOT.LALLV) THEN
C ---   CREATION DU LIGREL A PARTIR DU LIGRET        
          CALL LGTLGR('V',LIGRET,LIGREL)
          CALL DETRSD('LIGRET',LIGRET)
C ---   ON COPIE LE LIGREL
          CALL COPISD('LIGREL','G',LIGREL,LIGRCH)
          CALL DETRSD('LIGREL',LIGREL)
        ENDIF
      ENDIF
C      
C --- MISE A JOUR DU LIGREL DE CHARGE SI IL EXISTE EN FONCTION
C     DE LA TAILLE MAX DES .RESL
C 
      CALL JEEXIN(LIGRCH//'.LGRF', IRET )
      IF (IRET.NE.0) THEN
        CALL ADALIG(LIGRCH)
        CALL CORMGI('G', LIGRCH)
        CALL JEECRA(LIGRCH//'.LGRF','DOCU',IBID,'MECA')
        CALL INITEL(LIGRCH)
      ENDIF
C
C --- VERIFICATION DE L'ORIENTATION ET DE LA COHERENCE DES NORMALES
C     POUR LES FORMULATIONS MAILLEES
C
      IF ((IFORM.EQ.1).OR.(IFORM.EQ.2)) THEN
        CALL CHVENO(K4BID ,NOMA  ,NOMO  )
      ENDIF
C
      CALL JEDEMA()
C
      END
