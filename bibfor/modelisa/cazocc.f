      SUBROUTINE CAZOCC(CHAR  ,MOTFAC,NOMA  ,NOMO  ,NDIM  ,
     &                  LGLIS ,IZONE )
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF MODELISA  DATE 24/03/2009   AUTEUR REZETTE C.REZETTE 
C ======================================================================
C COPYRIGHT (C) 1991 - 2005  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_20
C
      IMPLICIT NONE
      CHARACTER*8  CHAR,NOMA,NOMO
      CHARACTER*16 MOTFAC
      INTEGER      NDIM,IZONE
      LOGICAL      LGLIS
C      
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (METHODE CONTINUE - LECTURE DONNEES)
C
C LECTURE DES PRINCIPALES CARACTERISTIQUES DU CONTACT (SURFACE IZONE)
C REMPLISSAGE DE LA SD 'DEFICO' (SURFACE IZONE)
C      
C ----------------------------------------------------------------------
C
C
C IN  CHAR   : NOM UTILISATEUR DU CONCEPT DE CHARGE
C IN  MOTFAC : MOT-CLE FACTEUR (VALANT 'CONTACT')
C IN  NOMA   : NOM DU MAILLAGE
C IN  NOMO   : NOM DU MODELE
C IN  NDIM   : NOMBRE DE DIMENSIONS DU PROBLEME
C IN  IZONE  : INDICE POUR LIRE LES DONNEES DANS AFFE_CHAR_MECA
C IN  LGLISS : .TRUE. SI CONTACT GLISSIERE
C
C -------------- DEBUT DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C ---------------- FIN DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER      REACCA,REACBS,REACBG
      INTEGER      CFMMVD,ZMETH,ZTOLE,ZECPD,ZCMCF,ZEXCL
      INTEGER      IER,IBID,NOC,NOCC,NOC1,NOCC1,NBMA1
      CHARACTER*8  TYMOCL(2),STACO0,COMPLI,FONFIS,RACSUR,INDUSU,PIVAUT
      CHARACTER*16 MODELI,PHENOM,MOTCLE(2)
      CHARACTER*24 LISMA,VALK(2)
      CHARACTER*24 CARACF,ECPDON,METHCO,TOLECO,EXCLFR
      INTEGER      JCMCF,JECPD,JMETH,JTOLE,JEXCLF      
      CHARACTER*16 FORM,FROT,SGRNO,ALGOC,ALGOF,INTEG
      REAL*8       DIR(3),COEFRO,COCAUR,COFAUR,REACSI
      REAL*8       COCAUS,COFAUS,COCAUP,COFAUP,KWEAR,HWEAR
      REAL*8       ASPER,KAPPAN,KAPPAV,ALJEU
      LOGICAL      LINTNO,MMMAXI,LMAIT,LESCL,LAXIS,LFROT
      LOGICAL      LSSCON,LSSFRO
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ
C
C --- INITIALISATIONS
C
      COCAUR = 0.D0
      COFAUR = 0.D0
      COCAUS = 0.D0
      COFAUS = 0.D0
      COCAUP = 0.D0
      COFAUP = 0.D0
      COEFRO = 0.D0
      REACSI = -1.0D+6
      LINTNO = .FALSE.
      ALJEU  = 0.D0
C
C --- LECTURE DES STRUCTURES DE DONNEES DE CONTACT
C 
      ECPDON = CHAR(1:8)//'.CONTACT.ECPDON'
      CARACF = CHAR(1:8)//'.CONTACT.CARACF'
      METHCO = CHAR(1:8)//'.CONTACT.METHCO'
      EXCLFR = CHAR(1:8)//'.CONTACT.EXCLFR'
      TOLECO = CHAR(1:8)//'.CONTACT.TOLECO'      
C
      CALL JEVEUO(CARACF,'E',JCMCF )
      CALL JEVEUO(ECPDON,'E',JECPD )
      CALL JEVEUO(METHCO,'E',JMETH )
      CALL JEVEUO(EXCLFR,'E',JEXCLF)
      CALL JEVEUO(TOLECO,'E',JTOLE )   
C
      ZMETH = CFMMVD('ZMETH')
      ZTOLE = CFMMVD('ZTOLE')
      ZECPD = CFMMVD('ZECPD')
      ZCMCF = CFMMVD('ZCMCF')
      ZEXCL = CFMMVD('ZEXCL')
C
C --- RECUPERATION DU NOM DU PHENOMENE ET DE LA  MODELISATION
C
      CALL DISMOI('F','PHENOMENE',NOMO,'MODELE',IBID,PHENOM,IER)
      CALL DISMOI('F','MODELISATION',NOMO,'MODELE',IBID,MODELI,IER)
C
C --- RECUPERATION DE LA METHODE DE CONTACT
C
      IF (LGLIS) THEN
        ZI(JMETH+ZMETH*(IZONE-1)+6) = 8
      ELSE
        ZI(JMETH+ZMETH*(IZONE-1)+6) = 6
      ENDIF  
C
C --- PARAMETRES DE L'OPTION GLISSIERE
C
      IF (LGLIS) THEN
        CALL GETVR8(MOTFAC,'ALARME_JEU',IZONE,1,1,ALJEU,NOC)
        ZR(JTOLE+ZTOLE*(IZONE-1)+2) = ALJEU
      END IF            
C
C --- FORMULATION DEPLACEMENT OU VITESSE
C         
      CALL GETVTX(MOTFAC,'FORMULATION',IZONE,1,1,FORM,NOC)
      IF (FORM(1:4) .EQ. 'DEPL') THEN
        ZI(JECPD+ZECPD*(IZONE-1)+6) = 1
      ELSEIF (FORM(1:4) .EQ. 'VITE') THEN
        ZI(JECPD+ZECPD*(IZONE-1)+6) = 2
      ELSE
        VALK(1) = FORM
        VALK(2) = 'FORMULATION'
        CALL U2MESK('F','CONTACT3_3',2,VALK) 
      END IF
C
C --- TYPE INTEGRATION
C
      CALL GETVTX(MOTFAC,'INTEGRATION',IZONE,1,1,INTEG,NOC)
      IF (INTEG(1:5) .EQ. 'NOEUD') THEN
        LINTNO=.TRUE.
        ZR(JCMCF+ZCMCF*(IZONE-1)+1) = 1.D0
      ELSEIF (INTEG(1:5) .EQ. 'GAUSS') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+1) = 2.D0
      ELSEIF (INTEG(1:7) .EQ. 'SIMPSON') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+1) = 3.D0
        IF (INTEG(1:8) .EQ. 'SIMPSON1') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+1) = 4.D0
        END IF
        IF (INTEG(1:8) .EQ. 'SIMPSON2') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+1) = 5.D0
        END IF
      ELSEIF (INTEG(1:6) .EQ. 'NCOTES') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+1) = 6.D0
        IF (INTEG(1:7) .EQ. 'NCOTES1') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+1) = 7.D0
        END IF
        IF (INTEG(1:7) .EQ. 'NCOTES2') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+1) = 8.D0
        END IF
      ELSE
        VALK(1) = INTEG
        VALK(2) = 'INTEGRATION'
        CALL U2MESK('F','CONTACT3_3',2,VALK) 
      END IF
C      
C --- OPTIONS ALGORITHME CONTACT
C  
      CALL GETVTX(MOTFAC,'ALGO_CONT',IZONE,1,1,ALGOC,NOC)
      IF (ALGOC(1:10) .EQ. 'LAGRANGIEN') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+16) = 1.D0
        CALL GETVR8(MOTFAC,'COEF_REGU_CONT',IZONE,1,1,COCAUR,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+2) = COCAUR
      ELSEIF (ALGOC(1:9) .EQ. 'STABILISE') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+16) = 2.D0
        CALL GETVR8(MOTFAC,'COEF_REGU_CONT',IZONE,1,1,COCAUR,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+2) = COCAUR
        CALL GETVR8(MOTFAC,'COEF_STAB_CONT',IZONE,1,1,COCAUS,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+17) = COCAUS
      ELSEIF (ALGOC(1:8) .EQ. 'AUGMENTE') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+16) = 3.D0
        CALL GETVR8(MOTFAC,'COEF_REGU_CONT',IZONE,1,1,COCAUR,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+2) = COCAUR
        CALL GETVR8(MOTFAC,'COEF_STAB_CONT',IZONE,1,1,COCAUS,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+17) = COCAUS
        CALL GETVR8(MOTFAC,'COEF_PENA_CONT',IZONE,1,1,COCAUP,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+18) = COCAUP
      ELSE
        VALK(1) = ALGOC
        VALK(2) = 'ALGO_CONT'
        CALL U2MESK('F','CONTACT3_3',2,VALK) 
      END IF
C      
C --- OPTIONS ALGORITHME FROTTEMENT
C  
      CALL GETVTX(MOTFAC,'FROTTEMENT',IZONE,1,1,FROT,NOCC)
      
      IF (FROT(1:7) .EQ. 'COULOMB') THEN
        CALL GETVTX(MOTFAC,'ALGO_FROT',IZONE,1,1,ALGOF,NOC)
        LFROT = .TRUE.
        IF (ALGOF(1:10) .EQ. 'LAGRANGIEN') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+19) = 1.D0
          CALL GETVR8(MOTFAC,'COEF_REGU_FROT',IZONE,1,1,COFAUR,NOC)
          ZR(JCMCF+ZCMCF*(IZONE-1)+3) = COFAUR
        ELSEIF (ALGOF(1:9) .EQ. 'STABILISE') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+19) = 2.D0
          CALL GETVR8(MOTFAC,'COEF_REGU_FROT',IZONE,1,1,COFAUR,NOC)
          ZR(JCMCF+ZCMCF*(IZONE-1)+3) = COFAUR
          CALL GETVR8(MOTFAC,'COEF_STAB_FROT',IZONE,1,1,COFAUS,NOC)
          ZR(JCMCF+ZCMCF*(IZONE-1)+20) = COFAUS
        ELSEIF (ALGOF(1:8) .EQ. 'AUGMENTE') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+19) = 3.D0
          CALL GETVR8(MOTFAC,'COEF_REGU_FROT',IZONE,1,1,COFAUR,NOC)
          ZR(JCMCF+ZCMCF*(IZONE-1)+3) = COFAUR
          CALL GETVR8(MOTFAC,'COEF_STAB_FROT',IZONE,1,1,COFAUS,NOC)
          ZR(JCMCF+ZCMCF*(IZONE-1)+20) = COFAUS
          CALL GETVR8(MOTFAC,'COEF_PENA_FROT',IZONE,1,1,COFAUP,NOC)
          ZR(JCMCF+ZCMCF*(IZONE-1)+21) = COFAUP
        ELSE
          VALK(1) = ALGOF
          VALK(2) = 'ALGO_FROT'
          CALL U2MESK('F','CONTACT3_3',2,VALK) 
        END IF
        ZR(JCMCF+ZCMCF*(IZONE-1)+5) = 3.D0
        CALL GETVR8(MOTFAC,'COULOMB',IZONE,1,1,COEFRO,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+4) = COEFRO
        CALL GETVR8(MOTFAC,'SEUIL_INIT',IZONE,1,1,REACSI,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+6) = REACSI
      ELSEIF (FROT(1:4) .EQ. 'SANS') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+5) = 1.D0
        LFROT = .FALSE.
      ELSE
        VALK(1) = FROT
        VALK(2) = 'FROTTEMENT'
        CALL U2MESK('F','CONTACT3_3',2,VALK) 
      END IF
C
C --- LECTURE DES PARAMETRES DE LA COMPLIANCE
C
      CALL GETVTX(MOTFAC,'COMPLIANCE',IZONE,1,1,COMPLI,NOC)
      IF (COMPLI .EQ. 'OUI') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+7) = 1.D0
        CALL GETVR8(MOTFAC,'ASPERITE',IZONE,1,1,ASPER,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+8) = ASPER
        CALL GETVR8(MOTFAC,'E_N',IZONE,1,1,KAPPAN,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+9) = KAPPAN
        CALL GETVR8(MOTFAC,'E_V',IZONE,1,1,KAPPAV,NOC)
        ZR(JCMCF+ZCMCF*(IZONE-1)+10) = KAPPAV
      ELSEIF (COMPLI .EQ. 'NON') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+7) = 0.D0
        ZR(JCMCF+ZCMCF*(IZONE-1)+8) = 0.D0
      ELSE
        VALK(1) = COMPLI
        VALK(2) = 'COMPLIANCE'
        CALL U2MESK('F','CONTACT3_3',2,VALK)   
      END IF
C
C --- LECTURE DES PARAMETRES DE LA LOI D'USURE 
C
      IF (LFROT) THEN
        CALL GETVTX(MOTFAC,'USURE',IZONE,1,1,INDUSU,NOC)
        IF (INDUSU .EQ. 'ARCHARD') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+13) = 1.D0
          CALL GETVR8(MOTFAC,'K',IZONE,1,1,KWEAR,NOC)
          ZR(JCMCF+ZCMCF*(IZONE-1)+14) = KWEAR
          CALL GETVR8(MOTFAC,'H',IZONE,1,1,HWEAR,NOC)
          ZR(JCMCF+ZCMCF*(IZONE-1)+15) = HWEAR
        ELSEIF (INDUSU .EQ. 'SANS') THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+13) = 0.D0
        ELSE
          VALK(1) = INDUSU
          VALK(2) = 'USURE'
          CALL U2MESK('F','CONTACT3_3',2,VALK)           
        END IF
      ENDIF     
C
C --- TRAITEMENT EXCLUSION NOEUDS
C
      CALL GETVTX(MOTFAC,'SANS_GROUP_NO'   ,IZONE,1,1,SGRNO,NOC)
      CALL GETVTX(MOTFAC,'SANS_NOEUD'      ,IZONE,1,1,SGRNO,NOCC)
      CALL GETVTX(MOTFAC,'SANS_GROUP_NO_FR',IZONE,1,1,SGRNO,NOC1)
      CALL GETVTX(MOTFAC,'SANS_NOEUD_FR'   ,IZONE,1,1,SGRNO,NOCC1)

      LSSCON = (NOC.NE.0)  .OR. (NOCC.NE.0)
      LSSFRO = (NOC1.NE.0) .OR. (NOCC1.NE.0)
            
      IF (LSSCON) THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+25) = 1.D0
      ELSEIF (LSSFRO) THEN
        IF (LFROT) THEN
          ZR(JCMCF+ZCMCF*(IZONE-1)+25) = 2.D0
        ELSE
          CALL U2MESS('F','CONTACT_96')
        ENDIF  
      ELSE
        ZR(JCMCF+ZCMCF*(IZONE-1)+25) = 0.D0
      ENDIF
C      
C --- SI NOEUD EXCLUS, ON VERIFIE QU'ON A UNE INTEGRATION AUX NOEUDS
C
      IF (.NOT.LINTNO) THEN
        IF (LSSCON .OR. LSSFRO) THEN
          CALL U2MESS('F','CONTACT_97')
        ENDIF
        IF (ZI(JMETH+ZMETH*(IZONE-1)+8).NE.0) THEN
          CALL U2MESS('F','CONTACT_98')
        ENDIF
      ENDIF  
C
C --- DIRECTIONS D'EXCLUSION
C
      IF (LFROT) THEN
        CALL GETVR8(MOTFAC,'EXCL_FROT_1',IZONE,1,3,DIR,NOC)
        IF (NOC.NE.0) THEN
          ZI(JMETH+ZMETH*(IZONE-1)+2) = 1
        ENDIF
        IF (NOC.NE.0) THEN
          ZR(JEXCLF+ZEXCL*(IZONE-1))   = DIR(1)
          ZR(JEXCLF+ZEXCL*(IZONE-1)+1) = DIR(2)
          ZR(JEXCLF+ZEXCL*(IZONE-1)+2) = DIR(3)
        END IF
        CALL GETVR8(MOTFAC,'EXCL_FROT_2',IZONE,1,3,DIR,NOC)
        IF (NOC .NE. 0) THEN
          ZR(JEXCLF+ZEXCL*(IZONE-1)+3) = DIR(1)
          ZR(JEXCLF+ZEXCL*(IZONE-1)+4) = DIR(2)
          ZR(JEXCLF+ZEXCL*(IZONE-1)+5) = DIR(3) 
        END IF
      END IF      
C      
      CALL GETVTX(MOTFAC,'FOND_FISSURE',IZONE,1,1,FONFIS,NOC)
      IF (FONFIS .EQ. 'OUI') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+11) = 1.D0
      ELSEIF (FONFIS .EQ. 'NON') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+11) = 0.D0
      ELSE  
        VALK(1) = FONFIS
        VALK(2) = 'FOND_FISSURE'
        CALL U2MESK('F','CONTACT3_3',2,VALK)       
      END IF
C      
      CALL GETVTX(MOTFAC,'RACCORD_LINE_QUAD',IZONE,1,1,RACSUR,NOC)
      IF (RACSUR .EQ. 'OUI') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+12) = 1.D0
      ELSEIF (RACSUR .EQ. 'NON') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+12) = 0.D0
      ELSE  
        VALK(1) = RACSUR
        VALK(2) = 'RACCORD_LINE_QUAD'
        CALL U2MESK('F','CONTACT3_3',2,VALK)       
      END IF
C      
      CALL GETVTX(MOTFAC,'EXCLUSION_PIV_NUL',IZONE,1,1,PIVAUT,NOC)
      IF (PIVAUT .EQ. 'OUI') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+22) = 1.D0
      ELSEIF (PIVAUT .EQ. 'NON') THEN
        ZR(JCMCF+ZCMCF*(IZONE-1)+22) = 0.D0
      ELSE
        VALK(1) = PIVAUT
        VALK(2) = 'EXCLUSION_PIV_NUL'
        CALL U2MESK('F','CONTACT3_3',2,VALK)        
      END IF
C
C -- AXISYMETRIE
C      
      MOTCLE(1) = 'GROUP_MA_MAIT'
      MOTCLE(2) = 'MAILLE_MAIT'
      TYMOCL(1) = 'GROUP_MA'
      TYMOCL(2) = 'MAILLE'
      LISMA = '&&CARACO.LISTE_MAILLES_1'
      CALL RELIEM(NOMO,NOMA,'NU_MAILLE',MOTFAC,IZONE,2,MOTCLE,TYMOCL,
     &            LISMA,NBMA1)
C
C --- MAILLES MAITRES AXISYMETRIQUES ?
C      
      LMAIT  = MMMAXI(NOMO,LISMA,NBMA1)
C
      MOTCLE(1) = 'GROUP_MA_ESCL'
      MOTCLE(2) = 'MAILLE_ESCL'
      TYMOCL(1) = 'GROUP_MA'
      TYMOCL(2) = 'MAILLE'
      CALL RELIEM(NOMO,NOMA,'NU_MAILLE',MOTFAC,IZONE,2,MOTCLE,TYMOCL,
     &            LISMA,NBMA1)
C
C --- MAILLES ESCLAVES AXISYMETRIQUES ? 
C     
      LESCL  = MMMAXI(NOMO,LISMA,NBMA1)
C
C --- MODELE AXISYMETRIQUE ? 
C
      LAXIS  = .FALSE.
      IF (LMAIT.EQV.LESCL) THEN
        IF (LMAIT) LAXIS=.TRUE. 
      ELSE
        CALL U2MESS('F','CONTACT2_12')
      ENDIF
           
      IF (LAXIS) THEN
        ZI(JECPD+ZECPD*(IZONE-1)+1) = 1
      ELSE
        ZI(JECPD+ZECPD*(IZONE-1)+1) = 0
      END IF
C
C --- PARAMETRES BOUCLES
C
      CALL GETVIS(MOTFAC,'ITER_CONT_MAXI',IZONE,1,1,REACCA,NOC)
      ZI(JECPD+ZECPD*(IZONE-1)+2) = REACCA
      CALL GETVIS(MOTFAC,'ITER_GEOM_MAXI',IZONE,1,1,REACBG,NOC)
      ZI(JECPD+ZECPD*(IZONE-1)+4) = REACBG
      IF (LFROT) THEN
        CALL GETVIS(MOTFAC,'ITER_FROT_MAXI',IZONE,1,1,REACBS,NOC)
        ZI(JECPD+ZECPD*(IZONE-1)+3) = REACBS
      ENDIF  
C
C --- CONTACT INITIAL
C
      CALL GETVTX(MOTFAC,'CONTACT_INIT',IZONE,1,1,STACO0,NOC)
      IF (STACO0 .EQ. 'OUI') THEN
        ZI(JECPD+ZECPD*(IZONE-1)+5) = 1
      ELSEIF (STACO0 .EQ. 'NON') THEN
        ZI(JECPD+ZECPD*(IZONE-1)+5) = 0
      ELSE
        VALK(1) = STACO0
        VALK(2) = 'CONTACT_INIT'
        CALL U2MESK('F','CONTACT3_3',2,VALK)        
      END IF
C
C --- AJOUT DES ELEMENTS TARDIFS AU LIGREL
C
      MOTCLE(1) = 'GROUP_MA_ESCL'
      MOTCLE(2) = 'MAILLE_ESCL'
      TYMOCL(1) = 'GROUP_MA'
      TYMOCL(2) = 'MAILLE'
      LISMA = '&&CARACO.LISTE_MAILLES_1'
      CALL RELIEM(NOMO,NOMA,'NU_MAILLE',MOTFAC,IZONE,2,MOTCLE,TYMOCL,
     &            LISMA,NBMA1)
C
      IF (NDIM .EQ. 2) THEN
        IF ( LFROT ) THEN
          MODELI = 'COFR_DVP_2D'
        ELSE
          MODELI = 'CONT_DVP_2D'
        END IF
      ELSEIF (NDIM .EQ. 3) THEN
        IF ( LFROT ) THEN
          MODELI = 'COFR_DVP_3D'
        ELSE
          MODELI = 'CONT_DVP_3D'
        END IF
      ELSE 
        CALL ASSERT(.FALSE.) 
      END IF
C
      CALL AJELLT('&&CALICO.LIGRET',NOMA,NBMA1,LISMA,' ',PHENOM,MODELI,
     &           0,' ')
C
      CALL JEDEMA()
      END
