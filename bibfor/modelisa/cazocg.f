      SUBROUTINE CAZOCG(CHAR  ,MOTFAC,IZONE )
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF MODELISA  DATE 01/04/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2008  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      CHARACTER*8  CHAR
      CHARACTER*16 MOTFAC
      INTEGER      IZONE    
C      
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (METHODE GCP - LECTURE DONNEES)
C
C CARACTERISTIQUES DE LA METHODE GCP
C      
C ----------------------------------------------------------------------
C
C
C IN  CHAR   : NOM UTILISATEUR DU CONCEPT DE CHARGE
C IN  MOTFAC : MOT-CLE FACTEUR (VALANT 'CONTACT')
C IN  IZONE  : INDICE POUR LIRE LES DONNEES DANS AFFE_CHAR_MECA
C
C -------------- DEBUT DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C ---------------- FIN DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER      CFMMVD,ZTOLE,ZCONV
      CHARACTER*16 RECH,PREC
      INTEGER      NOC,GCPREA
      CHARACTER*24 TOLECO
      INTEGER      JTOLE
      CHARACTER*24 CONVCO
      INTEGER      JCONV
      REAL*8       PRECIS,RELA
      CHARACTER*16 VALK(2)
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      PRECIS = 0.D0 
      GCPREA = 0
      PREC   = '  '
C 
C --- LECTURE DES STRUCTURES DE DONNEES DE CONTACT
C 
      CONVCO = CHAR(1:8)//'.CONTACT.CONVCO'
      TOLECO = CHAR(1:8)//'.CONTACT.TOLECO'     
C 
      CALL JEVEUO(CONVCO,'E',JCONV)    
      CALL JEVEUO(TOLECO,'E',JTOLE)
C
      ZTOLE  = CFMMVD('ZTOLE')
      ZCONV  = CFMMVD('ZCONV')      
C
      CALL GETVR8(MOTFAC,'RESI_ABSO',IZONE,1,1,PRECIS,NOC)
      ZR(JTOLE+ZTOLE*(IZONE-1)+4) = PRECIS
      CALL GETVIS(MOTFAC,'REAC_ITER',IZONE,1,1,GCPREA,NOC)
      ZI(JCONV+ZCONV*(IZONE-1)+6) = GCPREA
      CALL GETVIS(MOTFAC,'ITER_GCP_MAXI',IZONE,1,1,GCPREA,NOC)
      ZI(JCONV+ZCONV*(IZONE-1)+7) = GCPREA
      CALL GETVTX(MOTFAC,'PRE_COND',IZONE,1,1,PREC,NOC)
      IF (PREC.EQ.'SANS') THEN
        ZI(JCONV+ZCONV*(IZONE-1)+4) = 0
      ELSE IF (PREC.EQ.'DIRICHLET') THEN
        ZI(JCONV+ZCONV*(IZONE-1)+4) = 1
        CALL GETVR8(MOTFAC,'COEF_RESI',IZONE,1,1,RELA,NOC)
        ZR(JTOLE+ZTOLE*(IZONE-1)+5) = RELA
        CALL GETVIS(MOTFAC,'ITER_PRE_MAXI',IZONE,1,1,GCPREA,NOC)
        ZI(JCONV+ZCONV*(IZONE-1)+8) = GCPREA
      ELSE
        VALK(1) = PREC
        VALK(2) = 'PRE_COND'
        CALL U2MESK('F','CONTACT3_3',2,VALK)
      ENDIF
      CALL GETVTX(MOTFAC,'RECH_LINEAIRE',IZONE,1,1,RECH,NOC)
      IF (RECH.EQ.'ADMISSIBLE') THEN
        ZI(JCONV+ZCONV*(IZONE-1)+5) = 0
      ELSE IF (RECH.EQ.'NON_ADMISSIBLE') THEN
        ZI(JCONV+ZCONV*(IZONE-1)+5) = 1
      ELSE
        VALK(1) = RECH
        VALK(2) = 'RECH_LINEAIRE'
        CALL U2MESK('F','CONTACT3_3',2,VALK)
      ENDIF
C
      CALL JEDEMA
C
      END
