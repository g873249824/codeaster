      SUBROUTINE CAZOCD(CHAR  ,MOTFAC,FONREE,NOMA  ,NOMO  ,
     &                  NDIM  ,METHOD,LGLIS ,IZONE)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF MODELISA  DATE 01/04/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_20
C
      IMPLICIT NONE
      CHARACTER*8  CHAR
      CHARACTER*16 MOTFAC,METHOD
      CHARACTER*8  NOMA,NOMO
      INTEGER      NDIM
      INTEGER      IZONE
      LOGICAL      LGLIS
      CHARACTER*4  FONREE      
C      
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (METHODE DISCRETE - LECTURE DONNEES)
C
C LECTURE DES PRINCIPALES CARACTERISTIQUES DU CONTACT (SURFACE IZONE)
C REMPLISSAGE DE LA SD 'DEFICO' (SURFACE IZONE)
C      
C ----------------------------------------------------------------------
C
C IN  CHAR   : NOM UTILISATEUR DU CONCEPT DE CHARGE
C IN  MOTFAC : MOT-CLE FACTEUR (VALANT 'CONTACT')
C IN  NOMA   : NOM DU MAILLAGE
C IN  NOMO   : NOM DU MODELE
C IN  NDIM   : NOMBRE DE DIMENSIONS DU PROBLEME
C IN  IZONE  : INDICE POUR LIRE LES DONNEES DANS AFFE_CHAR_MECA
C IN  METHOD : METHODE DE CONTACT (LAGRANGE, PENALISATION, ETC.)
C IN  LGLISS : .TRUE. SI CONTACT GLISSIERE
C IN  FONREE : FONC OU REEL SUIVANT L'OPERATEUR
C
C -------------- DEBUT DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C ---------------- FIN DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER      CFMMVD,ZMETH,ZTOLE,ZCONV,ZCARF
      CHARACTER*16 FROT
      INTEGER      NBREAC,LGBLOC,ITER
      INTEGER      NOC,NOCN,NOCC
      CHARACTER*24 METHCO,TOLECO,CARFRO,SANSNQ
      INTEGER      JMETH,JTOLE,JCARFR,JSANSN
      CHARACTER*24 CONVCO
      INTEGER      JCONV
      CHARACTER*8  ISTO,REAC
      CHARACTER*3  NOQU
      REAL*8       ALJEU
      REAL*8       COEFRO,COEFPN,COEFPT,COEFTE
      LOGICAL      LFROT
      CHARACTER*16 VALK(2)
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      COEFPT = 0.D0
      COEFPN = 0.D0
      COEFTE = 0.D0
      COEFRO = 0.D0
      ALJEU  = -1.D0
      LFROT  = .FALSE.
C 
C --- LECTURE DES STRUCTURES DE DONNEES DE CONTACT
C 
      CARFRO = CHAR(1:8)//'.CONTACT.CARFRO'
      CONVCO = CHAR(1:8)//'.CONTACT.CONVCO'
      METHCO = CHAR(1:8)//'.CONTACT.METHCO'
      SANSNQ = CHAR(1:8)//'.CONTACT.SANSNQ'
      TOLECO = CHAR(1:8)//'.CONTACT.TOLECO'   
C 
      CALL JEVEUO(CARFRO,'E',JCARFR)
      CALL JEVEUO(CONVCO,'E',JCONV)
      CALL JEVEUO(METHCO,'E',JMETH)
      CALL JEVEUO(SANSNQ,'E',JSANSN)     
      CALL JEVEUO(TOLECO,'E',JTOLE)
C
      ZMETH  = CFMMVD('ZMETH')
      ZTOLE  = CFMMVD('ZTOLE')
      ZCONV  = CFMMVD('ZCONV')
      ZCARF  = CFMMVD('ZCARF')      
C
C --- RECUPERATION DE LA METHODE DE CONTACT
C
      IF (METHOD(1:8) .EQ. 'PENALISA') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+6) = -1
      ELSEIF (METHOD(1:8) .EQ. 'LAGRANGI') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+6) = 1
      ELSEIF (METHOD(1:8) .EQ. 'CONTRAIN') THEN
        IF (LGLIS) THEN
          ZI(JMETH+ZMETH*(IZONE-1)+6) = 7
        ELSE
          ZI(JMETH+ZMETH*(IZONE-1)+6) = 0
        ENDIF  
      ELSEIF (METHOD(1:3) .EQ. 'GCP') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+6) = 9        
      ELSEIF (METHOD(1:5) .EQ. 'VERIF') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+6) = -2        
      ELSEIF (METHOD(1:4) .EQ. 'XFEM') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+6) = 10               
      ELSE
        VALK(1) = METHOD
        VALK(2) = 'METHODE'
        CALL U2MESK('F','CONTACT3_3',2,VALK)  
      END IF 
C
C --- RECUPERATION DE LA METHODE DE FROTTEMENT
C       
      CALL GETVTX(MOTFAC,'FROTTEMENT',IZONE,1,1,FROT,NOCC)
      IF (NOCC .NE. 0) THEN 
        IF (FROT .EQ. 'COULOMB') THEN
          LFROT = .TRUE.
          CALL GETVR8(MOTFAC,'E_N',1,1,1,COEFPN,NOCN)
          IF (NDIM .EQ. 2) THEN
            IF (METHOD(1:8) .EQ. 'PENALISA') THEN
              IF (NOCN .EQ. 0) THEN
                ZI(JMETH+ZMETH*(IZONE-1)+6) = 3
              ELSE
                ZI(JMETH+ZMETH*(IZONE-1)+6) = 5
              ENDIF  
            ELSEIF (METHOD(1:8) .EQ. 'LAGRANGI') THEN
              ZI(JMETH+ZMETH*(IZONE-1)+6) = 2
            END IF
          ELSEIF (NDIM .EQ. 3) THEN
            IF (METHOD(1:8) .EQ. 'PENALISA') THEN
              IF (NOCN .EQ. 0) THEN
                ZI(JMETH+ZMETH*(IZONE-1)+6) = 3
              ELSE   
                ZI(JMETH+ZMETH*(IZONE-1)+6) = 5
              ENDIF  
            ELSEIF (METHOD(1:8) .EQ. 'LAGRANGI') THEN
              ZI(JMETH+ZMETH*(IZONE-1)+6) = 4
            END IF
          END IF
        ELSEIF (FROT .EQ. 'SANS') THEN 
          LFROT = .FALSE. 
        ELSE    
          VALK(1) = FROT
          VALK(2) = 'FROTTEMENT'
          CALL U2MESK('F','CONTACT3_3',2,VALK)           
        END IF
      END IF              
C
C --- CONTACT SANS CALCUL: PARAMETRES SPECIFIQUES
C
      IF (METHOD(1:5) .EQ. 'VERIF') THEN
        CALL CAZOCV(CHAR,MOTFAC,IZONE,IZONE)
        GOTO 999
      END IF
C
C --- PARAMETRES DE L'OPTION GLISSIERE
C
      IF ((LGLIS).AND.(METHOD(1:8) .EQ. 'CONTRAIN')) THEN
        CALL GETVR8(MOTFAC,'ALARME_JEU',IZONE,1,1,ALJEU,NOC)
        ZR(JTOLE+ZTOLE*(IZONE-1)+2) = ALJEU
      END IF  
C
C --- PARAMETRES DE REACTUALISATION GEOMETRIQUE
C
      CALL GETVTX(MOTFAC,'REAC_GEOM',IZONE,1,1,REAC,NOC)
C
      IF (REAC .EQ. 'SANS') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+7) = 0
      ELSEIF (REAC .EQ. 'AUTOMATI') THEN
        ZI(JMETH+ZMETH*(IZONE-1)+7) = -1
      ELSEIF (REAC .EQ. 'CONTROLE') THEN
        CALL GETVIS(MOTFAC,'NB_REAC_GEOM',IZONE,1,1,NBREAC,NOC)
        ZI(JMETH+ZMETH*(IZONE-1)+7) = NBREAC
      ELSE
        VALK(1) = REAC
        VALK(2) = 'REAC_GEOM'
        CALL U2MESK('F','CONTACT3_3',2,VALK)
      END IF
C
C --- ARRET OU PAS SI MATRICE DE CONTACT SINGULIERE
C
      CALL GETVTX(MOTFAC,'STOP_SINGULIER',IZONE,1,1,ISTO,NOC)
      ZI(JCONV+ZCONV*(IZONE-1)) = 0
      IF (ISTO .EQ. 'OUI') THEN
        ZI(JCONV+ZCONV*(IZONE-1)) = 0
      ELSEIF (ISTO .EQ. 'NON') THEN
        ZI(JCONV+ZCONV*(IZONE-1)) = 1
      ELSE
        VALK(1) = ISTO
        VALK(2) = 'STOP_SINGULIER'
        CALL U2MESK('F','CONTACT3_3',2,VALK)
      END IF
C
C --- NOMBRE DE PAQUETS POUR LA RESOLUTION DES SYSTEMES LINEAIRES
C
      CALL GETVIS(MOTFAC,'NB_RESOL',IZONE,1,1,LGBLOC,NOC)
      ZI(JCONV+ZCONV*(IZONE-1)+1) = LGBLOC
C
C --- NOMBRE D'ITERATIONS DE CONTACT MAX = NBLIAI*ITER_MULT_MAXI
C
      IF (METHOD(1:10) .NE. 'CONTRAINTE') THEN
        CALL GETVIS(MOTFAC,'ITER_MULT_MAXI',IZONE,1,1,ITER,NOC)
        ZI(JCONV+ZCONV*(IZONE-1)+2) = ITER
      END IF
C
C --- EXCLUSION DE NOEUDS QUADRATIQUES (VOIR CACOOEQ)
C
      CALL GETVTX(MOTFAC,'SANS_NOEUD_QUAD',IZONE,1,1,NOQU,NOC)
      IF (NOQU .EQ. 'OUI') THEN
        ZI(JSANSN+(IZONE-1)) = 1
      ELSEIF (NOQU .EQ. 'NON') THEN
        ZI(JSANSN+(IZONE-1)) = 0
      ELSE
        VALK(1) = NOQU
        VALK(2) = 'SANS_NOEUD_QUAD'
        CALL U2MESK('F','CONTACT3_3',2,VALK)
      END IF
C
C --- CARACTERISTIQUES POUR LES METHODES AVEC PENALISATION
C
      IF (METHOD(1:8) .EQ. 'PENALISA') THEN
        CALL GETVR8(MOTFAC,'E_N',1,1,1,COEFPN,NOCN)
        ZR(JCARFR+ZCARF*(IZONE-1)+1) = COEFPN 
        CALL GETVR8(MOTFAC,'E_T',IZONE,1,1,COEFPT,NOCN)
        ZR(JCARFR+ZCARF*(IZONE-1)+2) = COEFPT        
      ENDIF
C
C --- PARAMETRES DU FROTTEMENT
C       
      IF (LFROT) THEN
        CALL GETVR8(MOTFAC,'COULOMB',IZONE,1,1,COEFRO,NOC)
        ZR(JCARFR+ZCARF*(IZONE-1)+3) = COEFRO
        CALL GETVR8(MOTFAC,'COEF_MATR_FROT',IZONE,1,1,COEFTE,NOC)
        ZR(JCARFR+ZCARF*(IZONE-1)+4) = COEFTE
      END IF
C
C --- PARAMETRE POUR LA METHODE GCP
C
      IF (METHOD(1:3) .EQ. 'GCP') THEN
        CALL CAZOCG(CHAR,MOTFAC,IZONE)
      END IF
C
 999  CONTINUE
C
      CALL JEDEMA
C
      END
