      SUBROUTINE CFCRLI(NOMA  ,NUMEDD,DEFICO,RESOCO)
C     
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 14/09/2010   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2010  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      CHARACTER*8  NOMA
      CHARACTER*24 NUMEDD      
      CHARACTER*24 DEFICO,RESOCO
C      
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (METHODES DISCRETES - LIAISONS LINEAIRES)
C
C CREATION DES SD POUR LES LIAISONS LINEAIRES
C      
C ----------------------------------------------------------------------
C
C
C IN  NOMA   : NOM DU MAILLAGE
C IN  NUMEDD : NOM DU NUME_DDL
C IN  DEFICO : SD POUR LA DEFINITION DE CONTACT
C IN  RESOCO : SD DE TRAITEMENT NUMERIQUE DU CONTACT
C
C -------------- DEBUT DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C ---------------- FIN DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER      IFM,NIV
      INTEGER      CFDISI,NNOCO,NDIMG,NTPC
      CHARACTER*24 APCOEF,APCOFR
      INTEGER      JAPCOE,JAPCOF
      CHARACTER*24 DDLCO,NBDDL,APDDL
      INTEGER      JDDL,JNBDDL,JAPDDL
      CHARACTER*24 COCO 
      INTEGER      JCOCO
      CHARACTER*24 APPOIN,NUMLIA
      INTEGER      JAPPTR,JNUMLI
      CHARACTER*19 LIAC ,LIOT ,TYPL
      INTEGER      JLIAC,JLIOT,JTYPL  
      INTEGER      NUMDDL,NUMNOE
      INTEGER      INO,IDDL,POSNO
      INTEGER      IRET
      CHARACTER*8  NOMNOE,K8BID
      INTEGER      NEQ   ,NESMAX,NDDL
      LOGICAL      CFDISL,LCTFD
      INTEGER      CFMMVD,ZCOCO
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('CONTACT',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<CONTACT> ...... CREATION DE LA SD POUR LES '//
     &                ' LIAISONS LINEAIRES' 
      ENDIF
C
C --- INITIALISATIONS
C
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ,K8BID,IRET)
C
C --- INFOS SUR LA CHARGE DE CONTACT
C
      LCTFD  = CFDISL(DEFICO,'FROT_DISCRET')      
C
C --- INFORMATIONS
C
      NNOCO  = CFDISI(DEFICO,'NNOCO' )
      NDIMG  = CFDISI(DEFICO,'NDIM'  )
      NTPC   = CFDISI(DEFICO,'NTPC'  )
      NESMAX = NTPC
C
C --- VERIFICATION DE LA COHERENCE DES DIMENSIONS (PUR 2D OU PUR 3D)
C
      IF (NDIMG.EQ.2) THEN
        CALL CFVERD(NOMA  ,NUMEDD,DEFICO) 
      ENDIF     
C
C --- NOMBRE DE DDLS PAR NOEUD
C
      NBDDL  = RESOCO(1:14)//'.NBDDL'
      CALL WKVECT(NBDDL  ,'V V I',NNOCO+1,JNBDDL)
      ZI(JNBDDL) = 0
      NDDL       = 0
      DO 20 INO = 1,NNOCO
        NDDL = NDDL + NDIMG
        ZI(JNBDDL+INO) = NDDL
 20   CONTINUE
C
C --- NUMEROS DES DDL
C
      DDLCO  = RESOCO(1:14)//'.DDLCO'
      CALL WKVECT(DDLCO ,'V V I',NDDL,JDDL)
C
      DO 25 INO = 1,NNOCO
        POSNO = INO
        CALL CFNOMM(NOMA  ,DEFICO,'NOEU',POSNO,NOMNOE)
C 
        IDDL   = ZI(JNBDDL+INO-1) + 1
C               
        CALL POSDDL('NUME_DDL',NUMEDD,NOMNOE,'DX',NUMNOE,
     &               NUMDDL)
C    
        IF (NUMDDL.EQ.0) THEN
          CALL ASSERT(.FALSE.)
        ELSE
          ZI(JDDL+IDDL-1) = NUMDDL
        ENDIF  
C        
        CALL POSDDL('NUME_DDL',NUMEDD,NOMNOE,'DY',NUMNOE,
     &               NUMDDL)
C    
        IF (NUMDDL.EQ.0) THEN
          CALL ASSERT(.FALSE.)
        ELSE
          ZI(JDDL+IDDL) = NUMDDL
        ENDIF  
C        
        IF (NDIMG.EQ.3) THEN
          CALL POSDDL('NUME_DDL',NUMEDD,NOMNOE,'DZ',
     &                NUMNOE,NUMDDL)
C       
          IF (NUMDDL.EQ.0) THEN
            CALL ASSERT(.FALSE.)
          ELSE
            ZI(JDDL+IDDL+1) = NUMDDL
          ENDIF  
        ENDIF

 25   CONTINUE
C
C --- TABLEAU DES POINTEURS POUR LES DDLS
C
      APDDL  = RESOCO(1:14)//'.APDDL'
      CALL WKVECT(APDDL ,'V V I',30*NTPC ,JAPDDL) 
C
C --- NOMBRE DE DDL PAR LIAISON
C
      APPOIN = RESOCO(1:14)//'.APPOIN'
      CALL WKVECT(APPOIN,'V V I',NTPC+1  ,JAPPTR)
C
C --- NUMERO DU POINT ET DU NOEUD ESCLAVE POUR LA LIAISON
C
      NUMLIA = RESOCO(1:14)//'.NUMLIA'
      CALL WKVECT(NUMLIA,'V V I',3*NTPC  ,JNUMLI)                   
C
C --- VECTEUR POUR LA GESTION DES LIAISONS (CFDISD/CFECRD)
C
      COCO   = RESOCO(1:14)//'.COCO'
      ZCOCO  = CFMMVD('ZCOCO')
      CALL WKVECT(COCO  ,'V V I',ZCOCO,JCOCO)
      CALL CFECRD(RESOCO,'NDIM'  ,NDIMG )
      CALL CFECRD(RESOCO,'NEQ'   ,NEQ   )
      CALL CFECRD(RESOCO,'NESMAX',NESMAX)
      CALL CFECRD(RESOCO,'SPLIAI',1     )
C
C --- TYPES DE LIAISON
C ---        VAUT C0 : LIAISON DE CONTACT 
C ---        VAUT F0 : LIAISON DE FROTTEMENT ADHERENT (DEUX DIRECTIONS)
C ---        VAUT F1 : LIAISON DE FROTTEMENT ADHERENT (1ERE DIRECTION )
C ---        VAUT F2 : LIAISON DE FROTTEMENT ADHERENT (2EME DIRECTION )
C
      TYPL   = RESOCO(1:14)//'.TYPL'
      CALL WKVECT(TYPL  ,'V V K8',2*NTPC ,JTYPL)
C
C --- LIAISONS OTEES (PIVOTS NULS)
C
      LIOT   = RESOCO(1:14)//'.LIOT'
      CALL WKVECT(LIOT  ,'V V I',4*NTPC+4,JLIOT)
C
C --- LIAISONS ACTIVES
C      
      LIAC   = RESOCO(1:14)//'.LIAC'
      CALL WKVECT(LIAC  ,'V V I',3*NTPC+1,JLIAC)  
C
C --- COEFFICIENTS DES RELATIONS LINEAIRES
C
      APCOEF = RESOCO(1:14)//'.APCOEF'
      CALL WKVECT(APCOEF,'V V R',30*NTPC ,JAPCOE)
      IF (LCTFD) THEN
        APCOFR = RESOCO(1:14)//'.APCOFR'
        CALL WKVECT(APCOFR,'V V R',60*NTPC ,JAPCOF)
      ENDIF           
C
      CALL JEDEMA()
      END
