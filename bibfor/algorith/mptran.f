      SUBROUTINE MPTRAN (NOMBAS,NOMMES,NBMESU,NBMODE,
     &                    BASEPR,VNOEUD,VRANGE,VCHAM)
C
C     ------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 05/02/2013   AUTEUR ALARCON A.ALARCON 
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C
C     PROJ_MESU_MODAL : CALCUL DES CONTRIBUTIONS MODALES ET CONSTRUCTION
C                       DU TRAN_GENE OU HARM_GENE
C
C     IN  : NOMBAS : NOM DE LA BASE DE PROJECTION
C     IN  : NOMMES : NOM DE LA SD MESURE
C     IN  : NBMESU : NOMBRE DE DDL DE MESURE
C     IN  : NBMODE : NOMBRE DE VECTEURS DE BASE
C     IN  : BASEPR : NOM BASE PROJETEE SUIVANT DIRECTION MESURE
C     IN  : VNOEUD : NOM RANGEMENT NOEUD MESURE
C     IN  : VRANGE : NOM CORRESPONDANCE ORIENTATION SUIVANT LNOEUD
C
      IMPLICIT NONE
C
C
C
C
      INCLUDE 'jeveux.h'

      CHARACTER*32 JEXNUM
      CHARACTER*8   NOMRES,NOMBAS,NOMMES
      CHARACTER*24  VRANGE,VNOEUD,BASEPR,VCHAM
      INTEGER       NBMESU,NBMODE,JPARA,IEXI,NBSYM
C
      CHARACTER*1   TYPVAL
      CHARACTER*4   K4BID(3), NOMSYM(3)
      CHARACTER*8   K8BID,K8B,SCAL,SCALAI,KCMP,KREG
      CHARACTER*8   MODELE,CHMAT,CARAEL
      CHARACTER*16  NOMCMD,TYPRES,K16BID,NOMCHA,KCHAM
      CHARACTER*19  CHS,CHAMNO,SD2

      CHARACTER*24  VABS,VMES,TYPBA

      LOGICAL       LFONCT,ZCMPLX
C
      INTEGER       I,J,JABS
      INTEGER       JDEP,JVIT,JACC,JPASS,JORDR,LORD,IMES,IRET,GD
      INTEGER       LABS,LMESU,LCOEF,LRED,JCNSD,JCNSC,JCNSV,N1
      INTEGER       NCOEF,NFONC,LFONC,NULL,IBID,JCNSL,NBCMP
      INTEGER       LVALE,LONMAX,IOCC,NUMORD,INO,ICMP,INDICE,JRAID
      INTEGER       IDESC,JCNSK,LRANGE,LNOEUD,NBABS,JORD,NBORD
      INTEGER       JBASM,LCHAM,NBCHAM,ICH,LCH,JPAMES
C
      REAL*8        R8BID,DT,PAS,DIFF,RBID
C
      COMPLEX*16    CBID
      INTEGER      IARG
C
C ----------------------------------------------------------------------
C
      DATA NOMCMD/'&PROJ_MESU_MODAL'/, K8B/'        '/, NULL/0/
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ ( )
C
C RECUPERATION DU NOM DU CONCEPT RESULTAT
      CALL GETRES (NOMRES, TYPRES, K16BID)
C RECUPERATION DU CHAMP MESURE : NOMMES
      CALL GETVTX ('MODELE_MESURE','NOM_CHAM',1,IARG,0,NOMCHA,NBCHAM)
      IF (NBCHAM .NE. 0) THEN
        NBCHAM = -NBCHAM
      ELSE
        CALL U2MESS('A','ALGORITH10_93')
      ENDIF

      CALL WKVECT ('&&LISTE_CH', 'V V K16', NBCHAM, LCH)
      CALL GETVTX ('MODELE_MESURE','NOM_CHAM',1,IARG,NBCHAM,
     &             ZK16(LCH),IBID)

      CALL GETVTX ('RESOLUTION', 'REGUL', 1,IARG, 1, KREG, N1)

C RECUPERATION DU NOMBRE D ABSCISSES : NBABS
      CALL RSORAC(NOMMES,'LONUTI',IBID,R8BID,K8BID,CBID,R8BID,'ABSOLU',
     &            NBABS,1,IBID)

      VABS = '&&ABSCISSES'
      CALL WKVECT (VABS, 'V V R', NBABS, LABS)

      VMES = '&&MESURE'

      CALL JEVEUO (VRANGE, 'L', LRANGE)
      CALL JEVEUO (VNOEUD, 'L', LNOEUD)
      CALL JEVEUO (VCHAM, 'L', LCHAM)

C RECUPERATION ADRESSE DES NUMEROS D'ORDRE ET DU NOM SYMBOLIQUE
C
      CALL JEVEUO ( NOMMES//'           .ORDR' , 'L' , LORD )

      CHS = '&&MESURE.CHS'

C BOUCLE SUR LES CHAMPS
      DO 140 ICH = 1,NBCHAM
       NOMCHA = ZK16(LCH-1 +ICH)

C BOUCLE SUR LES NUMEROS ORDRE

      DO 110 NUMORD = 1, NBABS
C        -> EXISTENCE DES CHAMPS DANS LA STRUCTURE DE DONNEES MESURE
        CALL RSEXCH(' ',NOMMES,NOMCHA,ZI(LORD-1+NUMORD),CHAMNO,IRET)
        IF ((NUMORD .LE. 1) .AND. (ICH .EQ. 1)) THEN
          CALL JEVEUO(CHAMNO//'.DESC','L',IDESC)
          GD = ZI(IDESC-1 +1)
          SCAL = SCALAI(GD)
          TYPVAL = SCAL(1:1)
          IF (TYPVAL.EQ.'C') THEN
            ZCMPLX = .TRUE.
            CALL WKVECT (VMES, 'V V C', NBMESU*NBABS, LMESU)
          ELSE
            ZCMPLX = .FALSE.
            CALL WKVECT (VMES, 'V V R', NBMESU*NBABS, LMESU)
          ENDIF
        ENDIF

C RECUPERATION DE L ABSCISSE
        IF ((TYPRES(1:9).EQ.'MODE_GENE').OR.
     &      (TYPRES(1:9).EQ.'HARM_GENE')) THEN
          CALL RSADPA(NOMMES,'L',1,'FREQ',NUMORD,0,JABS,K8BID)
        ELSEIF (TYPRES(1:9).EQ.'TRAN_GENE') THEN
          CALL RSADPA(NOMMES,'L',1,'INST',NUMORD,0,JABS,K8BID)
        ENDIF
        ZR(LABS-1 + NUMORD) = ZR(JABS)

C TRANSFORMATION DE CHAMNO EN CHAM_NO_S : CHS
        CALL DETRSD('CHAM_NO_S',CHS)
        CALL CNOCNS(CHAMNO,'V',CHS)
        CALL JEVEUO(CHS//'.CNSK','L',JCNSK)
        CALL JEVEUO(CHS//'.CNSD','L',JCNSD)
        CALL JEVEUO(CHS//'.CNSC','L',JCNSC)
        CALL JEVEUO(CHS//'.CNSV','L',JCNSV)
        CALL JEVEUO(CHS//'.CNSL','L',JCNSL)

        NBCMP = ZI(JCNSD-1 + 2)

        DO 120 IMES = 1,NBMESU
          INO = ZI(LNOEUD-1 +IMES)
          KCMP = ZK8(LRANGE-1 +IMES)
          KCHAM = ZK16(LCHAM-1 +IMES)
          DO 130 ICMP = 1,NBCMP
            INDICE = (INO-1)*NBCMP+ICMP
            IF ((ZK8(JCNSC-1 +ICMP) .EQ. KCMP) .AND.
     &          (NOMCHA .EQ. KCHAM)) THEN
              IF (ZCMPLX) THEN
                ZC(LMESU-1 +(NUMORD-1)*NBMESU+IMES) =
     &                 ZC(JCNSV-1 +INDICE)
              ELSE
                ZR(LMESU-1 +(NUMORD-1)*NBMESU+IMES) =
     &                 ZR(JCNSV-1 +INDICE)
              ENDIF
            ENDIF
 130      CONTINUE
 120    CONTINUE

C FIN BOUCLE SUR NUMERO ORDRE
 110   CONTINUE

C FIN BOUCLE SUR LES CHAMPS
 140   CONTINUE

C GESTION PARAMETRES DE REGULARISATION
      CALL GETVR8 ('RESOLUTION','COEF_PONDER',1,IARG,0, R8BID, NCOEF)
      CALL GETVID
     &      ('RESOLUTION', 'COEF_PONDER_F', 1,IARG, 0, K8BID, NFONC)
      IOCC = ABS(NCOEF) + ABS(NFONC)
      IF ((NCOEF .EQ. 0) .AND. (NFONC .EQ. 0)) IOCC = 0

      IF ((IOCC .EQ. 0) .OR. (KREG .EQ. 'NON')) THEN
C CAS SANS REGULARISATION : PAR DEFAUT
        LFONCT = .FALSE.
        CALL WKVECT (NOMCMD//'.PONDER', 'V V R', NBMODE, LCOEF)
        DO 5 I = 1, NBMODE
          ZR(LCOEF-1 + I) = 0.D0
 5      CONTINUE
      ELSE
        CALL GETVR8 ('RESOLUTION','COEF_PONDER',1,IARG,0, R8BID, NCOEF)
        IF (-NCOEF .GT. 0) THEN
C CAS DE REGULARISATION SOUS FORME DE LISTE DE REELS
          LFONCT = .FALSE.
          IF (-NCOEF .GT. NBMODE) THEN
            CALL U2MESS('F','ALGORITH6_27')
          ENDIF
          IF (-NCOEF .GT. 0) THEN
            CALL WKVECT (NOMCMD//'.PONDER', 'V V R', NBMODE, LCOEF)
            CALL GETVR8 ('RESOLUTION', 'COEF_PONDER',
     &        1,IARG, -NCOEF, ZR(LCOEF), NCOEF)
          END IF
          IF (NCOEF .LT. NBMODE) THEN
            CALL U2MESS('I','ALGORITH6_28')
            DO 10 I = NCOEF + 1, NBMODE
               ZR(LCOEF-1 + I) = ZR(LCOEF-1 + NCOEF)
 10         CONTINUE
          ENDIF
        ELSE
C CAS DE REGULARISATION SOUS FORME DE LISTE DE FONCTIONS
          LFONCT = .TRUE.
          CALL GETVID
     &      ('RESOLUTION', 'COEF_PONDER_F', 1,IARG, 0, K8BID, NFONC)
          IF (-NFONC .GT. NBMODE) CALL U2MESS('F','ALGORITH6_29')
          IF (-NFONC .GT. 0) THEN
            CALL WKVECT (NOMCMD//'.FONC', 'V V K8', NBMODE, LFONC)
            CALL GETVID ('RESOLUTION', 'COEF_PONDER_F',
     &        1,IARG, -NFONC, ZK8(LFONC), NFONC)
          END IF
          IF (NFONC .GT. 0 .AND. NFONC .LT. NBMODE) THEN
            CALL U2MESS('I','ALGORITH6_30')
            DO 200 I = NFONC + 1 , NBMODE
              ZK8(LFONC-1 + I) = ZK8(LFONC-1 + NFONC)
 200        CONTINUE
          END IF
          CALL WKVECT (NOMCMD//'.PONDER', 'V V R', NBMODE*NBABS, LCOEF)
          DO 210 I = 1 , NBMODE
            CALL JELIRA (ZK8(LFONC-1 + I)//'           .VALE',
     &          'LONMAX', LONMAX, K8BID)
            IF (LONMAX .NE. 2*NBABS) CALL U2MESS('F','ALGORITH6_31')
C
            CALL JEVEUO
     &        (ZK8(LFONC-1 + I)//'           .VALE', 'L', LVALE)
            DO 220 J = 1 , NBABS
              DIFF = ZR(LVALE-1 + J) - ZR(LABS-1 + J)
              IF (J . EQ . 1) THEN
                PAS = ZR(LABS + 1) - ZR(LABS)
              ELSE
                PAS = ZR(LABS-1 + J) - ZR(LABS-1 + J - 1)
              END IF
              IF (ABS(DIFF) .GT. PAS*1.D-4 )
     &            CALL U2MESS('F','ALGORITH6_32')
C
              ZR(LCOEF-1 + (J - 1)*NBMODE + I) =
     &          ZR(LVALE-1 + (LONMAX/2) + J)
 220        CONTINUE
 210      CONTINUE
        ENDIF
C FIN TEST SUR TYPE DE PONDERATION : REELS / LISTE DE FONCTIONS
      ENDIF
C FIN GESTION PARAMETRES DE REGULARISATION


C INITIALISATION POUR ALLOCATION DU TRAN_GENE
C
      IF (TYPRES(1:9).EQ.'TRAN_GENE') THEN
         DT = (ZR(LABS-1 +NBABS) - ZR(LABS))/NBABS
      ENDIF
C
C RECUPERATION DE LA MATRICE MODALE PROJETEE
C
      CALL JEVEUO (BASEPR, 'L', LRED)
C
C ALLOCATION DE TRAN_GENE OU HARM_GENE ET RESOLUTION DU SYSTEME
C
      IF (.NOT. ZCMPLX) THEN
C SECOND MEMBRE REEL
        IF (TYPRES(1:9).EQ.'HARM_GENE')
     &      CALL U2MESS('F','ALGORITH6_33')
        IF (TYPRES(1:9).EQ.'TRAN_GENE') THEN
C ALLOCATION
          CALL MDALLO(NOMRES,NOMBAS,K8B,K8B,K8B,NBMODE,DT,
     &                NBABS,NULL,K8BID,K8BID,NULL,K8BID,NULL,K8BID,
     &                JDEP,JVIT,JACC,JPASS,JORDR,JABS,
     &                IBID,IBID,IBID,IBID,IBID,IBID,IBID,IBID,
     &                K16BID,IBID,K4BID,'TRAN','GLOB')
C RESOLUTION
          CALL MPINV2 (NBMESU, NBMODE, NBABS,
     &              ZR(LRED), ZR(LMESU), ZR(LCOEF), ZR(LABS),
     &              LFONCT, ZR(JDEP), ZR(JVIT), ZR(JACC))

         ELSEIF (TYPRES(1:9).EQ.'MODE_GENE') THEN
          CALL WKVECT (NOMCMD//'.RETA', 'V V R', NBMODE*NBABS, JDEP)
          CALL MPINVR (NBMESU, NBMODE, NBABS,
     &              ZR(LRED), ZR(LMESU), ZR(LCOEF), ZR(LABS),
     &              LFONCT, ZR(JDEP))
C
           CALL RSCRSD('G',NOMRES, 'MODE_GENE', NBABS )
           CALL MDALLR(NOMMES,NOMRES, NOMBAS,NBMODE,NBABS,ZR(JDEP),
     &                 CBID,ZCMPLX)
         ENDIF
C
      ELSE
C SECOND MEMBRE COMPLEXE
        IF (TYPRES(1:9).EQ.'HARM_GENE') THEN

C ALLOCATION
C         -- DANS PROJ_MESU_MODAL ON REMPLIT TOUJOURS LES TROIS
C            CHAMPS, PEU IMPORTE LE TYPE DE MESURE FOURNI
          NBSYM     = 3
          NOMSYM(1) = 'DEPL'
          NOMSYM(2) = 'VITE'
          NOMSYM(3) = 'ACCE'
          CALL MDALLO (NOMRES,NOMBAS,K8B,K8B,K8B,NBMODE,R8BID,
     &                 NBABS, NULL, K8BID, K8BID,
     &                 NULL, K8BID, NULL, K8BID,
     &                 JDEP,JVIT,JACC,IBID,JORDR,JABS,
     &                 IBID,IBID,IBID,IBID,IBID,IBID,IBID,IBID,
     &                 K16BID,NBSYM,NOMSYM,'HARM','GLOB')
C RESOLUTION
          CALL MPINVC (NBMESU, NBMODE, NBABS,
     &                 ZR(LRED), ZC(LMESU), ZR(LCOEF), ZR(LABS),
     &                 LFONCT, ZC(JDEP), ZC(JVIT), ZC(JACC))


        ELSEIF (TYPRES(1:9).EQ.'MODE_GENE') THEN
C ALLOCATION
          CALL WKVECT (NOMCMD//'.RETA', 'V V C', NBMODE*NBABS, JDEP)
          CALL WKVECT (NOMCMD//'.RET1', 'V V C', NBMODE*NBABS, JVIT)
          CALL WKVECT (NOMCMD//'.RET2', 'V V C', NBMODE*NBABS, JACC)
C RESOLUTION
          CALL MPINVC (NBMESU, NBMODE, NBABS,
     &                 ZR(LRED), ZC(LMESU), ZR(LCOEF), ZR(LABS),
     &                 LFONCT, ZC(JDEP), ZC(JVIT), ZC(JACC))
C
          CALL RSCRSD('G',NOMRES, 'MODE_GENE', NBABS )
          CALL MDALLR(NOMMES, NOMRES, NOMBAS,NBMODE,NBABS,RBID,
     &                 ZC(JDEP),ZCMPLX)
        ELSE
           CALL U2MESS('F','ALGORITH6_33')
        ENDIF
C
      ENDIF
C
C     -- REMPLISSAGE DE L'OBJET .ORDR :
C
      CALL JEVEUO (NOMRES//'           .ORDR', 'E', JORDR)
      DO 400 I = 1 , NBABS
        IF (TYPRES(1:9).EQ.'MODE_GENE') THEN
          ZI(JORDR-1 + I) = I
        ELSEIF (TYPRES(1:9).EQ.'HARM_GENE') THEN
          ZI(JORDR-1 + I) = I
        ELSE
          ZI(JORDR-1 + I) = I - 1
        ENDIF
 400  CONTINUE
C     -- REMPLISSAGE DE L'OBJET .PTEM :
      IF (TYPRES(1:9).EQ.'TRAN_GENE') THEN
        CALL JEEXIN (NOMMES//'           .PTEM',IEXI)
        IF (IEXI.GT.0) THEN
           CALL JEVEUO (NOMMES//'           .PTEM', 'E', JPAMES)
           DO 500 I = 1 , NBABS
              ZR(JPASS-1+I)=ZR(JPAMES-1+I)
500        CONTINUE
        ENDIF
      ENDIF
C
C
C     -- REMPLISSAGE DE L'OBJET .NUMO :
      IF (TYPRES(1:9).EQ.'MODE_GENE') THEN
        DO 401 I = 1 , NBABS
          CALL RSADPA(NOMRES,'E',1,'NUME_MODE',ZI(JORDR-1+I),0,
     &                JPARA,K8B)
          ZI(JPARA) = I
 401    CONTINUE
      ENDIF
C     -- REMPLISSAGE DE "FREQ/DISC" :
      IF (TYPRES(1:9).EQ.'TRAN_GENE'.OR.TYPRES(1:9).EQ.'HARM_GENE')
     &   THEN
        CALL JEVEUO (NOMRES//'           .DISC', 'E', JABS)
      ELSE
        CALL JEEXIN (NOMRES//'           .FREQ',IEXI)
        IF (IEXI.GT.0) THEN
          CALL JEVEUO (NOMRES//'           .FREQ', 'E', JABS)
        ENDIF
      ENDIF
      DO 402 I = 1 , NBABS
        IF (TYPRES(1:9).EQ.'TRAN_GENE'.OR.TYPRES(1:9).EQ.'HARM_GENE')
     &     THEN
          ZR(JABS-1+I) = ZR(LABS-1+I)
        ELSE
          IF (IEXI.GT.0) THEN
            ZR(JABS-1+I) = ZR(LABS-1+I)
          ELSE
            CALL RSADPA(NOMRES,'E',1,'FREQ',ZI(JORDR-1+I),0,
     &                  JPARA,K8B)
            ZR(JPARA) = ZR(LABS-1 + I)
          ENDIF
        ENDIF
 402  CONTINUE


C --- STOCKAGE
      IF (TYPRES(1:9).EQ.'MODE_GENE') THEN
        CALL JEVEUO(NOMRES//'           .ORDR','L',JORD)
        CALL JELIRA(NOMRES//'           .ORDR','LONUTI',NBORD,K8B)
        CALL GETTCO(NOMBAS,TYPBA)
        CALL JEVEUO(NOMBAS//'           .REFD','L',JRAID)
        TYPBA=ZK24(JRAID+6)
        IF(TYPBA(1:1).NE.' ')THEN
          IF(ZK24(JRAID)(1:8).EQ.'        ')THEN
             CALL JEVEUO(JEXNUM(NOMBAS//'           .TACH',1),'L',JBASM)
             SD2=ZK24(JBASM)(1:8)
             CALL RSADPA(SD2,'L',1,'MODELE',1,0,JPARA,K8B)
             MODELE=ZK8(JPARA)
             CALL RSADPA(SD2,'L',1,'CHAMPMAT',1,0,JPARA,K8B)
             CHMAT=ZK8(JPARA)
             CALL RSADPA(SD2,'L',1,'CARAELEM',1,0,JPARA,K8B)
             CARAEL=ZK8(JPARA)
             GOTO 44
          ENDIF
        ENDIF

C       -- POUR LES BASES TYPE MODE_MECA SANS REFERENCE
        IF(ZK24(JRAID)(1:8).EQ.'        ') THEN
          MODELE='        '
          CHMAT ='        '
          CARAEL='        '
          GOTO 44
        ENDIF

        CALL DISMOI('F','NOM_MODELE',ZK24(JRAID)(1:8),'MATR_ASSE',
     &     IBID,MODELE,IRET)
        CALL DISMOI('F','CHAM_MATER',ZK24(JRAID)(1:8),'MATR_ASSE',
     &     IBID, CHMAT,IRET)
        CALL DISMOI('F','CARA_ELEM',ZK24(JRAID)(1:8),'MATR_ASSE',
     &     IBID,CARAEL,IRET)
 44     CONTINUE


        DO  43 I=1,NBORD
          CALL RSADPA(NOMRES,'E',1,'MODELE',ZI(JORDR-1+I),0,JPARA,K8B)
          ZK8(JPARA)=MODELE
          CALL RSADPA(NOMRES,'E',1,'CHAMPMAT',ZI(JORDR-1+I),0,JPARA,K8B)
          ZK8(JPARA)=CHMAT
          CALL RSADPA(NOMRES,'E',1,'CARAELEM',ZI(JORDR-1+I),0,JPARA,K8B)
          ZK8(JPARA)=CARAEL
 43     CONTINUE
      ENDIF

      CALL JEDETR (VABS)
      CALL JEDETR (VMES)
      CALL JEDETR ('&&LISTE_CH')
      CALL DETRSD('CHAM_NO_S',CHS)

      CALL JEDEMA ()
C
      END
