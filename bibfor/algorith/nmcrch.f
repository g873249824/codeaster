      SUBROUTINE NMCRCH(NUMEDD,FONACT,SDDYNA,SDSENS,DEFICO,
     &                  VALMOI,VALPLU,POUGD ,SOLALG,VEASSE)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 29/09/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2003  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      LOGICAL       FONACT(*)
      CHARACTER*19  SDDYNA 
      CHARACTER*24  SDSENS,NUMEDD,DEFICO
      CHARACTER*24  VALMOI(8),VALPLU(8),POUGD(8)    
      CHARACTER*19  SOLALG(*),VEASSE(*)
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME - INITIALISATIONS)
C
C CREATION DES VECTEURS D'INCONNUS
C      
C ----------------------------------------------------------------------
C 
C IN  SDSENS : SD SENSIBILITE
C IN  SDDYNA : SD DYNAMIQUE
C IN  DEFICO : DEFINITION CONTACT
C IN  NUMEDD : NUME_DDL
C IN  VALMOI : VARIABLE CHAPEAU POUR ETAT EN T-
C IN  VALPLU : VARIABLE CHAPEAU POUR ETAT EN T+
C IN  POUGD  : VARIABLE CHAPEAU POUR POUTRES EN GRANDES ROTATIONS
C IN  SOLALG : VARIABLE CHAPEAU POUR INCREMENTS SOLUTIONS
C IN  VEASSE : VARIABLE CHAPEAU POUR NOM DES VECT_ASSE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      IFM,NIV
      LOGICAL      NDYNLO,LDYNA,LAMMO,LMPAS,LREFE,LGRFL,LMACR
      LOGICAL      ISFONC,LCTCD,LUNIL,LCTCC,LCTFC,LCTFD,LCONT
      LOGICAL      LXFCM,LTFCM,LSSTF,LIMPE
      LOGICAL      LDIDI,LPILO
      INTEGER      NRPASE,NBPASE,NEQ,TYPALC
      CHARACTER*24 K24BID,NDYNKK,K24BLA
      REAL*8       R8BID
      INTEGER      IBID
      CHARACTER*24 SENSNB
      INTEGER      JSENSN 
      CHARACTER*24 DEPPLU,VITPLU,ACCPLU
      CHARACTER*24 DEPMOI,VITMOI,ACCMOI
      CHARACTER*19 DEPSO1,DEPSO2
      CHARACTER*19 NMCHEX,DEPDEL,DEPOLD,DDEPLA,DEPPR1,DEPPR2
      CHARACTER*19 VITDEL,VITOLD,DVITLA,VITPR1,VITPR2
      CHARACTER*19 ACCDEL,ACCOLD,DACCLA,ACCPR1,ACCPR2      
      CHARACTER*24 DEPKM1,VITKM1,ACCKM1,ROMKM1,ROMK     
      CHARACTER*24 DEPENT,VITENT,ACCENT
      CHARACTER*19 CNDYNA,CNMODP,CNMODC
      CHARACTER*19 CNFEXT,CNVCF1
      CHARACTER*19 CNFEDO,CNFSDO,CNDIDI,CNFINT
      CHARACTER*19 CNDIDO,CNCINE,CNDIRI
      CHARACTER*19 CNONDP,CNLAPL 
      CHARACTER*19 CNSSTF,CNGRFL,CNSSTR  
      CHARACTER*19 CNCTDC,CNCTDF,CNUNIL   
      CHARACTER*19 CNCTCC,CNCTCF
      CHARACTER*19 CNIMPP,CNIMPC
      CHARACTER*19 CNFEPI,CNDIPI,CNREFE
      CHARACTER*19 CNXFEC,CNXFEF,CNXFTC,CNXFTF
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... CREATION VECTEURS INCONNUES' 
      ENDIF  
C
C --- FONCTIONNALITES ACTIVEES
C
      K24BLA = ' '
      LMACR  = ISFONC(FONACT,'MACR_ELEM_STAT')       
      LDYNA  = NDYNLO(SDDYNA,'DYNAMIQUE') 
      LAMMO  = NDYNLO(SDDYNA,'AMOR_MODAL') 
      LMPAS  = NDYNLO(SDDYNA,'MULTI_PAS')
      LCTCD  = ISFONC(FONACT,'CONT_DISCRET')
      LCONT  = ISFONC(FONACT,'CONTACT')
      LCTFD  = ISFONC(FONACT,'FROT_DISCRET')      
      LCTCC  = ISFONC(FONACT,'CONT_CONTINU')  
      LCTFC  = ISFONC(FONACT,'FROT_CONTINU')     
      LUNIL  = ISFONC(FONACT,'LIAISON_UNILATER')
      LDIDI  = ISFONC(FONACT,'DIDI')
      LPILO  = ISFONC(FONACT,'PILOTAGE')  
      LSSTF  = ISFONC(FONACT,'SOUS_STRUC')    
      LREFE  = ISFONC(FONACT,'RESI_REFE') 
      LXFCM  = ISFONC(FONACT,'CONT_XFEM')
      LGRFL  = NDYNLO(SDDYNA,'FORCE_FLUIDE')
      LIMPE  = NDYNLO(SDDYNA,'IMPE_ABSO')
      LTFCM  = .FALSE.
      IF (LXFCM) THEN
        CALL MMINFP(0    ,DEFICO,K24BLA,'XFEM_GG',
     &              IBID ,R8BID ,K24BID,LTFCM)
      ENDIF      
      IF (LCONT) THEN
        CALL CFDISC(DEFICO,' ',TYPALC,IBID,IBID,IBID)  
      ENDIF  
C
C --- ACCES SD SENSIBILITE
C    
      SENSNB = SDSENS(1:16)//'.NBPASE '
      CALL JEVEUO(SENSNB,'E',JSENSN) 
      NBPASE = ZI(JSENSN+1-1)
C
C --- CREATION DES CHAMPS DE BASE - ETAT EN T-
C
      CALL DESAGG(VALMOI,DEPMOI,K24BID,K24BID,K24BID,
     &            VITMOI,ACCMOI,K24BID,K24BID)   
      CALL VTCREB(DEPMOI,NUMEDD,'V','R',NEQ) 
      IF (LDYNA) THEN
        CALL VTCREB(VITMOI,NUMEDD,'V','R',NEQ)
        CALL VTCREB(ACCMOI,NUMEDD,'V','R',NEQ)      
      ENDIF
C
C --- CREATION DES CHAMPS DE BASE - ETAT EN T+
C   
      CALL DESAGG(VALPLU,DEPPLU,K24BID,K24BID,K24BID,
     &            VITPLU,ACCPLU,K24BID,K24BID)   
      CALL VTCREB(DEPPLU,NUMEDD,'V','R',NEQ) 
      IF (LDYNA) THEN
        CALL VTCREB(VITPLU,NUMEDD,'V','R',NEQ)
        CALL VTCREB(ACCPLU,NUMEDD,'V','R',NEQ)      
      ENDIF               
C
C --- CREATION DES CHAMPS SENSIBILITE - ETAT EN T-
C
      DO 6 NRPASE = NBPASE,1,-1
        CALL NMNSLE(SDSENS,NRPASE,'DEPMOI',DEPMOI)        
        CALL VTCREB(DEPMOI,NUMEDD,'V','R',NEQ)   
        IF (LDYNA) THEN
          CALL NMNSLE(SDSENS,NRPASE,'VITMOI',VITMOI)
          CALL NMNSLE(SDSENS,NRPASE,'ACCMOI',ACCMOI)
          CALL VTCREB(VITMOI,NUMEDD,'V','R',NEQ)
          CALL VTCREB(ACCMOI,NUMEDD,'V','R',NEQ) 
        ENDIF
 6    CONTINUE
C
C --- CREATION DES CHAMPS SENSIBILITE - ETAT EN T+
C
      DO 7 NRPASE = NBPASE,1,-1
        CALL NMNSLE(SDSENS,NRPASE,'DEPPLU',DEPPLU)        
        CALL VTCREB(DEPPLU,NUMEDD,'V','R',NEQ)   
        IF (LDYNA) THEN
          CALL NMNSLE(SDSENS,NRPASE,'VITPLU',VITPLU)
          CALL NMNSLE(SDSENS,NRPASE,'ACCPLU',ACCPLU)
          CALL VTCREB(VITPLU,NUMEDD,'V','R',NEQ)   
          CALL VTCREB(ACCPLU,NUMEDD,'V','R',NEQ) 
        ENDIF
 7    CONTINUE 
C
C --- CREATION DES CHAMPS DE BASE - POUTRES EN GRANDES ROTATIONS
C 
      CALL DESAGG(POUGD ,DEPKM1,VITKM1,ACCKM1,ROMKM1,
     &            ROMK  ,K24BID,K24BID,K24BID)
      CALL VTCREB(DEPKM1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(VITKM1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(ACCKM1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(ROMKM1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(ROMK  ,NUMEDD,'V','R',NEQ) 
C
C --- CREATION DES CHAMPS DE BASE - INCREMENTS SOLUTIONS
C
      DEPDEL = NMCHEX(SOLALG,'SOLALG','DEPDEL')
      DDEPLA = NMCHEX(SOLALG,'SOLALG','DDEPLA')
      DEPPR1 = NMCHEX(SOLALG,'SOLALG','DEPPR1')
      DEPPR2 = NMCHEX(SOLALG,'SOLALG','DEPPR2')
      DEPOLD = NMCHEX(SOLALG,'SOLALG','DEPOLD')
      CALL VTCREB(DEPDEL,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DDEPLA,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPOLD,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPPR1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPPR2,NUMEDD,'V','R',NEQ)
      IF (LDYNA) THEN
        VITDEL = NMCHEX(SOLALG,'SOLALG','VITDEL')
        DVITLA = NMCHEX(SOLALG,'SOLALG','DVITLA')
        VITPR1 = NMCHEX(SOLALG,'SOLALG','VITPR1')
        VITPR2 = NMCHEX(SOLALG,'SOLALG','VITPR2')
        VITOLD = NMCHEX(SOLALG,'SOLALG','VITOLD')
        CALL VTCREB(VITDEL,NUMEDD,'V','R',NEQ)
        CALL VTCREB(DVITLA,NUMEDD,'V','R',NEQ)
        CALL VTCREB(VITOLD,NUMEDD,'V','R',NEQ)
        CALL VTCREB(VITPR1,NUMEDD,'V','R',NEQ)
        CALL VTCREB(VITPR2,NUMEDD,'V','R',NEQ)      
        ACCDEL = NMCHEX(SOLALG,'SOLALG','ACCDEL')
        DACCLA = NMCHEX(SOLALG,'SOLALG','DACCLA')
        ACCPR1 = NMCHEX(SOLALG,'SOLALG','ACCPR1')
        ACCPR2 = NMCHEX(SOLALG,'SOLALG','ACCPR2')
        ACCOLD = NMCHEX(SOLALG,'SOLALG','ACCOLD')
        CALL VTCREB(ACCDEL,NUMEDD,'V','R',NEQ)
        CALL VTCREB(DACCLA,NUMEDD,'V','R',NEQ)
        CALL VTCREB(ACCOLD,NUMEDD,'V','R',NEQ)
        CALL VTCREB(ACCPR1,NUMEDD,'V','R',NEQ)
        CALL VTCREB(ACCPR2,NUMEDD,'V','R',NEQ)       
      ENDIF
C
C --- REACTIONS D'APPUI BT.LAMBDA
C
      CNDIRI = NMCHEX(VEASSE,'VEASSE','CNDIRI') 
      CALL VTCREB(CNDIRI,NUMEDD,'V','R',NEQ)       
C
C --- VECTEURS SOLUTION
C 
      DEPSO1 = NMCHEX(SOLALG,'SOLALG','DEPSO1')    
      DEPSO2 = NMCHEX(SOLALG,'SOLALG','DEPSO2')
      CALL VTCREB(DEPSO1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPSO2,NUMEDD,'V','R',NEQ)     
C
C --- CREATION DES CHAMPS DE BASE - DEPL/VITE/ACCE D'ENTRAINEMENT
C
      IF (LDYNA) THEN
        DEPENT = NDYNKK(SDDYNA,'DEPENT')
        VITENT = NDYNKK(SDDYNA,'VITENT')
        ACCENT = NDYNKK(SDDYNA,'ACCENT')
        CALL VTCREB(DEPENT,NUMEDD,'V','R',NEQ)
        CALL VTCREB(VITENT,NUMEDD,'V','R',NEQ)
        CALL VTCREB(ACCENT,NUMEDD,'V','R',NEQ)            
      ENDIF
C
C --- FORCES D'IMPEDANCES (PREDICTION ET CORRECTION)
C
      IF (LIMPE) THEN
        CNIMPP = NMCHEX(VEASSE,'VEASSE','CNIMPP')
        CALL VTCREB(CNIMPP,NUMEDD,'V','R',NEQ) 
        CNIMPC = NMCHEX(VEASSE,'VEASSE','CNIMPC') 
        CALL VTCREB(CNIMPC,NUMEDD,'V','R',NEQ)          
      ENDIF           
C
C --- SECOND MEMBRE
C
      CNFEDO = NMCHEX(VEASSE,'VEASSE','CNFEDO')
      CALL VTCREB(CNFEDO,NUMEDD,'V','R',NEQ) 
      CNFSDO = NMCHEX(VEASSE,'VEASSE','CNFSDO') 
      CALL VTCREB(CNFSDO,NUMEDD,'V','R',NEQ)
      CNDIDO = NMCHEX(VEASSE,'VEASSE','CNDIDO')
      IF (LDIDI) THEN     
        CNDIDI = NMCHEX(VEASSE,'VEASSE','CNDIDI') 
        CALL VTCREB(CNDIDI,NUMEDD,'V','R',NEQ) 
      ENDIF      
      IF (LPILO) THEN
        CNFEPI = NMCHEX(VEASSE,'VEASSE','CNFEPI')
        CALL VTCREB(CNFEPI,NUMEDD,'V','R',NEQ) 
        CNDIPI = NMCHEX(VEASSE,'VEASSE','CNDIPI')  
        CALL VTCREB(CNDIPI,NUMEDD,'V','R',NEQ)      
      ENDIF     
C     
C --- PAS VRAIMENT DES VECT_ELEM MAIS DES CHAM_NO A CREER
C 
      CNFEXT = NMCHEX(VEASSE,'VEASSE','CNFEXT')
      CNFINT = NMCHEX(VEASSE,'VEASSE','CNFINT') 
      CNVCF1 = NMCHEX(VEASSE,'VEASSE','CNVCF1')    
      CALL VTCREB(CNFEXT,NUMEDD,'V','R',NEQ)  
      CALL VTCREB(CNFINT,NUMEDD,'V','R',NEQ)   
      CALL VTCREB(CNVCF1,NUMEDD,'V','R',NEQ)       
          
      IF (LDYNA) THEN
        CNDYNA = NMCHEX(VEASSE,'VEASSE','CNDYNA')
        CALL VTCREB(CNDYNA,NUMEDD,'V','R',NEQ) 
        IF (LMPAS) THEN
          CNFEDO = NDYNKK(SDDYNA,'CNFEDO')
          CALL VTCREB(CNFEDO,NUMEDD,'V','R',NEQ) 
          CNFSDO = NDYNKK(SDDYNA,'CNFSDO') 
          CALL VTCREB(CNFSDO,NUMEDD,'V','R',NEQ)
          CNDIDO = NDYNKK(SDDYNA,'CNDIDO')
          CALL VTCREB(CNDIDO,NUMEDD,'V','R',NEQ)  
          CNDIDI = NDYNKK(SDDYNA,'CNDIDI') 
          CALL VTCREB(CNDIDI,NUMEDD,'V','R',NEQ)
          CNFINT = NDYNKK(SDDYNA,'CNFINT')
          CALL VTCREB(CNFINT,NUMEDD,'V','R',NEQ)  
          CNONDP = NDYNKK(SDDYNA,'CNONDP') 
          CALL VTCREB(CNONDP,NUMEDD,'V','R',NEQ)
          CNLAPL = NDYNKK(SDDYNA,'CNLAPL')  
          CALL VTCREB(CNLAPL,NUMEDD,'V','R',NEQ)
          CNSSTF = NDYNKK(SDDYNA,'CNSSTF')
          CALL VTCREB(CNSSTF,NUMEDD,'V','R',NEQ)
          CNCINE = NDYNKK(SDDYNA,'CNCINE') 
          CALL VTCREB(CNCINE,NUMEDD,'V','R',NEQ) 
          CNGRFL = NDYNKK(SDDYNA,'CNGRFL')    
          CALL VTCREB(CNGRFL,NUMEDD,'V','R',NEQ)
        ENDIF
        IF (LGRFL) THEN
          CNGRFL = NMCHEX(VEASSE,'VEASSE','CNGRFL')  
          CALL VTCREB(CNGRFL,NUMEDD,'V','R',NEQ)  
        ENDIF
      ENDIF
C
C --- FORCES ISSUES DES MACRO-ELEMENTS STATIQUES
C      
      IF (LMACR) THEN
        CNSSTR = NMCHEX(VEASSE,'VEASSE','CNSSTR') 
        CALL VTCREB(CNSSTR,NUMEDD,'V','R',NEQ)
      ENDIF      
C
C --- CALCUL PAR SOUS-STRUCTURATION
C
      IF (LSSTF) THEN
        CNSSTF = NMCHEX(VEASSE,'VEASSE','CNSSTF')
        CALL VTCREB(CNSSTF,NUMEDD,'V','R',NEQ)        
      ENDIF
C
C --- AMORTISSEMENT MODAL
C      
      IF (LAMMO) THEN
        CNMODP = NMCHEX(VEASSE,'VEASSE','CNMODP')
        CNMODC = NMCHEX(VEASSE,'VEASSE','CNMODC')
        CALL VTCREB(CNMODP,NUMEDD,'V','R',NEQ)
        CALL VTCREB(CNMODC,NUMEDD,'V','R',NEQ)             
      ENDIF            
C
C --- CONTACT/FROTTEMENT DISCRET
C
      IF (LCTCD) THEN
        CNCTDC = NMCHEX(VEASSE,'VEASSE','CNCTDC')
        CALL VTCREB(CNCTDC,NUMEDD,'V','R',NEQ)
      ENDIF    
      IF (LCTFD.OR.(LCTCD.AND.(ABS(TYPALC).EQ.1))) THEN 
        CNCTDF = NMCHEX(VEASSE,'VEASSE','CNCTDF')
        CALL VTCREB(CNCTDF,NUMEDD,'V','R',NEQ)      
      ENDIF
C
C --- CONTACT/FROTTEMENT CONTINU
C
      IF (LCTCC) THEN
        CNCTCC = NMCHEX(VEASSE,'VEASSE','CNCTCC')  
        CALL VTCREB(CNCTCC,NUMEDD,'V','R',NEQ)    
      ENDIF    
      IF (LCTFC) THEN
        CNCTCF = NMCHEX(VEASSE,'VEASSE','CNCTCF')  
        CALL VTCREB(CNCTCF,NUMEDD,'V','R',NEQ)   
      ENDIF
C
C --- CONTACT/FROTTEMENT XFEM
C
      IF (LXFCM) THEN
        CNXFEC = NMCHEX(VEASSE,'VEASSE','CNXFEC')  
        CALL VTCREB(CNXFEC,NUMEDD,'V','R',NEQ)    
        CNXFEF = NMCHEX(VEASSE,'VEASSE','CNXFEF')  
        CALL VTCREB(CNXFEF,NUMEDD,'V','R',NEQ)   
      ENDIF
C
C --- CONTACT/FROTTEMENT XFEM GRANDS GLISSEMENTS
C
      IF (LTFCM) THEN
        CNXFTC = NMCHEX(VEASSE,'VEASSE','CNXFTC')  
        CALL VTCREB(CNXFTC,NUMEDD,'V','R',NEQ)    
        CNXFTF = NMCHEX(VEASSE,'VEASSE','CNXFTF')  
        CALL VTCREB(CNXFTF,NUMEDD,'V','R',NEQ)         
      ENDIF                
C
C --- LIAISON UNILATERALE
C
      IF (LUNIL) THEN
        CNUNIL = NMCHEX(VEASSE,'VEASSE','CNUNIL')
        CALL VTCREB(CNUNIL,NUMEDD,'V','R',NEQ)      
      ENDIF 
C
C --- RESIDU DE REFERENCE
C
      IF (LREFE) THEN
        CNREFE = NMCHEX(VEASSE,'VEASSE','CNREFE')
        CALL VTCREB(CNREFE,NUMEDD,'V','R',NEQ)      
      ENDIF               
C
C --- CREATION DE CHAMPS NODAUX PARTAGES (PASSES EN SOUTERRAIN)
C      OBJECTIFS :
C         NE PAS FRAGMENTER LA MEMOIRE
C      REGLES :
C         CNZERO : LECTURE SEULE -> IL VAUT TJRS 0
C         CNTMPX : NE TRANSITENT PAS D'UNE ROUTINE A L'AUTRE

      CALL VTCREB('&&CNPART.ZERO',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNPART.CHP1',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNPART.CHP2',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNPART.CHP3',NUMEDD,'V','R',NEQ)      
      CALL VTCREB('&&CNREPL.CHP1',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNREPL.CHP2',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNREPL.CHP3',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNREPL.CHP4',NUMEDD,'V','R',NEQ)            
      CALL VTCREB('&&CNCETA.CHP0',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCETA.CHP1',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCETA.CHP2',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCHAR.FFDO',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCHAR.FFPI',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCHAR.DFDO',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCHAR.DFPI',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCHAR.FVDO',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCHAR.DUMM',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&CNCHAR.CINE',NUMEDD,'V','R',NEQ)      
      CALL VTCREB('&&CNCHAR.DONN',NUMEDD,'V','R',NEQ)      
      CALL VTCREB('&&CNCHAR.PILO',NUMEDD,'V','R',NEQ)
C
      CALL JEDEMA()
      END
