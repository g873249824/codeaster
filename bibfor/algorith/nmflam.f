      SUBROUTINE NMFLAM(OPTION,MODELE,NUMEDD,NUMFIX,CARELE,
     &                  COMPOR,SOLVEU,NUMINS,MATE  ,COMREF,
     &                  LISCHA,DEFICO,RESOCO,PARMET,FONACT,
     &                  CARCRI,SDIMPR,SDSTAT,SDDISC,SDTIME,
     &                  SDDYNA,SDPOST,VALINC,SOLALG,MEELEM,
     &                  MEASSE,VEELEM,SDERRO)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 27/02/2012   AUTEUR GREFFET N.GREFFET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      INTEGER      NUMINS
      REAL*8       PARMET(*)
      CHARACTER*16 OPTION
      CHARACTER*19 MEELEM(*)
      CHARACTER*24 RESOCO,DEFICO
      CHARACTER*24 SDIMPR,SDSTAT,SDTIME,SDERRO
      CHARACTER*19 LISCHA,SOLVEU,SDDISC,SDDYNA,SDPOST
      CHARACTER*24 MODELE,NUMEDD,NUMFIX,CARELE,COMPOR
      CHARACTER*19 VEELEM(*),MEASSE(*)
      CHARACTER*19 SOLALG(*),VALINC(*)
      CHARACTER*24 MATE
      CHARACTER*24 CARCRI,COMREF
      INTEGER      FONACT(*)
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME)
C
C CALCUL DE MODES
C      
C ----------------------------------------------------------------------
C      
C
C IN  OPTION : TYPE DE CALCUL
C              'FLAMBSTA' MODES DE FLAMBEMENT EN STATIQUE
C              'FLAMBDYN' MODES DE FLAMBEMENT EN DYNAMIQUE
C              'VIBRDYNA' MODES VIBRATOIRES
C IN  MODELE : MODELE
C IN  NUMEDD : NUME_DDL (VARIABLE AU COURS DU CALCUL)
C IN  NUMFIX : NUME_DDL (FIXE AU COURS DU CALCUL)
C IN  MATE   : CHAMP MATERIAU
C IN  CARELE : CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN  COMREF : VARI_COM DE REFERENCE
C IN  COMPOR : COMPORTEMENT
C IN  LISCHA : LISTE DES CHARGES
C IN  RESOCO : SD RESOLUTION CONTACT
C IN  DEFICO : SD DEFINITION CONTACT
C IN  SDIMPR : SD AFFICHAGE
C IN  SDTIME : SD TIMER
C IN  SDSTAT : SD STATISTIQUES
C IN  SDDYNA : SD POUR LA DYNAMIQUE
C IN  PARMET : PARAMETRES DES METHODES DE RESOLUTION (VOIR NMLECT)
C IN  SOLVEU : SOLVEUR
C IN  CARCRI : PARAMETRES METHODES D'INTEGRATION LOCALES (VOIR NMLECT)
C IN  SDDISC : SD DISCRETISATION TEMPORELLE
C IN  NUMINS : NUMERO D'INSTANT
C IN  VALINC : VARIABLE CHAPEAU POUR INCREMENTS VARIABLES
C IN  SOLALG : VARIABLE CHAPEAU POUR INCREMENTS SOLUTIONS
C IN  MEELEM : MATRICES ELEMENTAIRES (POUR NMFLMA)
C IN  MEASSE : MATRICE ASSEMBLEE (POUR NMFLMA)
C IN  VEELEM : VECTEUR ELEMENTAIRE (POUR NMFLMA)
C IN  SDERRO : SD ERREUR
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      LOGICAL      INSTAB,VALTST,LDIST
      INTEGER      NFREQ,NFREQC
      INTEGER      I,ISLVK,LJEVEU,IBID,IRET
      INTEGER      DEFO,LDCCVG,NUMORD
      INTEGER      NDDLE ,NSTA,LJEVE2,CDSP
      REAL*8       BANDE(2),R8BID,R8VIDE,PREC
      REAL*8       FREQM,FREQV,FREQA,FREQR,R8MAEM,FREQR0
      REAL*8       CSTA,R8PREM,MINMAT,MAXMAT,COEFMT
      CHARACTER*4  MOD45
      CHARACTER*8  SDMODE,SDSTAB
      CHARACTER*8  SYME
      CHARACTER*16 K16BID,OPTMOD,VARACC,TYPMAT,MODRIG,OPTRIG,SIGN
      CHARACTER*19 MATGEO,MATAS2,VECMOD,CHAMP
      CHARACTER*19 CHAMP2,VECMO2
      CHARACTER*24 K24BID,DDLEXC,DDLSTA
      CHARACTER*16 NOMEVD, NOMACT
      INTEGER      NECHEC,IECHEC
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      CALL JEVEUO(SOLVEU(1:19)//'.SLVK','E',ISLVK)
      MATGEO = '&&NMFLAM.MAGEOM'      
      MATAS2 = '&&NMFLAM.MATASS'
C
C --- NOM DE LA SD DE STOCKAGE DES MODES
C
      SDMODE  = '&&NM45BI' 
      SDSTAB  = '&&NM45SI'
C  
C --- RECUPERATION DES OPTIONS
C
      CALL NMFLAL(OPTION,COMPOR,SDPOST,MOD45  ,DEFO  ,
     &            NFREQ ,CDSP, TYPMAT,OPTMOD,BANDE  ,
     &            NDDLE ,DDLEXC,NSTA,DDLSTA,MODRIG)
C
C --- ON FORCE LA MATRICE TANGENTE EN SYMETRIQUE A CAUSE DE SORENSEN
C
      SYME   = ZK24(ISLVK+5-1)(1:8)
      ZK24(ISLVK+5-1) = 'OUI'    
C
C --- CALCUL DE LA MATRICE TANGENTE ASSEMBLEE ET DE LA MATRICE GEOM.
C
      CALL NMFLMA(TYPMAT,MOD45 ,DEFO  ,PARMET,MODELE,
     &            MATE  ,CARELE,SDDISC,SDDYNA,FONACT,
     &            NUMINS,VALINC,SOLALG,LISCHA,COMREF,
     &            DEFICO,RESOCO,SOLVEU,NUMEDD,NUMFIX,
     &            COMPOR,CARCRI,SDSTAT,SDTIME,MEELEM,
     &        MEASSE,VEELEM,NDDLE,DDLEXC,MODRIG,LDCCVG,MATAS2,MATGEO)
      CALL ASSERT(LDCCVG.EQ.0)
C
C --- RETABLISSEMENTS VALEURS
C 
      ZK24(ISLVK+5-1) = SYME(1:3)
C
C --- CALCUL DES MODES PROPRES
C    
C  ON DIFFERENCIE NFREQ (DONNEE UTILISATEUR) DE NFREQC
C  QUI EST LE NB DE FREQ TROUVEES PAR L'ALGO DANS NMOP45
C
      NFREQC = NFREQ
      CALL NMOP45(MATAS2,MATGEO,DEFO  ,OPTMOD,NFREQC,
     &            CDSP,BANDE ,MOD45 ,DDLEXC,NDDLE ,
     &            SDMODE,SDSTAB,DDLSTA,NSTA)
      IF (NFREQC.EQ.0) THEN
        FREQR  = R8VIDE()
        NUMORD = -1
        GOTO 999
      ENDIF
C
C --- SELECTION DU MODE DE PLUS PETITE FREQUENCE
C
      IF ( MOD45 .EQ. 'VIBR' ) THEN
        VARACC = 'FREQ'
      ELSEIF ( MOD45 .EQ. 'FLAM' ) THEN  
        VARACC = 'CHAR_CRIT'
      ELSE
        CALL ASSERT(.FALSE.)  
      ENDIF
      FREQM  = R8MAEM()
      NUMORD = 0
      DO 60 I = 1,NFREQC
        CALL RSADPA(SDMODE,'L',1,VARACC,I,0,LJEVEU,K16BID)
        FREQV = ZR(LJEVEU)
        FREQA = ABS(FREQV)
C        FREQA = FREQV
        IF (FREQA.LT.FREQM) THEN
          NUMORD = I
          FREQM  = FREQA
          FREQR  = FREQV
        END IF
   60 CONTINUE
      IF (NSTA.NE.0) THEN
        CALL RSADPA(SDSTAB,'L',1,'CHAR_STAB',1,0,LJEVE2,K16BID)
        CSTA = ZR(LJEVE2)
      ENDIF  
C
C --- NOM DU MODE
C
      IF ( MOD45 .EQ. 'VIBR' ) THEN
        CALL NMLESD('POST_TRAITEMENT',SDPOST,'SOLU_MODE_VIBR',
     &              IBID             ,R8BID ,VECMOD)
      ELSEIF ( MOD45 .EQ. 'FLAM' ) THEN
        CALL NMLESD('POST_TRAITEMENT',SDPOST,'SOLU_MODE_FLAM',
     &              IBID             ,R8BID ,VECMOD)
        IF (NSTA.NE.0) THEN
          CALL NMLESD('POST_TRAITEMENT',SDPOST,'SOLU_MODE_STAB',
     &                IBID             ,R8BID ,VECMO2)
        ENDIF
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
      CALL RSEXCH(SDMODE,'DEPL',NUMORD,CHAMP ,IRET)
      CALL COPISD('CHAMP_GD','V',CHAMP,VECMOD)
C
      IF (NSTA.NE.0) THEN
        CALL RSEXCH(SDSTAB,'DEPL',1,CHAMP2 ,IRET)
        CALL COPISD('CHAMP_GD','V',CHAMP2,VECMO2)
      ENDIF
C
C --- AFFICHAGE DES MODES
C
      IF ( MOD45 .EQ. 'VIBR' ) THEN
        CALL NMIMPR(SDIMPR,'IMPR','IMPR_MODE_VIBR',K24BID,FREQR ,NUMORD)
      ELSEIF ( MOD45 .EQ. 'FLAM' ) THEN 
        CALL NMIMPR(SDIMPR,'IMPR','IMPR_MODE_FLAM',K24BID,FREQR ,NUMORD)
        IF (NSTA.NE.0) THEN
          CALL NMIMPR(SDIMPR,'IMPR','IMPR_MODE_STAB',K24BID,CSTA  ,1)
        ENDIF          
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF     
C
C --- ARRET PROPRE SI INSTABILITE
C
 999  CONTINUE
C
      IF ( MOD45 .EQ. 'FLAM' ) THEN
        CALL UTDIDT('L'   ,SDDISC,'LIST',IBID  ,'NECHEC',
     &              R8BID ,NECHEC,K16BID )
        DO 100 IECHEC = 1,NECHEC
          CALL UTDIDT('L'   ,SDDISC,'ECHE',IECHEC,'NOM_EVEN',
     &                R8BID ,IBID  ,NOMEVD)
          IF (NOMEVD.EQ.'INSTABILITE') THEN
C
C     ON A TROUVE UN EVENEMENT INSTABILITE DANS SDDISC
C
            CALL UTDIDT('L'   ,SDDISC,'ECHE',IECHEC,'ACTION',
     &                  R8BID ,IBID  ,NOMACT)
            IF (NOMACT.EQ.'ARRET') THEN
              INSTAB = .TRUE.
              CALL NMLESD('POST_TRAITEMENT',SDPOST,'SOLU_FREQ_FLAM',
     &                    IBID             ,FREQR0 ,K24BID)
              IF (ABS(FREQR0).GT.1.D30) FREQR0=FREQR
              CALL NMLESD('POST_TRAITEMENT',SDPOST,'RIGI_GEOM_FLAMB',
     &                    IBID             ,R8BID ,OPTRIG)
              CALL NMLESD('POST_TRAITEMENT',SDPOST,'PREC_INSTAB',
     &                    IBID             ,PREC ,K24BID)
              IF (OPTRIG.EQ.'RIGI_GEOM_NON' ) THEN
                LDIST = .FALSE.
                CALL ECHMAT(MATAS2,LDIST,MINMAT,MAXMAT,COEFMT)
                IF (((FREQR0*FREQR).LT.0.D0).OR.
     &                 (ABS(FREQR).LT.(PREC*MINMAT))) 
     &             CALL NMERGE(SDERRO,'SET','STB',INSTAB)  
              ELSE
                CALL NMLESD('POST_TRAITEMENT',SDPOST,'SIGN_INSTAB',
     &                      IBID             ,R8BID ,SIGN)
                VALTST = .FALSE.
                IF (SIGN.EQ.'POSITIF') THEN
                  VALTST = 
     &               ((FREQR.GE.0.D0).AND.(ABS(FREQR).LT.(1.D0+PREC)))
                ELSEIF (SIGN.EQ.'NEGATIF') THEN
                  VALTST = 
     &               ((FREQR.LE.0.D0).AND.(ABS(FREQR).LT.(1.D0+PREC)))
                ELSEIF (SIGN.EQ.'POSITIF_NEGATIF') THEN
                  VALTST = (ABS(FREQR).LT.(1.D0+PREC))
                ELSE
                  CALL ASSERT(.FALSE.)  
                ENDIF
                IF ( VALTST) CALL NMERGE(SDERRO,'SET','STB',INSTAB)
              ENDIF
            ENDIF
          ENDIF
 100    CONTINUE
      ENDIF
C
C --- MODE SELECTIONNE ECRIT DANS SDPOST
C
      IF ( MOD45 .EQ. 'VIBR' ) THEN
        CALL NMECSD('POST_TRAITEMENT',SDPOST,'SOLU_FREQ_VIBR',
     &              IBID             ,FREQR ,K24BID) 
        CALL NMECSD('POST_TRAITEMENT',SDPOST,'SOLU_NUME_VIBR',
     &              NUMORD           ,R8BID ,K24BID)
      ELSEIF ( MOD45 .EQ. 'FLAM' ) THEN  
        CALL NMECSD('POST_TRAITEMENT',SDPOST,'SOLU_FREQ_FLAM',
     &              IBID             ,FREQR ,K24BID) 
        CALL NMECSD('POST_TRAITEMENT',SDPOST,'SOLU_NUME_FLAM',
     &              NUMORD           ,R8BID ,K24BID)    
        IF (NSTA.NE.0) THEN
          CALL NMECSD('POST_TRAITEMENT',SDPOST,'SOLU_FREQ_STAB',
     &                IBID             ,CSTA  ,K24BID) 
          CALL NMECSD('POST_TRAITEMENT',SDPOST,'SOLU_NUME_STAB',
     &                1                ,R8BID ,K24BID)    
        ENDIF        
      ELSE
        CALL ASSERT(.FALSE.)  
      ENDIF 
C
C --- DESTRUCTION DE LA SD DE STOCKAGE DES MODES
C
      CALL JEDETC('G',SDMODE,1)
      CALL JEDETC('G',SDSTAB,1)
      
      CALL JEDEMA()
      END
