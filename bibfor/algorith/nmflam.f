      SUBROUTINE NMFLAM(MODELE,NUMEDD,CARELE,COMPOR,SOLVEU,
     &                  NUMINS,VALPLU,RESULT,MATE  ,COMREF,
     &                  LISCHA,MEDIRI,RESOCO,METHOD,PARMET,
     &                  CARCRI,ITERAT,POUGD ,DEPDEL,PARTPS,
     &                  DEFICO,STADYN,PREMIE,DEPENT,VITENT,
     &                  RIGID ,MATASS,MEMASS,MASSE ,AMORT,
     &                  LICCVG,OPTFLA,SDDYNA)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 22/10/2007   AUTEUR GREFFET N.GREFFET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2003  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      INTEGER      NUMINS,ITERAT, LICCVG(*)
      REAL*8       PARMET(*)
      CHARACTER*8  RESULT,OPTFLA
      CHARACTER*24 RESOCO
      CHARACTER*16 METHOD(*)
      CHARACTER*19 MATASS,LISCHA,SOLVEU,PARTPS,MATRIX(2),SDDYNA
      CHARACTER*24 MODELE,NUMEDD,CARELE,COMPOR,VALPLU
      CHARACTER*24 MEDIRI,DEFICO,STADYN,MATE
      CHARACTER*24 CARCRI,POUGD,DEPDEL,COMREF
      CHARACTER*24 DEPENT,VITENT,RIGID,MEMASS,AMORT
      CHARACTER*24 MASSE
      LOGICAL      PREMIE
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME)
C
C CALCUL DE FLAMBEMENT NON LINEAIRE
C      
C ----------------------------------------------------------------------
C      
C
C IN       MODELE K24  MODELE
C IN       NUMEDD K24  NUME_DDL
C IN       CARELE K24  CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN       COMPOR K24  COMPORTEMENT
C IN       SOLVEU K19  SOLVEUR
C IN       NUMINS  I   NUMERO D'INSTANT
C IN       VALPLU K24  ETAT EN T+
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI,IER
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      IDES,NBV,NFREQ
      INTEGER      I,IRET,ISLVK
      INTEGER      INIT,DEFO
      REAL*8       BANDE(2)
      CHARACTER*4  MOD45
      CHARACTER*8  MATEL,SYME,MRIG,METRES
      CHARACTER*16 K16BID,OPTION,SAUVMT,SAUVDY
      CHARACTER*19 MATGEO
      CHARACTER*24 K24BID,SIGPLU
      CHARACTER*24 TSCH
      INTEGER      JTSCH      
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      TSCH = SDDYNA(1:15)//'.TYPE_SCH'
      CALL JEVEUO(TSCH,'E',JTSCH)
C      
      CALL JEVEUO(SOLVEU//'.SLVK','E',ISLVK)
      METRES=ZK24(ISLVK-1+1)(1:8)
      IF (METRES.NE.'LDLT' .AND. METRES.NE.'MULT_FRO') CALL U2MESS('F',
     &   'FACTOR_52')


      IF ( OPTFLA(1:7) .EQ. 'VIBRDYN' ) THEN
        CALL GETVIS('MODE_VIBR','NB_FREQ',1,1,1,NFREQ,IRET)
        CALL GETVID('MODE_VIBR','MATR_RIGI',1,1,1,MRIG,IRET)
        MOD45 = 'VIBR'
        BANDE(1)=1.D-5
        BANDE(2)=1.D5
        IF ( MRIG(1:4) .EQ. 'ELAS' ) THEN
          SAUVMT = METHOD(5)
          METHOD(5) = 'ELASTIQUE'
        ELSE IF ( MRIG(1:4) .EQ. 'TANG' ) THEN
          SAUVMT = METHOD(5)
          METHOD(5) = 'TANGENTE'
        ENDIF
      ELSE
        CALL GETVIS('CRIT_FLAMB','NB_FREQ',1,1,1,NFREQ,IRET)
        CALL GETVR8('CRIT_FLAMB','CHAR_CRIT',1,1,2,BANDE,IRET)
        MOD45 = 'FLAMB'
        MRIG = '    '
      ENDIF




C     ON FORCE L'ASSEMBLAGE DE LA MATRICE TANGENTE EN SYMETRIQUE
C     A CAUSE DE SORENSEN
      SYME = ZK24(ISLVK+5-1)(1:8)
      ZK24(ISLVK+5-1)='OUI'

C
C --    RE-CALCUL DE LA MATRICE TANGENTE ASSEMBLEE (ET NON FACTORISEE)
C
      IF ( OPTFLA(1:7) .EQ. 'VIBRDYN') THEN

       MATRIX(1)=MATASS
       SAUVDY = ZK16(JTSCH+1-1)
       ZK16(JTSCH+1-1) = 'STATIQUE'
       CALL NMMATR('FLAMBEMENT',MODELE,NUMEDD,MATE,CARELE,
     &             COMREF,COMPOR,LISCHA,MEDIRI,RESOCO,
     &             METHOD,SOLVEU,PARMET,CARCRI,PARTPS,
     &             NUMINS,ITERAT,VALPLU,POUGD ,DEPDEL,
     &             VALPLU,MATRIX,K16BID,DEFICO,STADYN,
     &             PREMIE,       DEPENT,VITENT,RIGID ,
     &             MEMASS,MASSE ,AMORT ,
     &             LICCVG(5),SDDYNA)
       ZK16(JTSCH+1-1) = SAUVDY
      ELSE
       MATRIX(1)=MATASS
       CALL NMMATR('FLAMBEMENT',MODELE,NUMEDD,MATE,CARELE,
     &             COMREF,COMPOR,LISCHA,MEDIRI,RESOCO,
     &             METHOD,SOLVEU,PARMET,CARCRI,PARTPS,
     &             NUMINS,ITERAT,VALPLU,POUGD ,DEPDEL,
     &             VALPLU,MATRIX,K16BID,DEFICO,STADYN,
     &             PREMIE,       DEPENT,VITENT,RIGID ,
     &             MEMASS,MASSE ,AMORT ,
     &             LICCVG(5),SDDYNA)
      ENDIF

      IF ( (MRIG(1:4) .EQ. 'ELAS') .OR. (MRIG(1:4) .EQ. 'TANG'))
     &                 METHOD(5) = SAUVMT

C     ON RETABLIT LA SYMETRIE ORIGINELLE

      ZK24(ISLVK+5-1)=SYME(1:3)

C         SI ON EST EN PETITS DEPLACEMENTS, DEFO=0
C          ON CALCULER LES VALEURS PROPRES DE KT+LAMBDA.KG
C         SINON ON CALCULE LES VPDE KT+LAMBDA.ID

      CALL JEVEUO(COMPOR(1:19)//'.VALE','L',INIT)
      CALL JEVEUO(COMPOR(1:19)//'.DESC','L',IDES)
      DEFO = 0
      NBV = ZI(IDES-1+3)
      DO 10 I = 1,NBV
        IF (ZK16(INIT+2+20*(I-1)).EQ.'GREEN'
     & .OR. ZK16(INIT+2+20*(I-1)).EQ.'GREEN_GR' .OR.
     &      ZK16(INIT+2+20*(I-1)).EQ.'REAC_GEOM' .OR.
     &      ZK16(INIT+2+20*(I-1)).EQ.'SIMO_MIEHE') THEN
          DEFO = 1
        END IF
   10 CONTINUE


C   CALCUL DE LA RIGIDITE GEOMETRIQUE DANS LE CAS HPP

      IF (DEFO.EQ.0) THEN
         CALL DESAGG(VALPLU,K24BID,SIGPLU,K24BID,K24BID,K24BID,K24BID,
     &              K24BID,K24BID)
         MATEL = '&&NMFLAM'
         CALL DETRSD('MATR_ELEM',MATEL)

         CALL MERIBI(MODELE(1:8),CARELE(1:8),SIGPLU,MATEL,0)

         MATGEO = '&&NMFLAM.RIGIGEOM'
         CALL ASMATR(1,MATEL,' ',NUMEDD,SOLVEU,' ','ZERO','V',1,MATGEO)
         CALL DETRSD('MATR_ELEM',MATEL)

         CALL U2MESS('I','ALGORITH7_84')
         OPTION = 'BANDE'

      ELSE

         CALL U2MESS('I','ALGORITH7_85')
         MATGEO=MATASS
         OPTION = 'PLUS_PETITE'

      ENDIF

      IF ( MOD45 .EQ. 'VIBR' ) THEN
         MATGEO = '&&NMFLAM.MASSE'
         
         CALL ASMAMA(MEMASS,' ',NUMEDD,SOLVEU,LISCHA,
     &               MATGEO)
         OPTION = 'PLUS_PETITE'
      ENDIF

      CALL NMOP45(IER,MATASS,MATGEO,DEFO,OPTION,RESULT,NFREQ,
     &            BANDE,MOD45,PARTPS)

      CALL JEDEMA()
      END
