      FUNCTION CFDISI(DEFICZ,QUESTZ)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 14/09/2010   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT      NONE
      INTEGER       CFDISI
      CHARACTER*(*) DEFICZ
      CHARACTER*(*) QUESTZ
C      
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (TOUTES METHODES)
C
C RETOURNE DES INFOS DIVERSES POUR LE CONTACT (ENTIER)
C
C ----------------------------------------------------------------------
C
C      
C IN  DEFICO  : SD DE DEFINITION DU CONTACT (ISSUE D'AFFE_CHAR_MECA)
C IN  QUESTI  : QUESTION (PARAMETRE INTERROGE)
C   'STOP_SINGULIER'  ARRET OU NON SI MATR. CONTACT SINGULIERE
C   'LONG_BLOC'       LONGUEUR BLOC POUR MULTIPLE SND MEMBRES        
C   'ITER_CONT_MULT'  NBRE. MAXI ITERATIONS CONTACT (MULTIPLICATEUR)
C   'PRE_COND'        PARAMETRE POUR METHODE GCP
C   'RECH_LINEAIRE'   PARAMETRE POUR METHODE GCP
C   'NZONE'           NOMBRE DE ZONES DE CONTACT
C   'NDIM'            DIMENSION  DU PROBLEME DE CONTACT (2D OU 3D)
C   'NZOCO'           NOMBRE DE ZONES DE CONTACT
C   'NNOCO'           NOMBRE DE NOEUDS EN CONTACT SUR UNE ZONE
C                      (ESCLAVES+MAITRES)       
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      CHARACTER*24 NDIMCO
      INTEGER      JDIM
      CHARACTER*24 DEFICO,QUESTI
      CHARACTER*24 PARACI
      INTEGER      JPARCI       
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      DEFICO = DEFICZ
      QUESTI = QUESTZ
C 
C --- LECTURE DES STRUCTURES DE DONNEES DE CONTACT
C    
      PARACI = DEFICO(1:16)//'.PARACI'      
      NDIMCO = DEFICO(1:16)//'.NDIMCO'    
C
      IF (QUESTI.EQ.'NB_ITER_GEOM')      THEN    
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+1-1) 
C        
      ELSEIF (QUESTI.EQ.'STOP_SINGULIER') THEN  
        CALL JEVEUO(PARACI,'L',JPARCI) 
        CFDISI = ZI(JPARCI+2-1)
        
      ELSEIF (QUESTI.EQ.'NB_RESOL')      THEN 
        CALL JEVEUO(PARACI,'L',JPARCI)      
        CFDISI = ZI(JPARCI+3-1)
        
      ELSEIF (QUESTI.EQ.'FORMULATION')   THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+4-1)         
          
      ELSEIF (QUESTI.EQ.'ITER_CONT_MULT') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+5-1)        

      ELSEIF (QUESTI.EQ.'ITER_GEOM_MAXI') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+6-1)  
 
      ELSEIF (QUESTI.EQ.'ITER_FROT_MAXI') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+7-1)
           
      ELSEIF (QUESTI.EQ.'ALL_VERIF') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+8-1)   

      ELSEIF (QUESTI.EQ.'EXIS_USURE') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+9-1) 
        
      ELSEIF (QUESTI.EQ.'ITER_CONT_MAXI') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+10-1) 
          
      ELSEIF (QUESTI.EQ.'REAC_ITER')      THEN     
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+11-1)  
            
      ELSEIF (QUESTI.EQ.'ITER_GCP_MAXI')  THEN       
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+12-1)
                        
      ELSEIF (QUESTI.EQ.'PRE_COND')       THEN    
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+13-1)

      ELSEIF (QUESTI.EQ.'ITER_PRE_MAXI')  THEN   
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+14-1)  
        
      ELSEIF (QUESTI.EQ.'RECH_LINEAIRE')  THEN   
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+15-1)
             
      ELSEIF (QUESTI.EQ.'AXISYMETRIQUE')   THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+16-1) 

      ELSEIF (QUESTI.EQ.'ALGO_CONT')   THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+17-1) 
 
      ELSEIF (QUESTI.EQ.'ALGO_FROT')   THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+18-1) 
        
      ELSEIF (QUESTI.EQ.'LISSAGE')   THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+19-1) 

      ELSEIF (QUESTI.EQ.'NB_ITER_FROT') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+20-1)

      ELSEIF (QUESTI.EQ.'EXIS_XFEM_CZM') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+21-1)
        
      ELSEIF (QUESTI.EQ.'EXIS_PENA') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+22-1)        

      ELSEIF (QUESTI.EQ.'EXIS_VERIF') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+23-1) 

      ELSEIF (QUESTI.EQ.'ALL_INTEG_NOEUD') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+24-1)

      ELSEIF (QUESTI.EQ.'STOP_INTERP') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+25-1)

      ELSEIF (QUESTI.EQ.'EXIS_GLISSIERE') THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        CFDISI = ZI(JPARCI+26-1) 
        
      ELSEIF (QUESTI .EQ.'CONT_XFEM_GG')   THEN
        CALL JEVEUO(PARACI,'L',JPARCI)
        IF ((ZI(JPARCI+17-1).EQ.7).AND.(ZI(JPARCI+1-1).NE.0)) THEN
          CFDISI = 1
        ELSE
          CFDISI = 0
        ENDIF         
C
      ELSEIF (QUESTI.EQ.'PROJ_NEWT_ITER') THEN
        CFDISI = 200         
C
      ELSEIF (QUESTI.EQ.'FLIP_FLOP_IMAX') THEN
        CFDISI = 20
C
      ELSEIF (QUESTI.EQ.'NDIM')           THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+1-1)
        
      ELSEIF (QUESTI.EQ.'NZOCO')          THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+2-1) 
        
      ELSEIF (QUESTI.EQ.'NSUCO')          THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+3-1)         

      ELSEIF (QUESTI.EQ.'NMACO')          THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+4-1) 
                
      ELSEIF (QUESTI.EQ.'NNOCO')          THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+5-1)         
                    
      ELSEIF (QUESTI.EQ.'NTNOE')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+8 -1)

      ELSEIF (QUESTI.EQ.'NTMAE')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+9 -1)

      ELSEIF (QUESTI.EQ.'NTNOM')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+10-1)

      ELSEIF (QUESTI.EQ.'NTMAM')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+11-1) 
        
      ELSEIF (QUESTI.EQ.'NTNOEC')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+12-1)

      ELSEIF (QUESTI.EQ.'NTMAEC')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+13-1)

      ELSEIF (QUESTI.EQ.'NTNOMC')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+14-1)

      ELSEIF (QUESTI.EQ.'NTMAMC')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+15-1)         
  
      ELSEIF (QUESTI.EQ.'NTPT')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+16-1)  

      ELSEIF (QUESTI.EQ.'NTPC')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+17-1)
                
      ELSEIF (QUESTI.EQ.'NTMANO')         THEN
        CALL JEVEUO(NDIMCO,'L',JDIM )      
        CFDISI = ZI(JDIM+18-1)                    
C                              
      ELSE
        WRITE(6,*) 'QUESTION: ',QUESTI
        CALL ASSERT(.FALSE.)
      ENDIF
C
      CALL JEDEMA()
C
      END
