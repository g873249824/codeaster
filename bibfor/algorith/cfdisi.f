      FUNCTION CFDISI(DEFICZ,QUESTZ,IZONE)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 23/01/2007   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT      NONE
      INTEGER       CFDISI
      INTEGER       IZONE
      CHARACTER*(*) DEFICZ
      CHARACTER*(*) QUESTZ
C      
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (TOUTES METHODES)
C
C RETOURNE DES INFOS DIVERSES POUR LE CONTACT (ENTIER)
C
C ----------------------------------------------------------------------
C
C      
C IN  DEFICO  : SD DE DEFINITION DU CONTACT (ISSUE D'AFFE_CHAR_MECA)
C IN  QUESTI  : QUESTION (PARAMETRE INTERROGE)
C   'STOP_SINGULIER'  ARRET OU NON SI MATR. CONTACT SINGULIERE
C   'LONG_BLOC'       LONGUEUR BLOC POUR MULTI SND MEMBRES        
C   'ITER_MULT_MAXI'  NBRE. MAXI ITERATIONS CONTACT (MULTIPLICATEUR)
C   'STOP_INTERP'     POUR METHODE VERIF ARRET OU PAS
C   'PRE_COND'        PARAMETRE POUR METHODE GCP
C   'RECH_LINEAIRE'   PARAMETRE POUR METHODE GCP
C IN  IZONE   : NUMERO DE LA ZONE DE CONTACT SI IZONE.LE.0 ALORS IZONE=1
C
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      CFMMVD,ZCONV,ZMETH
      CHARACTER*24 CONVCO,METHCO
      INTEGER      JCONV,JMETH
      CHARACTER*24 DEFICO,QUESTI
C
C ----------------------------------------------------------------------
C
C
C --- INITIALISATIONS
C
      DEFICO = DEFICZ
      QUESTI = QUESTZ
      ZCONV  = CFMMVD('ZCONV')
      ZMETH  = CFMMVD('ZMETH')
      CONVCO = DEFICO(1:16)//'.CONVCO'
      METHCO = DEFICO(1:16)//'.METHCO'
       
      CALL JEVEUO(METHCO,'L',JMETH) 
                
      IF (IZONE.LE.0) THEN
        IZONE = 1
      ENDIF  

      IF     (QUESTI(1:14).EQ.'STOP_SINGULIER') THEN
        CALL JEVEUO(CONVCO,'L',JCONV)
        CFDISI = ZI(JCONV+ZCONV*(IZONE-1)+0)
      ELSEIF (QUESTI(1:9) .EQ.'LONG_BLOC')      THEN
        CALL JEVEUO(CONVCO,'L',JCONV)
        CFDISI = ZI(JCONV+ZCONV*(IZONE-1)+1)         
      ELSEIF (QUESTI(1:14).EQ.'ITER_MULT_MAXI') THEN
        CALL JEVEUO(CONVCO,'L',JCONV)
        CFDISI = ZI(JCONV+ZCONV*(IZONE-1)+2) 
      ELSEIF (QUESTI(1:11).EQ.'STOP_INTERP')    THEN
        CALL JEVEUO(CONVCO,'L',JCONV)      
        CFDISI = ZI(JCONV+ZCONV*(IZONE-1)+3)         
      ELSEIF (QUESTI(1:8) .EQ.'PRE_COND')       THEN
        CALL JEVEUO(CONVCO,'L',JCONV)      
        CFDISI = ZI(JCONV+ZCONV*(IZONE-1)+4)
      ELSEIF (QUESTI(1:13).EQ.'RECH_LINEAIRE')  THEN
        CALL JEVEUO(CONVCO,'L',JCONV)      
        CFDISI = ZI(JCONV+ZCONV*(IZONE-1)+5)      
C
      ELSEIF (QUESTI(1:5) .EQ.'NZONE')          THEN
        CFDISI = ZI(JMETH)
      ELSEIF (QUESTI(1:11).EQ.'APPARIEMENT')    THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+1)
      ELSEIF (QUESTI(1:6) .EQ.'VECT_Y')         THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+2)        
      ELSEIF (QUESTI(1:13).EQ.'VECT_ORIE_POU')  THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+2)         
      ELSEIF (QUESTI(1:14).EQ.'MAIT_ESCL_SYME') THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+3) 
      ELSEIF (QUESTI(1:10).EQ.'PROJECTION')     THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+4)
      ELSEIF (QUESTI(1:9) .EQ.'RECHERCHE')      THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+5)                          
      ELSEIF (QUESTI(1:7) .EQ.'METHODE')        THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+6) 
      ELSEIF (QUESTI(1:9) .EQ.'REAC_GEOM')      THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+7)              
      ELSEIF (QUESTI(1:7) .EQ.'NORMALE')        THEN
        CFDISI = ZI(JMETH+ZMETH*(IZONE-1)+8)                   
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF

      END
