      SUBROUTINE NMFLMA(TYPMAT,MOD45 ,DEFO  ,PARMET,MODELZ,
     &                  MATE  ,CARELE,SDDISC,SDDYNA,FONACT,
     &                  NUMINS,VALINC,SOLALG,LISCHA,COMREF,
     &                  DEFICO,RESOCO,SOLVEU,NUMEDD,NUMFIX,
     &                  COMPOR,CARCRI,SDSTAT,SDTIME,MEELEM,
     &                  MEASSE,VEELEM,NDDLE,DDLEXC,MODRIG,
     &                  LDCCVG,MATASS,MATGEO)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 23/04/2013   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C TOLE CRP_21
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      INCLUDE 'jeveux.h'
      CHARACTER*16  TYPMAT,MODRIG
      CHARACTER*4   MOD45
      INTEGER       DEFO
      REAL*8        PARMET(*)
      INTEGER       FONACT(*)
      CHARACTER*(*) MODELZ
      CHARACTER*24  MATE,CARELE
      CHARACTER*24  COMPOR,CARCRI
      CHARACTER*24  SDTIME,SDSTAT
      INTEGER       NUMINS,LDCCVG,NDDLE
      CHARACTER*19  SDDISC,SDDYNA,LISCHA,SOLVEU
      CHARACTER*24  DEFICO,RESOCO
      CHARACTER*24  COMREF,NUMEDD,NUMFIX,DDLEXC
      CHARACTER*19  MEELEM(*),MEASSE(*),VEELEM(*)
      CHARACTER*19  SOLALG(*),VALINC(*)
      CHARACTER*19  MATASS,MATGEO
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (CALCUL - UTILITAIRE)
C
C CALCUL DE LA MATRICE GLOBALE POUR FLAMBEMENT/MODES VIBRATOIRES
C
C ----------------------------------------------------------------------
C
C
C IN  TYPMAT : TYPE DE MATRICE DE RIGIDITE A UTILISER
C                'ELASTIQUE/TANGENTE/SECANTE'
C IN  MOD45  : TYPE DE CALCUL DE MODES PROPRES
C              'VIBR'     MODES VIBRATOIRES
C              'FLAM'     MODES DE FLAMBEMENT
C IN  DEFO   : TYPE DE DEFORMATIONS
C                0        PETITES DEFORMATIONS (MATR. GEOM.)
C                1        GRANDES DEFORMATIONS (PAS DE MATR. GEOM.)
C IN  MODELE : MODELE
C IN  NUMEDD : NUME_DDL (VARIABLE AU COURS DU CALCUL)
C IN  NUMFIX : NUME_DDL (FIXE AU COURS DU CALCUL)
C IN  MATE   : CHAMP MATERIAU
C IN  CARELE : CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN  COMREF : VARI_COM DE REFERENCE
C IN  COMPOR : COMPORTEMENT
C IN  LISCHA : LISTE DES CHARGES
C IN  SDTIME : SD TIMER
C IN  SDSTAT : SD STATISTIQUES
C IN  RESOCO : SD RESOLUTION CONTACT
C IN  DEFICO : SD DEFINITION CONTACT
C IN  SDDYNA : SD POUR LA DYNAMIQUE
C IN  METHOD : INFORMATIONS SUR LES METHODES DE RESOLUTION (VOIR NMLECT)
C IN  PARMET : PARAMETRES DES METHODES DE RESOLUTION (VOIR NMLECT)
C IN  SOLVEU : SOLVEUR
C IN  CARCRI : PARAMETRES METHODES D'INTEGRATION LOCALES (VOIR NMLECT)
C IN  SDDISC : SD DISC_INST
C IN  PREMIE : SI PREMIER INSTANT DE CALCUL
C IN  NUMINS : NUMERO D'INSTANT
C IN  VALINC : VARIABLE CHAPEAU POUR INCREMENTS VARIABLES
C IN  SOLALG : VARIABLE CHAPEAU POUR INCREMENTS SOLUTIONS
C IN  MEELEM : MATRICES ELEMENTAIRES
C IN  MEASSE : MATRICE ASSEMBLEE
C IN  VEELEM : VECTEUR ELEMENTAIRE
C IN  NDDLE  : NOMBRE DE DDL A EXCLURE
C IN  DDLEXC : LISTE DES NOMS DES DDL A EXCLURE
C IN  MODRIG : MODIFICATION OU NON DE LA RAIDEUR
C OUT LDCCVG : CODE RETOUR INTEGRATION DU COMPORTEMENT
C                0 - OK
C                1 - ECHEC DANS L'INTEGRATION : PAS DE RESULTATS
C                2 - ERREUR DANS LES LDC SUR LA NON VERIFICATION DE
C                    CRITERES PHYSIQUES
C                3 - SIZZ NON NUL (DEBORST) ON CONTINUE A ITERER
C OUT MATASS : MATRICE DE RAIDEUR ASSEMBLEE GLOBALE
C OUT MATGEO : DEUXIEME MATRICE ASSEMBLEE POUR LE PROBLEME AUX VP :
C              - MATRICE GEOMETRIQUE GLOBALE (CAS FLAMBEMENT)
C              - MATRICE DE RAIDEUR ASSEMBLEE GLOBALE (CAS FLAMBEMENT)
C              - MATRICE DE MASSE (CAS MODES DYNAMIQUES)
C
C ----------------------------------------------------------------------
C
      INTEGER      ZVALIN
      PARAMETER    (ZVALIN=28)
C
      LOGICAL      REASMA
      LOGICAL      LCRIGI,LCFINT,LMACR
      LOGICAL      NDYNLO,LAMOR
      LOGICAL      ISFONC,LSUIV
      CHARACTER*16 OPTRIG,OPTAMO
      INTEGER      REINCR,ITERAT
      CHARACTER*8  TDIAG,SYME
      CHARACTER*24 CODERE
      CHARACTER*19 RIGI2,MASSE,AMORT,MEMASS,MEGEOM
      CHARACTER*19 DEPPLU,VITPLU,ACCPLU,SIGPLU,VARPLU,VALIN2(ZVALIN)
      INTEGER      NMAX
      INTEGER      NBMATR,JEXX
      CHARACTER*6  LTYPMA(20)
      CHARACTER*16 LOPTME(20),LOPTMA(20),MODLAG
      LOGICAL      LASSME(20),LCALME(20)
      INTEGER      IFM,NIV,IBID,IRET
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ...... CALCUL MATRICE'
      ENDIF
C
C --- INITIALISATIONS
C
      CALL NMCMAT('INIT',' ',' ',' ',.TRUE.,
     &            .TRUE.,NBMATR,LTYPMA,LOPTME,LOPTMA,
     &            LCALME,LASSME)
      CODERE = '&&NMFLMA.CODERE'
      ITERAT = 0
C
C --- RECOPIE DU VECTEUR CHAPEAU
C
      CALL NMCHAI('VALINC','LONMAX',NMAX  )
      CALL ASSERT(NMAX.EQ.ZVALIN)
      CALL NMCHA0('VALINC','ALLINI',' ',VALIN2)
      CALL NMCHCP('VALINC',VALINC,VALIN2)
C
C --- FONCTIONNALITES ACTIVEES
C
      LAMOR  = NDYNLO(SDDYNA,'MAT_AMORT')
      LSUIV  = ISFONC(FONACT,'FORCE_SUIVEUSE')
      LMACR  = ISFONC(FONACT,'MACR_ELEM_STAT')
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL NMCHEX(MEASSE,'MEASSE','MEMASS',MASSE)
      CALL NMCHEX(MEASSE,'MEASSE','MEAMOR',AMORT)
      CALL NMCHEX(MEELEM,'MEELEM','MEMASS',MEMASS)
      CALL NMCHEX(MEELEM,'MEELEM','MEGEOM',MEGEOM)
C
C --- ON UTILISE CHAMP EN T+ PAS T- CAR DEPDEL=0 ET
C --- MATRICE = RIGI_MECA_TANG (VOIR FICHE 18779)
C --- SAUF VARI. COMM.
C
      CALL NMCHEX(VALINC,'VALINC','DEPPLU',DEPPLU)
      CALL NMCHEX(VALINC,'VALINC','SIGPLU',SIGPLU)
      CALL NMCHEX(VALINC,'VALINC','VARPLU',VARPLU)
      CALL NMCHEX(VALINC,'VALINC','VITPLU',VITPLU)
      CALL NMCHEX(VALINC,'VALINC','ACCPLU',ACCPLU)
C
      CALL NMCHA0('VALINC','DEPMOI',DEPPLU,VALIN2)
      CALL NMCHA0('VALINC','VITMOI',VITPLU,VALIN2)
      CALL NMCHA0('VALINC','VARMOI',VARPLU,VALIN2)
      CALL NMCHA0('VALINC','ACCMOI',ACCPLU,VALIN2)
      CALL NMCHA0('VALINC','SIGMOI',SIGPLU,VALIN2)
C
C --- OBJET POUR RECONSTRUCTION RIGIDITE TOUJOURS SYMETRIQUE
C
      RIGI2 = '&&NMFLMA.RIGISYME'
C
C --- PARAMETRES
C
      REINCR = NINT(PARMET(1))
C
C --- REASSEMBLAGE DE LA MATRICE GLOBALE
C
      IF ((REINCR.EQ.0) .AND. (NUMINS.NE.1)) THEN
        REASMA = .FALSE.
      ENDIF
      IF (NUMINS.EQ.1) THEN
        REASMA = .TRUE.
      ENDIF
      IF ((REINCR.NE.0) .AND. (NUMINS.NE.1)) THEN
        REASMA = MOD(NUMINS-1,REINCR) .EQ. 0
      ENDIF
C
C --- OPTION DE CALCUL DE MERIMO
C
      IF (TYPMAT.EQ.'TANGENTE') THEN
        OPTRIG = 'RIGI_MECA_TANG'
      ELSE IF (TYPMAT.EQ.'SECANTE') THEN
        OPTRIG = 'RIGI_MECA_ELAS'
      ELSE IF (TYPMAT.EQ.'ELASTIQUE') THEN
        OPTRIG = 'RIGI_MECA'
      ELSE
         OPTRIG = 'RIGI_MECA_TANG'    
C        CALL ASSERT(.FALSE.)
      END IF
C
C --- A RECALCULER
C
      LCRIGI = REASMA
      LCFINT = .FALSE.
C
C --- CALCUL DES MATR-ELEM DE RIGIDITE
C
      IF (LCRIGI) THEN
        CALL NMCMAT('AJOU','MERIGI',OPTRIG,' ',.TRUE.,
     &              REASMA,NBMATR,LTYPMA,LOPTME,LOPTMA,
     &              LCALME,LASSME)
      ENDIF
C
C --- CALCUL DES MATR-ELEM D'AMORTISSEMENT DE RAYLEIGH A CALCULER
C --- NECESSAIRE SI MATR_ELEM RIGIDITE CHANGE !
C
      IF (LCRIGI.AND.LAMOR) THEN
        OPTAMO = 'AMOR_MECA'
        CALL NMCMAT('AJOU','MEAMOR',OPTAMO,' ',.TRUE.,
     &              .TRUE.,NBMATR,LTYPMA,LOPTME,LOPTMA,
     &              LCALME,LASSME)
      ENDIF
C
C --- CALCUL DES MATR-ELEM DES CHARGEMENTS SUIVEURS
C
      IF (LSUIV) THEN
        CALL NMCMAT('AJOU','MESUIV',' ',' ',.TRUE.,
     &              .FALSE.,NBMATR,LTYPMA,LOPTME,LOPTMA,
     &              LCALME,LASSME)
      ENDIF
C
C --- CALCUL DE LA RIGIDITE GEOMETRIQUE DANS LE CAS HPP
C
      IF (MOD45 .EQ. 'FLAM') THEN
        IF (DEFO.EQ.0) THEN
          CALL NMCMAT('AJOU','MEGEOM',' ',' ',.TRUE.,
     &                .FALSE.,NBMATR,LTYPMA,LOPTME,LOPTMA,
     &                LCALME,LASSME)
        ENDIF
      ENDIF
C
C --- CALCUL DES MATR-ELEM DES SOUS-STRUCTURES
C
      IF (LMACR) THEN
        CALL NMCMAT('AJOU','MESSTR',' ',' ',.TRUE.,
     &              .FALSE.,NBMATR,LTYPMA,LOPTME,LOPTMA,
     &              LCALME,LASSME)
      ENDIF
C
C --- CALCUL ET ASSEMBLAGE DES MATR_ELEM DE LA LISTE
C
      IF (NBMATR.GT.0) THEN
        CALL NMXMAT(MODELZ,MATE  ,CARELE,COMPOR,CARCRI,
     &              SDDISC,SDDYNA,FONACT,NUMINS,ITERAT,
     &              VALIN2,SOLALG,LISCHA,COMREF,DEFICO,
     &              RESOCO,SOLVEU,NUMEDD,NUMFIX,SDSTAT,
     &              SDTIME,NBMATR,LTYPMA,LOPTME,LOPTMA,
     &              LCALME,LASSME,LCFINT,MEELEM,MEASSE,
     &              VEELEM,LDCCVG,CODERE)
      ENDIF
C
C --- ON RECONSTRUIT RIGI2 TOUJOURS SYMETRIQUE
C
      CALL ASMARI(FONACT,MEELEM,NUMEDD,SOLVEU,LISCHA,
     &            RIGI2 )
      MATASS = RIGI2
C
C --- PRISE EN COMPTE DE LA MATRICE TANGENTE DES FORCES SUIVEUSES
C
      IF (REASMA) THEN
        IF (LSUIV) THEN
          CALL ASCOMA(MEELEM,NUMEDD,SOLVEU,LISCHA,MATASS)
        ENDIF
      ENDIF
C
C  --- MODIFICATION EVENTUELLE DE LA MATRICE DE RAIDEUR
C
      MODLAG = 'MODI_LAGR_OUI'
      TDIAG  = 'MAX_ABS'
      IF ((NDDLE.NE.0).AND.(MODRIG(1:13).EQ.'MODI_RIGI_OUI')) THEN
        CALL JEVEUO(DDLEXC,'L',JEXX)
        CALL MATIDE(MATASS,NDDLE,ZK8(JEXX),MODLAG,TDIAG,10.D0)
      ENDIF
C
C --- CALCUL DE LA RIGIDITE GEOMETRIQUE DANS LE CAS HPP
C
      IF (MOD45 .EQ. 'FLAM') THEN
        IF (DEFO.EQ.0) THEN
          CALL ASMATR(1,MEGEOM,' ',NUMEDD,SOLVEU,LISCHA,'ZERO','V',
     &                1,MATGEO)
          IF ((NDDLE.NE.0).AND.(MODRIG(1:13).EQ.'MODI_RIGI_OUI')) THEN
            CALL MATIDE(MATGEO,NDDLE,ZK8(JEXX),MODLAG,TDIAG,10.D0)
          ENDIF
        ELSE
          MATGEO = MATASS
        ENDIF
      ELSEIF (MOD45 .EQ. 'VIBR') THEN
        CALL ASMAMA(MEMASS,' ',NUMEDD,SOLVEU,LISCHA,
     &              MATGEO)
      ENDIF
C
C --- VERIFICATION POUR MODE_VIBR QUE LES DEUX MATRICES SONT SYMETRIQUES
C
      IF (MOD45.EQ.'VIBR') THEN
        CALL DISMOI('F','TYPE_MATRICE',MATASS,'MATR_ASSE',IBID,
     &              SYME,IRET)
        IF (SYME.EQ.'NON_SYM') THEN
          CALL U2MESS('F','MECANONLINE5_56')
        ELSE
          CALL DISMOI('F','TYPE_MATRICE',MATGEO,'MATR_ASSE',IBID,
     &                SYME,IRET)
          IF (SYME.EQ.'NON_SYM') CALL U2MESS('F','MECANONLINE5_56')
        ENDIF
      ENDIF
C
      CALL JEDEMA()
C
      END
