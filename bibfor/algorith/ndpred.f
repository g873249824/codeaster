      SUBROUTINE NDPRED(SDDISC,SDSENS,SDDYNA,VALINC,SOLALG)
C     
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 24/10/2011   AUTEUR GREFFET N.GREFFET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      CHARACTER*24 SDSENS
      CHARACTER*19 SDDYNA,SDDISC
      CHARACTER*19 SOLALG(*),VALINC(*)     
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (DYNAMIQUE)
C
C CALCUL DES PREDICTEURS
C      
C ----------------------------------------------------------------------
C
C    
C IN  SDSENS : SD SENSIBILITE
C IN  SDDYNA : SD DYNAMIQUE 
C IN  SDDISC : SD DISCRETISATION TEMPORELLE
C IN  VALINC : VARIABLE CHAPEAU POUR INCREMENTS VARIABLES
C IN  SOLALG : VARIABLE CHAPEAU POUR INCREMENTS SOLUTIONS
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C  
      INTEGER      JCFSC
      CHARACTER*24 CFSC
      INTEGER      NRPASE
      INTEGER      NDYNIN
      LOGICAL      PREMIE,NDYNLO
      LOGICAL      LDEPL,LVITE,LACCE
      INTEGER      N,IRET
      CHARACTER*24 SENSNB
      INTEGER      JSENSN      
      INTEGER      NBPASE
      REAL*8       COEFD(3),COEFV(3),COEFA(3),NDYNRE
      CHARACTER*24 VECT(3)         
      CHARACTER*19 DEPDEL,VITDEL,ACCDEL     
      CHARACTER*19 DEPKM1,VITKM1,ACCKM1,ROMKM1,ROMK
      CHARACTER*19 DEPPLU,VITPLU,ACCPLU
      CHARACTER*19 DEPMOI,VITMOI,ACCMOI 
      INTEGER      IFM,NIV         
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... CALCUL PREDICTEURS'  
      ENDIF  
C
C --- ACCES SD DYNA
C      
      CFSC = SDDYNA(1:15)//'.COEF_SCH'      
      CALL JEVEUO(CFSC,'L',JCFSC)
C
C --- ACCES SD SENSIBILITE
C     
      SENSNB = SDSENS(1:16)//'.NBPASE '
      CALL JEVEUO(SENSNB,'L',JSENSN)      
      NBPASE = ZI(JSENSN+1-1)      
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C 
      CALL NMCHEX(VALINC,'VALINC','DEPKM1',DEPKM1)
      CALL NMCHEX(VALINC,'VALINC','VITKM1',VITKM1)
      CALL NMCHEX(VALINC,'VALINC','ACCKM1',ACCKM1)
      CALL NMCHEX(VALINC,'VALINC','ROMKM1',ROMKM1)
      CALL NMCHEX(VALINC,'VALINC','ROMK  ',ROMK  )
      CALL NMCHEX(SOLALG,'SOLALG','DEPDEL',DEPDEL)
      CALL NMCHEX(SOLALG,'SOLALG','VITDEL',VITDEL)
      CALL NMCHEX(SOLALG,'SOLALG','ACCDEL',ACCDEL)
C
C --- TYPE DE FORMULATION SCHEMA DYNAMIQUE GENERAL
C
      LDEPL  = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.1
      LVITE  = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.2
      LACCE  = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.3  
C
C --- PREMIER INSTANT ?
C
      CALL DIBCLE(SDDISC,'PREMIE','L',IRET  )
      PREMIE = IRET.EQ.0         
C
C --- COEFFICIENTS POUR PREDICTEURS
C
      COEFD(1)  = NDYNRE(SDDYNA,'COEF_DEPL_DEPL')  
      COEFD(2)  = NDYNRE(SDDYNA,'COEF_DEPL_VITE')  
      COEFD(3)  = NDYNRE(SDDYNA,'COEF_DEPL_ACCE')  
      COEFV(1)  = NDYNRE(SDDYNA,'COEF_VITE_DEPL')
      COEFV(2)  = NDYNRE(SDDYNA,'COEF_VITE_VITE')
      COEFV(3)  = NDYNRE(SDDYNA,'COEF_VITE_ACCE')
      COEFA(1)  = NDYNRE(SDDYNA,'COEF_ACCE_DEPL')
      COEFA(2)  = NDYNRE(SDDYNA,'COEF_ACCE_VITE')
      COEFA(3)  = NDYNRE(SDDYNA,'COEF_ACCE_ACCE')
C
C --- MISE A JOUR CHAMPS GRANDES ROTATIONS
C             
      CALL VTZERO(ROMKM1)
      CALL VTZERO(ROMK)
C
C --- CALCUL DES PREDICTEURS
C     
      DO 20 NRPASE = NBPASE,0,-1
        CALL NMNSLE(SDSENS,NRPASE,'DEPPLU',DEPPLU)
        CALL NMNSLE(SDSENS,NRPASE,'VITPLU',VITPLU)
        CALL NMNSLE(SDSENS,NRPASE,'ACCPLU',ACCPLU) 
        CALL NMNSLE(SDSENS,NRPASE,'DEPMOI',DEPMOI)
        CALL NMNSLE(SDSENS,NRPASE,'VITMOI',VITMOI)
        CALL NMNSLE(SDSENS,NRPASE,'ACCMOI',ACCMOI)          
        IF (PREMIE) THEN
          CALL COPISD('CHAMP_GD','V',DEPMOI,DEPKM1)
          CALL COPISD('CHAMP_GD','V',VITMOI,VITKM1)
          CALL COPISD('CHAMP_GD','V',ACCMOI,ACCKM1)     
        ELSE      
          CALL COPISD('CHAMP_GD','V',DEPPLU,DEPKM1)
          CALL COPISD('CHAMP_GD','V',VITPLU,VITKM1)
          CALL COPISD('CHAMP_GD','V',ACCPLU,ACCKM1)
        ENDIF
        VECT(1) = DEPKM1
        VECT(2) = VITKM1
        VECT(3) = ACCKM1   
                    
        IF (LDEPL) THEN 
          CALL VTZERO(VITPLU)
          CALL VTZERO(ACCPLU)        
          DO 10 N = 1,3
            CALL VTAXPY(COEFV(N),VECT(N),VITPLU)
            CALL VTAXPY(COEFA(N),VECT(N),ACCPLU)
 10       CONTINUE 
        ELSEIF (LVITE) THEN
          CALL VTZERO(DEPPLU)
          CALL VTZERO(ACCPLU) 
          CALL COPISD('CHAMP_GD','V',VITKM1 ,VITPLU)       
          DO 11 N = 1,3
            CALL VTAXPY(COEFD(N),VECT(N),DEPPLU)
            CALL VTAXPY(COEFA(N),VECT(N),ACCPLU)
 11       CONTINUE         
        ELSEIF (LACCE) THEN     
          CALL VTZERO(VITPLU)
          CALL VTZERO(DEPPLU)
          DO 12 N = 1,3
            CALL VTAXPY(COEFV(N),VECT(N),VITPLU)
            CALL VTAXPY(COEFD(N),VECT(N),DEPPLU)
 12       CONTINUE      
          CALL COPISD('CHAMP_GD','V',ACCKM1,ACCPLU)
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF  
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... PRED. DEPL. '
          CALL NMDEBG('VECT',DEPPLU,IFM)                   
          WRITE (IFM,*) '<MECANONLINE> ...... PRED. VITE. '
          CALL NMDEBG('VECT',VITPLU,IFM) 
          WRITE (IFM,*) '<MECANONLINE> ...... PRED. ACCE. ' 
          CALL NMDEBG('VECT',ACCPLU,IFM)             
        ENDIF               
   20 CONTINUE 
C
C --- INITIALISATION DE L'INCREMENT DE DEPLACEMENT DEPDEL     
C 
      CALL VTZERO(DEPDEL)
      
      IF (LACCE) THEN
        DO 14 N = 1,3
          CALL VTAXPY(COEFD(N),VECT(N),DEPDEL)
 14     CONTINUE
        CALL VTAXPY(-1.D0,DEPKM1,DEPDEL)   
      ENDIF      
C
C --- INITIALISATION DE L'INCREMENT DE VITESSE/ACCELERATION   
C 
      CALL VTZERO(VITDEL)
      CALL VTZERO(ACCDEL) 
C    
      CALL JEDEMA()

      END
