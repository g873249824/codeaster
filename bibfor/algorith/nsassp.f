      SUBROUTINE NSASSP(MODELE,NUMEDD,LISCHA,FONACT,SDDYNA,
     &                  VALINC,VEELEM,VEASSE,CNPILO,CNDONN,
     &                  MATE  ,CARELE,DEFICO,MATASS)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 14/06/2011   AUTEUR TARDIEU N.TARDIEU 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      INTEGER      FONACT(*)
      CHARACTER*19 LISCHA,SDDYNA,MATASS
      CHARACTER*24 MODELE,NUMEDD,MATE,CARELE,DEFICO
      CHARACTER*19 VEASSE(*),VEELEM(*),VALINC(*)
      CHARACTER*19 CNPILO,CNDONN
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME - PREDICTION)
C
C CALCUL DU SECOND MEMBRE POUR LA PREDICTION - STATIQUE
C
C ----------------------------------------------------------------------
C
C
C IN  MODELE : NOM DU MODELE
C IN  NUMEDD : NOM DE LA NUMEROTATION
C IN  LISCHA : SD L_CHARGES
C IN  FONACT : FONCTIONNALITES ACTIVEES
C IN  SDDYNA : SD DYNAMIQUE
C IN  VALINC : VARIABLE CHAPEAU POUR INCREMENTS VARIABLES
C IN  VEELEM : VARIABLE CHAPEAU POUR NOM DES VECT_ELEM
C IN  VEASSE : VARIABLE CHAPEAU POUR NOM DES VECT_ASSE
C OUT CNPILO : VECTEUR ASSEMBLE DES FORCES PILOTEES
C OUT CNDONN : VECTEUR ASSEMBLE DES FORCES DONNEES
C IN  MATASS : SD MATRICE ASSEMBLEE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      I,NBVEC,NBCOEF
      CHARACTER*19 CNFFDO,CNDFDO,CNFVDO
      CHARACTER*19 CNFFPI,CNDFPI,CNDIRI
      CHARACTER*19 VEBUDI,VEDIRI
      PARAMETER    (NBCOEF=9)
      REAL*8       COEF(NBCOEF)
      CHARACTER*19 VECT(NBCOEF)
      CHARACTER*19 CNFNOD,CNBUDI,CNVCPR,CNSSTR,CNELTC,CNELTF
      CHARACTER*19 DEPMOI,K19BLA
      LOGICAL      ISFONC,LMACR,LELTC,LELTF,LALLV
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      CALL VTZERO(CNDONN)
      CALL VTZERO(CNPILO)
      CNFFDO = '&&CNCHAR.FFDO'
      CNFFPI = '&&CNCHAR.FFPI'
      CNDFDO = '&&CNCHAR.DFDO'
      CNDFPI = '&&CNCHAR.DFPI'
      CNFVDO = '&&CNCHAR.FVDO'
      K19BLA = ' '
C
C --- FONCTIONNALITES ACTIVEES
C
      LMACR  = ISFONC(FONACT,'MACR_ELEM_STAT')
      LELTC  = ISFONC(FONACT,'ELT_CONTACT')
      LELTF  = ISFONC(FONACT,'ELT_FROTTEMENT')
      LALLV  = ISFONC(FONACT,'CONT_ALL_VERIF'  )
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL NMCHEX(VALINC,'VALINC','DEPMOI',DEPMOI)
C
C --- CALCUL DU VECTEUR DES CHARGEMENTS FIXES        (NEUMANN)
C
      CALL NMASFI(FONACT,SDDYNA,VEASSE,CNFFDO,CNFFPI)
C
C --- CALCUL DU VECTEUR DES CHARGEMENTS FIXES        (DIRICHLET)
C
      CALL NMASDI(FONACT,VEASSE,CNDFDO,CNDFPI)
C
C --- CALCUL DU VECTEUR DES CHARGEMENTS VARIABLES    (NEUMANN)
C
      CALL NMASVA(SDDYNA,VEASSE,CNFVDO)
C
C --- SECOND MEMBRE DES VARIABLES DE COMMANDE
C
      CALL NMCHEX(VEASSE,'VEASSE','CNVCPR',CNVCPR)
C
C --- FORCES NODALES
C
      CALL NMCHEX(VEASSE,'VEASSE','CNFNOD',CNFNOD)
C
C --- CALCUL DES REACTIONS D'APPUI BT.LAMBDA      
C
      CALL NMCHEX(VEELEM,'VEELEM','CNDIRI',VEDIRI)
      CALL NMCHEX(VEASSE,'VEASSE','CNDIRI',CNDIRI)
      
      CALL NMDIRI(MODELE,MATE  ,CARELE,LISCHA,K19BLA,
     &            DEPMOI,K19BLA,K19BLA,VEDIRI)
      CALL NMADIR(NUMEDD,FONACT,DEFICO,VEASSE,VEDIRI,
     &            CNDIRI)                 
C
C --- CONDITIONS DE DIRICHLET B.U
C
      CALL NMCHEX(VEASSE,'VEASSE','CNBUDI',CNBUDI)
      CALL NMCHEX(VEELEM,'VEELEM','CNBUDI',VEBUDI)
      CALL NMBUDI(MODELE,NUMEDD,LISCHA,DEPMOI,VEBUDI,
     &            CNBUDI,MATASS)
C
C --- CHARGEMENTS DONNES
C
      NBVEC   = 7
      COEF(1) = 1.D0
      COEF(2) = 1.D0
      COEF(3) = -1.D0
      COEF(4) = -1.D0
      COEF(5) = -1.D0
      COEF(6) = 1.D0
      COEF(7) = 1.D0
      VECT(1) = CNFFDO
      VECT(2) = CNFVDO
      VECT(3) = CNDIRI
      VECT(4) = CNBUDI
      VECT(5) = CNFNOD
      VECT(6) = CNVCPR
      VECT(7) = CNDFDO
C
C --- FORCES ISSUES DES MACRO-ELEMENTS STATIQUES
C
      IF (LMACR) THEN
        CALL NMCHEX(VEASSE,'VEASSE','CNSSTR',CNSSTR)
        NBVEC       = NBVEC + 1
        COEF(NBVEC) = 1.D0
        VECT(NBVEC) = CNSSTR
      ENDIF
C
C --- FORCES DES ELEMENTS DE CONTACT (XFEM+CONTINUE)
C
      IF (LELTC.AND.(.NOT.LALLV)) THEN
        CALL NMCHEX(VEASSE,'VEASSE','CNELTC',CNELTC)
        NBVEC       = NBVEC + 1
        COEF(NBVEC) = -1.D0
        VECT(NBVEC) = CNELTC
      ENDIF
      IF (LELTF.AND.(.NOT.LALLV)) THEN
        CALL NMCHEX(VEASSE,'VEASSE','CNELTF',CNELTF)
        NBVEC       = NBVEC + 1
        COEF(NBVEC) = -1.D0
        VECT(NBVEC) = CNELTF
      ENDIF
C
C --- CHARGEMENT DONNE
C
      IF (NBVEC.GT.NBCOEF) THEN
        CALL ASSERT(.FALSE.)
      ENDIF
      DO 10 I = 1,NBVEC
        CALL VTAXPY(COEF(I),VECT(I),CNDONN)
 10   CONTINUE
C
C --- CHARGEMENT PILOTE
C
      NBVEC   = 2
      COEF(1) = 1.D0
      COEF(2) = 1.D0
      VECT(1) = CNFFPI
      VECT(2) = CNDFPI
      IF (NBVEC.GT.NBCOEF) THEN
        CALL ASSERT(.FALSE.)
      ENDIF
      DO 18 I = 1,NBVEC
        CALL VTAXPY(COEF(I),VECT(I),CNPILO)
 18   CONTINUE
C
      CALL JEDEMA()
      END
