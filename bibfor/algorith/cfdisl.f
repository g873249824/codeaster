      FUNCTION CFDISL(DEFICZ,QUESTZ)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 26/03/2013   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT      NONE
      INCLUDE 'jeveux.h'
      LOGICAL       CFDISL
      CHARACTER*(*) DEFICZ
      CHARACTER*(*) QUESTZ
C
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (TOUTES METHODES)
C
C RETOURNE DES INFOS DIVERSES POUR LE CONTACT (LOGICAL)
C
C ----------------------------------------------------------------------
C
C
C IN  DEFICO  : SD DE DEFINITION DU CONTACT (ISSUE D'AFFE_CHAR_MECA)
C IN  QUESTI  : QUESTION (PARAMETRE INTERROGE)
C
C ----------------------------------------------------------------------
C
      CHARACTER*24 DEFICO,QUESTI
      INTEGER      CFDISI,IFORM
      INTEGER      ICONT,IFROT,NDIMG,IZONE
      LOGICAL      MMINFL
C
C ----------------------------------------------------------------------
C
C
C --- INITIALISATIONS
C
      DEFICO = DEFICZ
      QUESTI = QUESTZ
      CFDISL = .FALSE.
C
C --- LECTURE DES STRUCTURES DE DONNEES DE CONTACT
C
      IF (QUESTI .EQ.'MODI_MATR_GLOB')   THEN
        IFORM  = CFDISI(DEFICO,'FORMULATION')
        IF (IFORM.EQ.1) THEN
          ICONT  = CFDISI(DEFICO,'ALGO_CONT')
          IFROT  = CFDISI(DEFICO,'ALGO_FROT')
          NDIMG  = CFDISI(DEFICO,'NDIM')
          IF (ICONT.EQ.4) THEN
            CFDISL = .TRUE.
          ENDIF
          IF (IFROT.NE.0) THEN
            IF (IFROT.EQ.2) THEN
              IF (NDIMG.EQ.2) THEN
                CFDISL = .FALSE.
              ELSE
                CFDISL = .TRUE.
              ENDIF
            ELSE
              CFDISL = .TRUE.
            ENDIF
          ENDIF
        ENDIF

      ELSEIF (QUESTI .EQ.'MATR_CONT')   THEN
        ICONT  = CFDISI(DEFICO,'ALGO_CONT')
        CFDISL = ((ICONT.EQ.1).OR.(ICONT.EQ.5))

      ELSEIF (QUESTI .EQ.'LISSAGE')   THEN
        CFDISL = CFDISI(DEFICO,'LISSAGE').EQ.1

      ELSEIF (QUESTI .EQ.'CONT_DISC_GLIS')   THEN
        IZONE  = 1
        CFDISL = MMINFL(DEFICO,'GLISSIERE_ZONE',IZONE )

      ELSEIF (QUESTI .EQ.'CONT_XFEM_GG')   THEN
        CFDISL = CFDISI(DEFICO,'CONT_XFEM_GG').EQ.1

      ELSEIF (QUESTI .EQ.'EXIS_XFEM_CZM')   THEN
        CFDISL = CFDISI(DEFICO,'EXIS_XFEM_CZM').EQ.1

      ELSEIF (QUESTI .EQ.'EXIS_PENA')   THEN
        CFDISL = CFDISI(DEFICO,'EXIS_PENA').EQ.1

      ELSEIF (QUESTI .EQ.'ALL_VERIF')   THEN
        CFDISL = CFDISI(DEFICO,'ALL_VERIF').EQ.1

      ELSEIF (QUESTI .EQ.'EXIS_VERIF')   THEN
        CFDISL = CFDISI(DEFICO,'EXIS_VERIF').EQ.1

      ELSEIF (QUESTI .EQ.'EXIS_GLISSIERE')   THEN
        CFDISL = CFDISI(DEFICO,'EXIS_GLISSIERE').EQ.1

      ELSEIF (QUESTI .EQ.'ALL_INTEG_NOEUD')   THEN
        CFDISL = CFDISI(DEFICO,'ALL_INTEG_NOEUD').EQ.1

      ELSEIF (QUESTI .EQ.'ALL_INTERPENETRE')   THEN
        CFDISL = CFDISI(DEFICO,'ALL_INTERPENETRE').EQ.1

      ELSEIF (QUESTI .EQ.'STOP_INTERP')   THEN
        CFDISL = CFDISI(DEFICO,'STOP_INTERP').EQ.1

      ELSEIF (QUESTI .EQ.'FORMUL_MAILLEE')   THEN
        IFORM  = CFDISI(DEFICO,'FORMULATION')
        CFDISL = (IFORM.EQ.1).OR.(IFORM.EQ.2)

      ELSEIF (QUESTI .EQ.'FORMUL_DISCRETE')   THEN
        IFORM  = CFDISI(DEFICO,'FORMULATION')
        CFDISL = (IFORM.EQ.1)

      ELSEIF (QUESTI .EQ.'FORMUL_CONTINUE')   THEN
        IFORM  = CFDISI(DEFICO,'FORMULATION')
        CFDISL = (IFORM.EQ.2)

      ELSEIF (QUESTI .EQ.'FORMUL_XFEM')   THEN
        IFORM  = CFDISI(DEFICO,'FORMULATION')
        CFDISL = (IFORM.EQ.3)

      ELSEIF (QUESTI.EQ.'AXISYMETRIQUE')   THEN
        CFDISL = CFDISI(DEFICO,'AXISYMETRIQUE').EQ.1

      ELSEIF (QUESTI.EQ.'FROTTEMENT') THEN
        IFROT  = CFDISI(DEFICO,'ALGO_FROT')
        CFDISL = IFROT.NE.0

      ELSEIF (QUESTI.EQ.'FROT_DISCRET') THEN
        IFROT  = CFDISI(DEFICO,'ALGO_FROT')
        CFDISL = ((IFROT.EQ.1).OR.(IFROT.EQ.2))

      ELSEIF (QUESTI.EQ.'FROT_PENA') THEN
        IFROT  = CFDISI(DEFICO,'ALGO_FROT')
        CFDISL = IFROT.EQ.1

      ELSEIF (QUESTI.EQ.'FROT_LAGR') THEN
        IFROT  = CFDISI(DEFICO,'ALGO_FROT')
        CFDISL = IFROT.EQ.2

      ELSEIF (QUESTI.EQ.'FROT_LAGR_2D') THEN
        ICONT  = CFDISI(DEFICO,'ALGO_CONT')
        IFROT  = CFDISI(DEFICO,'ALGO_FROT')
        NDIMG  = CFDISI(DEFICO,'NDIM'    )
        IF ((ICONT.EQ.5).AND.(IFROT.EQ.2).AND.(NDIMG.EQ.2)) THEN
          CFDISL = .TRUE.
        ELSE
          CFDISL = .FALSE.
        ENDIF

      ELSEIF (QUESTI.EQ.'CONT_PENA') THEN
        ICONT  = CFDISI(DEFICO,'ALGO_CONT')
        CFDISL = ICONT.EQ.4

      ELSEIF (QUESTI.EQ.'CONT_LAGR') THEN
        ICONT  = CFDISI(DEFICO,'ALGO_CONT')
        CFDISL = ICONT.EQ.5

      ELSEIF (QUESTI.EQ.'CONT_ACTI') THEN
        ICONT  = CFDISI(DEFICO,'ALGO_CONT')
        CFDISL = ICONT.EQ.1

      ELSEIF (QUESTI.EQ.'CONT_GCP') THEN
        ICONT  = CFDISI(DEFICO,'ALGO_CONT')
        CFDISL = ICONT.EQ.2

      ELSEIF (QUESTI.EQ.'PRE_COND_DIRICHLET') THEN
        CFDISL = CFDISI(DEFICO,'PRE_COND').EQ.1

      ELSEIF (QUESTI.EQ.'FROT_3D') THEN
        IFROT  = CFDISI(DEFICO,'ALGO_FROT')
        NDIMG  = CFDISI(DEFICO,'NDIM'     )
        IF (IFROT.EQ.1) THEN
          CFDISL = .TRUE.
        ELSEIF (IFROT.EQ.2) THEN
          CFDISL = NDIMG.EQ.3
        ELSEIF (IFROT.EQ.0) THEN
          CFDISL = .FALSE.
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF

      ELSEIF (QUESTI.EQ.'GEOM_NEWTON') THEN
        CFDISL = CFDISI(DEFICO,'ALGO_RESO_GEOM').EQ.1

      ELSEIF (QUESTI.EQ.'FROT_NEWTON') THEN
        CFDISL = CFDISI(DEFICO,'ALGO_RESO_FROT').EQ.1

      ELSEIF (QUESTI.EQ.'CONT_NEWTON') THEN
        CFDISL = CFDISI(DEFICO,'ALGO_RESO_CONT').EQ.1

      ELSEIF (QUESTI.EQ.'GEOM_BOUCLE') THEN
        CFDISL = CFDISI(DEFICO,'ALGO_RESO_GEOM').EQ.0
     &     .AND. CFDISI(DEFICO,'NB_ITER_GEOM').NE.0

      ELSEIF (QUESTI.EQ.'CONT_BOUCLE') THEN
        CFDISL = CFDISI(DEFICO,'ALGO_RESO_CONT').EQ.0

      ELSEIF (QUESTI.EQ.'FROT_BOUCLE') THEN
        CFDISL = CFDISI(DEFICO,'ALGO_RESO_FROT').EQ.0

      ELSEIF (QUESTI.EQ.'REAC_GEOM_SANS') THEN
        CFDISL = CFDISI(DEFICO,'NB_ITER_GEOM').EQ.0

      ELSEIF (QUESTI.EQ.'REAC_GEOM_MANU') THEN
        CFDISL = CFDISI(DEFICO,'NB_ITER_GEOM').GT.0

      ELSEIF (QUESTI.EQ.'REAC_GEOM_AUTO') THEN
        CFDISL = CFDISI(DEFICO,'NB_ITER_GEOM').LT.0

      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF

      END
