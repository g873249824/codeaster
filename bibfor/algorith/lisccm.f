      SUBROUTINE LISCCM(NOMCMD,LISCHA)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 17/01/2012   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C
      IMPLICIT     NONE
      CHARACTER*16 NOMCMD
      CHARACTER*19 LISCHA
C
C ----------------------------------------------------------------------
C
C ROUTINE UTILITAIRE (LISTE_CHARGES)
C
C VERIFICATION COMPATIBILITE CHARGE/COMMANDE
C
C ----------------------------------------------------------------------
C
C
C IN  NOMCMD : NOM DE LA COMMANDE
C              ' ' SI PAS DE COMMANDE
C IN  LISCHA : SD LISTE DES CHARGES
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      LOGICAL      LELIM,LDUAL,LNEUM,LSIGI,LVITF,LIMPF
      LOGICAL      LEVOC,LINTE,LONDF,LONDP
      LOGICAL      LVEAC,LVEAS,LVEAG
      LOGICAL      LCOMP,LISICO
      INTEGER      ICHAR,NBCHAR
      INTEGER      CODCHA
      CHARACTER*24 VALK(2)
      CHARACTER*8  CHARGE
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
      IF (NOMCMD.EQ.' ') GOTO 999
C
C --- NOMBRE DE CHARGES
C
      CALL LISNNB(LISCHA,NBCHAR)
      IF (NBCHAR.EQ.0) GOTO 999
C
      DO 10 ICHAR = 1,NBCHAR
C
C ----- CODE DU GENRE DE LA CHARGE
C
        CALL LISLCO(LISCHA,ICHAR ,CODCHA)
        CALL LISLCH(LISCHA,ICHAR ,CHARGE)
        VALK(1) = CHARGE
        VALK(2) = NOMCMD
C
C ----- IDENTIFICATION DES GENRES ACTIFS DANS LA CHARGE
C
        LELIM  = LISICO('DIRI_ELIM'     ,CODCHA)
        LDUAL  = LISICO('DIRI_DUAL'     ,CODCHA)
        LNEUM  = LISICO('NEUM_MECA'     ,CODCHA)
        LSIGI  = LISICO('SIGM_INTERNE'  ,CODCHA)
        LVITF  = LISICO('VITE_FACE'     ,CODCHA)
        LIMPF  = LISICO('IMPE_FACE'     ,CODCHA)
        LEVOC  = LISICO('EVOL_CHAR'     ,CODCHA)
        LINTE  = LISICO('INTE_ELEC'     ,CODCHA)
        LONDF  = LISICO('ONDE_FLUI'     ,CODCHA)
        LONDP  = LISICO('ONDE_PLANE'    ,CODCHA)
        LVEAC  = LISICO('VECT_ASSE_CHAR',CODCHA)
        LVEAG  = LISICO('VECT_ASSE_GENE',CODCHA)
        LVEAS  = LISICO('VECT_ASSE'     ,CODCHA)
C
C ----- VERIFICATION COMPATIBILITE DIRI_DUAL
C
        IF (LDUAL) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'DYNA_LINE_HARM').OR.
     &        (NOMCMD.EQ.'STAT_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_NON_LINE').OR.
     &        (NOMCMD.EQ.'MECA_STATIQUE')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',2,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE DIRI_ELIM
C

        IF (LELIM) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'STAT_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_NON_LINE').OR.
     &        (NOMCMD.EQ.'MECA_STATIQUE')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',2,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE NEUM_MECA
C
        IF (LNEUM) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'DYNA_LINE_TRAN').OR.
     &        (NOMCMD.EQ.'DYNA_LINE_HARM').OR.
     &        (NOMCMD.EQ.'MECA_STATIQUE').OR.
     &        (NOMCMD.EQ.'STAT_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_NON_LINE').OR.
     &        (NOMCMD.EQ.'CALC_NO').OR.
     &        (NOMCMD.EQ.'CALC_SENSI').OR.
     &        (NOMCMD.EQ.'CALC_CHAMP')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE SIGM_INTERNE
C
        IF (LSIGI) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'DEFI_CABLE_BP').OR.
     &        (NOMCMD.EQ.'STAT_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_NON_LINE')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE VITE_FACE
C
        IF (LVITF) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'CALC_VECT_ELEM').OR.
     &        (NOMCMD.EQ.'MACR_ELEM_STAT')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE IMPE_FACE
C
        IF (LIMPF) THEN
          LCOMP  = .FALSE.
          IF (NOMCMD.EQ.'MACR_ELEM_STAT') LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE EVOL_CHAR
C
        IF (LEVOC) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'CALC_VECT_ELEM').OR.
     &        (NOMCMD.EQ.'MACR_ELEM_STAT').OR.
     &        (NOMCMD.EQ.'STAT_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_NON_LINE').OR.
     &        (NOMCMD.EQ.'CALC_NO').OR.
     &        (NOMCMD.EQ.'CALC_SENSI').OR.
     &        (NOMCMD.EQ.'CALC_CHAMP')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE INTE_ELEC
C
        IF (LINTE) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'CALC_VECT_ELEM').OR.
     &        (NOMCMD.EQ.'MACR_ELEM_STAT').OR.
     &        (NOMCMD.EQ.'STAT_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_NON_LINE').OR.
     &        (NOMCMD.EQ.'MECA_STATIQUE')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE ONDE_FLUIDE
C
        IF (LONDF) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'CALC_VECT_ELEM').OR.
     &        (NOMCMD.EQ.'MACR_ELEM_STAT').OR.
     &        (NOMCMD.EQ.'CALC_MATR_ELEM')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE ONDE_PLANE
C
        IF (LONDP) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'STAT_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_LINE_TRAN')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE VECT_ASSE_CHAR
C
        IF (LVEAC) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'DYNA_LINE_TRAN').OR.
     &        (NOMCMD.EQ.'DYNA_LINE_HARM').OR.
     &        (NOMCMD.EQ.'MECA_STATIQUE').OR.
     &        (NOMCMD.EQ.'STAT_NON_LINE').OR.
     &        (NOMCMD.EQ.'DYNA_NON_LINE').OR.
     &        (NOMCMD.EQ.'CALC_NO').OR.
     &        (NOMCMD.EQ.'CALC_SENSI').OR.
     &        (NOMCMD.EQ.'CALC_CHAMP')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE VECT_ASSE
C
        IF (LVEAS) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'DYNA_LINE_HARM')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
C ----- VERIFICATION COMPATIBILITE VECT_ASSE_GENE
C
        IF (LVEAG) THEN
          LCOMP  = .FALSE.
          IF ((NOMCMD.EQ.'DYNA_LINE_HARM')) LCOMP = .TRUE.
          IF (.NOT.LCOMP) CALL U2MESK('F','CHARGES5_3',1,VALK)
        ENDIF
C
   10 CONTINUE
C
  999 CONTINUE
C
      CALL JEDEMA()
      END
