      SUBROUTINE NMCERR(SDDISC,IDIV  ,ITER1 ,ITER2 ,ELASDT,
     &                  RGMAXI,RGRELA,INIKRY)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 21/03/2011   AUTEUR FLEJOU J-L.FLEJOU 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT     NONE
      CHARACTER*19 SDDISC
      INTEGER      ITER1,ITER2
      INTEGER      IDIV
      REAL*8       ELASDT,INIKRY
      REAL*8       RGMAXI,RGRELA
C
C ----------------------------------------------------------------------
C
C ROUTINE *_NON_LINE (STRUCTURES DE DONNES - SD DISCRETISATION)
C
C CREATION SD STOCKAGE DES INFOS EN COURS DE CALCUL
C
C ----------------------------------------------------------------------
C
C IN  SDDISC : SD DISCRETISATION
C IN  ITER1  : ITER_GLOB_MAXI
C IN  ITER2  : ITER_GLOB_ELAS
C IN  IDIV   : OCCURENCE OU ON A EVENEMENT ='DIVERGENCE_ITER' 0 SINON
C IN  ELASDT : PAS_MINI_ELAS
C IN  INIKRY : PRECISION INITIALE POUR NEWTON-KRYLOV
C IN  RGMAXI : RESI_GLOB_MAXI
C IN  RGRELA : RESI_GLOB_RELA
C
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------------------
C
      INTEGER      ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8       ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16   ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL      ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8  ZK8
      CHARACTER*16    ZK16
      CHARACTER*24        ZK24
      CHARACTER*32            ZK32
      CHARACTER*80                ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C --- FIN DECLARATIONS NORMALISEES JEVEUX ------------------------------
C
      REAL*8       R8BID
      REAL*8       R8VIDE
      INTEGER      ITERAT,TYPRES,IBID,NBITER,NBPLUS,MXITER,MNITER,JERRE
      INTEGER      CEIL
      CHARACTER*8  K8BID
      CHARACTER*24 TPSERR
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
      MXITER = MAX(ITER1,ITER2)
      MNITER = MIN(ITER1,ITER2)
      ITERAT = 0
C
C --- NOMBRE MAXIMUM D'ITERATIONS
      IF (IDIV.EQ.0) THEN
        NBITER = MXITER
      ELSE
C ----- NOMBRE D'ITERATIONS AUTORISEES EN PLUS
        CALL UTDIDT('L'   ,SDDISC,'ECHE',IDIV,'SUBD_ITER_PLUS',
     &              R8BID ,NBPLUS,K8BID )
        NBITER = CEIL(MXITER*(1.D0 + NBPLUS/100.0D0))
      ENDIF
C
C --- AJOUTER LA PREDICTION
      NBITER = NBITER+1
C
C --- CREATION DU VECTEUR
      TPSERR = SDDISC(1:19)//'.ERRE'
      CALL WKVECT(TPSERR,'V V R8',12+NBITER*2,JERRE)
C
C --- MXITER      : MAX( ITER_GLOB_MAXI , ITER_GLOB_ELAS )
C     MNITER      : MIN( ITER_GLOB_MAXI , ITER_GLOB_ELAS )
C     NBITER      : MXITER + ITERATION EN PLUS
C     ITERSUP     :  =3 ON AUTORISE DES ITERATIONS EN PLUS
C                    <>3 ON N'AUTORISE PAS D'ITERATIONS EN PLUS
      CALL NMLERR(SDDISC,'E','MXITER'        ,ITERAT,R8BID,MXITER)
      CALL NMLERR(SDDISC,'E','MNITER'        ,ITERAT,R8BID,MNITER)
      CALL NMLERR(SDDISC,'E','NBITER'        ,ITERAT,R8BID,NBITER)
      CALL NMLERR(SDDISC,'E','PAS_MINI_ELAS' ,ITERAT,ELASDT,IBID)
      IBID = 0
      CALL NMLERR(SDDISC,'E','ITERSUP'       ,ITERAT,R8BID,IBID)
C --- RESIDUS     : RELA ET MAXI
      CALL NMLERR(SDDISC,'E','RESI_GLOB_RELA',ITERAT,RGRELA,IBID)
      CALL NMLERR(SDDISC,'E','RESI_GLOB_MAXI',ITERAT,RGMAXI,IBID)
C
C --- TYPE_RESI   :  =1 ON A DONNE RESI_GLOB_RELA
C                    =2 ON A DONNE RESI_GLOB_MAXI
C                    =3 ON A DONNE RESI_GLOB_RELA ET RESI_GLOB_MAXI
C                    =0 ON A RIEN DONNE ==> =1
      TYPRES = 0
      IF (RGRELA.NE.R8VIDE()) THEN
        TYPRES = TYPRES + 1
      ENDIF
      IF (RGMAXI.NE.R8VIDE()) THEN
        TYPRES = TYPRES + 2
      ENDIF
      IF (TYPRES.EQ.0) THEN
        RGRELA = 1.0D-06
        RGMAXI = 1.0D-06
        TYPRES = 1
      ENDIF
      CALL NMLERR(SDDISC,'E','TYPE_RESI'     ,ITERAT,R8BID,TYPRES)
C
C --- RESIDU INITIAL POUR NEWTON-KRYLOV
      CALL NMLERR(SDDISC,'E','INIT_NEWTON_KRYLOV',ITERAT,INIKRY,IBID)
C
C --- RESIDU COURANT POUR NEWTON-KRYLOV
      CALL NMLERR(SDDISC,'E','ITER_NEWTON_KRYLOV',ITERAT,INIKRY,IBID)
C
      CALL JEDEMA()
      END
