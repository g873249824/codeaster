      SUBROUTINE MEDIME(BASE  ,CUMUL ,MODELE,LISCHA,MEDIRI)
C      
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 12/01/2010   AUTEUR GRANET S.GRANET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.

C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.

C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      CHARACTER*1  BASE
      CHARACTER*4  CUMUL     
      CHARACTER*24 MODELE
      CHARACTER*19 MEDIRI
      CHARACTER*19 LISCHA
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (CALCUL)
C
C CALCUL DES MATRICES ELEMENTAIRES DES ELEMENTS DE LAGRANGE
C      
C ----------------------------------------------------------------------
C
C 
C IN  BASE    : BASE 'V' OU BASE OU SONT CREES LES OBJETS EN SORTIE
C IN  CUMUL   : /'ZERO' : ON INITIALISE LE MATR_ELEM
C               /'CUMU' : ON AJOUTE UN NOUVEAU MATR_ELEM AUX EXISTANTS
C IN  MODELE  : NOM DU MODELE
C IN  LISCHA  : SD L_CHARGES
C OUT MEDIRI  : MATRICES ELEMENTAIRES
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      NBOUT,NBIN
      PARAMETER    (NBOUT=1, NBIN=1)
      CHARACTER*8  LPAOUT(NBOUT),LPAIN(NBIN)
      CHARACTER*19 LCHOUT(NBOUT),LCHIN(NBIN)
C
      CHARACTER*8  NOMCHA,K8BID
      CHARACTER*16 OPTION
      CHARACTER*19 LIGRCH
      INTEGER      IRET,JCHAR,JINF,ICHA,ILIRES
      INTEGER      NCHAR,NLUTI
      INTEGER      IFMDBG,NIVDBG 
      LOGICAL      DEBUG     
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('PRE_CALCUL',IFMDBG,NIVDBG)       
C
C --- INITIALISATIONS
C   
      OPTION = 'MECA_DDLM_R'
      IF (NIVDBG.GE.2) THEN
        DEBUG  = .TRUE.
      ELSE
        DEBUG  = .FALSE.
      ENDIF       
C
C --- INITIALISATION DES CHAMPS POUR CALCUL
C
      CALL INICAL(NBIN  ,LPAIN ,LCHIN ,
     &            NBOUT ,LPAOUT,LCHOUT)       
C
C --- ACCES AUX CHARGEMENTS
C 
      CALL JEEXIN(LISCHA(1:19)//'.LCHA',IRET)
      IF (IRET.EQ.0) THEN
        NCHAR = 0
        GOTO 20
      ELSE  
        CALL JELIRA(LISCHA(1:19)//'.LCHA','LONMAX',NCHAR,K8BID)
        CALL JEVEUO(LISCHA(1:19)//'.LCHA','L',JCHAR)
        CALL JEVEUO(LISCHA(1:19)//'.INFC','L',JINF)
      ENDIF  
C
C --- PREPARATION DES MATR_ELEM 
C
      IF (CUMUL.EQ.'ZERO') THEN
        CALL JEDETR(MEDIRI//'.RELR')
        CALL MEMARE(BASE,MEDIRI,MODELE(1:8),' ',' ','RIGI_MECA')
        CALL REAJRE(MEDIRI,' ',BASE)
      ENDIF
C
C --- CHAMPS DE SORTIE
C
      LPAOUT(1) = 'PMATUUR'
      LCHOUT(1) = MEDIRI(1:15)//'.'
C
      IF (CUMUL.EQ.'ZERO') THEN
        NLUTI  = 1
      ELSE IF (CUMUL.EQ.'CUMU') THEN 
        CALL JELIRA(MEDIRI//'.RELR','LONUTI',NLUTI,K8BID)
        NLUTI  = NLUTI+1
        CALL CODENT(NLUTI+1,'D0',LCHOUT(1) (12:14))
      ELSE 
        CALL ASSERT(.FALSE.)
      ENDIF

      ILIRES = NLUTI-1
      DO 10 ICHA = 1,NCHAR
        IF (ZI(JINF+ICHA).NE.0) THEN
          NOMCHA = ZK24(JCHAR+ICHA-1) (1:8)
          LIGRCH = NOMCHA(1:8)//'.CHME.LIGRE'
          CALL JEEXIN(LIGRCH(1:19)//'.LIEL',IRET)
          IF (IRET.LE.0) GO TO 10
          CALL EXISD('CHAMP_GD',NOMCHA(1:8)//'.CHME.CMULT',IRET)
          IF (IRET.LE.0) GO TO 10
C
C ---     CHAMPS IN
C         
          LPAIN(1)  = 'PDDLMUR'  
          LCHIN(1)  = NOMCHA//'.CHME.CMULT'
C
C ---     CHAMPS OUT
C          
          LPAOUT(1) = 'PMATUUR'  
          CALL CODENT(ILIRES+1,'D0',LCHOUT(1) (17:19))
C
C ---     APPEL A CALCUL
C
          IF (DEBUG) THEN
            CALL DBGCAL(OPTION,IFMDBG,
     &                  NBIN  ,LPAIN ,LCHIN ,
     &                  NBOUT ,LPAOUT,LCHOUT)
          ENDIF 
C          
          CALL CALCUL('S',OPTION,LIGRCH,NBIN ,LCHIN,LPAIN,
     &                                  NBOUT,LCHOUT,LPAOUT,BASE)
C
C ---     STOCKAGE DES RESU_ELEM
C     
          CALL REAJRE(MEDIRI,LCHOUT(1),BASE)
          ILIRES = ILIRES + 1
        END IF
   10 CONTINUE   
   20 CONTINUE
C
      CALL JEDEMA()
      END
