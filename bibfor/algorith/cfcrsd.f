      SUBROUTINE CFCRSD(NOMA  ,LISCHA,NUMEDD,DEFICO,RESOCO)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 10/08/2009   AUTEUR DESOZA T.DESOZA 
C ======================================================================
C COPYRIGHT (C) 1991 - 2005  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE MABBAS M.ABBAS
C TOLE CRP_20
C
      IMPLICIT     NONE
      CHARACTER*8  NOMA
      CHARACTER*19 LISCHA
      CHARACTER*24 NUMEDD
      CHARACTER*24 DEFICO
      CHARACTER*24 RESOCO
C      
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (METHODES DISCRETES)
C
C CREATION DES STRUCTURES DE DONNEES NECESSAIRES AU TRAITEMENT
C DU CONTACT/FROTTEMENT (MOT-CLE "CONTACT" D'AFFE_CHAR_MECA).
C
C ----------------------------------------------------------------------
C
C
C IN  NOMA   : NOM DU MAILLAGE
C IN  LISCHA : SD L_CHARGES
C IN  NUMEDD : NOM DU NUME_DDL
C IN  NEQ    : NOMBRE D'EQUATIONS DU SYSTEME ASSEMBLE
C OUT DEFICO : SD DE DEFINITION DU CONTACT (ISSUE D'AFFE_CHAR_MECA)
C              ON LA COMPLETE PAR :
C                - DDLCO  (NUMEROS DES DDL DES NOEUDS DE CONTACT)
C OUT RESOCO : SD DE TRAITEMENT NUMERIQUE DU CONTACT
C
C -------------- DEBUT DECLARATIONS NORMALISEES JEVEUX -----------------
C
      CHARACTER*32       JEXNUM
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C ---------------- FIN DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER      CFMMVD,ZAPME,ZAPPA
      INTEGER      CFDISI,NDIM,NESMAX,NNOCO
      INTEGER      IER,NCHAR,JCHAR,JINF,ICHA,ICON
      INTEGER      INO,NUMNOE,NDDL
      INTEGER      IZONE,NBLIAI,IDDL
      INTEGER      II,NEQ
      CHARACTER*8  K8BID,CHAR,NOMNOE
      CHARACTER*19 COCO ,LIAC ,LIOT ,MU ,ATMU ,AFMU ,CONVEC
      INTEGER      JCOCO,JLIAC,JLIOT,JMU,JATMU,JAFMU,JVECC
      CHARACTER*19 DELT0 ,DELTA
      INTEGER      JDELT0,JDELTA
      CHARACTER*19 CM1A,ENAT,FRO1,FRO2
      CHARACTER*24 DDLCO,PDDL,APPARI,APMEMO
      INTEGER      JDDL,JPDDL,JAPPAR,JAPMEM
      CHARACTER*24 APCOEF,APPOIN,APJEU,APDDL,JEUINI
      INTEGER      JAPCOE,JAPPTR,JAPJEU,JAPDDL,JJEUIN      
      CHARACTER*24 APCOFR,APJEFX,APJEFY
      INTEGER      JAPCOF,JAPJFX,JAPJFY      
      CHARACTER*24 NORMCO,TANGCO
      INTEGER      JNORMO,JTANGO
      INTEGER      IFM,NIV
      INTEGER      NBCM1A,NBENAT,NBFRO1,NBFRO2,IRET,CODRET
      INTEGER      TYPALC,TYPALF,FROT3D,MATTAN
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ() 
      CALL INFDBG('CONTACT',IFM,NIV) 
C
C --- INITIALISATIONS
C
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ,K8BID,IRET)
C      
C --- REPERAGE DE LA CHARGE CONTENANT DU CONTACT
C --- SI PAS DE CHARGE DE CONTACT: ON SORT
C --- SI PLUS D'UNE CHARGE DE CONTACT, ERREUR FATALE
C
      CALL JEEXIN(LISCHA(1:19)// '.LCHA',IER)
      IF (IER.EQ.0) THEN
        GOTO 9999
      ENDIF
      CALL JELIRA(LISCHA(1:19)//'.LCHA','LONMAX',NCHAR,K8BID)
      CALL JEVEUO(LISCHA(1:19)//'.LCHA','L',JCHAR)
      ICON = 0
      CALL JEVEUO(LISCHA // '.INFC','L',JINF)
      DO 10 ICHA = 1, NCHAR
         IF (ZI(JINF+2*NCHAR+2+ICHA).EQ.2) THEN
            CHAR = ZK24(JCHAR+ICHA-1)(1:8)
            ICON = ICON + 1
         END IF
 10   CONTINUE
      IF (ICON.EQ.0) THEN
        DEFICO = '&&OP0070.DEFIC'
        GO TO 9999
      END IF
C
      IF (ICON.GT.1) THEN
        CALL U2MESS('F','CONTACT_83')
      END IF
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... CREATION DE LA SD RESULTAT'//
     &                ' CONTACT DISCRET'
      ENDIF       
C
C --- NOM DE LA SD DE DEFINITION DU CONTACT
C
      DEFICO = CHAR(1:8)//'.CONTACT'
C
C --- INFOS SUR LA CHARGE DE CONTACT
C
      CALL CFDISC(DEFICO,RESOCO,TYPALC,TYPALF,FROT3D,MATTAN)
C
C --- SD POUR APPARIEMENT
C
      ZAPME = CFMMVD('ZAPME')
      ZAPPA = CFMMVD('ZAPPA')
C
C --- INFORMATIONS
C
      IZONE  = 0
      NNOCO  = CFDISI(DEFICO,'NNOCO' ,IZONE )
      NDIM   = CFDISI(DEFICO,'NDIM'  ,IZONE )
      NESMAX = CFDISI(DEFICO,'NESMAX',IZONE )
C
C --- AFFICHAGE
C
      WRITE (IFM,*) '--- NOMBRE TOTAL DE NOEUDS ESCLAVES : ',NESMAX
C
C --- SI METHODE CONTINUE, ON SORT
C
      IF (ABS(TYPALC).EQ.3) THEN
         GOTO 9999
      ENDIF      
       
C
C --- VERIFICATION DE LA COHERENCE DES DIMENSIONS (PUR 2D OU PUR 3D)
C
      IF (NDIM.EQ.2) THEN
        CALL CFVERD(NOMA  ,NUMEDD,DEFICO) 
      ENDIF          
C
C --- VECTEUR AT.MU (FORCES NODALES DE CONTACT)
C
      ATMU   = RESOCO(1:14)//'.ATMU'
      CALL JEEXIN(ATMU,IER)
      IF (IER.EQ.0) THEN
        CALL WKVECT(ATMU,'V V R',NEQ,JATMU)
      ENDIF
C
C --- POINTEUR POUR LES DDLS LIES AU CONTACT
C
      PDDL   = RESOCO(1:14)//'.PDDLCO'
      CALL WKVECT(PDDL  ,'V V I',NNOCO+1,JPDDL)
      ZI(JPDDL) = 0
      NDDL      = 0
      DO 20 INO = 1,NNOCO
        NDDL = NDDL + NDIM
        ZI(JPDDL+INO) = NDDL
 20   CONTINUE
C
C --- NUMEROS DE DDL
C
      DDLCO  = RESOCO(1:14)//'.DDLCO'
      CALL WKVECT(DDLCO ,'V V I',NDDL,JDDL)
C
      DO 25 INO = 1,NNOCO
        CALL CFNOMM(NOMA  ,DEFICO,'NOEU',INO   ,NOMNOE,
     &              CODRET)  
        IF (CODRET.LT.0) THEN
          CALL ASSERT(.FALSE.)
        ENDIF  
C 
        IDDL   = ZI(JPDDL+INO-1) + 1
C               
        CALL POSDDL('NUME_DDL',NUMEDD,NOMNOE,'DX',NUMNOE,
     &               ZI(JDDL+IDDL-1))
        IF (ZI(JDDL+IDDL-1).EQ.0) CALL ASSERT(.FALSE.)
C        
        CALL POSDDL('NUME_DDL',NUMEDD,NOMNOE,'DY',NUMNOE,
     &               ZI(JDDL+IDDL))
        IF (ZI(JDDL+IDDL).EQ.0) CALL ASSERT(.FALSE.)
C        
        IF (NDIM.EQ.3) THEN
          CALL POSDDL('NUME_DDL',NUMEDD,NOMNOE,'DZ',
     &                NUMNOE,ZI(JDDL+IDDL+1))
          IF (ZI(JDDL+IDDL+1).EQ.0) CALL ASSERT(.FALSE.)
        ENDIF
 25   CONTINUE
C
C --- CREATION DES TABLEAUX D'APPARIEMENT (DIMENSIONNES AU MAX)
C
      APPARI = RESOCO(1:14)//'.APPARI'
      APMEMO = RESOCO(1:14)//'.APMEMO'
      APCOEF = RESOCO(1:14)//'.APCOEF'
      APPOIN = RESOCO(1:14)//'.APPOIN'
      APJEU  = RESOCO(1:14)//'.APJEU'
      APDDL  = RESOCO(1:14)//'.APDDL'
      JEUINI = RESOCO(1:14)//'.JEUINI'
C
      CALL WKVECT(APPARI,'V V I',ZAPPA*NESMAX+1,JAPPAR)
      CALL WKVECT(APMEMO,'V V I',ZAPME*NNOCO   ,JAPMEM)
      CALL WKVECT(APCOEF,'V V R',30*NESMAX     ,JAPCOE)
      CALL WKVECT(APPOIN,'V V I',NESMAX+1      ,JAPPTR)
      CALL WKVECT(APJEU ,'V V R',NESMAX        ,JAPJEU)
      CALL WKVECT(APDDL ,'V V I',30*NESMAX     ,JAPDDL)
      CALL WKVECT(JEUINI,'V V R',NESMAX        ,JJEUIN)
C
      ZI(JAPPAR) = NESMAX      
C
C --- DIMENSIONNEMENT DES VECTEURS NORMAUX ET TANGENT
C
      NORMCO = RESOCO(1:14)//'.NORMCO'
      TANGCO = RESOCO(1:14)//'.TANGCO'
      CALL WKVECT(NORMCO,'V V R', 3*NESMAX,JNORMO)
      CALL WKVECT(TANGCO,'V V R', 6*NESMAX,JTANGO)     
C
C --- SI METHODE SANS CONTACT, ON SORT
C
      IF (ABS(TYPALC).EQ.5) THEN
         GOTO 9999
      ENDIF
C
C --- VECTEURS GESTION DES LIAISONS
C --- VECTEUR COCO : 
C ---       JBID 0 : DIMENSION 
C ---       JBID 1 : INDIC VAUT 1 LORSQU'ON AJOUTE UNE LIAISON 
C ---              :       VAUT 0 LORSQU'ON SUPPRIME UNE LIAISON 
C ---       JBID 2 : NOMBRE DE LIAISON DE CONTACT 
C ---       JBID 3 : POSITION DE LA LIAISON AJOUTEE 
C ---       JBID 4 : POSITION DE LA LIAISON SUPPRIMEE 
C ---       JBID 5 : NOMBRE DE LIAISON DE FROTTEMENT (DEUX DIRECTIONS) 
C ---       JBID 6 : NOMBRE DE LIAISON DE FROTTEMENT (1ERE DIRECTION ) 
C ---       JBID 7 : NOMBRE DE LIAISON DE FROTTEMENT (2EME DIRECTION ) 
C
C --- VECTEUR CONVEC : 
C ---        VAUT C0 : LIAISON DE CONTACT 
C ---        VAUT F0 : LIAISON DE FROTTEMENT ADHERENT (DEUX DIRECTIONS)
C ---        VAUT F1 : LIAISON DE FROTTEMENT ADHERENT (1ERE DIRECTION )
C ---        VAUT F2 : LIAISON DE FROTTEMENT ADHERENT (2EME DIRECTION )
C 
      COCO   = RESOCO(1:14)//'.COCO'
      CONVEC = RESOCO(1:14)//'.CONVEC'   
      CALL WKVECT(COCO  ,'V V I',8,JCOCO)
      ZI(JCOCO  ) = NDIM
      ZI(JCOCO+1) = 0
      ZI(JCOCO+2) = 0
      ZI(JCOCO+3) = 0
      ZI(JCOCO+4) = 1
      ZI(JCOCO+5) = 0
      ZI(JCOCO+6) = 0
      ZI(JCOCO+7) = 0
      CALL WKVECT(CONVEC,'V V K8',2*NESMAX,JVECC)
C
C --- LIAISONS OTEES (PIVOTS NULS)
C
      LIOT   = RESOCO(1:14)//'.LIOT'
      CALL WKVECT(LIOT  ,'V V I',4*NESMAX+4,JLIOT)
C
C --- LIAISONS ACTIVES
C      
      LIAC   = RESOCO(1:14)//'.LIAC'
      CALL WKVECT(LIAC  ,'V V I',3*NESMAX+1,JLIAC)
C
C --- LAGRANGES DE CONTACT/FROTTEMENT
C
      MU     = RESOCO(1:14)//'.MU'      
      CALL WKVECT(MU     ,'V V R',6*NESMAX,JMU)
C
C --- INCREMENTS DE SOLUTIONS      
C
      IF ((ABS(TYPALC).NE.1) .AND. (ABS(TYPALC).NE.6) .OR.
     &    (ABS(TYPALC).EQ.1) .AND. (ABS(TYPALF).EQ.1)) THEN
C       TOUT SAUF CONTACT PENALISE SANS FROTTEMENT ET GCP
        DELT0  = RESOCO(1:14)//'.DEL0'
        DELTA  = RESOCO(1:14)//'.DELT'      
        CALL WKVECT(DELT0 ,'V V R',NEQ,JDELT0)
        CALL WKVECT(DELTA ,'V V R',NEQ,JDELTA)
      ENDIF
C
C --- STRUCTURES RESERVEES POUR LE FROTTEMENT
C
      IF (TYPALF.NE.0) THEN
        AFMU   = RESOCO(1:14)//'.AFMU'
        CALL WKVECT(AFMU  ,'V V R',NEQ      ,JAFMU )
        APCOFR = RESOCO(1:14)//'.APCOFR'
        CALL WKVECT(APCOFR,'V V R',60*NESMAX,JAPCOF)
        APJEFX = RESOCO(1:14)//'.APJEFX'
        APJEFY = RESOCO(1:14)//'.APJEFY'
        CALL WKVECT(APJEFX,'V V R',NESMAX   ,JAPJFX)
        CALL WKVECT(APJEFY,'V V R',NESMAX   ,JAPJFY)
      ENDIF
C
C --- CAS DE LA METHODE PENALISEE: ON UTILISE AFMU
C
      IF ((TYPALF.EQ.0).AND.(ABS(TYPALC).EQ.1)) THEN
        AFMU   = RESOCO(1:14)//'.AFMU'
        CALL WKVECT(AFMU  ,'V V R',NEQ,JAFMU)
      ENDIF
C
C --- MATRICES DE CONTACT
C
      IF (ABS(TYPALC).NE.6) THEN
C       ON NE CREE LES SD DE DONNEES MATRICE QUE
C       SI LA METHODE DE *CONTACT* N'EST PAS 'GCP'
        NBLIAI = NESMAX
C
C ---   DETERMINATION DES TAILLES DES DIFFERENTES MATRICES
C
        NBENAT = 0
        NBCM1A = 0
        NBFRO1 = 0
        NBFRO2 = 0
C
        IF (ABS(TYPALC).EQ.1) THEN
C         PENALISATION DU CONTACT
C         ENAT
          NBENAT = NBLIAI
        ELSEIF ((TYPALF.EQ.0) .OR. (ABS(TYPALF).EQ.1)) THEN
C         DUALISATION DU CONTACT SEULEMENT
C         CM1A
          NBCM1A = NBLIAI
        ELSE
C         DUALISATION DU CONTACT ET DU FROTTEMENT
C         CM1A
          NBCM1A = NDIM*NBLIAI
        ENDIF
C
C       FRO1
        NBFRO1 = (NDIM-1)*NBLIAI
C
C       FRO2
        NBFRO2 = NBLIAI

C
C ---   CREATIONS DES MATRICES
C
        IF (ABS(TYPALC).EQ.1) THEN
C
C ---   MATRICE STOCKEE CREUSE E_N*A_cT (POUR CONTACT PENALISE)
C ---   TAILLE : NBENAT*30
C
            ENAT   = RESOCO(1:14)//'.ENAT'
            CALL JECREC(ENAT,'V V R','NU','DISPERSE','CONSTANT',NBENAT)
            CALL JEECRA(ENAT,'LONMAX',30,K8BID)
            DO 30 II = 1, NBENAT
              CALL JECROC(JEXNUM(ENAT,II))
 30         CONTINUE
C
        ELSE
C
C ---   MATRICE PRINCIPALE C-1*A_cT (POUR CONTACT DUALISE)
C ---   TAILLE : NBCM1A*NEQ
C
          CM1A   = RESOCO(1:14)//'.CM1A'
          CALL JECREC(CM1A,'V V R','NU','DISPERSE','CONSTANT',NBCM1A)
          CALL JEECRA(CM1A,'LONMAX',NEQ,K8BID)
          DO 40 II = 1, NBCM1A
            CALL JECROC(JEXNUM(CM1A,II))
 40       CONTINUE
C
        ENDIF
C
C ---   MATRICES STOCKEES CREUSES FRO1 ET FRO2
C ---   (POUR FROTTEMENT UNIQUEMENT)
C ---   TAILLE : NBFRO1*30 ET NBFRO2*30
C
        IF (FROT3D.EQ.1) THEN
C         SI LA METHODE DE *FROTTEMENT* EST 3D
C         ON CREE LES MATRICES FRO1 ET FRO2
          FRO1 = RESOCO(1:14)//'.FRO1'
          FRO2 = RESOCO(1:14)//'.FRO2'
          CALL JECREC (FRO1,'V V R','NU','DISPERSE','CONSTANT',NBFRO1)
          CALL JECREC (FRO2,'V V R','NU','DISPERSE','CONSTANT',NBFRO2)
          CALL JEECRA(FRO1,'LONMAX',30,K8BID)
          CALL JEECRA(FRO2,'LONMAX',30,K8BID)
          DO 41 II = 1, NBFRO1
            CALL JECROC (JEXNUM(FRO1,II))
 41       CONTINUE
          DO 42 II = 1, NBFRO2
            CALL JECROC (JEXNUM(FRO2,II))
 42       CONTINUE
        ENDIF
C
C ---   MATRICE DE CONTACT ACM1AT
C
C        SI LA METHODE DE *CONTACT* EST 'PENALISATION'
C        ON NE CREE PAS LA MATRICE DE CONTACT
        IF(ABS(TYPALC).NE.1) THEN
          CALL CFCRMA(NBCM1A,NOMA,RESOCO)
        ENDIF
      ENDIF

 9999 CONTINUE
C
      CALL JEDEMA ()
      END
