      SUBROUTINE RECIEX ( INTEXC, IDEREX, NINDEX, NNOEEX, NCMPEX,
     &                    NVASEX, GRAEXC, EXCMOD, NAPEXC )
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 05/11/2012   AUTEUR SELLENET N.SELLENET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C***********************************************************************
C    C. DUVAL
C-----------------------------------------------------------------------
C  BUT: RECUPERER LES INFORMATIONS DE TYPE EXCITATION POUR
      IMPLICIT NONE
C        LE CALCUL DYNAMIQUE ALEATOIRE
C
C INTEXC   /OUT/: NOM DE L INTERSPECTRE  EXCITATION
C IDEREX   /OUT/: ORDRE DE DERIVATION
C NINDEX   /OUT/: NOMBRE  D INDICES RECUPERES
C NNOEEX   /OUT/: NOMBRE DE NOEUDS DONNES EN EXCITATION
C NCMPEX   /OUT/: NOMBRE DE CMP DONNES EN EXCITATION
C NVASEX   /OUT/: NOMBRE DE VECTEURS ASSEMBLES DONNES EN EXCITATION
C GRAEXC  /OUT/ : GRANDEUR EXCITATION
C EXCMOD  /OUT/ : TYPE MODAL
C NAPEXC  /OUT/ : NOMBRE D APPUI EXCITATION (NOEUDS OU VECTASS)
C
C-----------------------------------------------------------------------
C
      INCLUDE 'jeveux.h'
C-----------------------------------------------------------------------
      INTEGER I1 ,I2 ,IBID1 ,IDEREX ,IJ2 ,ILCMPI 
      INTEGER ILCMPJ ,ILCPEX ,ILFEX ,ILINDI ,ILINDJ ,ILLEX ,ILNOEX 
      INTEGER ILVAEX ,IVITE ,NAPEXC ,NCMPEX 
      INTEGER NDIM ,NINDEX ,NNOEEX ,NVASEX 
C-----------------------------------------------------------------------
      INTEGER       IBID, IRET
      CHARACTER*4   EXCMOD
      CHARACTER*8   K8B, INTEXC
      CHARACTER*16  GRAEXC
      CHARACTER*24  CHNUMI,CHNUMJ,CHNOEI,CHNOEJ,CHCMPI,CHCMPJ,CHVALE
      CHARACTER*24  CHFREQ

      LOGICAL      LINDI, EXIIND
      INTEGER      IARG,LNUMI,LNUMJ,MXVAL,NUM,LCMPI,LCMPJ
      INTEGER      NBFREQ,IFREQ
C
      CALL GETVID ( 'EXCIT', 'INTE_SPEC'    ,1,IARG,1, INTEXC, IBID   )
C
      CALL GETVIS ( 'EXCIT', 'DERIVATION'   ,1,IARG,1, IDEREX, IBID   )
C
      CALL GETVIS ( 'EXCIT', 'NUME_ORDRE_I' ,1,IARG,0, IBID  , NINDEX )
      IF ( NINDEX .NE. 0 ) THEN
         LINDI = .TRUE.
         NINDEX = -NINDEX
         CALL WKVECT('&&RECIEX.INDI_I','V V I',NINDEX,ILINDI)
         CALL WKVECT('&&RECIEX.INDI_J','V V I',NINDEX,ILINDJ)
         CALL GETVIS('EXCIT','NUME_ORDRE_I',1,IARG,NINDEX,
     &               ZI(ILINDI),IBID)
         CALL GETVIS('EXCIT','NUME_ORDRE_J',1,IARG,NINDEX,
     &               ZI(ILINDJ),IBID)
      ELSE
         CALL GETVTX ( 'EXCIT', 'NOEUD_I' ,1,IARG,0, K8B , NINDEX )
         LINDI = .FALSE.
         NINDEX = -NINDEX
         CALL WKVECT('&&RECIEX.INDI_I','V V K8',NINDEX,ILINDI)
         CALL WKVECT('&&RECIEX.INDI_J','V V K8',NINDEX,ILINDJ)
         CALL WKVECT('&&RECIEX.CMP_I' ,'V V K8',NINDEX,ILCMPI)
         CALL WKVECT('&&RECIEX.CMP_J' ,'V V K8',NINDEX,ILCMPJ)
         CALL GETVTX('EXCIT','NOEUD_I'  ,1,IARG,NINDEX,ZK8(ILINDI),IBID)
         CALL GETVTX('EXCIT','NOEUD_J'  ,1,IARG,NINDEX,ZK8(ILINDJ),IBID)
         CALL GETVTX('EXCIT','NOM_CMP_I',1,IARG,NINDEX,ZK8(ILCMPI),IBID)
         CALL GETVTX('EXCIT','NOM_CMP_J',1,IARG,NINDEX,ZK8(ILCMPJ),IBID)
      ENDIF
      CALL GETVIS('EXCIT','NUME_VITE_FLUI',1,IARG,1,IVITE,IBID)
C
      NDIM = NINDEX * ( NINDEX + 1 ) / 2
      CALL WKVECT('&&OP0131.LIADRFEX1','V V I',NDIM,ILFEX)
      CALL WKVECT('&&OP0131.LIADRLEX1','V V I',NDIM+2,ILLEX)

      CHFREQ = INTEXC//'.FREQ'
      CALL JELIRA(CHFREQ,'LONMAX',NBFREQ,K8B)
      CALL JEVEUO(CHFREQ,'L',IFREQ)
      ZI(ILLEX) = NBFREQ
      ZI(ILLEX+NDIM+1) = IFREQ
      CHVALE = INTEXC//'.VALE'
C
C     VERIFICATIONS EXISTENCE PARAMETRES DE LA SD
      EXIIND = .FALSE.
      IF(LINDI)THEN
        CHNUMI = INTEXC//'.NUMI'
        CHNUMJ = INTEXC//'.NUMJ'
        CALL JEVEUO(CHNUMI,'L',LNUMI)
        CALL JEVEUO(CHNUMJ,'L',LNUMJ)
        CALL JELIRA(CHNUMI,'LONMAX',MXVAL,K8B)
        DO 103 I1 = 1,NINDEX
          DO 108 I2 = I1 , NINDEX
            IJ2 = (I2*(I2-1))/2+I1
            DO 111 NUM=1,MXVAL
              IF ((ZI(LNUMI-1+NUM) .EQ. ZI(ILINDI-1+I1)) .AND.
     &            (ZI(LNUMJ-1+NUM) .EQ. ZI(ILINDJ-1+I2))) THEN
                EXIIND = .TRUE.
        CALL JEVEUO(JEXNUM(CHVALE,NUM),'L',ZI(ILFEX-1+IJ2))
        CALL JELIRA(JEXNUM(CHVALE,NUM),'LONMAX',ZI(ILLEX+IJ2),K8B )
              ENDIF
111         CONTINUE
108       CONTINUE
103     CONTINUE
      ELSE
        CHNOEI = INTEXC//'.NOEI'
        CHNOEJ = INTEXC//'.NOEJ'
        CHCMPI = INTEXC//'.CMPI'
        CHCMPJ = INTEXC//'.CMPJ'
        CALL JEVEUO(CHNOEI,'L',LNUMI)
        CALL JEVEUO(CHNOEJ,'L',LNUMJ)
        CALL JEVEUO(CHCMPI,'L',LCMPI)
        CALL JEVEUO(CHCMPJ,'L',LCMPJ)
        CALL JELIRA(CHNOEI,'LONMAX',MXVAL,K8B)
        DO 120 I1=1,NINDEX
          DO 122 I2 = I1 , NINDEX
            IJ2 = (I2*(I2-1))/2+I1
            DO 121 NUM=1,MXVAL
              IF ((ZK8(LNUMI-1+NUM) .EQ. ZK8(ILINDI-1+I1)) .AND.
     &            (ZK8(LNUMJ-1+NUM) .EQ. ZK8(ILINDJ-1+I2)) .AND.
     &            (ZK8(LCMPI-1+NUM) .EQ. ZK8(ILCMPI-1+I1)) .AND.
     &            (ZK8(LCMPJ-1+NUM) .EQ. ZK8(ILCMPJ-1+I2))) THEN
                EXIIND = .TRUE.
        CALL JEVEUO(JEXNUM(CHVALE,NUM),'L',ZI(ILFEX-1+IJ2))
        CALL JELIRA(JEXNUM(CHVALE,NUM),'LONMAX',ZI(ILLEX+IJ2),K8B )
              ENDIF
121         CONTINUE
122       CONTINUE
120     CONTINUE
      ENDIF

      IF(.NOT. EXIIND) THEN
        CALL U2MESS('F','UTILITAI4_53')
      ENDIF
C
C----TYPE MODAL ('NON' PAR DEFAUT)
C
      CALL GETVTX ( 'EXCIT', 'MODAL', 1,IARG,1, EXCMOD, IBID )
      IF ( EXCMOD .EQ. 'OUI' ) NAPEXC = NINDEX
C
C----GRANDEUR   (DEPL_R PAR DEFAUT)
C
      CALL GETVTX ( 'EXCIT', 'GRANDEUR', 1,IARG,1, GRAEXC, IBID )
C
C---NOEUDS APPUIS
C
      CALL GETVTX ( 'EXCIT', 'NOEUD', 1,IARG,0, K8B, NNOEEX )
      NNOEEX=-NNOEEX
      IF(NNOEEX.NE.0)THEN
         NAPEXC = NNOEEX
         CALL WKVECT('&&OP0131.LISTENOEEXC','V V K8',NNOEEX,ILNOEX)
         CALL GETVTX('EXCIT','NOEUD',1,IARG,NNOEEX,ZK8(ILNOEX),IBID)
      ENDIF
C
C---CMP APPUIS
C
      CALL GETVTX('EXCIT','NOM_CMP',1,IARG,0,K8B,NCMPEX)
      NCMPEX=-NCMPEX
      IF(NCMPEX.NE.0)THEN
          CALL WKVECT('&&OP0131.LISTECMPEXC','V V K8',NCMPEX,ILCPEX)
          CALL GETVTX('EXCIT','NOM_CMP',1,IARG,NCMPEX,ZK8(ILCPEX),IBID)
      ENDIF
C
C---VECTEURS ASSEMBLES
C
      CALL GETVID('EXCIT','CHAM_NO',1,IARG,0,K8B,NVASEX)
      NVASEX=-NVASEX
      IF ( NVASEX .NE. 0 ) THEN
         NAPEXC = NVASEX
         GRAEXC = 'EFFO'
         CALL WKVECT('&&OP0131.LVECTASSEXC','V V K8',NVASEX,ILVAEX)
         CALL GETVID('EXCIT','CHAM_NO',1,IARG,NVASEX,ZK8(ILVAEX),IBID1)
      ENDIF
C
      IF (GRAEXC.EQ.'EFFO') IDEREX = 0
C
      CALL JEDETR ( '&&RECIEX.INDI_I' )
      CALL JEDETR ( '&&RECIEX.INDI_J' )
      CALL JEEXIN ( '&&RECIEX.CMP_I' , IRET )
      IF ( IRET .NE. 0 ) THEN
         CALL JEDETR ( '&&RECIEX.CMP_I' )
         CALL JEDETR ( '&&RECIEX.CMP_J' )
      ENDIF
C
      END
