      SUBROUTINE NMMATR(PHASEZ,
     &                  MODELE,NUMEDD,MATE  ,CARELE,COMREF,
     &                  COMPOR,LISCHA,RESOCO,METHOD,SOLVEU,
     &                  PARMET,CARCRI,SDDISC,NUMINS,ITERAT,
     &                  VALMOI,POUGD ,VALPLU,MATASS,MAPREC, 
     &                  OPTIOZ,DEFICO,DEPALG,PREMIE,FONACT,
     &                  MEELEM,MEASSE,VEELEM,FACCVG,SDDYNA)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 12/02/2008   AUTEUR REZETTE C.REZETTE 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE MABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      INTEGER       NUMINS,ITERAT,FACCVG
      REAL*8        PARMET(*)
      CHARACTER*(*) PHASEZ,OPTIOZ
      CHARACTER*16  METHOD(*)
      CHARACTER*19  MAPREC,MATASS      
      CHARACTER*19  LISCHA,SOLVEU,SDDISC,SDDYNA
      CHARACTER*24  MODELE,NUMEDD,MATE,CARELE,COMREF,COMPOR
      CHARACTER*24  CARCRI
      CHARACTER*24  VALMOI(8),POUGD(8),VALPLU(8),DEPALG(8)
      CHARACTER*24  DEFICO,RESOCO
      LOGICAL       PREMIE,FONACT(*)
      CHARACTER*8   MEELEM(8),VEELEM(30) 
      CHARACTER*19  MEASSE(8)
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME - CALCUL)
C
C DECISION DE REASSEMBLAGE ET CHOIX DE LA MATRICE
C
C ----------------------------------------------------------------------
C
C
C IN  PHASE  : PHASE DE CALCUL
C                'PREDICTION'
C                'CORRECTION' 
C                'FORCES_INT' 
C                'FLAMBEMENT' 
C IN  MODELE : MODELE
C IN  NUMEDD : NUME_DDL
C IN  MATE   : CHAMP MATERIAU
C IN  CARELE : CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN  COMREF : VARI_COM DE REFERENCE
C IN  COMPOR : COMPORTEMENT
C IN  LISCHA : LISTE DES CHARGES
C IN  RESOCO : SD RESOLUTION CONTACT
C IN  DEFICO : SD DEF. CONTACT
C IN  SDDYNA : SD POUR LA DYNAMIQUE
C IN  METHOD : INFORMATIONS SUR LES METHODES DE RESOLUTION (VOIR NMLECT)
C IN  PARMET : PARAMETRES DES METHODES DE RESOLUTION (VOIR NMLECT)
C IN  SOLVEU : SOLVEUR
C IN  CARCRI : PARAMETRES METHODES D'INTEGRATION LOCALES (VOIR NMLECT)
C IN  SDDISC : SD DISC_INST
C IN  PREMIE : SI PREMIER INSTANT DE CALCUL
C IN  NUMINS : NUMERO D'INSTANT
C IN  ITERAT : NUMERO D'ITERATION
C IN  VALMOI : ETAT EN T-
C IN  VALPLU : ETAT EN T+
C IN  POUGD  : INFOS POUTRES EN GRANDES ROTATIONS
C IN  DEPALG : VARIABLE CHAPEAU POUR DEPLACEMENTS
C IN  VEELEM : VECTEURS ELEMENTAIRES
C IN  MEELEM : MATRICES ELEMENTAIRES
C IN  MEASSE : MATRICES ASSEMBLEES
C OUT MATASS : MATRICE DE RESOLUTION ASSEMBLEE
C OUT MAPREC : MATRICE DE RESOLUTION ASSEMBLEE - PRECONDITIONNEMENT
C OUT OPTION : NOM D'OPTION PASSE A MERIMO 
C OUT FACCVG : CODE RETOUR (INDIQUE SI LA MATRICE EST SINGULIERE)
C                   O -> MATRICE INVERSIBLE
C                   1 -> MATRICE SINGULIERE
C                   2 -> MATRICE PRESQUE SINGULIERE
C                   3 -> ON NE SAIT PAS SI LA MATRICE EST SINGULIERE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      REAL*8       ZERO,UN
      PARAMETER    (UN=1.D0,ZERO=0.D0)
      LOGICAL      REASMA,TABRET(0:10)
      LOGICAL      ISFONC,NDYNLO
      LOGICAL      LDYNA,LCTCC,LCTCD,LMACR,LEXPL,LSTAT
      LOGICAL      LRIGI,LDIRI,LFINT
      REAL*8       INSTAM,INSTAP,DIINST
      REAL*8       COEMAT(3)
      CHARACTER*8  NOMDDL
      CHARACTER*8  VEDIRI,VEFINT,MERIGI
      CHARACTER*16 METCOR,METPRE,OPTION
      CHARACTER*24 K24BID,DEPMOI
      CHARACTER*24 LIMAT(3),CODERE
      CHARACTER*4  TYPCST(3)
      INTEGER      NBMAT
      CHARACTER*10 PHASE   
      CHARACTER*19 RIGID,MASSE,AMORT,SSTRU
      INTEGER      IFM,NIV
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><CALC> CALCUL MATRICES' 
      ENDIF           
C
C --- INITIALISATIONS
C
      MAPREC = '&&OP0070.MAPREC'
      NOMDDL = ' '
      PHASE  = PHASEZ
      OPTION = OPTIOZ
      FACCVG = 0
      INSTAM = DIINST(SDDISC,NUMINS-1)
      INSTAP = DIINST(SDDISC,NUMINS)      
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL DESAGG(VALMOI,DEPMOI,K24BID,K24BID,K24BID,
     &            K24BID,K24BID,K24BID,K24BID)  
      VEFINT = VEELEM(1)   
      VEDIRI = VEELEM(2) 
      MERIGI = MEELEM(1)   
      RIGID  = MEASSE(1)
      MASSE  = MEASSE(3)
      AMORT  = MEASSE(4)
      SSTRU  = MEASSE(6)
C
C --- FONCTIONNALITES ACTIVEES
C    
      LCTCC  = ISFONC(FONACT,'CONT_CONTINU')
      LCTCD  = ISFONC(FONACT,'CONT_DISCRET')      
      LDYNA  = NDYNLO(SDDYNA,'DYNAMIQUE')
      LSTAT  = NDYNLO(SDDYNA,'STATIQUE')      
      LEXPL  = NDYNLO(SDDYNA,'EXPLICITE')      
      LMACR  = ISFONC(FONACT,'MACR_ELEM_STAT')
C
C --- COEFFICIENTS POUR MATRICE
C     
      IF (LSTAT) THEN
        COEMAT(1) = UN
        COEMAT(2) = ZERO
        COEMAT(3) = ZERO
      ELSE     
        CALL NDCOEF(PHASE,METHOD,SDDYNA,COEMAT)
      ENDIF  
      TYPCST(1) = 'R'
      TYPCST(2) = 'R'
      TYPCST(3) = 'R'
C 
C --- REASSEMBLAGE OU NON DE LA MATRICE
C 
      CALL NMCHOI(PHASE ,PARMET,METHOD,SDDISC,METCOR,
     &            METPRE,NUMINS,PREMIE,ITERAT,DEFICO,
     &            SDDYNA,OPTION,REASMA,LRIGI ,LFINT ,
     &            LDIRI )
C
C --- CALCUL DES MATRICES ELEMENTAIRES DE RIGIDITE ET DES
C --- VECTEURS ELEMENTAIRES DES FORCES INTERIEURES
C
      IF (LRIGI) THEN
        CALL GCNCON('.',CODERE)
        CALL MERIMO('V'   ,MODELE,CARELE,MATE    ,COMREF,
     &              COMPOR,LISCHA,CARCRI,ITERAT+1,FONACT,
     &              SDDYNA,VALMOI,VALPLU,POUGD   ,DEPALG,
     &              MERIGI,VEFINT,OPTION,TABRET,CODERE)
      END IF 
C
C --- CALCUL DES VECTEURS ELEMENTAIRES DES ELEMENTS DE LAGRANGE
C --- (REACTIONS D'APPUIS)
C
      IF (LDIRI) THEN
        CALL VEBTLA(MODELE,MATE  ,CARELE,DEPMOI,LISCHA,
     &              VEDIRI)
      END IF     
C
C --- CALCUL DE LA MATRICE D'AMORTISSEMENT (CAS EXPLICITE)
C      
      IF (LEXPL) THEN
        IF (LRIGI) THEN
          CALL NMCALM(MODELE,LISCHA,MATE  ,CARELE,COMPOR,
     &                INSTAM,INSTAP,CARCRI,VALMOI,VALPLU,
     &                DEPALG,'MEAMOR','AMOR_MECA','V'   ,LMACR ,
     &                MEELEM)      
          CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                INSTAM,INSTAP,'AMORT',MEELEM,AMORT)
        ENDIF
      ENDIF
C 
C --- ASSEMBLAGE DES MATRICES
C 
      IF (REASMA) THEN
        IF (LDYNA) THEN
          IF (LEXPL) THEN
C          
C --- ASSEMBLAGE DE LA MATRICE DE MASSE 
C
            CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                  INSTAM,INSTAP,'MASRI',MEELEM,MASSE)    
C
C --- CALCUL DE LA MATRICE MATASS GLOBALE
C                
            LIMAT(1) = MASSE
            NBMAT    = 1
            CALL DETRSD('MATR_ASSE',MATASS)
            CALL MTDEFS(MATASS,MASSE,'V','R')
            CALL MTCMBL(NBMAT,TYPCST,COEMAT,LIMAT,MATASS,
     &                 NOMDDL,' ','ELIM=')          
          
          ELSE      
C
C --- ASSEMBLAGE DE LA MATRICE DE RIGIDITE
C
            CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                  INSTAM,INSTAP,'RIGID',MEELEM,RIGID)
            CALL MTDSCR(RIGID)
C
C --- CALCUL DES MATRICES ELEMENTAIRES D AMORTISSEMENT
C
            IF (NDYNLO(SDDYNA,'MAT_AMORT')) THEN
              CALL NMCALM(MODELE,LISCHA,MATE  ,CARELE,COMPOR,
     &                    INSTAM,INSTAP,CARCRI,VALMOI,VALPLU,
     &                    DEPALG,'MEAMOR','AMOR_MECA','V'   ,LMACR ,
     &                    MEELEM)
C            
C --- ASSEMBLAGE DE LA MATRICE D'AMORTISSEMENT
C
              CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                    INSTAM,INSTAP,'AMORT',MEELEM,AMORT)

            END IF
C          
C --- ASSEMBLAGE DE LA MATRICE DE MASSE 
C
            IF (.NOT.LCTCC) THEN
              IF (PREMIE) THEN
                PREMIE = .FALSE.
                CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                      INSTAM,INSTAP,'MASSE',MEELEM,MASSE)   
              END IF
            ENDIF  
C
C --- CALCUL DE LA MATRICE MATASS GLOBALE
C
            LIMAT(1) = RIGID
            LIMAT(2) = MASSE
            LIMAT(3) = AMORT
            IF (NDYNLO(SDDYNA,'MAT_AMORT')) THEN
              NBMAT = 3
            ELSE
              NBMAT = 2
            END IF
            CALL DETRSD('MATR_ASSE',MATASS)
            CALL MTDEFS(MATASS,RIGID,'V','R')
            CALL MTCMBL(NBMAT,TYPCST,COEMAT,LIMAT,MATASS,NOMDDL,' ',
     &                  'ELIM=')
C
C --- CALCUL DES MACRO-ELEMENTS
C
            IF (LMACR) THEN
              CALL NMCALM(MODELE,LISCHA,MATE  ,CARELE,COMPOR,
     &                    INSTAM,INSTAP,CARCRI,VALMOI,VALPLU,
     &                    DEPALG,'MESSTR','RIGI_MECA','V'   ,LMACR ,
     &                    MEELEM)               
            END IF
C
C --- ASSEMBLAGE DES MACRO-ELEMENTS
C          
            IF (LMACR) THEN       
              CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                    INSTAM,INSTAP,'SSTRU',MEELEM,SSTRU)           
            END IF
          ENDIF  
        ELSE
C        
C --- ASSEMBLAGE DE LA MATRICE DE RIGIDITE
C
          CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                INSTAM,INSTAP,'RIGID',MEELEM,MATASS)   
C
C --- CALCUL DES MACRO-ELEMENTS
C
          IF (LMACR) THEN
            CALL NMCALM(MODELE,LISCHA,MATE  ,CARELE,COMPOR,
     &                  INSTAM,INSTAP,CARCRI,VALMOI,VALPLU,
     &                  DEPALG,'MESSTR','RIGI_MECA','V'   ,LMACR ,
     &                  MEELEM)               
          END IF
C
C --- ASSEMBLAGE DES MACRO-ELEMENTS
C          
          IF (LMACR) THEN               
            CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                  INSTAM,INSTAP,'SSTRU',MEELEM,SSTRU)
          END IF

C
C --- PRISE EN COMPTE DE LA MATRICE TANGENTE DES FORCES SUIVEUSES
C --- (PAS DE FORCES SUIVEUSES PILOTEES)
C 
          IF ((PHASE.NE.'PREDICTION').OR.
     &        (METPRE.NE.'EXTRAPOL').OR.
     &        (PHASEZ.EQ.'FLAMBEMENT')) THEN
            CALL NMCALM(MODELE,LISCHA,MATE  ,CARELE,COMPOR,
     &                  INSTAM,INSTAP,CARCRI,VALMOI,VALPLU,
     &                  DEPALG,'MESUIV',' ','V'   , LMACR ,
     &                  MEELEM)
            CALL NMASSM(FONACT,RESOCO,LISCHA,SOLVEU,NUMEDD,
     &                  INSTAM,INSTAP,'SUIVI',MEELEM,MATASS)
          END IF
        END IF
C
C --- PRISE EN COMPTE DE LA MATRICE TANGENTE DU FROTTEMENT
C
        IF (LCTCD) THEN
          IF (PHASE.EQ.'CORRECTION') THEN
            CALL NMASFR(DEFICO,RESOCO,MATASS)
          ENDIF
        ENDIF
C   
C --- FACTORISATION
C
        IF (PHASE.NE.'FLAMBEMENT') THEN    
          CALL PRERES(SOLVEU,'V',FACCVG,MAPREC,MATASS)
          IF (PHASE.EQ.'PREDICTION') THEN
            CALL NMIMPR('IMPR','MATR_ASSE',METPRE,0.D0,0)
          ELSE IF (PHASE.EQ.'CORRECTION') THEN
            CALL NMIMPR('IMPR','MATR_ASSE',METCOR,0.D0,0)
          ENDIF
        ENDIF
      ELSE
        CALL NMIMPR('IMPR','MATR_ASSE',' ',0.D0,0)
      END IF
C
9999  CONTINUE
C
      CALL JEDEMA()
      END
