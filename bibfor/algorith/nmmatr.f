      SUBROUTINE NMMATR(PHASEZ,
     &                  FONACT,LISCHA,SOLVEU,NUMEDD,SDDYNA,
     &                  DEFICO,RESOCO,MEELEM,MEASSE,MATASS)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 20/10/2009   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE MABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      CHARACTER*(*) PHASEZ
      CHARACTER*19  MATASS      
      CHARACTER*19  SDDYNA
      CHARACTER*24  DEFICO,RESOCO
      LOGICAL       FONACT(*)
      CHARACTER*19  MEELEM(*),MEASSE(*)
      CHARACTER*24  NUMEDD
      CHARACTER*19  LISCHA,SOLVEU      
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME - CALCUL)
C
C ASSEMBLAGE DE LA MATRICE GLOBALE
C
C ----------------------------------------------------------------------
C
C
C IN  PHASE  : PHASE DE CALCUL
C                'PREDICTION'
C                'CORRECTION' 
C                'ACCEL_INIT'  
C IN  RESOCO : SD RESOLUTION CONTACT
C IN  DEFICO : SD DEF. CONTACT
C IN  SDDYNA : SD POUR LA DYNAMIQUE
C IN  NUMEDD : NOM DE LA NUMEROTATION MECANIQUE
C IN  LISCHA : SD L_CHARGE
C IN  SOLVEU : NOM DU SOLVEUR DE NEWTON
C IN  MEASSE : VARIABLE CHAPEAU POUR NOM DES MATR_ASSE
C IN  MEELEM : VARIABLE CHAPEAU POUR NOM DES MATR_ELEM
C OUT MATASS : MATRICE ASSEMBLEE RESULTANTE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      LOGICAL      ISFONC,NDYNLO
      LOGICAL      LDYNA,LCTCD,LEXPL,LAMOR,LSUIV
      REAL*8       NDYNRE,COEMAT(3),COERIG,COEAMO,COEMAS
      CHARACTER*8  NOMDDL
      CHARACTER*24 LIMAT(3)
      CHARACTER*4  TYPCST(3)
      INTEGER      NBMAT 
      CHARACTER*10 PHASE      
      CHARACTER*19 NMCHEX,RIGID,MASSE,AMORT
      INTEGER      IFM,NIV
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><CALC> CALCUL MATRICE GLOBALE' 
      ENDIF
C
C --- INITIALISATIONS
C
      NOMDDL = ' '
      PHASE  = PHASEZ
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C 
      RIGID  = NMCHEX(MEASSE,'MEASSE','MERIGI')
      MASSE  = NMCHEX(MEASSE,'MEASSE','MEMASS')
      AMORT  = NMCHEX(MEASSE,'MEASSE','MEAMOR')
C
C --- FONCTIONNALITES ACTIVEES
C    
      LCTCD  = ISFONC(FONACT,'CONT_DISCRET')
      LSUIV  = ISFONC(FONACT,'FORCE_SUIVEUSE')  
      LAMOR  = NDYNLO(SDDYNA,'MAT_AMORT')    
      LDYNA  = NDYNLO(SDDYNA,'DYNAMIQUE')  
      LEXPL  = NDYNLO(SDDYNA,'EXPLICITE')  
C
C --- SUPPRESSION ANCIENNE MATRICE ASSEMBLEE
C 
      IF (LDYNA) THEN
        CALL DETRSD('MATR_ASSE',MATASS)
      ENDIF
C
C --- COEFFICIENTS POUR MATRICES
C      
      IF (LDYNA) THEN
        COERIG = NDYNRE(SDDYNA,'COEF_MATR_RIGI')
        COEAMO = NDYNRE(SDDYNA,'COEF_MATR_AMOR')
        COEMAS = NDYNRE(SDDYNA,'COEF_MATR_MASS') 
      ELSE
        COERIG = 1.D0    
      ENDIF       
      TYPCST(1) = 'R'
      TYPCST(2) = 'R'
      TYPCST(3) = 'R'
C
C --- MATRICES ET COEFFICIENTS
C 
      IF (LDYNA) THEN
        IF (PHASE.EQ.'ACCEL_INIT') THEN
          LIMAT(1)  = MASSE
          NBMAT     = 1 
          COEMAT(1) = 1.D0          
        ELSE
          IF (LEXPL) THEN                    
            LIMAT(1)  = MASSE
            NBMAT     = 1 
            COEMAT(1) = COEMAS        
          ELSE      
            LIMAT(1)  = RIGID
            LIMAT(2)  = MASSE
            LIMAT(3)  = AMORT
            COEMAT(1) = COERIG
            COEMAT(2) = COEMAS
            COEMAT(3) = COEAMO   
            IF (LAMOR) THEN
              NBMAT = 3
            ELSE
              NBMAT = 2
            END IF
          ENDIF 
        ENDIF            
      ENDIF     
C      
C --- DEFINITION DE LA STRUCTURE DE LA MATRICE
C    
      IF (LDYNA) THEN
        IF (PHASE.EQ.'ACCEL_INIT') THEN
          CALL MTDEFS(MATASS,MASSE ,'V','R')            
        ELSE
          IF (LEXPL) THEN                    
            CALL MTDEFS(MATASS,MASSE ,'V','R')         
          ELSE      
            CALL MTDEFS(MATASS,RIGID ,'V','R')
          ENDIF
        ENDIF              
      ENDIF    
C
C --- ASSEMBLAGE
C
      IF (LDYNA) THEN
        CALL MTCMBL(NBMAT ,TYPCST,COEMAT,LIMAT,MATASS,
     &              NOMDDL,' '   ,'ELIM=')    
      ELSE
        MATASS = RIGID      
      ENDIF 
      IF (PHASE.EQ.'ACCEL_INIT') THEN
        GOTO 9999              
      ENDIF       
C
C --- PRISE EN COMPTE DE LA MATRICE TANGENTE DES FORCES SUIVEUSES
C 
      IF (LSUIV) THEN
        CALL ASCOMA(MEELEM,NUMEDD,SOLVEU,LISCHA,MATASS)
      ENDIF              
C
C --- PRISE EN COMPTE DE LA MATRICE TANGENTE DU FROTTEMENT
C
      IF (LCTCD.AND.(PHASE.EQ.'CORRECTION')) THEN
        CALL NMASFR(DEFICO,RESOCO,MATASS)
      ENDIF      
C
9999  CONTINUE
C
      CALL JEDEMA()
      END
