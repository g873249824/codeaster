      SUBROUTINE NMEVDR(SDDISC,SDERRO,CONVER,VALINC,ITEMAX,
     &                  ACTITE)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 06/06/2011   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE GENIAUT S.GENIAUT
C
      IMPLICIT     NONE
      LOGICAL      CONVER,ITEMAX
      CHARACTER*19 SDDISC,VALINC(*)
      CHARACTER*24 SDERRO
      INTEGER      ACTITE
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME)
C
C VERIFICATION DES CRITERES DE DIVERGENCE DE TYPE EVENT-DRIVEN
C
C ----------------------------------------------------------------------
C
C
C IN  SDDISC : SD DISCRETISATION TEMPORELLE
C IN  SDERRO : SD GESTION DES ERREURS
C IN  VALINC : VARIABLE CHAPEAU INCREMENTS DES VARIABLES
C IN  ITEMAX : .TRUE. SI ITERATION MAXIMUM ATTEINTE
C IN  CONVER : .TRUE. SI CONVERGENCE REALISEE
C OUT ACTITE : BOUCLE NEWTON -> ACTION POUR LA SUITE
C     0 - NEWTON OK   - ON SORT
C     1 - NEWTON NOOK - IL FAUT FAIRE QUELQUE CHOSE
C     2 - NEWTON NCVG - ON CONTINUE NEWTON
C     3 - NEWTON STOP - TEMPS/USR1
C
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------------------
C
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C --- FIN DECLARATIONS NORMALISEES JEVEUX ------------------------------
C
      REAL*8       R8BID,VALREF,DVAL
      INTEGER      IFM,NIV,IBID,NECHEC,IECHEC
      INTEGER      PILESS
      INTEGER      LDCCVG,PILCVG
      LOGICAL      ERROR
      CHARACTER*24 K24BID
      CHARACTER*8  K8BID,CRIT,TYPEXT,PILCHO
      CHARACTER*16 NOCHAM,NOCMP,NOMEVD
      PARAMETER   (TYPEXT = 'MAX_ABS')
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> EVALUATION DES EVENT-DRIVEN'
      ENDIF
      
C
C --- RECUPERE LES CODES RETOURS
C
      CALL NMCRET('RECU','LDC',SDERRO,SDDISC,LDCCVG,
     &            K24BID)        
      CALL NMCRET('RECU','PIL',SDERRO,SDDISC,PILCVG,
     &            K24BID)       
C
C --- ERREUR OU PAS ?
C
      CALL NMERGE('GET','ALL',SDERRO,ERROR )
C
C --- NEWTON A CONVERGE ?
C
      IF (CONVER) THEN
        ACTITE = 0
      ELSE
        ACTITE = 2
      ENDIF
C
C --- NOMBRE D'EVENT-DRIVEN : NECHEC
C
      CALL UTDIDT('L'   ,SDDISC,'ECHE',IBID  ,'NB_OCC',
     &            R8BID ,NECHEC,K8BID )
C
C --- BOUCLE SUR LES EVENT-DRIVEN
C --- DES QU'UN EVENT-DRIVEN EST SATISFAIT, ON SORT
C --- ON NE CHERCHE PAS A VERIFIER LES AUTRES EVENT
C --- ATTENTION, L'ORDRE D'EVALUATION A DONC UNE IMPORTANCE !
C
      DO 100 IECHEC = 1,NECHEC
C
C ----- RECUPERATION DU NOM DE L'EVENT-DRIVEN
C
        CALL UTDIDT('L'   ,SDDISC,'ECHE',IECHEC,'NOM_EVEN',
     &              R8BID ,IBID  ,NOMEVD)
C
C ----- PAR DEFAUT: EVENEMENT NON ACTIVE
C
        CALL ENEVEN(SDDISC,IECHEC,.FALSE.)
C
        IF (NOMEVD.EQ.'DIVE_ITER_PILO') THEN
C
C ------- L'UTILISATEUR UTILISE LE PILOTAGE
C ------- ET SOUHAITE BASCULER SI NON-CONVERGENCE
C
          CALL UTDIDT('L'   ,SDDISC,'ECHE',IECHEC,'ESSAI_ITER_PILO',
     &                R8BID ,PILESS,K8BID )
          CALL ASSERT(PILESS.EQ.1.OR.PILESS.EQ.2)
C
C ------- SI PREMIER ESSAI ET NON CONVERGENCE
C ------- ON RETENTE EN CHOISISSANT L'AUTRE SOLUTION
C
          IF (PILESS.EQ.1.AND.ITEMAX) THEN
            PILESS = 2
            CALL UTDIDT('E'   ,SDDISC,'ECHE',IECHEC,'ESSAI_ITER_PILO',
     &                  R8BID ,PILESS,K8BID )
            PILCHO = 'AUTRE'
            CALL UTDIDT('E'   ,SDDISC,'ECHE',IECHEC,'CHOIX_SOLU_PILO',
     &                  R8BID ,IBID  ,PILCHO) 
            CALL NMIMPR('IMPR','AUTR_SOLU_PILO',K8BID ,R8BID,IBID)
            CALL ENEVEN(SDDISC,IECHEC,.TRUE.)
            ACTITE = 1
          ELSE
C
C ------- DANS LES AUTRES CAS, ON REINITIALISE LES VARIABLES
C ------- POUR LE PAS DE TEMPS SUIVANT
C
            PILESS = 1                     
            CALL UTDIDT('E'   ,SDDISC,'ECHE',IECHEC,'ESSAI_ITER_PILO',
     &                  R8BID ,PILESS,K8BID )
            PILCHO = 'NATUREL'
            CALL UTDIDT('E'   ,SDDISC,'ECHE',IECHEC,'CHOIX_SOLU_PILO',
     &                  R8BID ,IBID  ,PILCHO)
          ENDIF
C
        ELSEIF (NOMEVD.EQ.'DIVERGENCE_ERRE') THEN
          IF (ERROR) THEN
            CALL ENEVEN(SDDISC,IECHEC,.TRUE.)
            ACTITE = 1
            GOTO 8888
          ENDIF
C
C ------- CET EVENEMENT CORRESPOND A UNE ERREUR DANS LES LDC SUR LA 
C ------- NON VERIFICATION DE CRITERES PHYSIQUES (CODRET = 2)
C
          IF (CONVER) THEN
            IF (LDCCVG.EQ.2) THEN
              CALL ENEVEN(SDDISC,IECHEC,.TRUE.)
              ACTITE = 1
            ENDIF
          ENDIF
C
        ELSEIF (NOMEVD.EQ.'DIVERGENCE_ITER') THEN
          IF (ITEMAX) THEN
            CALL ENEVEN(SDDISC,IECHEC,.TRUE.)
            ACTITE = 1
          ENDIF      
C
        ELSEIF (NOMEVD.EQ.'DELTA_GRANDEUR') THEN
          CALL UTDIDT('L'   ,SDDISC,'ECHE',IECHEC,'NOM_CHAM',
     &                R8BID ,IBID  ,NOCHAM)
          CALL UTDIDT('L'   ,SDDISC,'ECHE',IECHEC,'NOM_CMP',
     &                R8BID ,IBID  ,NOCMP )
          CALL UTDIDT('L'   ,SDDISC,'ECHE',IECHEC,'VALE_REF',
     &                VALREF,IBID  ,K8BID )
          CALL UTDIDT('L'   ,SDDISC,'ECHE',IECHEC,'CRIT_COMP',
     &                R8BID ,IBID  ,CRIT  )
C
C ------- DVAL :MAX EN VALEUR ABSOLUE DU DELTA(CHAMP+CMP)
C
          CALL EXTDCH(TYPEXT,VALINC,NOCHAM,NOCMP,DVAL)
C
          CALL ASSERT(CRIT.EQ.'GT')
          IF (CONVER) THEN
            IF (DVAL.GT.VALREF) THEN
              CALL ENEVEN(SDDISC,IECHEC,.TRUE.)
              ACTITE = 1
            ENDIF
          ENDIF
        ELSE
          WRITE(6,*) 'NOMEVD: ',NOMEVD
          CALL ASSERT(.FALSE.)           
        ENDIF   
 100  CONTINUE
C
 8888 CONTINUE
C
      CALL JEDEMA()
      END
