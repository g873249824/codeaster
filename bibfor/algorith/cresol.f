      SUBROUTINE CRESOL(SOLVEU,SUFFI2)
      IMPLICIT   NONE
      CHARACTER*19 SOLVEU
      CHARACTER*(*) SUFFI2
C ----------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 05/12/2001   AUTEUR VABHHTS J.PELLET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================

C     SAISIE ET VERIFICATION DE LA COHERENCE DES DONNEES RELATIVES AU
C     SOLVEUR

C IN K19 SOLVEU  : NOM DU SOLVEUR DONNE EN ENTREE
C OUT    SOLVEU  : LE SOLVEUR EST CREE ET INSTANCIE
C ----------------------------------------------------------
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------

      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)

C --- FIN DECLARATIONS NORMALISEES JEVEUX --------------------

      INTEGER NMAXIT,NPREC,ISTOP,NSOLVE,NBRPAS
      INTEGER IBID,ISLVK,ISLVR,ISLVI,NIREMP
      REAL*8 RESIRE,TBLOC,JEVTBL
      CHARACTER*3 KSTOP,SYME
      CHARACTER*8 METHOD,RENUM
      CHARACTER*8 PRECO
      CHARACTER*12 SUFFIX
      CHARACTER*16 NOMSOL
      LOGICAL EXISYM,GETEXM
C     ------------------------------------------------------------------

      CALL JEMARQ()
      SUFFIX = SUFFI2

      METHOD = 'MULT_FRO'
      PRECO = 'XXXX'
      RENUM = 'MDA'
      SYME = 'NON'
      EXISYM = .FALSE.
      RESIRE = 1.D-6
      NPREC = 8
      NMAXIT = 0
      ISTOP = 0

      IF ((SUFFIX(1:5).EQ.'_MECA') .OR. (SUFFIX(1:5).EQ.'_THER') .OR.
     &    (SUFFIX(1:10).EQ.'_NON_LOCAL')) THEN
        NOMSOL = 'SOLV'//SUFFIX
      ELSE
        NOMSOL = 'SOLVEUR'
      END IF

C --- CREATION DES DIFFERENTS ATTRIBUTS DE LA S.D. SOLVEUR

      CALL WKVECT(SOLVEU(1:19)//'.SLVK','V V K24',5,ISLVK)
      CALL WKVECT(SOLVEU(1:19)//'.SLVR','V V R',3,ISLVR)
      CALL WKVECT(SOLVEU(1:19)//'.SLVI','V V I',4,ISLVI)

C --- LECTURE DES PARAMETRES RELATIFS AU MOT FACTEUR SOLVEUR

      CALL GETFAC(NOMSOL,NSOLVE)
      IF (NSOLVE.EQ.0) GO TO 10

      CALL GETVTX(NOMSOL,'METHODE',1,1,1,METHOD,IBID)
      CALL GETVIS(NOMSOL,'NPREC',1,1,1,NPREC,IBID)
      CALL GETVTX(NOMSOL,'STOP_SINGULIER',1,1,1,KSTOP,IBID)
      EXISYM = GETEXM(NOMSOL,'SYME')
      IF (EXISYM) THEN
        CALL GETVTX(NOMSOL,'SYME',1,1,1,SYME,IBID)
      END IF

      IF (KSTOP.EQ.'NON') THEN
        ISTOP = 1
      ELSE IF (KSTOP.EQ.'DEC') THEN
        CALL GETVIS('INCREMENT','SUBD_PAS',1,1,1,NBRPAS,IBID)
        IF (NBRPAS.LE.1) THEN
          CALL UTMESS('F','CRESOL','STOP_SINGULIER=DECOUPE NECESSITE'//
     &          ' LA SUBDIVISION AUTOMATIQUE DU PAS DE TEMPS (SUBD_PAS)'
     &                )
        ELSE
          ISTOP = 2
        END IF
      END IF


      IF (METHOD.EQ.'LDLT') THEN
C     -----------------------------
        CALL GETVTX(NOMSOL,'RENUM',1,1,1,RENUM,IBID)
        IF (IBID.EQ.0) RENUM = 'RCMK'
        CALL GETVTX(NOMSOL,'PRE_COND',1,1,1,PRECO,IBID)
        IF (IBID.EQ.0) PRECO='SANS'
        IF (RENUM(1:4).NE.'RCMK' .AND. RENUM(1:4).NE.'SANS')
     &    CALL UTMESS('F','CRESOL','LA METHODE '//RENUM//' EST '//
     &                'INADEQUATE POUR UNE RESOLUTION DE TYPE "LDLT"')


      ELSE IF (METHOD.EQ.'GCPC') THEN
C     -----------------------------
        CALL GETVTX(NOMSOL,'RENUM',1,1,1,RENUM,IBID)
        IF (IBID.EQ.0) RENUM = 'RCMK'
        IF (RENUM(1:4).NE.'RCMK' .AND. RENUM(1:4).NE.'SANS')
     &    CALL UTMESS('F','CRESOL','LA METHODE '//RENUM//' EST '//
     &                'INADEQUATE POUR UNE RESOLUTION DE TYPE "GCPC"')
        CALL GETVTX(NOMSOL,'PRE_COND',1,1,1,PRECO,IBID)
        IF (IBID.EQ.0) PRECO='LDLT_INC'
        CALL GETVIS(NOMSOL,'NMAX_ITER',1,1,1,NMAXIT,IBID)
        CALL GETVR8(NOMSOL,'RESI_RELA',1,1,1,RESIRE,IBID)
        CALL GETVIS(NOMSOL,'NIVE_REMPLISSAGE',1,1,1,NIREMP,IBID)


      ELSE IF (METHOD.EQ.'MULT_FRO') THEN
C     -----------------------------
        CALL GETVTX(NOMSOL,'RENUM',1,1,1,RENUM,IBID)
        IF (RENUM(1:2).NE.'MD'.AND.RENUM(1:2).NE.'ME') THEN
           CALL UTMESS('F','CRESOL',
     &             'LA METHODE '//RENUM//' ETANT '//
     &             'INADEQUATE POUR UNE RESOLUTION DE TYPE "MULT_FRONT"'
     &                )
        ENDIF
        CALL GETVTX(NOMSOL,'PRE_COND',1,1,1,PRECO,IBID)
        IF (IBID.EQ.0) PRECO='SANS'
      END IF
   10 CONTINUE

      ZK24(ISLVK) = METHOD
      ZK24(ISLVK+1) = PRECO
      ZK24(ISLVK+2) = ' '
      ZK24(ISLVK+3) = RENUM
      ZK24(ISLVK+4) = SYME

      ZR(ISLVR) = 0.D0
      ZR(ISLVR+1) = RESIRE
      TBLOC=JEVTBL()
      ZR(ISLVR+2) = TBLOC

      ZI(ISLVI-1+1) = NPREC
      ZI(ISLVI-1+2) = NMAXIT
      ZI(ISLVI-1+3) = ISTOP
      ZI(ISLVI-1+4) = NIREMP

C FIN ------------------------------------------------------
      CALL JEDEMA()
      END
