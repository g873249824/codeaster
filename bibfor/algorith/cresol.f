      SUBROUTINE CRESOL(SOLVEU,SUFFI2)
      IMPLICIT   NONE
      CHARACTER*19 SOLVEU
      CHARACTER*(*) SUFFI2
C ----------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 06/09/2004   AUTEUR BOITEAU O.BOITEAU 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
C     SAISIE ET VERIFICATION DE LA COHERENCE DES DONNEES RELATIVES AU
C     SOLVEUR

C IN K19 SOLVEU  : NOM DU SOLVEUR DONNE EN ENTREE
C OUT    SOLVEU  : LE SOLVEUR EST CREE ET INSTANCIE
C ----------------------------------------------------------
C RESPONSABLE BOITEAU O.BOITEAU

C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------

      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)

C --- FIN DECLARATIONS NORMALISEES JEVEUX --------------------

      INTEGER      NMAXIT,N,ISTOP,NSOLVE,NBRPAS,IBID,NIREMP,
     &  IFETS,IFM,NIV,NBSD,I,NBMA,IDIME,NBREOR,NPREC,NMAXI1,
     &  NBREO1,JLOGI
      REAL*8       RESIRE,TBLOC,JEVTBL,EPS,TESTCO,RESIR1,TESTC1
      CHARACTER*3  KSTOP,SYME
      CHARACTER*8  METHOD,RENUM,PRECO,K8BID,NOMSD,METHO1,VERIF,
     &             TYREOR,SCALIN,PRECO1,VERIF1,TYREO1,SCALI1
      CHARACTER*11 SOLFET             
      CHARACTER*12 SUFFIX
      CHARACTER*16 NOMSOL
      CHARACTER*19 SOLFEB      
      CHARACTER*24 SDFETI,NOMLOG
      CHARACTER*32 JEXNUM,JEXNOM
      LOGICAL      EXISYM,GETEXM        

C------------------------------------------------------------------
      CALL JEMARQ()
      
      
      SUFFIX = SUFFI2
      METHOD = 'MULT_FRO'
      PRECO = 'SANS'
      PRECO1 = 'SANS'
      RENUM = 'MDA'
      SYME = 'NON'
      EXISYM = .FALSE.
      RESIRE = 1.D-6
      RESIR1 = 0.D0
      EPS = 0.D0
      NPREC = 8
      NMAXIT = 0
      NMAXI1 = 0
      ISTOP = 0
      NIREMP=0
      TBLOC=JEVTBL() 
      SDFETI='????'
      VERIF='????'
      VERIF1='????'
      TESTCO=0.D0
      TESTC1=0.D0
      NBREOR=0
      NBREO1=0
      TYREOR='SANS'
      TYREO1='SANS'
      SCALIN='SANS'
      SCALI1='SANS'
C RECUPERATION ET MAJ DU NIVEAU D'IMPRESSION
      CALL INFNIV(IFM,NIV)           

      IF ((SUFFIX(1:5).EQ.'_MECA') .OR. (SUFFIX(1:5).EQ.'_THER') .OR.
     &    (SUFFIX(1:10).EQ.'_NON_LOCAL')) THEN
        NOMSOL = 'SOLV'//SUFFIX
      ELSE
        NOMSOL = 'SOLVEUR'
      END IF

C --------------------------------------------------------------
C --- LECTURE DES PARAMETRES RELATIFS AU MOT FACTEUR SOLVEUR
C --------------------------------------------------------------
      CALL GETFAC(NOMSOL,NSOLVE)
      IF (NSOLVE.EQ.0) GO TO 10

      CALL GETVTX(NOMSOL,'METHODE',1,1,1,METHOD,IBID)
      CALL GETVIS(NOMSOL,'NPREC',1,1,1,NPREC,IBID)
      CALL GETVTX(NOMSOL,'STOP_SINGULIER',1,1,1,KSTOP,IBID)
      EXISYM = GETEXM(NOMSOL,'SYME')
      IF (EXISYM) THEN
        CALL GETVTX(NOMSOL,'SYME',1,1,1,SYME,IBID)
      END IF

      IF (KSTOP.EQ.'NON') THEN
        ISTOP = 1
      ELSE IF (KSTOP.EQ.'DEC') THEN
        CALL GETVIS('INCREMENT','SUBD_PAS',1,1,1,NBRPAS,IBID)
        IF (NBRPAS.LE.1) THEN
          CALL UTMESS('F','CRESOL','STOP_SINGULIER=DECOUPE NECESSITE'//
     &      ' LA SUBDIVISION AUTOMATIQUE DU PAS DE TEMPS (SUBD_PAS)')
        ELSE
          ISTOP = 1
        END IF
      END IF
      

      IF (METHOD.EQ.'LDLT') THEN
C     -----------------------------
        CALL GETVTX(NOMSOL,'RENUM',1,1,1,RENUM,IBID)
        IF (IBID.EQ.0) RENUM = 'RCMK'
        
        IF (RENUM(1:4).NE.'RCMK' .AND. RENUM(1:4).NE.'SANS')
     &    CALL UTMESS('F','CRESOL','LA METHODE '//RENUM//' EST '//
     &                'INADEQUATE POUR UNE RESOLUTION DE TYPE "LDLT"')


      ELSE IF (METHOD.EQ.'GCPC') THEN
C     -----------------------------
        CALL GETVTX(NOMSOL,'RENUM',1,1,1,RENUM,IBID)
        IF (IBID.EQ.0) RENUM = 'RCMK'
        IF (RENUM(1:4).NE.'RCMK' .AND. RENUM(1:4).NE.'SANS')
     &    CALL UTMESS('F','CRESOL','LA METHODE '//RENUM//' EST '//
     &                'INADEQUATE POUR UNE RESOLUTION DE TYPE "GCPC"')
        PRECO='LDLT_INC'

        CALL GETVIS(NOMSOL,'NMAX_ITER',1,1,1,NMAXIT,IBID)
        CALL GETVR8(NOMSOL,'RESI_RELA',1,1,1,RESIRE,IBID)
        CALL GETVIS(NOMSOL,'NIVE_REMPLISSAGE',1,1,1,NIREMP,IBID)

      ELSE IF (METHOD.EQ.'MULT_FRO') THEN
C     --------------------------------------------------------------
        CALL GETVTX(NOMSOL,'RENUM',1,1,1,RENUM,IBID)
        IF (RENUM(1:2).NE.'MD'.AND.RENUM(1:2).NE.'ME') THEN
           CALL UTMESS('F','CRESOL',
     &             'LA METHODE '//RENUM//' ETANT '//
     &             'INADEQUATE POUR UNE RESOLUTION DE TYPE "MULT_FRONT"'
     &                )
        ENDIF


C PARAMETRE FETI IDENTIQUE A CELUI DE MULT_FRONT ET HOMOGENE POUR
C CHAQUE SOUS-DOMAINE   
      ELSE IF (METHOD.EQ.'FETI') THEN
C     --------------------------------------------------------------
        CALL GETVTX(NOMSOL,'RENUM',1,1,1,RENUM,IBID)
        IF (RENUM(1:2).NE.'MD'.AND.RENUM(1:2).NE.'ME')
     &     CALL UTMESS('F','CRESOL',
     &             'LA METHODE '//RENUM//' ETANT '//
     &             'INADEQUATE POUR UNE RESOLUTION DE TYPE "FETI"')
                
C LECTURE NOUVEAU MOT-CLE
        SDFETI=' '
        CALL GETVID(NOMSOL,'PARTITION',1,1,1,SDFETI(1:8),IBID)
        IF (IBID.EQ.0)
     &    CALL UTMESS('F','CRESOL','LE SOLVEUR FETI REQUIERT UN '//
     &                'CONCEPT PRODUIT DE TYPE SD_FETI EN ENTREE '//
     &                'DU MOT-CLE PARTITION')
        CALL GETVIS(NOMSOL,'NMAX_ITER',1,1,1,NMAXIT,IBID)
        CALL GETVR8(NOMSOL,'RESI_RELA',1,1,1,RESIRE,IBID)
        CALL GETVTX(NOMSOL,'VERIF_SDFETI',1,1,1,VERIF,IBID)
        CALL GETVR8(NOMSOL,'TEST_CONTINU',1,1,1,TESTCO,IBID)
        CALL GETVTX(NOMSOL,'TYPE_REORTHO_DD',1,1,1,TYREOR,IBID)
        IF (TYREOR(1:4).NE.'SANS') THEN
          CALL GETVIS(NOMSOL,'NB_REORTHO_DD',1,1,1,NBREOR,IBID)
          IF (NBREOR.GT.NMAXIT) THEN
            NBREOR=NMAXIT         
            WRITE(IFM,100)NBREOR
          ENDIF   
        ENDIF
        CALL GETVTX(NOMSOL,'PRE_COND',1,1,1,PRECO,IBID)
        IF (PRECO(1:4).NE.'SANS')
     &    CALL GETVTX(NOMSOL,'SCALING',1,1,1,SCALIN,IBID)


C STOCKE &&//NOMPRO(1:6)//'.S.' POUR COHERENCE AVEC L'EXISTANT     
        SOLFET=SOLVEU(1:8)//'.S.'
C LECTURE NOMBRE DE SOUS-DOMAINES:NBSD    
        CALL JELIRA(SDFETI(1:19)//'.FETA','NUTIOC',NBSD,K8BID)
C CONSTITUTION DE L'OBJET SOLVEUR.FETS
        CALL WKVECT(SOLVEU(1:19)//'.FETS','V V K24',NBSD,IFETS)
C LECTURE NOMBRE TOTAL DE MAILLE:NBMA     
        CALL JEVEUO(SDFETI(1:19)//'.DIME','L',IDIME)
        NBMA=ZI(IDIME+2)

C COLLECTION DISPERSEE COMPORTANT NBSD VECTEURS DE LOGICAL. CES VEC
C TEURS SONT DIMENSIONNES AU NOMBRE TOTAL DE MAILLES DU MODELE.
C  V(J)(I)='TRUE' SI LA IEME MAILLE DU MODELE APPARTIENT AU 
C                  SOUS-DOMAINE J, 'FALSE' SINON.
        NOMLOG=SDFETI(1:8)//'.LOGI'
        CALL JECREC(NOMLOG,'V V L','NO','DISPERSE','VARIABLE',NBSD)
                        
        DO 5 I=1,NBSD
C REMPLISSAGE .FETS PAR LES NOMS DES SD SOLVEUR DES SOUS-DOMAINES       
          CALL JENUNO(JEXNUM(SDFETI(1:19)//'.FETA',I),NOMSD)
          SOLFEB=SOLFET(1:11)//NOMSD(1:8)
          ZK24(IFETS+I-1)=SOLFEB

C CONSTITUTION COLLECTION DISPERSEE .LOGI
          CALL JECROC(JEXNOM(NOMLOG,NOMSD))
          CALL JEECRA(JEXNOM(NOMLOG,NOMSD),'LONMAX',NBMA,K8BID)
          CALL JEVEUO(JEXNOM(NOMLOG,NOMSD),'E',JLOGI)

C --------------------------------------------------------------
C CREATION ET REMPLISSAGE DE LA SD SOLVEUR "ESCLAVE" ET DU
C VECTEUR TEMPORAIRE LOGIQUE LIEE A CHAQUE SOUS-DOMAINE
C --------------------------------------------------------------
          METHO1='MULT_FRO'
          CALL CRESO1(SOLFEB,METHO1,PRECO1,RENUM,SYME,SDFETI,EPS,
     &    RESIR1,TBLOC,NPREC,NMAXI1,ISTOP,NIREMP,IFM,NIV,I,NBMA,VERIF1,
     &    TESTC1,NBREO1,TYREO1,SCALI1,JLOGI)           
    5   CONTINUE                

      ENDIF
   10 CONTINUE
      
  
C --------------------------------------------------------------
C CREATION ET REMPLISSAGE DE LA SD SOLVEUR "MAITRE"
C --------------------------------------------------------------
      CALL CRESO1(SOLVEU,METHOD,PRECO,RENUM,SYME,SDFETI,EPS,
     &  RESIRE,TBLOC,NPREC,NMAXIT,ISTOP,NIREMP,IFM,NIV,0,0,
     &  VERIF,TESTCO,NBREOR,TYREOR,SCALIN,0)

C FIN ------------------------------------------------------
      CALL JEDEMA()
  100 FORMAT ('! FETI: NB_REORTHO_DD FIXE A NMAX_ITER= ',I6,' !')      
      END
