      SUBROUTINE OP0070 (IER)

C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 03/07/2002   AUTEUR CIBHHBC R.FERNANDES 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
C RESPONSABLE ADBHHVV V.CANO
C TOLE CRP_20
C
      IMPLICIT NONE
C
      INTEGER            IER
C ----------------------------------------------------------------------
C     COMMANDE:  STAT_NON_LINE
C
C IN  LICCVG : LICCVG(1) : PILOTAGE
C                        =  0 CONVERGENCE
C                        =  1 PAS DE CONVERGENCE
C                        = -1 BORNE ATTEINTE
C              LICCVG(2) : INTEGRATION DE LA LOI DE COMPORTEMENT
C                        = 0 OK
C                        = 1 ECHEC DANS L'INTEGRATION : PAS DE RESULTATS
C                        = 3 SIZZ NON NUL (DEBORST) ON CONTINUE A ITERER
C              LICCVG(3) : TRAITEMENT DU CONTACT 
C                        = 0 OK
C                        = 1 ECHEC (ITER > 2*NBLIAI+1)
C              LICCVG(4) : MATRICE DE CONTACT
C                        = 0 OK
C                        = 1 MATRICE DE CONTACT SINGULIERE
C              LICCVG(5) : MATRICE DU SYSTEME (MATASS)
C                        = 0 OK
C                        = 1 MATRICE SINGULIERE
C
C  OUT: IER =      NOMBRE D'ERREURS RENCONTREES
C ----------------------------------------------------------------------
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
C 0.3. ==> VARIABLES LOCALES
C
      CHARACTER*6 NOMPRO
      PARAMETER ( NOMPRO = 'OP0070' )
C
      LOGICAL      ECHLDC, ITEMAX, CONVER, FINPAS, FINTPS, FONACT(4)
      LOGICAL      DIDERN, ECHCON(2), REAROT, LAMORT, LBID,   LIMPED
      LOGICAL      RGENCE, PREMIE, CGENCE, LONDE,  ECHEQU, LOBSER
      LOGICAL      LREAC(4)
C
      INTEGER      LICCVG(5), MAXB(4), VECONT(2)
      INTEGER      IFM,    NIV,    NEQ,    IRET,   IBID,   I 
      INTEGER      NUMINS, ITERAT, ICONTA, KNOEU,  KMAIL,  KPOIN
      INTEGER      JDEPM,  JDEPDE, JDEPP,  JDDEPL, IECPCO, INCOCA
      INTEGER      JARCH,  JDEPEN, JVITEN, JACCEN
      INTEGER      COMGEO, CSEUIL, COBCA,  INDRO,  ISNNEM, NBMODS
      INTEGER      NMODAM, NREAVI, NONDP,  KKKMA,  KCHAM,  KCOMP
      INTEGER      KNUCM,  NBOBSE, JOBSE,  NUINS0, NOINS2, NLISIN
      INTEGER      NBOBAR, JINST,  NUOBSE
      INTEGER      NBPASE
C
      REAL*8       PARMET(30), PARCRI(11), CONV(21), ETA, ETAN, R8VIDE
      REAL*8       DIINST,     INSTAM,     INSTAP,   INST(3),   ALPHA
      REAL*8       V0VIT,      V0ACC,      A0VIT,    A0ACC,     COEVIT
      REAL*8       COEACC,     DELTA,      TPS1(4),  TPS2(4),   TPS3(4)
      REAL*8       EPSI,       R8PREM
C
      CHARACTER*8  RESULT, MODEDE, MAILLA, SCONEL, MCONEL, K8BID
      CHARACTER*8  MAILL2
C
      CHARACTER*13 INPSCO
      CHARACTER*14 PILOTE
C
      CHARACTER*16 METHOD(6), OPTION, CMD, K16BID
C
      CHARACTER*19 LISCHA, SOLVEU, SOLVDE, PARTPS, CRITNL
      CHARACTER*19 CNRESI, CNDIRI, CNVCFO, CNFEXT, K19BLA
      CHARACTER*19 NURO,   CARTCF, LIGRCF, CNSINR, FOINER
      CHARACTER*19 MAPREC, LISOBS, NOMTAB, AUTOC1, AUTOC2
C
      CHARACTER*24 MODELE, NUMEDD, MATE  , CARELE, COMPOR, CARCRI
      CHARACTER*24 NUMEDE, DEFICO, RESOCO, K24BLA, K24BID, TEMPLU
      CHARACTER*24 DEPMOI, SIGMOI, VARMOI, VARDEM, LAGDEM, MEMASS
      CHARACTER*24 DEPPLU, SIGPLU, VARPLU, VARDEP, LAGDEP, DEPDEL
      CHARACTER*24 COMMOI, COMPLU, COMREF, DDEPLA, DEPOLD
      CHARACTER*24 CNFEDO, CNFEPI, CNDIDO, CNDIPI, CNFSDO, CNFSPI
      CHARACTER*24 CNDIDI, CNCINE, MEDIRI, DEPENT, VITENT, ACCENT
      CHARACTER*24 VITMOI, ACCMOI, DEPENM, VITENM, ACCENM
      CHARACTER*24 DEPKM1, VITKM1, ACCKM1, VITPLU, ACCPLU, ROMKM1
      CHARACTER*24 ROMK,   MAESCL, OLDGEO, NEWGEO, DEPGEO, DEPLAM      
      CHARACTER*24 STADYN, MASSE,  AMORT,  VALMOD, BASMOD, CHONDP
      CHARACTER*24 FONDEP, FONVIT, FONACC, MULTAP, PSIDEL
      CHARACTER*24 VALMOI(8), VALPLU(8), SECMBR(8), POUGD(8), MULTIA(8)
      CHARACTER*24 LISINS
C
C ----------------------------------------------------------------------

      DATA LISCHA, PARTPS    /'&&OP0070.LISCHA', '&&OP0070.PARTPS'/
      DATA CRITNL, CARCRI    /'&&OP0070.CRITERE','&&OP0070.PARA_LDC'/
      DATA SOLVEU, SOLVDE    /'&&OP0070.SOLVEUR','&&OP0070.SOLVDE'/
      DATA PILOTE, RESOCO    /'&&OP0070.PILOT',  '&&OP0070.RESOC'/
      DATA DEPMOI, DEPPLU    /'&&OP0070.DEPMOI', '&&OP0070.DEPPLU'/
      DATA DEPDEL, DDEPLA    /'&&OP0070.DEPDEL', '&&OP0070.DDEPLA'/
      DATA DEPOLD, DEFICO    /'&&OP0070.DEPOLD', '&&OP0070.DEFIC'/
      DATA VITPLU, ACCPLU    /'&&OP0070.VITPLU', '&&OP0070.ACCPLU'/
      DATA VITMOI, ACCMOI    /'&&OP0070.VITMOI', '&&OP0070.ACCMOI'/
      DATA DEPKM1,VITKM1     /'&&OP0070.DEPKM1', '&&OP0070.VITKM1'/
      DATA ACCKM1            /'&&OP0070.ACCKM1'/
      DATA ROMKM1,ROMK       /'&&OP0070.ROMKM1', '&&OP0070.ROMK  '/
      DATA DEPENT,VITENT     /'&&OP0070.DEPENT', '&&OP0070.VITENT'/
      DATA ACCENT            /'&&OP0070.ACCENT'/
      DATA DEPENM,VITENM     /'&&OP0070.DEPENM', '&&OP0070.VITENM'/
      DATA ACCENM            /'&&OP0070.ACCENM'/
      DATA NURO              /'&&OP0070.NUME.ROTATION'/
      DATA DEPGEO, DEPLAM    /'&&OP0070.DEPGEO', '&&OP0070.DEPLAM'/
      DATA LIGRCF, CARTCF    /'&&OP0070.LIMECF', '&&OP0070.CARTCF'/
      DATA NEWGEO            /'&&OP0070.ACTUGEO'/
      DATA SIGMOI, SIGPLU    /'&&OP0070.SIGMOI', '&&OP0070.SIGPLU'/
      DATA VARMOI, VARPLU    /'&&OP0070.VARMOI', '&&OP0070.VARPLU'/
      DATA VARDEM, VARDEP    /'&&OP0070.VARDEM', '&&OP0070.VARDEP'/
      DATA LAGDEM, LAGDEP    /'&&OP0070.LAGDEM', '&&OP0070.LAGDEP'/
      DATA COMMOI, COMPLU    /'&&OP0070.COMOI' , '&&OP0070.COPLU' /
      DATA COMREF            /'&&OP0070.COREF'/
      DATA CNFEDO, CNFEPI    /'&&OP0070.CNFEDO', '&&OP0070.CNFEPI'/
      DATA CNFSDO, CNFSPI    /'&&OP0070.CNFSDO', '&&OP0070.CNFSPI'/
      DATA CNDIDO, CNDIPI    /'&&OP0070.CNDIDO', '&&OP0070.CNDIPI'/
      DATA CNDIDI, CNCINE    /'&&OP0070.CNDIDI', '&&OP0070.CNCINE'/
      DATA CNRESI, CNDIRI    /'&&OP0070.CNRESI', '&&OP0070.CNDIRI'/
      DATA CNFEXT, MEDIRI    /'&&OP0070.CNFEXT', '&&MEDIRI.LISTE_RESU'/
      DATA CNVCFO            /'&&OP0070.CNVCFO'/
      DATA MEMASS, FOINER    /'&&OP0070.MEMASS', '&&OP0070.FOINER'/
      DATA AMORT , MASSE     /'&&OP0070.MAMORT', '&&OP0070.MMASSE'/
      DATA STADYN            /'&&OP0070.STA_DYN'/
      DATA MCONEL, SCONEL    /'&&CFMMEL', '&&CFMVEL'/
      DATA FONDEP, FONVIT    /'&&FONDEP', '&&FONVIT'/
      DATA FONACC, PSIDEL    /'&&FONACC', '&&PSIDEL'/
      DATA MULTAP, VALMOD    /'&&MULTAP', '&&VALMOD'/
      DATA BASMOD            /'&&BASMOD'/
      DATA AUTOC1, AUTOC2  /'&&OP0070.REAC.AUTO1','&&OP0070.REAC.AUTO2'/
      DATA K19BLA, K24BLA    /2*' '/

C ----------------------------------------------------------------------
      CALL JEMARQ()
C
C               12   345678   90123
      INPSCO = '&&'//NOMPRO//'_PSCO'
      COMGEO = 0
      CSEUIL = 0
      COBCA  = 0
      NMODAM = 0
      NBMODS = 0
      LONDE  = .FALSE.
      LIMPED = .FALSE.
      LAMORT = .FALSE.

C -- TITRE

      CALL TITRE ()
      CALL INFMAJ
      CALL INFNIV (IFM,NIV)

C **********************************************************************
C               RECUPERATION DES OPERANDES ET INITIALISATION
C **********************************************************************

C -- QUELLE COMMANDE APPELLE CETTE OP (STA OU DYN)

      CALL GETRES (K8BID,K16BID,CMD)


C -- CREATION DE VARIABLES "CHAPEAU" POUR STOCKER LES NOMS
C      VALMOI : ETAT EN T-
C      VALPLU : ETAT EN T+
C      SECMBR : CHARGEMENTS
C      POUGD  : INFOS POUTRES EN GRANDES ROTATIONS
C      MULTIA : INFOS MULTI-APPUI

      CALL AGGLOM (DEPMOI, SIGMOI, VARMOI, COMMOI,
     &             K24BLA, K24BLA, K24BLA, K24BLA, 4, VALMOI)
      CALL AGGLOM (DEPPLU, SIGPLU, VARPLU, COMPLU,
     &             VARDEP, LAGDEP, K24BLA, K24BLA, 6, VALPLU)
      CALL AGGLOM (CNFEDO, CNFEPI, CNDIDO, CNDIPI,
     &             CNFSDO, CNFSPI, CNDIDI, CNCINE, 8, SECMBR)
      CALL AGGLOM (DEPKM1, VITKM1, ACCKM1, VITPLU,
     &             ACCPLU, ROMKM1, ROMK  , DDEPLA, 8, POUGD )
      CALL AGGLOM (FONDEP, FONVIT, FONACC, MULTAP,
     &             PSIDEL, K24BLA, K24BLA, K24BLA, 5, MULTIA )


C
C -- LECTURE DES OPERANDES DE LA COMMANDE
C
C              12   345678
      K8BID = '&&'//NOMPRO
C
      CALL NMLECT (RESULT, MODELE, MATE  , CARELE, COMPOR,
     &             LISCHA, METHOD, SOLVEU, PARMET, PARCRI,
     &             CARCRI, MODEDE, SOLVDE,
     &             NBPASE, K8BID, INPSCO )
C
      IF (CMD(1:4).EQ.'DYNA') 
     &   CALL NDLECT(MODELE, MATE,  LISCHA, STADYN, LAMORT,
     &               ALPHA, DELTA,  V0VIT,  V0ACC,  A0VIT, 
     &               A0ACC, NBMODS, NMODAM, VALMOD, BASMOD,
     &               NREAVI, LIMPED, LONDE, CHONDP, NONDP,
     &               MULTIA)
           
      CALL DISMOI ('F','NOM_MAILLA',MODELE,'MODELE',IBID,MAILLA,IRET)


C -- MATRICE DE RIGIDITE ASSOCIEE AUX LAGRANGE

      CALL MEDIME (MODELE,LISCHA,MEDIRI)


C -- ETAT INITIAL ET CREATION DES STRUCTURES DE DONNEES

      CALL NMINIT(RESULT, MODELE, MODEDE, NUMEDD, MATE,
     &            SOLVDE, NUMEDE, COMPOR, CARELE, MEMASS,
     &            MEDIRI, LISCHA, DEPMOI, VALMOI, VITPLU,
     &            ACCPLU, MAPREC, SOLVEU, CARCRI, PARTPS,
     &            NURO,   REAROT, VARDEM, LAGDEM, CNDIDI,
     &            PILOTE, DEFICO, RESOCO, CRITNL, FONACT,
     &            CMD,    DEPENT, VITENT, ACCENT, NBMODS)
     
      INSTAM = DIINST(PARTPS, 0)
     

C -- PARAMETRES D'IMPRESSION

      CALL NMIMPR('INIT',' ',' ',0.D0,0)

C **********************************************************************
C     SAISIE DE LA LISTE DES INSTANTS D'OBSERVATION
C     DUPLICATION DE LA PARTIE DYARCH + PARTIE RECU_FONCTION
C **********************************************************************

      NBOBSE = 0
      NUINS0 = 1      
      LOBSER = .FALSE.
      CALL GETVID('INCREMENT','LIST_INST',1,1,1,LISINS,NLISIN)
      IF (NLISIN.NE.0) THEN
         CALL JEVEUO(LISINS(1:19)//'.VALE','L',JINST)
         CALL JELIRA(LISINS(1:19)//'.VALE','LONUTI',NOINS2,K8BID)
         EPSI = 1.D-4
         CALL RNLIR8(LISINS,INSTAM,EPSI,NUINS0)
         LISOBS = '&&OP0070.OBSERVATIO'
         CALL DYOBSE (NOINS2,LISINS,LISOBS,NBOBSE,RESULT)
         CALL JEVEUO ( LISOBS, 'L', JOBSE )
      ENDIF
      IF ( NBOBSE .NE. 0 ) THEN
         NUOBSE = 0
         NOMTAB = ' '
         CALL LTNOTB ( RESULT, 'OBSERVATION', NOMTAB )
         CALL JEVEUO ( '&&DYOBSE.MAILLA'   , 'L' , KKKMA )
         CALL JEVEUO ( '&&DYOBSE.NOM_CHAM' , 'L' , KCHAM )
         CALL JEVEUO ( '&&DYOBSE.NOM_CMP ' , 'L' , KCOMP )
         CALL JEVEUO ( '&&DYOBSE.NUME_CMP' , 'L' , KNUCM )
         CALL JEVEUO ( '&&DYOBSE.NOEUD'    , 'L' , KNOEU )
         CALL JEVEUO ( '&&DYOBSE.MAILLE'   , 'L' , KMAIL )
         CALL JEVEUO ( '&&DYOBSE.POINT'    , 'L' , KPOIN )
         MAILL2 = ZK8(KKKMA)
         CALL JELIRA('&&DYOBSE.NOM_CHAM','LONUTI',NBOBAR,K8BID)
      ENDIF

      CALL VTCREB(DEPPLU,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPDEL,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPOLD,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DDEPLA,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPGEO,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPLAM,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPKM1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(VITKM1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(ACCKM1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(ROMKM1,NUMEDD,'V','R',NEQ)
      CALL VTCREB(ROMK  ,NUMEDD,'V','R',NEQ)
      CALL VTCREB(FOINER,NUMEDD,'V','R',NEQ)
      CALL VTCREB(DEPENT,NUMEDD,'V','R',NEQ)
      CALL VTCREB(VITENT,NUMEDD,'V','R',NEQ)
      CALL VTCREB(ACCENT,NUMEDD,'V','R',NEQ)

CC -- VECTEUR POUR LA DYNAMIQUE A L INSTANT MOINS
CC    UTIL UNIQUEMENT AFIN D ARCHIVER LE DERNIER INSTANT CALCULE
CC    SI PLANTE POUR LE NOUVEAU PAS DE TEMPS DANS
CC    LES ITERATIONS DE NEWTON

      IF (CMD(1:4).EQ.'DYNA') THEN
       CALL VTCREB(DEPENM,NUMEDD,'V','R',NEQ)
       CALL VTCREB(VITENM,NUMEDD,'V','R',NEQ)
       CALL VTCREB(ACCENM,NUMEDD,'V','R',NEQ)
       CALL VTCREB(VITMOI,NUMEDD,'V','R',NEQ)
       CALL VTCREB(ACCMOI,NUMEDD,'V','R',NEQ)
       CALL COPISD('CHAMP_GD','V',VITPLU,VITMOI)
       CALL COPISD('CHAMP_GD','V',ACCPLU,ACCMOI)
       IF (NBMODS.NE.0) THEN
        CALL JEVEUO(DEPENM(1:19)//'.VALE','E',JDEPEN)
        CALL JEVEUO(VITENM(1:19)//'.VALE','E',JVITEN)
        CALL JEVEUO(ACCENM(1:19)//'.VALE','E',JACCEN)
        DO 15 I = 1,NEQ
         ZR(JDEPEN+I-1) = 0.D0
         ZR(JVITEN+I-1) = 0.D0
         ZR(JACCEN+I-1) = 0.D0
  15    CONTINUE
       ENDIF
      ENDIF
CC
            
      CALL DISMOI ('F','NOM_MAILLA',MODELE,'MODELE',IBID,MAILLA,IRET)

C
C -- CREATION DE CHAMPS NODAUX PARTAGES (PASSES EN SOUTERRAIN)
C      OBJECTIFS :
C         NE PAS FRAGMENTER LA MEMOIRE
C      REGLES :
C         CNZERO : LECTURE SEULE -> IL VAUT TJRS 0
C         CNTMPX : NE TRANSITENT PAS D'UNE ROUTINE A L'AUTRE

      CALL VTCREB ('&&CNPART.ZERO',NUMEDD,'V','R',NEQ)
      CALL VTCREB ('&&CNPART.CHP1',NUMEDD,'V','R',NEQ)
      CALL VTCREB ('&&CNPART.CHP2',NUMEDD,'V','R',NEQ)
      CALL VTCREB ('&&CNPART.CHP3',NUMEDD,'V','R',NEQ)
      CALL VTCREB ('&&CNPART.CHP4',NUMEDD,'V','R',NEQ)
      CALL VTCREB ('&&CNREPL.CHP1',NUMEDD,'V','R',NEQ)
      CALL VTCREB ('&&CNREPL.CHP2',NUMEDD,'V','R',NEQ)
      CALL VTCREB ('&&CNREPL.CHP3',NUMEDD,'V','R',NEQ)
      CALL VTCREB ('&&CNREPL.CHP4',NUMEDD,'V','R',NEQ)
      
C -- TRAITEMENT DES VARIABLES DE COMMANDE

C    VERIFICATION DE LA COHERENCE MATERIAU / VARIABLES PRESENTES
      CALL NMVCVE(MATE,LISCHA)

C    LECTURE DES VARIABLES DE COMMANDE DE L'INSTANT INITIAL
      CALL NMVCLE(MODELE,MATE,LISCHA,INSTAM,COMMOI)

C    LECTURE DES VALEURS DE REFERENCE DES VARIABLES DE COMMANDE
      CALL NMVCRE(MODELE,MATE,COMREF)

      INDRO = ISNNEM()
      IF (REAROT) CALL JEVEUO (NURO//'.NDRO','L',INDRO)


C -- INITIALISATION DES INDICATEURS DE CONVERGENCE DU CONTACT
      LICCVG(1) = 0
      LICCVG(2) = 0
      LICCVG(3) = 0
      LICCVG(4) = 0
      LICCVG(5) = 0

C **********************************************************************
C                   BOUCLE SUR LES PAS DE TEMPS
C **********************************************************************

      CALL UTTCPU (1,'INIT',4,TPS1)
      CALL UTTCPU (2,'INIT',4,TPS2)
      CALL UTTCPU (3,'INIT',4,TPS3)

      NUMINS = 1
C ======================================================================
C -- REPRISE DE LA BOUCLE EN TEMPS -------------------------------------
C ======================================================================
      PREMIE = .TRUE.
 200  CONTINUE
C
      CALL UTTCPU (1,'DEBUT',4,TPS1)
      INSTAP = DIINST(PARTPS, NUMINS)
      LOBSER = .FALSE.
      IF (NBOBSE.NE.0) THEN
         IF ((INSTAP+R8PREM( )).GE.ZR(JINST+NUINS0)) THEN
            NUINS0 = NUINS0 + 1
            IF (ZI(JOBSE-1+NUINS0).EQ.1) THEN
               LOBSER = .TRUE.
               NUOBSE = NUOBSE + 1            
            ENDIF
         ENDIF
      ENDIF
      
      CALL MISAZL(DEPMOI,DEFICO)      
      CALL NMIMPR('TITR',' ',' ',INSTAP,0)
      DO 10 I = 1 , 21
         CONV(I) = R8VIDE()
 10   CONTINUE
C ======================================================================
C --- INITIALISATION DU CONTACT POUR LE NOUVEAU PAS DE TEMPS -----------
C ======================================================================
      CALL INICNT(NUMINS, NEQ, DEFICO, FONACT, VECONT, LREAC,
     +                                                   AUTOC1, AUTOC2)
C ======================================================================
C        EVALUATION DES CHAMPS POUR LE NOUVEAU PAS DE TEMPS
C ======================================================================


C -- ESTIMATIONS INITIALES DES VARIABLES INTERNES ET DES MULTIPLICATEURS

      CALL COPISD('CHAMP_GD','V',VARMOI,VARPLU)
      IF (MODEDE.NE.' ') CALL COPISD('CHAMP_GD','V',VARDEM,VARDEP)
      IF (MODEDE.NE.' ') CALL COPISD('CHAMP_GD','V',LAGDEM,LAGDEP)


C -- INITIALISATION DES DEPLACEMENTS, VITESSES 

      CALL COPISD('CHAMP_GD','V',DEPMOI,DEPPLU)
      CALL JEVEUO (DEPDEL(1:19)//'.VALE','E',JDEPDE)
      CALL JEVEUO (DEPPLU(1:19)//'.VALE','E',JDEPP )
      CALL JEVEUO (DDEPLA(1:19)//'.VALE','E',JDDEPL)
      CALL INITIA (NEQ,REAROT,ZI(INDRO),ZR(JDEPP),ZR(JDEPDE))
      IF (CMD(1:4).EQ.'DYNA') 
     &    CALL DINIT (NEQ,V0VIT,V0ACC,A0VIT,A0ACC,ALPHA,DELTA,INSTAM,
     &                 INSTAP,COEVIT,COEACC,DEPPLU,POUGD,DEPENT,VITENT,
     &                 ACCENT,MULTIA,NBMODS)


C -- LECTURE DES VARIABLES DE COMMANDE A L'INSTANT COURANT
      CALL NMVCLE(MODELE(1:8), MATE  , LISCHA, INSTAP, COMPLU)

C    ESTIMATION D'UNE FORCE DE REFERENCE LIEE AUX VAR. COMMANDES EN T+
      CALL NMVCFO(MODELE(1:8), NUMEDD, MATE  , CARELE, COMREF,
     &            COMPLU, CNVCFO)

C    ADHERENCE DES POUTRES
      CALL NMVCEX('TEMP',COMPLU,TEMPLU)

C -- PARAMETRES DE L'INSTANT DE CALCUL (SUIVANT SCHEMA D'INTEGRATION)

      INST(1) = INSTAP
      INST(2) = INSTAP - INSTAM
      INST(3) = PARMET(30)

C -- CALCUL DES CHARGEMENTS EXTERIEURS

      CALL NMCHAR ('FIXE', MODELE, NUMEDD, MATE  , CARELE,
     &             K24BLA, LISCHA, K24BLA, INST  , DEPMOI,
     &             DEPDEL, LBID,   K24BID, K24BID, K24BID, 
     &             K24BID, K24BID, K24BID, IBID,   K24BID, 
     &             K24BID, IBID,   LBID,   LONDE,  NONDP,
     &             CHONDP, TEMPLU, SECMBR)


C -- CALCUL DU CONTACT FROTTEMENT AVEC LA METHODE CONTACT ECP

      MAESCL = DEFICO(1:16)//'.MAESCL'
      CALL JEEXIN(MAESCL,IECPCO)
      IF (IECPCO.EQ.0)  GOTO 110
      CALL DONNCO(MAILLA,OLDGEO,NEWGEO,DEPMOI,DEFICO,DEPGEO,MAXB)

C -- BOUCLE GEOMETRIQUE (CONTACT ECP)

      COMGEO = 0
      INCOCA = 0
   80 CONTINUE
      COMGEO = COMGEO + 1
C
      CALL MAPPAR(PREMIE,MAILLA,DEFICO,OLDGEO,NEWGEO,COMGEO,DEPGEO)

C -- BOUCLE SUR LES SEUILLS DE FROTTEMENT (CONTACT ECP)

      CSEUIL = 0
      IF (MAXB(4).EQ.1) GOTO 107
      CALL COPISD('CHAMP_GD','V',DEPMOI,DEPLAM)
 90   CONTINUE
      CSEUIL = CSEUIL + 1
      CALL NMIMPR('IMPR','BCL_SEUIL',' ',0.D0,CSEUIL)

C -- BOUCLE DE CONTRAINTES ACTIVES (CONTACT ECP)

 107  CONTINUE
      COBCA = 0
 103  CONTINUE
      COBCA = COBCA + 1
      CALL NMIMPR('IMPR','BCL_CTACT',' ',0.D0,COBCA)
      CALL CONLIG(NEQ,   JDEPDE, JDDEPL, DEPMOI, DEPPLU,
     &           DEFICO, MAILLA, LIGRCF, CARTCF, MODELE,
     &           LISCHA, SOLVEU, NUMEDD, DEPDEL, MCONEL,
     &           SCONEL)

  110 CONTINUE

C ======================================================================
C   PHASE DE PREDICTION : INTERPRETEE COMME UNE DIRECTION DE DESCENTE
C ======================================================================

C -- PREDICTION D'UNE DIRECTION DE DESCENTE

      CALL NMPRED(MODELE, NUMEDD, MATE,   CARELE,    COMREF,
     &            COMPOR, LISCHA, MEDIRI, METHOD,    SOLVEU,
     &            PARMET, CARCRI, PILOTE, PARTPS,    NUMINS,
     &            INST  , DEPOLD, VALMOI, POUGD ,    VALPLU,
     &            SECMBR, DDEPLA, ETA ,   LICCVG,    STADYN,
     &            LAMORT, VITPLU, ACCPLU, MASSE,     AMORT,
     &            CMD,    PREMIE, MEMASS, DEPENT,    VITENT,
     &            COEVIT, COEACC, VITKM1, NMODAM,    VALMOD,
     &            BASMOD, NREAVI, LIMPED, LONDE,     NONDP,
     &            CHONDP)

      PREMIE = .FALSE.

C ======================================================================
C              ITERATIONS DE LA METHODE DE NEWTON-RAPHSON
C ======================================================================

C -- REPRISE DE LA BOUCLE D'ITERATIONS DE NEWTON-RAPHSON

      ITERAT = 0
 300  CONTINUE
      CALL UTTCPU (2,'DEBUT',4,TPS2)

C -- TRAITEMENT EVENTUEL DU CONTACT ET/OU DU FROTTEMENT

      IF (IECPCO.GT.0) GOTO 67
      IF (FONACT(4)) THEN
         CALL NMCOFR (INSTAP, MAILLA, DEPPLU, DEPDEL, DDEPLA,
     &               DEFICO, RESOCO, CNCINE, ITERAT, SOLVEU,
     &               CONV ,  LICCVG, LREAC)
      END IF
67    CONTINUE

C -- MISE A JOUR DES DEPLACEMENTS

      CALL JEVEUO (DEPMOI(1:19)//'.VALE','L',JDEPM )
      CALL JEVEUO (DEPDEL(1:19)//'.VALE','E',JDEPDE)
      CALL JEVEUO (DEPPLU(1:19)//'.VALE','E',JDEPP )
      CALL JEVEUO (DDEPLA(1:19)//'.VALE','L',JDDEPL)

      IF (CMD(1:4).EQ.'STAT') THEN 
         CALL MAJOUR (NEQ,REAROT,ZI(INDRO),ZR(JDEPDE ),ZR(JDDEPL),1.D0,
     &                ZR(JDEPDE ))
         CALL MAJOUR (NEQ,REAROT,ZI(INDRO),ZR(JDEPP ),ZR(JDDEPL),1.D0,
     &                ZR(JDEPP ))
      ELSE
         CALL MAJDVA(NEQ,    REAROT, NURO,   COEVIT, COEACC,
     &               DEPMOI, DDEPLA, DEPDEL, DEPKM1, VITKM1, 
     &               ACCKM1, DEPPLU, VITPLU, ACCPLU, ROMKM1,
     &               ROMK)
      ENDIF


C -- CALCUL DES FORCES SUIVEUSES

      CALL NMCHAR ('SUIV', MODELE, NUMEDD, MATE  , CARELE,
     &             COMPOR, LISCHA, CARCRI, INST  , DEPMOI,
     &             DEPDEL, LAMORT, VITPLU, ACCPLU, K24BID, 
     &             K24BID, K24BID, K24BID, IBID,   K24BID, 
     &             K24BID, IBID,   LBID,   LBID,   IBID,
     &             K24BID, TEMPLU, SECMBR)
     
      IF (CMD(1:4).EQ.'DYNA') THEN
         CALL NMCHAR ('INER', MODELE, NUMEDD, MATE  , CARELE,
     &                COMPOR, LISCHA, CARCRI, INST  , DEPMOI,
     &                DEPDEL, LAMORT, VITPLU, ACCPLU, MASSE,
     &                AMORT,  VITPLU, VITENT, NMODAM, VALMOD,
     &                BASMOD, NREAVI, LIMPED, LONDE,  NONDP,
     &                CHONDP, TEMPLU, SECMBR)
      ENDIF


C -- CALCUL FORCES INTERIEURES ET REACTIONS D'APPUI SI NECESSAIRE

      CALL NMMATR('FORCES_INT', K24BLA, K24BLA, K24BLA, K24BLA,
     &                  K24BLA, K24BLA, K19BLA, K24BLA, ' '   ,
     &                  METHOD, K19BLA, PARMET, K24BLA, PARTPS,
     &                  NUMINS, ITERAT, K24BLA, K24BLA, K24BLA,
     &                  K24BLA, K19BLA, OPTION, K24BLA, STADYN,
     &                  PREMIE, CMD,    DEPENT, VITENT, LAMORT,
     &                  MEMASS, MASSE,  AMORT,  COEVIT, COEACC, 
     &                  IBID)

      IF (IECPCO.GT.0) CALL MMCMEM(MODELE,DEPMOI,DEPDEL,LIGRCF,CARTCF,
     &  MCONEL, SCONEL)

      IF (OPTION.EQ.'FULL_MECA' .OR. ITERAT.EQ.0 .OR.
     &    .NOT. FONACT(1) .OR. FONACT(3) .OR. FONACT(4))
     &    CALL NMFINT (MODELE, NUMEDD, MATE  , CARELE, COMREF,
     &                 COMPOR, LISCHA, CARCRI, POUGD , ITERAT,
     &                 MODEDE, NUMEDE, SOLVDE, PARMET, PARCRI,
     &                 VALMOI, DEPDEL, RESOCO, VALPLU, CNRESI,
     &                 CNDIRI, LICCVG(2), OPTION, CONV, STADYN,
     &                 DEPENT, VITENT)
 
C -- FORCES D'INERTIE POUR L'ESTIMATION DE LA CONVERGENCE

      CALL NDINER(MASSE,VITPLU,FOINER,CMD,INST,A0VIT)


C -- ESTIMATION DE LA CONVERGENCE ET SUIVI DU CALCUL (IMPRESSION)

C ======================================================================
      CALL NMFEXT (NUMEDD, ETA , SECMBR,RESOCO,DEFICO,CNFEXT)
C ======================================================================
      IF (IECPCO.GT.0)  LREAC(4) = .FALSE.
      CALL NMCONV (CNRESI, CNDIRI, CNFEXT, CNVCFO, PARCRI,
     &             ITERAT, ETA   , CONV  , LICCVG, ITEMAX,
     &             CONVER, ECHLDC, ECHEQU, ECHCON, FINPAS,
     &             CRITNL, NUMINS, FOINER, PARTPS, PARMET,
     &             NEQ, DEPDEL, AUTOC1, AUTOC2, VECONT, LREAC)
C ======================================================================
C --- ON SORT DU PAS DE TEMPS SI : -------------------------------------
C --- 1 - ON A CONVERGE ------------------------------------------------
C --- 2 - LE NOMBRE D'ITERATIONS MAXIMAL EST ATTEINT -------------------
C --- 3 - SI LA MATRICE EST SINGULIERE ---------------------------------
C --- 4 - S'IL Y A ECHEC DANS L'INTEGRATION DE LA LOI DE COMPORTEMENT --
C --- 5 - S'IL Y A ECHEC DANS LE TRAITEMENT DU CONTACT -----------------
C ======================================================================
      IF ( CONVER    .OR.
     +     ITEMAX    .OR.
     +     ECHEQU    .OR.
     +     ECHLDC    .OR.
     +     ECHCON(1) .OR. ECHCON(2) )  GOTO 500
C ======================================================================
C --- SINON ON CONTINUE LES ITERATIONS DE NEWTON -----------------------
C ======================================================================
C ======================================================================
C -- CALCUL DE LA DIRECTION DE DESCENTE --------------------------------
C ======================================================================
      ETAN = ETA
      CALL NMDESC(MODELE, NUMEDD, MATE  , CARELE, COMREF,
     &            COMPOR, LISCHA, MEDIRI, RESOCO, METHOD,
     &            SOLVEU, PARMET, CARCRI, PILOTE, PARTPS,
     &            NUMINS, ITERAT, DEPOLD, VALMOI, POUGD ,
     &            DEPDEL, VALPLU, SECMBR, CNRESI, DDEPLA,
     &            ETA   , LICCVG, DEFICO, STADYN, PREMIE,
     &            CMD,    DEPENT, VITENT, LAMORT, MEMASS, 
     &            MASSE,  AMORT,  COEVIT, COEACC)

C -- RECHERCHE LINEAIRE

      IF (FONACT(1)) THEN
        IF (FONACT(2)) THEN

C        AVEC PILOTAGE        

          CALL NMREPL (MODELE, NUMEDD, MATE  , CARELE, COMREF,
     &                 COMPOR, LISCHA, CNFEXT, PARMET, CARCRI,
     &                 MODEDE, NUMEDE, SOLVDE, PARCRI,
     &                 INST  , ITERAT, VALMOI, POUGD , DEPDEL,
     &                 RESOCO, DDEPLA, VALPLU, CNRESI, CNDIRI,
     &                 CONV  , LICCVG, REAROT, INDRO, SECMBR,
     &                 INSTAP-INSTAM , PILOTE, ETAN, ETA, DEPOLD)


        ELSE

C        SANS PILOTAGE
          CALL NMRECH (MODELE, NUMEDD, MATE  , CARELE, COMREF,
     &                 COMPOR, LISCHA, CNFEXT, PARMET, CARCRI,
     &                 MODEDE, NUMEDE, SOLVDE, PARCRI,
     &                 INST  , ITERAT, VALMOI, POUGD , DEPDEL,
     &                 RESOCO, DDEPLA, VALPLU, CNRESI, CNDIRI,
     &                 CONV  , LICCVG(2), REAROT, INDRO)
        END IF
      END IF

C -- TEMPS DISPONIBLE POUR FAIRE UNE NOUVELLE ITERATION DE NEWTON ?

      CALL UTTCPU (2,'FIN',4,TPS2)
      ITERAT = ITERAT + 1
      IF (2.D0*TPS2(4).LE.0.95D0*TPS2(1)-TPS3(4)) THEN
       GOTO 300
      ELSE

C -- ARRET PAR MANQUE DE TEMPS CPU - ARCHIVAGE DU PAS DE TEMPS PRECEDENT
       IF (NUMINS.NE.1) THEN
        CALL JEVEUO(PARTPS // '.DIAL','L',JARCH)
        IF (.NOT.ZL(JARCH+NUMINS-1)) THEN
          CALL NMARCH (RESULT, NUMINS-1, PARTPS, .TRUE., COMPOR,
     &                CRITNL, VALMOI, CNSINR, CMD ,VITMOI, ACCMOI,
     &                NBMODS,DEPENM,VITENM,ACCENM)
        ENDIF
       ENDIF
       CALL UTDEBM ('S',NOMPRO,'ARRET PAR MANQUE DE TEMPS CPU')
       CALL UTIMPI ('S',' AU NUMERO D''INSTANT : ',1,NUMINS)
       CALL UTIMPI ('S',' LORS DE L''ITERATION : ',1,ITERAT)
       CALL UTIMPR ('L',' TEMPS MOYEN PAR ITERATION : ',1,TPS2(4))
       CALL UTIMPR ('L',' TEMPS CPU RESTANT: ',1,TPS2(1))
       CALL UTFINM ()
      ENDIF

C ======================================================================
C                      FIN DES ITERATIONS DE NEWTON
C ======================================================================

 500  CONTINUE
      CALL UTTCPU (2,'FIN',4,TPS2)
C    EN L'ABSENCE DE CONVERGENCE ON CHERCHE A SUBDIVISER LE PAS DE TEMPS
      IF (.NOT. CONVER) THEN
        CALL DIDECO(PARTPS, NUMINS, IRET)
        IF (IRET.EQ.0)  THEN
         CALL UTTCPU (1,'FIN',4,TPS1)
         FINTPS = TPS1(4) .GT. 0.90D0*TPS1(1)
         GOTO 600
        END IF
      END IF

C    ECHEC DANS LE DEROULEMENT DU CALCUL
      IF (ECHLDC) CALL UTMESS('S',NOMPRO,'ARRET PAR ECHEC DE '
     &  // 'L''INTEGRATION DE LA LOI DE COMPORTEMENT')

      IF (ECHCON(1)) CALL UTMESS('S',NOMPRO,'ARRET PAR ECHEC DE '
     &  // 'TRAITEMENT DU CONTACT')

      IF (ECHCON(2)) CALL UTMESS('S',NOMPRO,'ARRET SUR MATRICE DE '
     &  // 'CONTACT SINGULIERE')

      IF (ITEMAX .AND. NINT(PARCRI(4)).NE.0 .AND. .NOT. CONVER)
     &   CALL UTMESS('A',NOMPRO,'ATTENTION, ARRET=NON DONC POURSUITE'
     &                // ' DU CALCUL SANS AVOIR EU CONVERGENCE')
      IF (ITEMAX .AND. NINT(PARCRI(4)).EQ.0 .AND. .NOT. CONVER)
     &    CALL UTMESS('S',NOMPRO,'ARRET : ABSENCE DE CONVERGENCE '
     &                // 'AVEC LE NOMBRE D''ITERATIONS REQUIS')

C -- FIN DE BOUCLE DE CONTRAINTES ACTIVES (CONTACT ECP)

      IF (IECPCO.EQ.0) GOTO 3333
      CALL MMMBCA(MAILLA,DEFICO,OLDGEO,DEPPLU,DEPMOI,INCOCA,NEQ)
      IF (COBCA.GE.MAXB(1)) THEN
        IF (MAXB(4).EQ.1) CALL UTMESS('F', NOMPRO,'ECHEC DANS LE
     &     TRAITEMENT DU CONTACT, AUGMENTER ITER_MAXI_CONT')
        GOTO 140
      END IF
      IF (INCOCA.EQ.0) GOTO 103
  140 CONTINUE

      CALL NMIMPR('IMPR','CNV_CTACT',' ',0.D0,COBCA)

C -- FIN BOUCLE SUR LES SEUILS (CONTACT ECP)

      IF (MAXB(4).EQ.1) GOTO 150
      CALL MMMCRI(DEPPLU,DEPLAM,CGENCE)
      CALL REACLM(MAILLA,DEPPLU,DEPMOI,NEWGEO,DEFICO)
      IF ( CGENCE .OR. (CSEUIL.GE.MAXB(2)) ) GOTO 150
      CALL COPISD('CHAMP_GD','V',DEPPLU,DEPLAM)
      GOTO 90
  150 CONTINUE

      IF (MAXB(4).NE.1) CALL NMIMPR('IMPR','CNV_SEUIL',' ',0.D0,CSEUIL)

C -- FIN BOUCLE GEOMETRIQUE (CONTACT ECP)

       CALL MMMCRI(DEPPLU,DEPGEO,RGENCE)
       IF ( RGENCE .OR. (COMGEO.EQ.(MAXB(3)+1)) ) GOTO 160
       CALL COPISD('CHAMP_GD','V',DEPPLU,DEPGEO)
       GOTO 80
160   CONTINUE

      CALL NMIMPR('IMPR','CNV_GEOME',' ',0.D0,COMGEO)

3333   CONTINUE

C     TEMPS DISPONIBLE
      CALL UTTCPU (1,'FIN',4,TPS1)
      FINTPS = TPS1(4) .GT. 0.90D0*TPS1(1)
      
C
C ======================================================================
C                       ARCHIVAGE ET ACTUALISATION
C ======================================================================

C -- ECRITURE DES NOEUDS EN CONTACT SI ON A CONVERGE

      IF (IECPCO.EQ.0 .AND. .NOT.ECHCON(1) .AND. .NOT.ECHCON(2)) THEN
        CALL RESUCO (NUMINS,INSTAP,DEFICO,RESOCO,DEPPLU,DEPDEL,DDEPLA,
     &               MAILLA,CNSINR,ITERAT)
      ENDIF
      
C -- SELON OU L'ON DOIT OBSERVER OU NON

      IF ( LOBSER ) THEN   
         CALL DYOBAR ( NOMTAB, MAILL2, NBOBAR, NUOBSE, INSTAP, 
     +                 ZK16(KCHAM), ZK8(KCOMP), ZI(KNUCM),
     +                 ZK8(KNOEU), ZK8(KMAIL), ZI(KPOIN), 
     +                 VALPLU, VITPLU, ACCPLU, NBMODS,
     +                 DEPENT,VITENT,ACCENT)
      ENDIF      

C -- ARCHIVAGE DES RESULTATS

      FINPAS = FINPAS .OR. DIDERN(PARTPS, NUMINS)
      
      CALL UTTCPU (3,'DEBUT',4,TPS3)
      CALL NMARCH (RESULT, NUMINS, PARTPS, FINTPS.OR.FINPAS, COMPOR,
     &             CRITNL, VALPLU, CNSINR, CMD ,VITPLU, ACCPLU,
     &             NBMODS,DEPENT,VITENT,ACCENT)

      CALL UTTCPU (3,'FIN',4,TPS3)

C -- DERNIER INSTANT DE CALCUL ?

      IF (FINPAS) GOTO 900


C -- REACTUALISATION

C    POUR UNE PREDICTION PAR EXTRAPOLATION DES INCREMENTS DU PAS D'AVANT
      CALL COPISD('CHAMP_GD','V',DEPDEL,DEPOLD)

C    ETAT AU DEBUT DU NOUVEAU PAS DE TEMPS

      CALL COPISD('CHAMP_GD','V',DEPPLU,DEPMOI)
      CALL COPISD('CHAMP_GD','V',SIGPLU,SIGMOI)
      CALL COPISD('CHAMP_GD','V',VARPLU,VARMOI)
      CALL COPISD('VARI_COM','V',COMPLU,COMMOI)
      IF (MODEDE.NE.' ') CALL COPISD('CHAMP_GD','V',VARDEP,VARDEM)
      IF (MODEDE.NE.' ') CALL COPISD('CHAMP_GD','V',LAGDEP,LAGDEM)
      
      IF (CMD(1:4).EQ.'DYNA') THEN
       CALL COPISD('CHAMP_GD','V',VITPLU,VITMOI)
       CALL COPISD('CHAMP_GD','V',ACCPLU,ACCMOI)
       IF (NBMODS.NE.0) THEN
        CALL COPISD('CHAMP_GD','V',DEPENT,DEPENM)
        CALL COPISD('CHAMP_GD','V',ACCENT,ACCENM)
        CALL COPISD('CHAMP_GD','V',VITENT,VITENM)
       ENDIF
      ENDIF            
      INSTAM = INSTAP
      NUMINS = NUMINS + 1

C -- TEMPS DISPONIBLE POUR FAIRE UN NOUVEAU PAS DE TEMPS ?

 600  CONTINUE

      IF (FINTPS) THEN
        CALL UTDEBM ('S',NOMPRO,'ARRET PAR MANQUE DE TEMPS CPU')
        CALL UTIMPI ('S',' AU NUMERO D''INSTANT : ',1,NUMINS)
        CALL UTIMPR ('L',' TEMPS MOYEN PAR INCREMENT DE CHARGE : ',1,
     &               TPS1(4))
        CALL UTIMPR ('L',' TEMPS CPU RESTANT : ',1,TPS1(1))
        CALL UTFINM ()
      END IF

      GOTO 200

C **********************************************************************
C                   FIN DE LA BOUCLE SUR LES PAS DE TEMPS
C **********************************************************************

 900  CONTINUE
      CALL JEDETC ('V','.CODI',20)
      CALL JEDETC ('V','&&',1)
      CALL JEDETC ('V','_',1)
      CALL JEDETC ('V',RESULT,1)
      CALL JEDETC ('V','.MATE_CODE',9)
      CALL JEDETR (DEFICO(1:16)//'.DDLCO')
      CALL JEDETR (DEFICO(1:16)//'.PDDLCO')
      
C -- DESTRUCTION DES OBJETS OBSERVATION

      IF ( NBOBSE .NE. 0 ) THEN
         CALL JEDETR ( '&&DYOBSE.MAILLA'   )
         CALL JEDETR ( '&&DYOBSE.NOM_CHAM' )
         CALL JEDETR ( '&&DYOBSE.NOM_CMP ' )
         CALL JEDETR ( '&&DYOBSE.NUME_CMP' )
         CALL JEDETR ( '&&DYOBSE.NOEUD'    )
         CALL JEDETR ( '&&DYOBSE.MAILLE'   )
         CALL JEDETR ( '&&DYOBSE.POINT'    )
      ENDIF

      CALL JEDEMA()
      END
