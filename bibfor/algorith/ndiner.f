      SUBROUTINE NDINER(NUMEDD,SDDYNA,VALINC,MEASSE,FOINER)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 11/06/2012   AUTEUR PELLET J.PELLET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT      NONE
      CHARACTER*24  NUMEDD
      CHARACTER*19  SDDYNA
      CHARACTER*19  MEASSE(*),VALINC(*)
      CHARACTER*19  FOINER
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME)
C
C CALCUL DE LA FORCE D'INERTIE DE REFERENCE
C
C ----------------------------------------------------------------------
C
C
C IN  NUMEDD : NUMEROTATION
C IN  SDDYNA : SD LIEE A LA DYNAMIQUE (CF NDLECT)
C IN  VALINC : VARIABLE CHAPEAU POUR INCREMENTS VARIABLES
C IN  MEASSE : VARIABLE CHAPEAU POUR NOM DES MATR_ASSE
C OUT FOINER : VECTEUR DES FORCES D'INERTIE POUR CONVERGENCE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      IFM,NIV
      INTEGER      JMASSE,JFOINE,JVITP,JVITM,JVECT
      INTEGER      NEQ,IRET,NDYNIN
      REAL*8       NDYNRE,COINER
      CHARACTER*8  K8BID
      LOGICAL      NDYNLO,LNEWMA,LTHETV,LTHETD,LKRENK,LDEPL,LVITE
      CHARACTER*19 VITMOI,VITPLU,VECTOR
      CHARACTER*19 MASSE
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> CALCUL DES FORCES D''INERTIE'
      ENDIF
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL NMCHEX(VALINC,'VALINC','VITMOI',VITMOI)
      CALL NMCHEX(VALINC,'VALINC','VITPLU',VITPLU)
      CALL NMCHEX(MEASSE,'MEASSE','MEMASS',MASSE )
C
C --- FONCTIONNALITES ACTIVEES
C
      LNEWMA = NDYNLO(SDDYNA,'FAMILLE_NEWMARK')
      LTHETV = NDYNLO(SDDYNA,'THETA_METHODE_VITE')
      LTHETD = NDYNLO(SDDYNA,'THETA_METHODE_DEPL')
      LKRENK = NDYNLO(SDDYNA,'KRENK')
      IF (LKRENK) THEN
        LDEPL = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.1
        LVITE = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.2
      ENDIF
C
C --- INITIALISATIONS
C
      VECTOR = '&&CNPART.CHP2'
      CALL VTZERO(FOINER)
      CALL VTZERO(VECTOR)
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ,K8BID,IRET)
C
C --- ACCES SD
C
      CALL JEVEUO(MASSE(1:19)//'.&INT' ,'L',JMASSE)
      CALL JEVEUO(FOINER(1:19)//'.VALE','E',JFOINE)
      CALL JEVEUO(VITPLU(1:19)//'.VALE','L',JVITP)
      CALL JEVEUO(VITMOI(1:19)//'.VALE','L',JVITM)
      CALL JEVEUO(VECTOR(1:19)//'.VALE','L',JVECT)

      COINER = NDYNRE(SDDYNA,'COEF_FORC_INER')
C
C --- CALCUL DU TERME D'INERTIE
C
      IF (LNEWMA) THEN
        CALL MRMULT('ZERO',JMASSE,ZR(JVITP),ZR(JFOINE),1,.TRUE.)
        CALL DSCAL(NEQ,COINER,ZR(JFOINE),1)
      ELSEIF (LTHETV.OR.(LKRENK.AND.LVITE).OR.LTHETD
     &  .OR.(LKRENK.AND.LDEPL)) THEN
        CALL VTAXPY(-1.D0,VITPLU,VECTOR)
        CALL VTAXPY(1.D0,VITMOI,VECTOR)
        CALL JEVEUO(VECTOR(1:19)//'.VALE','L',JVECT)
        CALL MRMULT('ZERO',JMASSE,ZR(JVECT),ZR(JFOINE),1,.TRUE.)
        CALL DSCAL(NEQ,COINER,ZR(JFOINE),1)
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        CALL NMDEBG('VECT',FOINER,IFM   )
      ENDIF
C
      CALL JEDEMA()
      END
