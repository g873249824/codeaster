      SUBROUTINE NMRESG(NUMEDD,SDDYNA,INSTAP,CNDONN,ACCSOL)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 13/06/2012   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      INCLUDE 'jeveux.h'
      REAL*8       INSTAP
      CHARACTER*19 CNDONN,SDDYNA
      CHARACTER*24 NUMEDD
      CHARACTER*19 ACCSOL
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME - CALCUL)
C
C RESOLUTION SUR DDLS GENERALISES
C      
C ----------------------------------------------------------------------
C 
C
C IN  INSTAP : INSTANT COURANT
C IN  NUMEDD : NUME_DDL
C IN  CNDONN : CHAM_NO POUR LE SECOND MEMBRE
C IN  SDDYNA : SD DEDIEE A LA DYNAMIQUE
C I/O ACCSOL : ACCELERATION CALCULEE
C
C
C
C 
      REAL*8       DDOT
      INTEGER      IRET,IER
      INTEGER      IFONC,IMODE,IMODE2,NDYNIN 
      INTEGER      NEQ,NBGENE,NBMODP
      INTEGER      J2MEMB,JACCP,JACCG 
      CHARACTER*8  K8BID
      LOGICAL      NDYNLO,LEXGE,LACCE
      CHARACTER*19 FMODAL,VALFON
      INTEGER      JFMODA,JVALFO  
      CHARACTER*19 DEPGEP,VITGEP,ACCGEP
      INTEGER      JDEPGP,JVITGP,JACCGP        
      CHARACTER*19 BASMOD,MASGEN,AMOGEN,RIGGEN
      INTEGER      JBASMO,JMASGE,JAMOGE,JRIGGE
      CHARACTER*19 FONGEN,FORGEN
      INTEGER      JFONGE,JFORGE 
      CHARACTER*19 ACCGCN
      INTEGER      JACCCN           
      INTEGER      IFM,NIV
C
C ----------------------------------------------------------------------
C      
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><RESO> RESOLUTION SUR BASE MODALE' 
      ENDIF          
C
C --- INITIALISATIONS
C
      CALL VTZERO(ACCSOL)
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ,K8BID,IRET) 
C
C --- FONCTIONNALITES ACTIVEES
C           
      LEXGE  = NDYNLO(SDDYNA,'EXPL_GENE') 
      LACCE  = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.3 
      IF (.NOT.LACCE) THEN
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- OBJETS PROJECTION MODALE
C   
      CALL NDYNKK(SDDYNA,'PRMO_DEPGEP',DEPGEP)
      CALL NDYNKK(SDDYNA,'PRMO_VITGEP',VITGEP)
      CALL NDYNKK(SDDYNA,'PRMO_ACCGEP',ACCGEP)
      CALL NDYNKK(SDDYNA,'PRMO_BASMOD',BASMOD)
      CALL NDYNKK(SDDYNA,'PRMO_MASGEN',MASGEN)
      CALL NDYNKK(SDDYNA,'PRMO_AMOGEN',AMOGEN)            
      CALL NDYNKK(SDDYNA,'PRMO_RIGGEN',RIGGEN)      
      CALL NDYNKK(SDDYNA,'PRMO_FONGEN',FONGEN)
      CALL NDYNKK(SDDYNA,'PRMO_FORGEN',FORGEN)
      CALL NDYNKK(SDDYNA,'PRMO_ACCGCN',ACCGCN)
      CALL NDYNKK(SDDYNA,'PRMO_VALFON',VALFON)
      CALL NDYNKK(SDDYNA,'PRMO_FMODAL',FMODAL)                     
      CALL JEVEUO(MASGEN,'L',JMASGE)
      CALL JEVEUO(BASMOD,'L',JBASMO)
      CALL JEVEUO(FMODAL,'E',JFMODA)          
C
C --- NOMBRE DE MODES
C
      NBMODP = NDYNIN(SDDYNA,'NBRE_MODE_PROJ')
C
C --- VECTEUR SECOND MEMBRE
C
      CALL JEVEUO(CNDONN(1:19)//'.VALE','E',J2MEMB) 
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><RESO> -> SECOND MEMBRE DONNE'
        CALL NMDEBG('VECT',CNDONN,6)
      ENDIF          
C
C --- RECUPERATION VECTEUR DES FORCES GENERALISEES
C          
      IF (LEXGE) THEN   
        CALL JEVEUO(RIGGEN,'L',JRIGGE)          
        CALL JEVEUO(AMOGEN,'L',JAMOGE)
        CALL JEVEUO(VITGEP,'L',JVITGP)
        CALL JEVEUO(DEPGEP,'L',JDEPGP)
        CALL JEVEUO(ACCGEP,'E',JACCGP)           
C
C --- FORCES GENERALISEES ?
C
        NBGENE = NDYNIN(SDDYNA,'NBRE_EXCIT_GENE') 
C
C --- EVALUATION DES FONCTIONS MULTIPLICATRICES
C
        IF (NBGENE.GT.0) THEN
          CALL JEVEUO(FONGEN,'L',JFONGE)
          CALL JEVEUO(FORGEN,'L',JFORGE)
          CALL JEVEUO(VALFON,'E',JVALFO) 
          DO 14 IFONC=1,NBGENE
            CALL FOINTE('F ',ZK24(JFONGE+IFONC-1)(1:8),1,'INST',INSTAP,
     &                       ZR(JVALFO+IFONC-1),IER)
 14       CONTINUE                        
        ENDIF
C
C --- CALCUL DES FORCES MODALES
C        
        DO 11 IMODE = 1,NBMODP
          ZR(JFMODA+IMODE-1) = DDOT(NEQ,ZR(JBASMO+(IMODE-1)*NEQ),1,
     &                              ZR(J2MEMB),1)
          DO 12 IMODE2 = 1,NBMODP
            ZR(JFMODA+IMODE-1) = ZR(JFMODA+IMODE-1)  
     &        - ZR(JRIGGE+(IMODE2-1)*NBMODP+IMODE-1)*ZR(JDEPGP+IMODE2-1)
     &        - ZR(JAMOGE+(IMODE2-1)*NBMODP+IMODE-1)*ZR(JVITGP+IMODE2-1)
 12       CONTINUE
          DO 15 IFONC = 1,NBGENE
            ZR(JFMODA+IMODE-1) = ZR(JFMODA+IMODE-1)  
     &        + ZR(JFORGE+(IFONC-1)*NBMODP+IMODE-1)*ZR(JVALFO+IFONC-1)
 15       CONTINUE
 11     CONTINUE
C
C --- CALCUL DES ACCELERATIONS GENERALISEES
C        
        DO 71 IMODE = 1,NBMODP
          ZR(JACCGP+IMODE-1) = ZR(JFMODA+IMODE-1)/ZR(JMASGE+IMODE-1) 
 71     CONTINUE 
C
        JACCG  = JACCGP
C        
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE><RESO> -> SOLUTION (MODALE):'
          CALL NMDEBG(' ',ACCGEP,6)
        ENDIF          
      ELSE
        CALL JEVEUO(ACCGCN,'E',JACCCN)
C
C --- CALCUL DES FORCES GENERALISEES
C                 
        DO 13 IMODE=1,NBMODP
          ZR(JFMODA+IMODE-1) = DDOT(NEQ,ZR(JBASMO+(IMODE-1)*NEQ),1,
     &                          ZR(J2MEMB),1)
 13     CONTINUE
C
C --- CALCUL DES ACCELERATIONS GENERALISEES
C                     
        DO 74 IMODE=1,NBMODP
          ZR(JACCCN+IMODE-1) = ZR(JFMODA+IMODE-1)/ZR(JMASGE+IMODE-1) 
 74     CONTINUE 
C
        JACCG  = JACCCN
C        
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE><RESO> -> SOLUTION (MODALE):'
          CALL NMDEBG(' ',ACCGCN,6)
        ENDIF         
      ENDIF
C
C --- CALCUL DES ACCELERATIONS PHYSIQUES
C   
      CALL JEVEUO(ACCSOL(1:19)//'.VALE','E',JACCP)
      CALL MDGEPH(NEQ,NBMODP,ZR(JBASMO),ZR(JACCG),ZR(JACCP))  
C 
C --- AFFICHAGE DES SOLUTIONS
C     
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><RESO> -> SOLUTION (PHYSIQUE):'
        CALL NMDEBG('VECT',ACCSOL,6)
      ENDIF          
C
      CALL JEDEMA()
      END
