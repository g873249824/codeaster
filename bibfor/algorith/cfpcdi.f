      SUBROUTINE CFPCDI(RESOCO,NEQ   ,NBLIAI,TOLE  ,EPSIPC,
     &                  MU    ,APCOEF,APDDL ,APPOIN,INLIAC,
     &                  MATASS,SOLVEU,PREMAX,SSGRAD,SSGRPR)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 12/12/2011   AUTEUR DESOZA T.DESOZA 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C
      IMPLICIT     NONE
      CHARACTER*24 RESOCO
      INTEGER      NEQ,NBLIAI,APDDL(*),APPOIN(*),INLIAC(*),PREMAX
      REAL*8       APCOEF(*),SSGRAD(*),SSGRPR(*),MU(*)
      REAL*8       TOLE,EPSIPC
      CHARACTER*19 MATASS,SOLVEU
C
C ----------------------------------------------------------------------
C
C ROUTINE CONTACT (RESOLUTION - GCP)
C
C PRECONDITIONNEMENT DE L'ALGORITHME DU GRADIENT CONJUGUE PROJETE
C
C ----------------------------------------------------------------------
C
C RESOLUTION D'UN PROBLEME ANNEXE A DEPLACEMENT IMPOSE SUR LES NOEUDS
C EFFECTIVEMENT EN CONTACT.
C
C IN  RESOCO : SD DE TRAITEMENT NUMERIQUE DU CONTACT
C IN  NEQ    : NOMBRE D'EQUATIONS DU SYSTEME
C IN  NBLIAI : NOMBRE DE LIAISONS DE CONTACT
C IN  TOLE   : TOLERANCE DE DETECTION DE MU NUL
C IN  EPSIPC : TOLERANCE SOLVEUR ITERATIF
C IN  MATASS : NOM DE LA MATRICE DU PREMIER MEMBRE ASSEMBLEE
C IN  PREMAX : NOMBRE MAXI D'ITERATIONS DU SOLVEUR ITERATIF
C IN  SOLVEU : SD SOLVEUR
C IN  SSGRAD : SOUS-GRADIENT NON-PRECONDITIONNE
C OUT SSGRPR : SOUS-GRADIENT PRECONDITIONNE
C
C --------------- DEBUT DECLARATIONS NORMALISEES JEVEUX ---------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      IFM,NIV
      REAL*8       NUMER,DENOM,CONVER,DDOT,ALPHA
      REAL*8       NUMERP,NUMERM,BETA
      REAL*8       CONVM ,COEF  ,R8BID
      INTEGER      ILIAC,ILIAI,JDECAL,NBDDL,ITERAT,NBLIAC
      CHARACTER*24 CNCIN0,SECMBR, DDELT,PCRESI,PCDIRE,PCDEPL
      INTEGER             JSECMB,JDDELT,JPCRES,JPCDIR,JPCDEP
      CHARACTER*19 K19BID
      COMPLEX*16   C16BID
      PARAMETER    (COEF=1.D-2)
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('CONTACT',IFM,NIV)
C
C --- ACCES AUX CHAMPS DE TRAVAIL
C
      CNCIN0 = RESOCO(1:14)//'.CIN0'
      SECMBR = RESOCO(1:14)//'.SECM'
      DDELT  = RESOCO(1:14)//'.DDEL'
      CALL JEVEUO(SECMBR(1:19)//'.VALE','E',JSECMB)
      CALL JEVEUO( DDELT(1:19)//'.VALE','E',JDDELT)
      PCRESI = RESOCO(1:14)//'.PCRS'
      PCDIRE = RESOCO(1:14)//'.PCDR'
      PCDEPL = RESOCO(1:14)//'.PCUU'
      CALL JEVEUO(PCRESI,'E',JPCRES)
      CALL JEVEUO(PCDIRE,'E',JPCDIR)
      CALL JEVEUO(PCDEPL,'E',JPCDEP)
C
C --- INITIALISATION DE DELTA
C
      CALL R8INIR(NEQ   ,0.D0,ZR(JDDELT),1)
C
C --- COMPTAGE DU NOMBRE DE LIAISONS REELLEMENT ACTIVES
C
      NBLIAC = 0
      DO 10 ILIAI = 1,NBLIAI
        IF ((MU(ILIAI).GT.TOLE) .OR. (SSGRAD(ILIAI).GT.EPSIPC)) THEN
          NBLIAC = NBLIAC + 1
          INLIAC(NBLIAC) = ILIAI
        END IF
   10 CONTINUE
C
C --- SI AUCUNE LIAISON ACTIVE ON SORT CAR
C --- LE PRECONDITIONNEUR EST INUTILE
C
      IF (NBLIAC.EQ.0) THEN
        CALL DCOPY(NBLIAI,SSGRAD,1,SSGRPR,1)
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<CONTACT><CALC> PAS DE '//
     &                  'PRECONDITIONNEMENT (PAS DE LIAISONS ACTIVES)'
        ENDIF
        GOTO 120
      ENDIF
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*)    '<CONTACT><CALC> PRECONDITIONNEUR DIRICHLET'
        WRITE (IFM,9010) NBLIAC,EPSIPC
      ENDIF
C
C --- NOMBRE D'ITERATIONS MAX
C
      IF (PREMAX.EQ.0) PREMAX = 2*NBLIAC
C
C --- MISE A ZERO DES VECTEURS DE TRAVAIL
C
      CALL R8INIR(NEQ,0.D0,ZR(JPCDEP),1)
      CALL R8INIR(NBLIAI,0.D0,ZR(JPCRES),1)
      ITERAT = 1
C
C ======================================================================
C =========================== BOUCLE PRINCIPALE ========================
C ======================================================================
C
   20 CONTINUE
C
C --- NOUVELLE VALEUR DU GRADIENT
C
      DO 30 ILIAC = 1,NBLIAC
        ILIAI  = INLIAC(ILIAC)
        JDECAL = APPOIN(ILIAI)
        NBDDL  = APPOIN(ILIAI+1) - APPOIN(ILIAI)
C       RESIDU=A.UU-SSGRAD(ACT)
        CALL CALADU(NEQ,NBDDL,APCOEF(1+JDECAL),APDDL(1+JDECAL),
     &              ZR(JPCDEP),ZR(JPCRES-1+ILIAC))
        ZR(JPCRES-1+ILIAC) = ZR(JPCRES-1+ILIAC) - SSGRAD(ILIAI)
   30 CONTINUE
C
C --- TEST DE CONVERGENCE
C
      CONVER = -1.D0
      DO 40 ILIAC = 1,NBLIAC
        CONVER = MAX(CONVER,ABS(ZR(JPCRES-1+ILIAC)))
   40 CONTINUE
      IF (NIV.GE.2) THEN
        IF (ITERAT.EQ.1) CONVM=10*CONVER/COEF
        IF (CONVER.LT.(COEF*CONVM)) THEN
          WRITE (IFM,9000) ITERAT,CONVER
          CONVM=CONVER
        END IF
      END IF
C
C --- ON A CONVERGE
C
      IF (CONVER.LT.EPSIPC) THEN
        IF (NIV.GE.2) THEN
          WRITE (IFM,9020) ITERAT,CONVER
        END IF
        GO TO 90
      END IF
C
C --- NOUVELLE DIRECTION DE RECHERCHE
C --- DIRECH=RESIDU+BETA*DIRECH
C
      IF (ITERAT.EQ.1) THEN
        NUMERP = DDOT(NBLIAC,ZR(JPCRES),1,ZR(JPCRES),1)
        CALL DCOPY(NBLIAC,ZR(JPCRES),1,ZR(JPCDIR),1)
      ELSE
        NUMERM = NUMERP
        NUMERP = DDOT(NBLIAC,ZR(JPCRES),1,ZR(JPCRES),1)
        BETA = NUMERP/NUMERM
        CALL DSCAL(NBLIAC,BETA,ZR(JPCDIR),1)
        CALL DAXPY(NBLIAC,1.D0,ZR(JPCRES),1,ZR(JPCDIR),1)
      ENDIF
C
C --- CALCUL DU SECOND MEMBRE
C --- AT.DIRECH
C
      CALL R8INIR(NEQ,0.D0,ZR(JSECMB),1)
      DO 50 ILIAC = 1,NBLIAC
        ILIAI  = INLIAC(ILIAC)
        JDECAL = APPOIN(ILIAI)
        NBDDL  = APPOIN(ILIAI+1) - APPOIN(ILIAI)
        CALL CALATM(NEQ,NBDDL,ZR(JPCDIR-1+ILIAC),APCOEF(1+JDECAL),
     &              APDDL(1+JDECAL),ZR(JSECMB))
   50 CONTINUE
C
C --- RESOLUTION
C --- DU=K-1*(AT.DIRECH)
C
      CALL RESOUD(MATASS,K19BID,SECMBR,SOLVEU,CNCIN0,
     &            'V'   ,DDELT ,K19BID,0     ,R8BID ,
     &            C16BID,.TRUE.)
      CALL JEVEUO(DDELT(1:19)//'.VALE','E',JDDELT)
C
C --- PAS D'AVANCEMENT
C
      NUMER = DDOT(NBLIAC,ZR(JPCRES),1,ZR(JPCRES),1)
      DENOM = DDOT(NEQ,ZR(JDDELT),1,ZR(JSECMB),1)
      ALPHA = NUMER/DENOM

      IF (ALPHA.LT.0.D0) CALL U2MESS('F','CONTACT_7')
C
C --- ACTUALISATION DU SOUS GRADIENT ET DU DEPLACEMENT
C
      DO 70 ILIAC = 1,NBLIAC
        ILIAI = INLIAC(ILIAC)
        SSGRPR(ILIAI) = SSGRPR(ILIAI) + ALPHA*ZR(JPCDIR-1+ILIAC)
   70 CONTINUE

      CALL DAXPY(NEQ,-ALPHA,ZR(JDDELT),1,ZR(JPCDEP),1)


C --- ON A ATTEINT LE NOMBRE D'ITERATION MAXIMAL
      IF (ITERAT.GE.PREMAX) GO TO 80


C --- ON N A PAS CONVERGE MAIS IL RESTE DES ITERATIONS A FAIRE
      ITERAT = ITERAT + 1
      GO TO 20

   80 CONTINUE

C     ON A DEPASSE LE NOMBRE D'ITERATIONS MAX
      IF (NIV.GE.2) THEN
        WRITE (IFM,9000) ITERAT,CONVER
        CALL U2MESI('I','CONTACT_3',1,PREMAX)
      END IF


   90 CONTINUE

C ======================================================================
C ============================= ON A CONVERGE ==========================
C ======================================================================

C     LES CRITERES DE CONVERGENCE SONT DECALES ENTRE L'APPELANT
C     ET CETTE ROUTINE. DU COUP, ON PEUT ENTRER ICI ET S'APERCEVOIR
C     QUE L'ON A RIEN A FAIRE. DANS CE CAS, ON RECOPIE.
      IF (ITERAT.EQ.1) THEN
        DO 100 ILIAC = 1,NBLIAC
          ILIAI = INLIAC(ILIAC)
          SSGRPR(ILIAI) = ZR(JPCRES-1+ILIAC)
  100   CONTINUE
      END IF

C     ON REPROJETE LE SOUS-GRADIENT PRECONDITIONNE POUR
C     ASSURER LA POSITIVITE DES MULTIPLICATEURS
      CALL DSCAL(NBLIAI,-1.D0,SSGRPR,1)
      DO 110 ILIAI = 1,NBLIAI
        IF (MU(ILIAI).LE.TOLE) THEN
          SSGRPR(ILIAI) = MAX(SSGRPR(ILIAI),0.D0)
        END IF
  110 CONTINUE


  120 CONTINUE

      CALL JEDEMA()

 9000 FORMAT (' <CONTACT><CALC> PRECONDITIONNEUR : ITERATION =',I6,
     &        ' RESIDU =',1PE12.5)
 9010 FORMAT (' <CONTACT><CALC> PRECONDITIONNEUR : ',I6,
     &        ' LIAISON ACTIVES, CRITERE DE CONVERGENCE =',1PE12.5)
 9020 FORMAT (' <CONTACT><CALC> PRECONDITIONNEUR : ITERATION =',I6,
     &        ' RESIDU =',1PE12.5,' => CONVERGENCE')
      END
