      SUBROUTINE  DELOCA(NDIM, OPTION, TYPMOD, NPG, IPOIDS, NNO2,
     &                 IVF2, IDFDE2, DFDI2,
     &                 NNO1, VFF1, DFDE1,DFDN1, DFDK1, DFDI1, GEOMI,
     &                 IMATE, COMPOR, CARCRI, RLAG, TREF, TM, TP,
     &                 DEPLM, SIGM, DDEPL, LGPG, VARIM, VARDEP, LAGRP,
     &                 PROJEC, RESIDU, GRAD, ENEREL, VARIP)

C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 29/04/2004   AUTEUR JMBHH01 J.M.PROIX 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
C TOLE CRP_21
C RESPONSABLE PBADEL P.BADEL

      IMPLICIT NONE

      CHARACTER*8  TYPMOD
      CHARACTER*16 OPTION, COMPOR(3)
      INTEGER      NDIM, NNO1, NNO2, NPG, IMATE, LGPG
      INTEGER      IPOIDS, IVF2, IDFDE2
      REAL*8       VFF1(NNO1,NPG)
      REAL*8       DFDI1(NNO1,NDIM), DFDI2(NNO2, NDIM)
      REAL*8       GEOMI(NDIM,NNO2), CARCRI(*)
      REAL*8       RLAG, RESIDU(NNO1)
      REAL*8       TREF, TM(NNO2), TP(NNO2)
      REAL*8       DEPLM(NDIM,NNO2), SIGM(2*NDIM,NPG), DDEPL(NDIM,NNO2)
      REAL*8       VARIM(LGPG,NPG), VARDEP(NNO1), LAGRP(0:NDIM,NPG)
      REAL*8       PROJEC(0:*),DFDE1(*), DFDN1(*), DFDK1(*)
      REAL*8       VARIP(LGPG,NPG), GRAD(0:NDIM,NPG), ENEREL

C.......................................................................
C                     OPTION DECO_LOCA (TE0120)
C    RESOLUTION DU PROBLEME LOCAL POUR LES LOIS DELOCALISEES
C.......................................................................
C IN  NDIM    DIMENSION DE L'ESPACE
C IN  OPTION  OPTION DE CALCUL  (DECO_LOCA)
C IN  TYPMOD  TYPE DE MODELISATION
C IN  NNO     NOMBRE DE NOEUDS DE L'ELEMENT (P1 ET P2)
C IN  NPG     NOMBRE DE POINTS DE GAUSS
C IN  POIDSG  POIDS DES POINTS DE GAUSS
C IN  VFF     VALEUR  DES FONCTIONS DE FORME (P1 ET P2)
C IN  DFDE    DERIVEE DES FONCTIONS DE FORME (P1 ET P2)
C IN  DFDN    DERIVEE DES FONCTIONS DE FORME (P1 ET P2)
C IN  DFDK    DERIVEE DES FONCTIONS DE FORME (P1 ET P2)
C OUT DFDI    ESPACE MEMOIRE POUR DERIVEES DES FONCTIONS DE FORME
C IN  GEOMI   COORDONEES DES NOEUDS (CONFIGURATION DE REFERENCE)
C IN  IMATE   MATERIAU CODE
C IN  COMPOR  NATURE DU COMPORTEMENT
C IN  CARCRI  CRITERE DE CONVERGENCE
C IN  RLAG    COEFFICIENT DE PENALISATION DU LAGRANGIEN AUGMENTE
C IN  TREF    TEMPERATURE DE REFERENCE
C IN  TM      TEMPERATURE EN T-
C IN  TP      TEMPERATURE EN T+
C IN  DEPLM   DEPLACEMENT EN T-
C IN  SIGM    CONTRAINTES EN T-
C IN  DDEPL   INCREMENT DE DEPLACEMENT
C IN  LCGP    NOMBRE DE COMPOSANTES DES VARIABLES INTERNES
C IN  VARIM   VARIABLES INTERNES EN T-
C IN  VARDEP  VARIABLE DELOCALISEE NODALE EN T+
C IN  LAGRP   MULTIPLICATEURS DE LAGRANGE (/LC SUR GRAD)
C OUT PROJEC  PROJECTEUR    (CALCUL SI TERME(2) = .TRUE. )
C                STOCKAGE PAR LIGNES PARTIE TRIANGULAIRE INFERIEURE
C OUT RESIDU  RESIDU LOCAL
C OUT GRAD    - GRADIENT DE L'ENERGIE (=-G=-(BA-VARLOP), /LC SUR GRAD)
C               SIGNE OPPOSE AFIN DE MINIMISER ET NON MAXIMISER
C OUT ENEREL  VALEUR DE L'ENERGIE (OPPOSE DU LAGRANGIEN AUGMENTE) SUR
C              L'ELEMENT
C VAR VARIP   PARTIE NON LOCALE DES VARIABLES INTERNES EN T+
C              IN  ESTIMATION (ITERATION PRECEDENTE)
C              OUT CALCULEES
C......................................................................

      LOGICAL AXI, TRIDIM
      INTEGER KPG, N, M, KK, L, I, K, NDIMSI
      REAL*8  EPSM(9), DEPS(9), R, T1, POIDS,SIGMA(6),RAC2
      REAL*8  LISSEP(0:3), TEMPM, TEMPP
      REAL*8  GEOMM(3*27), RES(0:3)
      REAL*8  EPSBID(9), DRESDA(0:3,0:3)
      REAL*8  PONDER(0:3), BAMAL(0:3), ENECMP
      REAL*8  LB, DI(0:3), LAGRDI(0:3), DVIDA(0:3, 0:3),ENELOC
      REAL*8  IDEN(0:3, 0:3), NRJ
      CHARACTER*2 K2BID
C
C --------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ---------------------
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C --------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ---------------------
      DATA IDEN /1.D0, 0.D0, 0.D0, 0.D0,
     &           0.D0, 1.D0, 0.D0, 0.D0,
     &           0.D0, 0.D0, 1.D0, 0.D0,
     &           0.D0, 0.D0, 0.D0, 1.D0 /

C -- INITIALISATION
      IF (NNO2*NDIM .GT. 27*3) CALL UTMESS('F','DELOCA',
     &     'MAUVAIS DIMENSIONNEMENT DE GEOMI')

      RAC2   = SQRT(2.D0)
      AXI    = TYPMOD(1:4).EQ.'AXIS'
      TRIDIM = TYPMOD(1:2).EQ.'3D'
      NDIMSI = 2*NDIM
      CALL R8INIR(NNO1,0.D0,RESIDU,1)
      CALL R8INIR((NNO1*(NNO1+1))/2,0.D0,PROJEC,1)
      ENEREL = 0.D0


C -- CALCUL POUR CHAQUE POINT DE GAUSS

      DO 10 KPG=1,NPG


C -- CALCUL DES DEFORMATIONS

        IF (COMPOR(3)(1:10).EQ.'SIMO_MIEHE') THEN

C        CALCUL DE F POUR DT  =>  DF, RM  ET DFDIM
          CALL R8COPY(NDIM*NNO2,GEOMI,1,GEOMM,1)
          CALL R8AXPY(NDIM*NNO2,1.D0,DEPLM,1,GEOMM,1)
          CALL NMGEOM(NDIM,NNO2,AXI,.TRUE.,GEOMM,KPG,IPOIDS,
     &                IVF2,IDFDE2,DDEPL,POIDS,
     &                DFDI2,DEPS,EPSBID,R)

C        CALCUL DE F EN T-  =>  FM
          CALL NMGEOM(NDIM,NNO2,AXI,.TRUE.,GEOMI,KPG,IPOIDS,
     &                IVF2,IDFDE2,DEPLM,POIDS,
     &                DFDI2,EPSM,EPSBID,R)

        ELSE

          CALL NMGEOM(NDIM,NNO2,AXI,.FALSE.,GEOMI,KPG,IPOIDS,
     &                IVF2,IDFDE2,DDEPL,POIDS,
     &                DFDI2,EPSBID,DEPS,R)

          CALL NMGEOM(NDIM,NNO2,AXI,.FALSE.,GEOMI,KPG,IPOIDS,
     &                IVF2,IDFDE2,DEPLM,POIDS,
     &                DFDI2,EPSBID,EPSM,R)

        END IF


C -- DERIVEE DES FONCTIONS DE FORME P1 PAR RAPPORT A GEOMETRIE P2

      CALL EFDF21(NDIM, AXI, GEOMI, KPG, IPOIDS,
     &                  NNO2, IVF2, IDFDE2,
     &                  NNO1, DFDE1, DFDN1, DFDK1,
     &                  POIDS, DFDI1, R)


C -- TEMPERATURE ET VARIABLE DELOCALISEE AU POINT DE GAUSS

        TEMPM = 0.D0
        TEMPP = 0.D0
        CALL R8INIR(4,0.D0,LISSEP,1)

        DO 20 N=1,NNO2
          TEMPM = TEMPM + TM(N)*ZR(IVF2+N+(KPG-1)*NNO2-1)
          TEMPP = TEMPP + TP(N)*ZR(IVF2+N+(KPG-1)*NNO2-1)
 20     CONTINUE

        DO 25 N = 1, NNO1
          LISSEP(0) = LISSEP(0) + VARDEP(N)*VFF1(N,KPG)
C     &                ZR(IVF1+N+(KPG-1)*NNO2-1)
          LISSEP(1) = LISSEP(1) + VARDEP(N)*DFDI1(N,1)
          LISSEP(2) = LISSEP(2) + VARDEP(N)*DFDI1(N,2)
 25     CONTINUE

        IF (TRIDIM) THEN
          DO 30 N = 1,NNO1
            LISSEP(3) = LISSEP(3) + VARDEP(N)*DFDI1(N,3)
 30       CONTINUE
        END IF


C -- MULTIPLICATEURS DE LAGRANGE PHYSIQUES

        CALL RCVALA(IMATE,' ', 'NON_LOCAL', 0, ' ',0.D0,1,'LONG_CAR',
     &            LB, K2BID, 'F ')
        DI(0) = 1.D0
        DI(1) = LB
        DI(2) = LB
        DI(3) = LB
        DO 32 L = 0, NDIM
          LAGRDI(L) = LAGRP(L,KPG) * DI(L) / POIDS
 32     CONTINUE


C -- CONTRAINTES AVEC RACINE(2) HORS DIAGONALE

        DO 34 L = 1, 3
          SIGMA(L) = SIGM(L,KPG)
 34     CONTINUE
        DO 35 L = 4, NDIMSI
          SIGMA(L) = RAC2*SIGM(L,KPG)
 35     CONTINUE
     

C -- LOI DE COMPORTEMENT : PARTIE NON LOCALE

        CALL EDCOMP (NDIM, TYPMOD, OPTION, COMPOR, IMATE, CARCRI,
     &               TREF, TEMPM, TEMPP, EPSM, DEPS, SIGMA,
     &               VARIM(1,KPG), RLAG, LISSEP, LAGRDI,
     &               PONDER, DVIDA, ENELOC, VARIP(1,KPG))


C -- CALCUL DU RESIDU LOCAL ET DE LA MATRICE TANGENTE LOCALE

        DO 37 L = 0, NDIM
          BAMAL(L) = LISSEP(L) - VARIP(1+L, KPG)
          RES(L) = RLAG * PONDER(L) * BAMAL(L) + LAGRDI(L)
 37     CONTINUE

        DO 38 I = 0,NDIM
          DO 39 K = 0, NDIM
            DRESDA(I,K) = RLAG*PONDER(I)*(IDEN(I,K)-DVIDA(I,K))
 39       CONTINUE
 38     CONTINUE


C - TEST DEBUG
           
      NRJ = 0
      DO 600 K = 0, NDIM
        DO 610 L = 0, NDIM
          NRJ = NRJ + RES(K)*DRESDA(K,L)*RES(L)
 610    CONTINUE
 600  CONTINUE
      IF (NRJ.LT.0) THEN
        CALL UTMESS('F','DELOCA','DVP : ENERGIE NON CONVEXE')
      END IF


C -- CALCUL DE LA FONCTION DUALE ET SON GRADIENT

        DO 40 L = 0, NDIM
          GRAD(L, KPG) = - DI(L) * BAMAL(L)
 40     CONTINUE

        ENECMP = 0.D0
        DO 42 L = 0, NDIM
          ENECMP = ENECMP + BAMAL(L)*LAGRDI(L)
     &                    + RLAG/2 * PONDER(L) * BAMAL(L)**2
 42     CONTINUE
        ENEREL = ENEREL - POIDS * (ENELOC + ENECMP)


C -- CALCUL DU RESIDU

        IF (TRIDIM) THEN
          DO 48 N = 1,NNO1
            T1 = VFF1(N,KPG) * RES(0)
     &         + DFDI1(N,1)  * RES(1)
     &         + DFDI1(N,2)  * RES(2)
     &         + DFDI1(N,3)  * RES(3)
            RESIDU(N) = RESIDU(N) + T1 * POIDS
 48      CONTINUE

        ELSE
          DO 50 N = 1,NNO1
            T1 =  VFF1(N,KPG) * RES(0)
     &         + DFDI1(N,1)  * RES(1)
     &         + DFDI1(N,2)  * RES(2)
            RESIDU(N) = RESIDU(N) + T1 * POIDS
 50       CONTINUE
        END IF


C      CALCUL DE KT ELEMENTAIRE (PARTIE TRIANGULAIRE INF SEULEMENT)
        KK = 0
        IF (TRIDIM) THEN

          DO 60 N = 1, NNO1
            DO 70 M = 1,N
              T1 = VFF1(N,KPG)*(DRESDA(0,0) *
     &            VFF1(M,KPG)
     &            + DRESDA(0,1)*DFDI1(M,1)+DRESDA(0,2)*DFDI1(M,2)
     &            + DRESDA(0,3) * DFDI1(M,3) )

              DO 75 L = 1, 3
                T1 = T1 + DFDI1(N,L) * ( DRESDA(L,0) *
     &               VFF1(M,KPG)
     &            + DRESDA(L,1)*DFDI1(M,1)+DRESDA(L,2)*DFDI1(M,2)
     &            + DRESDA(L,3)*DFDI1(M,3) )
 75           CONTINUE

              PROJEC(KK) = PROJEC(KK) + T1 * POIDS
              KK = KK + 1
 70         CONTINUE
 60       CONTINUE

        ELSE

          DO 80 N = 1, NNO1
            DO 90 M = 1,N
              T1 = VFF1(N,KPG)* ( DRESDA(0,0) *
     &            VFF1(M,KPG)
     &         + DRESDA(0,1) * DFDI1(M,1) + DRESDA(0,2) * DFDI1(M,2) )
     &         + DFDI1(N,1)*(DRESDA(1,0)* VFF1(M,KPG)
     &         + DRESDA(1,1) * DFDI1(M,1) + DRESDA(1,2) * DFDI1(M,2) )
     &         + DFDI1(N,2) * ( DRESDA(2,0) * VFF1(M,KPG)
     &         + DRESDA(2,1) * DFDI1(M,1) + DRESDA(2,2) * DFDI1(M,2) )

              PROJEC(KK) = PROJEC(KK) + T1 * POIDS
              KK = KK + 1
 90         CONTINUE
 80       CONTINUE

        END IF
 10   CONTINUE
      END
