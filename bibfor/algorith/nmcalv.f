      SUBROUTINE NMCALV(TYPVEC,
     &                  MODELZ,LISCHA,MATE  ,CARELE,COMPOR,
     &                  CARCRI,NUMEDD,COMREF,DEFICO,RESOCO,
     &                  PARCON,INSTAM,INSTAP,VALMOI,VALPLU,
     &                  SOLALG,POUGD ,SDDYNA,SDSENS,LSENS ,
     &                  NRPASE,VECELE)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 29/09/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      CHARACTER*(*) MODELZ
      LOGICAL       LSENS 
      CHARACTER*24  RESOCO,DEFICO
      CHARACTER*24  MATE,CARELE,COMPOR,CARCRI,NUMEDD   
      CHARACTER*24  SDSENS,COMREF
      INTEGER       NRPASE
      REAL*8        INSTAM,INSTAP,PARCON(8)
      CHARACTER*24  VALMOI(8),VALPLU(8),POUGD(8)
      CHARACTER*19  LISCHA,SDDYNA,SOLALG(*)
      CHARACTER*6   TYPVEC 
      CHARACTER*19  VECELE    
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (CALCUL)
C
C CALCUL DES VECTEURS ELEMENTAIRES
C      
C ----------------------------------------------------------------------
C
C
C IN  TYPVEC : TYPE DE CALCUL VECT_ELEM
C IN  MODELE : MODELE
C IN  LISCHA : LISTE DES CHARGES
C IN  MATE   : CHAMP MATERIAU
C IN  CARELE : CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN  COMPOR : CARTE DECRIVANT LE TYPE DE COMPORTEMENT
C IN  CARCRI : PARAMETRES DES METHODES D'INTEGRATION LOCALES
C IN  NUMEDD : NUME_DDL
C IN  COMREF : VARI_COM DE REFERENCE
C IN  RESOCO : SD POUR LA RESOLUTION DE CONTACT
C IN  DEFICO : SD POUR LA DEFINITION DE CONTACT
C IN  PARCON : PARAMETRES DU CRITERE DE CONVERGENCE REFERENCE
C IN  INSTAM : INSTANT MOINS
C IN  INSTAP : INSTANT PLUS
C IN  VALMOI : VARIABLE CHAPEAU POUR ETAT EN T-
C IN  VALPLU : VARIABLE CHAPEAU POUR ETAT EN T+
C IN  SOLALG : VARIABLE CHAPEAU POUR INCREMENTS SOLUTIONS
C IN  POUGD  : VARIABLE CHAPEAU POUR POUTRES EN GRANDES ROTATIONS
C IN  SDDYNA : SD DYNAMIQUE
C IN  SDSENS : SD SENSIBILITE
C IN  LSENS  : .TRUE. SI CALCUL EN SENSIBILITE
C IN  NRPASE : NUMERO DU PARAMETRE SENSIBLE (0=CALCUL CLASSIQUE)
C OUT VECELE : VECT_ELEM CALCULE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C  
      CHARACTER*19 NMCHEX
      CHARACTER*24 MODELE
      CHARACTER*24 DEPMOI,SIGMOI,COMMOI,VRCMOI,DEPDEL,VITMOI,ACCMOI
      CHARACTER*24 VRCPLU,COMPLU,VITPLU
      CHARACTER*24 K24BID     
      LOGICAL      FNOEVO
      INTEGER      NEQ   ,IRET,IBID
      REAL*8       PARTPS(2),INST(3)
      CHARACTER*24 CHARGE,INFOCH
      LOGICAL      LVALM,LVALP,LDEPA
      CHARACTER*8  NOMA,K8BID
C      
      CHARACTER*8  NOPASE
      CHARACTER*13 INPSCO       
      CHARACTER*24 STYPSE
      INTEGER      TYPESE                 
      INTEGER      IFM,NIV    
C      
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)  
C
C --- INITIALISATIONS
C        
      MODELE = MODELZ  
      CALL DISMOI('F','NOM_MAILLA',MODELE,'MODELE'  ,IBID  ,NOMA  ,IRET)
      CALL DISMOI('F','NB_EQUA   ',NUMEDD,'NUME_DDL',NEQ   ,K8BID ,IRET)
C
C --- INDICATEUR PRESENCE VARIABLES CHAPEAUX
C
      LVALM     = .FALSE.
      LVALP     = .FALSE.
      LDEPA     = .FALSE.     
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      IF (VALMOI(1)(1:1).NE.' ') THEN           
        CALL DESAGG(VALMOI,DEPMOI,SIGMOI,K24BID,COMMOI,
     &              VITMOI,ACCMOI,K24BID,K24BID)
        LVALM = .TRUE.
      ENDIF
      IF (VALPLU(1)(1:1).NE.' ') THEN     
        CALL DESAGG(VALPLU,K24BID,K24BID,K24BID,COMPLU,
     &              VITPLU,K24BID,K24BID,K24BID)
        LVALP = .TRUE.
      ENDIF
      IF (SOLALG(1)(1:1).NE.' ') THEN 
        IF (TYPVEC.EQ.'CNFNOD') THEN
          CALL NMDEP0('ON ',SOLALG)
        ENDIF
        DEPDEL = NMCHEX(SOLALG,'SOLALG','DEPDEL') 
        LDEPA  = .TRUE.                     
      ENDIF
C   
C --- VARIABLES TEMPS
C   
      PARTPS(1) = INSTAM
      PARTPS(2) = INSTAP
C
      INST(1)   = INSTAP
      INST(2)   = INSTAP-INSTAM
      INST(3)   = 0.D0  
      FNOEVO    = .TRUE.
C                  
      CHARGE = LISCHA(1:19)//'.LCHA'
      INFOCH = LISCHA(1:19)//'.INFC' 
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ   ,K8BID,IRET)
C
C --- CAS D'UN CHARGEMENT AVEC SENSIBILITE
C
      IF (LSENS) THEN
        CALL NMCALS(SDSENS,NRPASE,NOPASE,INPSCO,TYPESE,
     &              STYPSE)
      ELSE
        NOPASE = ' '
        INPSCO = ' '
        STYPSE = ' '
        TYPESE = 0
      ENDIF
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><VECT> CALCUL DES VECT_ELEM'//
     &                ' DE TYPE <',TYPVEC,'>' 
        IF (LSENS) THEN
          WRITE (IFM,*) '<MECANONLINE><VECT> PRISE EN COMPTE DE LA '//
     &                  'SENSIBILITE'
          WRITE (IFM,*) '<MECANONLINE><VECT> NUM. PARA. SENS.: ',NRPASE
        ENDIF 
      ENDIF                              
C 
C --- FORCES NODALES
C 
      IF (TYPVEC.EQ.'CNFNOD') THEN  
        IF (.NOT.LVALM) CALL ASSERT(.FALSE.)
        IF (.NOT.LDEPA) CALL ASSERT(.FALSE.)
        CALL NMVCEX('TOUT',COMMOI,VRCMOI)        
        CALL VEFNME(MODELE,SIGMOI,CARELE,DEPMOI,DEPDEL,
     &              VECELE,MATE  ,COMPOR,0     ,FNOEVO,
     &              PARTPS,CARCRI,VRCMOI,' '   ,LISCHA) 
        CALL NMDEP0('OFF',SOLALG)
C
C --- DEPLACEMENTS DIRICHLET FIXE 
C    
      ELSEIF (TYPVEC.EQ.'CNDIDO') THEN
        CALL VEDIME(MODELE,CHARGE,INFOCH,INSTAP,'R',
     &              TYPESE,NOPASE,VECELE)
C
C --- DEPLACEMENTS DIRICHLET DIFFERENTIEL
C
      ELSEIF (TYPVEC.EQ.'CNDIDI') THEN  
        IF (.NOT.LVALM) CALL ASSERT(.FALSE.)
        CALL NMDIDI(MODELE,LISCHA,DEPMOI,VECELE)    
C
C --- DEPLACEMENTS DIRICHLET PILOTE
C
      ELSEIF (TYPVEC.EQ.'CNDIPI') THEN
        CALL VEDPME(MODELE,CHARGE,INFOCH,INSTAP,'R', 
     &              VECELE) 
C
C --- FORCES DE LAPLACE
C
      ELSEIF (TYPVEC.EQ.'CNLAPL') THEN  
        IF (.NOT.LVALM) CALL ASSERT(.FALSE.)  
        CALL VELAME(MODELE,CHARGE,INFOCH,DEPMOI,VECELE)
C
C --- FORCES ONDES PLANES
C
      ELSEIF (TYPVEC.EQ.'CNONDP') THEN 
        CALL VEONDP(MODELE,MATE  ,SDDYNA,INSTAP,VECELE)
C
C --- FORCES IMPEDANCE
C
      ELSEIF (TYPVEC.EQ.'CNIMPC') THEN                
        IF (.NOT.LVALP) CALL ASSERT(.FALSE.)                   
        CALL VEIMPD(MODELE,MATE  ,INSTAM,VITPLU,SDDYNA,
     &              VECELE)
      ELSEIF (TYPVEC.EQ.'CNIMPP') THEN                
        IF (.NOT.LVALM) CALL ASSERT(.FALSE.)                   
        CALL VEIMPD(MODELE,MATE  ,INSTAM,VITMOI,SDDYNA,
     &              VECELE)
    
C
C --- FORCES FIXES MECANIQUES DONNEES
C
      ELSEIF (TYPVEC.EQ.'CNFEDO') THEN 
        IF (.NOT.LVALP) CALL ASSERT(.FALSE.)
        CALL NMVCEX('TOUT',COMPLU,VRCPLU)        
        CALL VECHME('MECA',MODELE,CHARGE,INFOCH,INST  ,
     &              CARELE,MATE  ,VRCPLU,' '   ,' '   ,
     &              NOPASE,TYPESE,STYPSE,VECELE)  
C
C --- FORCES SENSIBILITE COMPORTEMENT
C
      ELSEIF (TYPVEC.EQ.'CNMSME') THEN
        CALL VEMSME(MODELE,MATE  ,CARCRI,CARELE,COMPOR,
     &              INST  ,SDSENS,NRPASE,TYPESE,VECELE)            
C
C --- FORCES PILOTEES
C
      ELSEIF (TYPVEC.EQ.'CNFEPI') THEN 
        IF (.NOT.LVALP) CALL ASSERT(.FALSE.)
        CALL NMVCEX('TOUT',COMPLU,VRCPLU)      
        CALL VEFPME(MODELE,CARELE,MATE  ,CHARGE,INFOCH,
     &              PARTPS,VRCPLU,VECELE, ' ')
C        
C --- FORCES ISSUES DU CALCUL PAR SOUS-STRUCTURATION 
C
      ELSEIF (TYPVEC.EQ.'CNSSTF') THEN    
        CALL NMSSSV(MODELE,MATE  ,CARELE,LISCHA,VECELE)      
C
C --- FORCES SUIVEUSES
C
      ELSEIF (TYPVEC.EQ.'CNFSDO') THEN 
        IF (.NOT.LVALM) CALL ASSERT(.FALSE.)
        IF (.NOT.LVALP) CALL ASSERT(.FALSE.)
        IF (.NOT.LDEPA) CALL ASSERT(.FALSE.)              
        CALL VECGME(MODELE,CARELE,MATE  ,CHARGE,INFOCH,
     &              INSTAP,DEPMOI,DEPDEL,VECELE,INSTAM,
     &              COMPOR,CARCRI,' '   ,VITPLU) 
C     
C --- FORCE DE REFERENCE
C
      ELSEIF (TYPVEC.EQ.'CNREFE') THEN      
        IF (.NOT.LVALM) CALL ASSERT(.FALSE.) 
        CALL NMREFE(MODELE,COMPOR,NUMEDD,MATE  ,CARELE,
     &              DEPMOI,PARCON,VECELE)
C     
C --- FORCE DE REFERENCE POUR VARIABLES DE COMMANDE INITIALES
C
      ELSEIF (TYPVEC.EQ.'CNVCF1') THEN      
        IF (.NOT.LVALM) CALL ASSERT(.FALSE.) 
        CALL NMVCFO(MODELE,LISCHA,NUMEDD,MATE  ,CARELE,
     &              COMPOR,COMREF,COMMOI,VECELE)   
C     
C --- FORCE DE REFERENCE POUR VARIABLES DE COMMANDE COURANTES
C
      ELSEIF (TYPVEC.EQ.'CNVCF0') THEN      
        IF (.NOT.LVALP) CALL ASSERT(.FALSE.) 
        CALL NMVCFO(MODELE,LISCHA,NUMEDD,MATE  ,CARELE,
     &              COMPOR,COMREF,COMPLU,VECELE)          
C
C --- FORCES DE CONTACT CONTINU
C
      ELSEIF (TYPVEC.EQ.'CNCTCC') THEN 
        CALL MMCVEM('CONT',MODELE,NOMA  ,DEFICO,RESOCO,
     &              DEPMOI,DEPDEL,VITMOI,VITPLU,ACCMOI,
     &              VECELE)  
C
C --- FORCES DE FROTTEMENT CONTINU
C
      ELSEIF (TYPVEC.EQ.'CNCTCF') THEN 
        CALL MMCVEM('FROT',MODELE,NOMA  ,DEFICO,RESOCO,
     &              DEPMOI,DEPDEL,VITMOI,VITPLU,ACCMOI,
     &              VECELE)   
C
C --- FORCES DE CONTACT XFEM
C
      ELSEIF (TYPVEC.EQ.'CNXFEC') THEN 
        CALL XMCVEM('CONT',MODELE,NOMA  ,RESOCO,DEPMOI,
     &              DEPDEL,VECELE)     
C
C --- FORCES DE FROTTEMENT XFEM
C
      ELSEIF (TYPVEC.EQ.'CNXFEF') THEN 
        CALL XMCVEM('FROT',MODELE,NOMA  ,RESOCO,DEPMOI,
     &              DEPDEL,VECELE)  
C
C --- FORCES DE CONTACT XFEM - GRANDS GLISSEMENTS
C
      ELSEIF (TYPVEC.EQ.'CNXFTC') THEN 
        CALL XTCVEM('CONT',MODELE,RESOCO,DEPMOI,DEPDEL,
     &              VECELE) 
C
C --- FORCES DE FROTTEMENT XFEM - GRANDS GLISSEMENTS
C
      ELSEIF (TYPVEC.EQ.'CNXFTF') THEN 
        CALL XTCVEM('FROT',MODELE,RESOCO,DEPMOI,DEPDEL,
     &              VECELE)                            
      ELSE  
        CALL ASSERT(.FALSE.)
      ENDIF
C
  999 CONTINUE
C
C --- DEBUG
C
      IF (NIV.EQ.2) THEN
        CALL NMDEBG('VECT',VECELE,IFM   )
      ENDIF   
C
      CALL JEDEMA()      
C
      END
