      SUBROUTINE NMCALV(TYPVEZ,
     &                  MODELZ,LISCHA,MATE  ,CARELE,COMPOR,
     &                  INSTAM,INSTAP,CARCRI,PARMET,NUMEDD,
     &                  VALMOI,VALPLU,DEPALG,POUGD ,SDSENS,
     &                  SDDYNA,LSENSI,NRPASE,BASE  ,MEASSE,
     &                  VEELEM)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 25/03/2008   AUTEUR REZETTE C.REZETTE 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      CHARACTER*(*) MODELZ
      LOGICAL       LSENSI
      CHARACTER*24  MATE,CARELE,COMPOR,CARCRI,NUMEDD   
      CHARACTER*24  SDSENS
      INTEGER       NRPASE
      REAL*8        INSTAM,INSTAP,PARMET(*)
      CHARACTER*24  VALMOI(8),VALPLU(8),DEPALG(8),POUGD(8)
      CHARACTER*19  LISCHA,SDDYNA
      CHARACTER*(*) TYPVEZ 
      CHARACTER*19  MEASSE(8)
      CHARACTER*19  VEELEM(*)
      CHARACTER*1   BASE
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (CALCUL)
C
C CALCUL DES VECTEURS ELEMENTAIRES
C      
C ----------------------------------------------------------------------
C
C
C IN  MODELE : NOM DU MODELE
C IN  LISCHA : LISTE DES CHARGEMENTS
C IN  TYPVEC : TYPE DE VECTEUR A CALCULER
C IN  OPTMAT : OPTION DE CALCUL POUR LE VECTEUR
C OUT VEELEM : VECT_ELEM CALCULE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      CHARACTER*19 VEBUDI,VEFNOD,VEDIDO,VEMASE
      CHARACTER*19 VEDIPI,VEFEDO,VEFEPI,VELAMP,VEONDE
      CHARACTER*19 VEFSDO,VEINER,VEHYST,VEMODA,VEIMPE  
      CHARACTER*19 K8BID
      CHARACTER*19 MASSE,AMORT
      CHARACTER*24 MODELE,CHONDP
      CHARACTER*24 DEPMOI,SIGMOI,COMMOI,VRCMOI,DEPDEL
      CHARACTER*24 VRCPLU,COMPLU,VITPLU,ACCPLU,VITKM1
      CHARACTER*24 NDYNKK,VALMOD,BASMOD,VITENT
      CHARACTER*24 K24BID
      CHARACTER*16 TYPVEC      
      LOGICAL      NDYNLO,FNOEVO,NREAVI
      LOGICAL      LIMPED,LSTAT,LIMPL
      INTEGER      NDYNIN,NONDP ,NEQ   ,IRET
      REAL*8       PARTPS(3),INST(3)
      CHARACTER*24 CHARGE,INFOCH
      INTEGER      JINER,JHYST,JMODA
      INTEGER      JVITP,JACCP,JVITKM,JMASS,JAMOR
C      
      CHARACTER*8  NOPASE
      CHARACTER*13 INPSCO       
      CHARACTER*24 STYPSE
      INTEGER      TYPESE                 
      INTEGER      IFM,NIV    
C      
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- FONCTIONNALITES ACTIVEES
C
      LSTAT  = NDYNLO(SDDYNA,'STATIQUE')
      LIMPL  = NDYNLO(SDDYNA,'IMPLICITE') 
      LIMPED = NDYNLO(SDDYNA,'IMPE_ABSO')     
C
C --- INITIALISATIONS
C      
      TYPVEC = TYPVEZ   
      MODELE = MODELZ          
      VEBUDI = VEELEM(3)
      VEFNOD = VEELEM(4)
      VEDIDO = VEELEM(5)
      VEDIPI = VEELEM(6)  
      VEFEDO = VEELEM(7)  
      VEFEPI = VEELEM(8)  
      VELAMP = VEELEM(9)
      VEONDE = VEELEM(10)
      VEFSDO = VEELEM(11)
      VEINER = VEELEM(12)
      VEHYST = VEELEM(13)
      VEMODA = VEELEM(14)
      VEIMPE = VEELEM(15)
      VEMASE = VEELEM(16)
C            
      MASSE  = MEASSE(3) 
      AMORT  = MEASSE(4)
C      
      PARTPS(1) = INSTAM
      PARTPS(2) = INSTAP
      PARTPS(3) = PARMET(30)
C
      INST(1)   = INSTAP
      INST(2)   = INSTAP-INSTAM
      INST(3)   = PARMET(30)      
      FNOEVO    = .TRUE.
C                       
      CHARGE = LISCHA(1:19)//'.LCHA'
      INFOCH = LISCHA(1:19)//'.INFC' 
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ   ,K8BID,IRET)
C
C --- CAS D'UN CHARGEMENT AVEC SENSIBILITE
C
      IF (LSENSI) THEN
        CALL NMCALS(SDSENS,NRPASE,NOPASE,INPSCO,TYPESE,
     &              STYPSE)
      ELSE
        NOPASE = ' '
        INPSCO = ' '
        STYPSE = ' '
        TYPESE = 0
        STYPSE = ' '
      ENDIF
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><VECT> CALCUL DES VECT_ELEM'//
     &                ' DE TYPE <',TYPVEC,'>' 
        IF (LSENSI) THEN
          WRITE (IFM,*) '<MECANONLINE><VECT> PRISE EN COMPTE DE LA '//
     &                  'SENSIBILITE'
          WRITE (IFM,*) '<MECANONLINE><VECT> NUM. PARA. SENS.: ',NRPASE
        ENDIF 
      ENDIF       
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL DESAGG(VALMOI,DEPMOI,SIGMOI,K24BID,COMMOI,
     &            K24BID,K24BID,K24BID,K24BID)
      CALL DESAGG(VALPLU,K24BID,K24BID,K24BID,COMPLU,
     &            VITPLU,ACCPLU,K24BID,K24BID)            
      CALL DESAGG(DEPALG,K24BID,DEPDEL,K24BID,K24BID,
     &            K24BID,K24BID,K24BID,K24BID) 
      CALL DESAGG(POUGD ,K24BID,VITKM1,K24BID,K24BID,
     &            K24BID,K24BID,K24BID,K24BID)
C
C --- EXTRACTION DES VARIABLES DE COMMANDE
C      
      CALL NMVCEX('TOUT',COMMOI,VRCMOI)
      CALL NMVCEX('TOUT',COMPLU,VRCPLU)        
C
C --- CALCULS VECTEURS ELEMENTAIRES
C
      IF (TYPVEC.EQ.'LAGR_MECA') THEN
        CALL VEBUME(MODELE,DEPMOI,LISCHA,VEBUDI)       
C 
      ELSEIF (TYPVEC.EQ.'FORC_NODA') THEN               
        CALL VEFNME(MODELE,SIGMOI,CARELE,DEPMOI,
     &              DEPDEL,VEFNOD,MATE  ,COMPOR, 0,
     &              FNOEVO,PARTPS,CARCRI,VRCMOI, ' ', LISCHA) 
C     
      ELSEIF (TYPVEC.EQ.'DEPL_FIXE') THEN
        CALL VEDIME(MODELE,CHARGE,INFOCH,INSTAP,'R',
     &              TYPESE,NOPASE,VEDIDO)
C
      ELSEIF (TYPVEC.EQ.'DEPL_PILO') THEN
        CALL VEDPME(MODELE,CHARGE,INFOCH,INSTAP,'R', 
     &              VEDIPI) 
C
      ELSEIF (TYPVEC.EQ.'FORC_SENS_COMP') THEN
        CALL VEMSME(MODELE,MATE  ,CARCRI,CARELE,COMPOR,
     &              INST  ,SDSENS,NRPASE,TYPESE,VEMASE)
C
      ELSEIF (TYPVEC.EQ.'FORC_SENS_FIXE') THEN
        IF (TYPESE.NE.2) THEN       
          CALL VECHME('MECA',MODELE,CHARGE,INFOCH,INST  ,
     &                CARELE,MATE  ,VRCPLU,' '   ,' '   ,
     &                NOPASE,TYPESE,STYPSE,VEFEDO )
        ENDIF              
C
      ELSEIF (TYPVEC.EQ.'FORC_FIXE_MECA') THEN     
        CALL VECHME('MECA',MODELE,CHARGE,INFOCH,INST  ,
     &              CARELE,MATE  ,VRCPLU,' '   ,' '   ,
     &              NOPASE,TYPESE,STYPSE,VEFEDO )       
C
      ELSEIF (TYPVEC.EQ.'FORC_LAPLACE') THEN    
        CALL VELAME(MODELE,CHARGE,INFOCH,DEPMOI,VELAMP)
C
      ELSEIF (TYPVEC.EQ.'FORC_ONDE_PLANE') THEN 
        CHONDP = NDYNKK(SDDYNA,'CHONDP')   
        NONDP  = NDYNIN(SDDYNA,'NBRE_ONDE_PLANE')
        CALL VEONDP(MODELE,MATE  ,CHONDP,NONDP ,INSTAP,
     &              VEONDE) 
C
      ELSEIF (TYPVEC(1:9).EQ.'FORC_IMPE') THEN
        IF (LSTAT) THEN
          GOTO 999        
        ENDIF         
        IF (LIMPED) THEN
          VITENT = NDYNKK(SDDYNA,'VITENT')          
          IF (TYPVEC(10:14).EQ.'_PRED') THEN 
            CALL VEIMPD(MODELE,MATE  ,INSTAM,VITKM1,VITENT,
     &                  VEIMPE)
          ELSEIF  (TYPVEC(10:14).EQ.'_CORR') THEN
            CALL VEIMPD(MODELE,MATE  ,INSTAM,VITPLU,VITENT,
     &                  VEIMPE)
          ELSE
            CALL ASSERT(.FALSE.)
          ENDIF
        ENDIF                   
C
      ELSEIF (TYPVEC.EQ.'FORC_PILO') THEN     
        CALL VEFPME(MODELE,CARELE,MATE  ,CHARGE,INFOCH,
     &              PARTPS,VRCPLU,VEFEPI, ' ')
C
      ELSEIF (TYPVEC.EQ.'FORC_SUIV_IMPO') THEN  
        CALL VECGME(MODELE,CARELE,MATE  ,CHARGE,INFOCH,
     &              INSTAP,DEPMOI,DEPDEL,VEFSDO,INSTAM,
     &              COMPOR,CARCRI,' '   ,VITPLU,ACCPLU)
C
      ELSEIF (TYPVEC.EQ.'FORC_INER') THEN
        IF (LSTAT) THEN
          GOTO 999        
        ENDIF     
        IF (LIMPL) THEN                
          CALL JEVEUO(ACCPLU(1:19)//'.VALE','L',JACCP)
          CALL JEVEUO(MASSE(1:8)  //'           .&INT','L',JMASS)
          CALL JEVEUO(VEINER(1:8) //'           .VALE','E',JINER)
          CALL MRMULT('ZERO',JMASS,ZR(JACCP),'R',ZR(JINER),1)         
        ENDIF
C       
      ELSEIF (TYPVEC.EQ.'FORC_AMOR') THEN
        IF (LSTAT) THEN
          GOTO 999        
        ENDIF               
        IF (NDYNLO(SDDYNA,'MAT_AMORT'))THEN
          CALL JEVEUO(VITPLU(1:19)//'.VALE','L',JVITP)
          CALL JEVEUO(AMORT(1:8)  //'           .&INT','L',JAMOR)
          CALL JEVEUO(VEHYST(1:8) //'           .VALE','E',JHYST)
          CALL MRMULT('ZERO',JAMOR,ZR(JVITP),'R',ZR(JHYST),1)
        ENDIF
C
      ELSEIF (TYPVEC(1:9).EQ.'FORC_MODA') THEN
        IF (LSTAT) THEN
          GOTO 999        
        ENDIF         
        IF (NDYNLO(SDDYNA,'AMOR_MODAL'))THEN
          CALL JEVEUO(VITPLU(1:19)//'.VALE','L',JVITP)
          CALL JEVEUO(VITKM1(1:19)//'.VALE','L',JVITKM)
          CALL JEVEUO(VEMODA(1:8) //'           .VALE','E',JMODA)
          VALMOD = NDYNKK(SDDYNA,'VALMOD')
          BASMOD = NDYNKK(SDDYNA,'BASMOD')
          NREAVI = NDYNLO(SDDYNA,'NREAVI')
          IF (TYPVEC(10:14).EQ.'_PRED') THEN     
            CALL FMODAM(NEQ,ZR(JVITKM),VALMOD,BASMOD,ZR(JMODA))
          ELSEIF  (TYPVEC(10:14).EQ.'_CORR') THEN
            CALL FMODAM(NEQ,ZR(JVITP) ,VALMOD,BASMOD,ZR(JMODA))
            IF (NREAVI) THEN
              CALL FMODAM(NEQ,ZR(JVITP),VALMOD,BASMOD,ZR(JMODA))
            ENDIF            
          ELSE
            CALL ASSERT(.FALSE.)
          ENDIF
        ENDIF  
C
      ELSEIF (TYPVEC(1:15).EQ.'FORC_ACCE_INIT') THEN
        CALL VECHME('MECA',MODELE,CHARGE,INFOCH,INST  ,
     &              CARELE,MATE  ,VRCPLU,' '   ,' '   ,
     &              NOPASE,TYPESE,STYPSE,VEFEDO )
        CALL VECGME(MODELE,CARELE,MATE  ,CHARGE,INFOCH,
     &              INSTAP,DEPMOI,DEPDEL,VEFSDO,INSTAM,
     &              COMPOR,CARCRI,' '   ,VITPLU,ACCPLU)
        CALL VEDIME(MODELE,CHARGE,INFOCH,INSTAP,'R',
     &              TYPESE,NOPASE,VEDIDO) 
C                         
      ELSE  
        WRITE(6,*) 'TYPVEC: ',TYPVEC      
        CALL ASSERT(.FALSE.)
      ENDIF
C
  999 CONTINUE
C
      CALL JEDEMA()      
C
      END
