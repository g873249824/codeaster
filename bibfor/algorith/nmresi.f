      SUBROUTINE NMRESI(MAILLA,MATE  ,NUMEDD,FONACT,SDDYNA,
     &                  SDIMPR,MATASS,METHOD,NUMINS,CONV  ,
     &                  RESIGR,ETA   ,DEFICO,COMREF,VALMOI,
     &                  VALPLU,VEASSE,MEASSE,VRELA ,VMAXI ,
     &                  VCHAR ,VRESI ,VREFE ,VINIT )
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 23/09/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2005  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT      NONE
      CHARACTER*8   MAILLA
      CHARACTER*24  NUMEDD,SDIMPR, MATE
      INTEGER       NUMINS
      CHARACTER*19  SDDYNA
      CHARACTER*24  VALPLU(8),VALMOI(8)
      CHARACTER*19  MEASSE(*),VEASSE(*)
      CHARACTER*19  MATASS
      CHARACTER*16  METHOD(*)
      CHARACTER*24  DEFICO,COMREF
      LOGICAL       FONACT(*)
      REAL*8        ETA,CONV(*),RESIGR
      REAL*8        VRELA,VMAXI,VCHAR,VRESI,VREFE,VINIT
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (UTILITAIRE)
C
C CALCULS DES RESIDUS D'EQUILIBRE ET DES CHARGEMENTS POUR
C ESTIMATION DE LA CONVERGENCE
C
C ----------------------------------------------------------------------
C
C
C IN  MAILLA : NOM DU MAILLAGE
C IN  DEFICO : SD POUR LA DEFINITION DU CONTACT
C IN  SDIMPR : SD AFFICHAGE
C IN  NUMEDD : NUMEROTATION NUME_DDL
C IN  COMREF : VARI_COM REFE
C IN  MATASS : MATRICE DU PREMIER MEMBRE ASSEMBLEE
C IN  METHOD : DESCRIPTION DE LA METHODE DE RESOLUTION
C IN  NUMINS : NUMERO D'INSTANT
C IN  RESIGR : RESI_GLOB_RELA
C IN  VALMOI : VARIABLE CHAPEAU POUR ETAT EN T-
C IN  VALPLU : VARIABLE CHAPEAU POUR ETAT EN T+
C IN  VEASSE : VARIABLE CHAPEAU POUR NOM DES VECT_ASSE
C IN  MEASSE : VARIABLE CHAPEAU POUR NOM DES MATR_ASSE
C IN  ETA    : COEFFICIENT DE PILOTAGE
C OUT CONV   : INFORMATIONS SUR LA CONVERGENCE DU CALCUL
C                20 - RESI_GLOB_RELA
C                21 - RESI_GLOB_MAXI
C OUT VRELA  : RESI_GLOB_RELA MAXI
C OUT VMAXI  : RESI_GLOB_MAXI MAXI
C OUT VCHAR  : CHARGEMENT EXTERIEUR MAXI
C OUT VRESI  : RESIDU EQUILIBRE MAXI
C OUT VREFE  : RESI_GLOB_REFE MAXI
C OUT VINIT  : CONTRAINTES INITIALES MAXI
C
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------------------
C
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C --- FIN DECLARATIONS NORMALISEES JEVEUX ------------------------------
C
      INTEGER      JCCID,JFINT,JDIRI,JFEXT,JVCFO,JREFE,JINER,JVCF1
      INTEGER      IFM,NIV,NIVMPI,NOCC
      INTEGER      NEQ
      CHARACTER*8  K8BID
      LOGICAL      LVCINE,LFETI,LDYNA,NDYNLO,LFETIP
      CHARACTER*19 PROFCH,FOINER
      CHARACTER*16 K16BID
      CHARACTER*24 VITPLU,COMMOI
      CHARACTER*19 NMCHEX,MASSE
      CHARACTER*24 K24BID,CNFETI
      CHARACTER*19 CNDIRI,CNBUDI,CNVCFO,CNFEXT,CNVCF1,CNREFE,CNFINT
      CHARACTER*24 IMPCNT,IMPCNL,IMPCNV,IMPCNA
      INTEGER      JIMPCT,JIMPCL,JIMPCV,JIMPCA      
      INTEGER      JDEEQ,JREFA
      INTEGER      IBID,IER,I,IRET
      LOGICAL      ISFONC,LREFE,LINIT
      REAL*8       VAL1,VAL2,VAL3,VAL4,VAL5,R8BID,VCMAX
      INTEGER      IRELA,IMAXI,IRESI,IREFE   
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV) 
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... CALCUL DES RESIDUS'
      ENDIF           
C
C --- INITIALISATIONS
C
      VRELA  = 0.D0
      VMAXI  = 0.D0
      VREFE  = 0.D0
      VCHAR  = 0.D0
      VRESI  = 0.D0
      VINIT  = 0.D0
      IRELA  = 0
      IMAXI  = 0
      IREFE  = 0
      IRESI  = 0
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ,K8BID,IRET)
C
C --- FONCTIONNALITES ACTIVEES
C
      LDYNA  = NDYNLO(SDDYNA,'DYNAMIQUE')
      LREFE  = ISFONC(FONACT,'RESI_REFE')
      CALL GETFAC('ETAT_INIT',NOCC)
      LINIT  = (NUMINS.EQ.1).AND.(NOCC.EQ.0)
C
C --- ACCES SDIMPR
C      
      IMPCNT = SDIMPR(1:14)//'CONV.TYPE'
      IMPCNL = SDIMPR(1:14)//'CONV.LIEU'
      IMPCNV = SDIMPR(1:14)//'CONV.VAL'
      IMPCNA = SDIMPR(1:14)//'CONV.ACT'      
      CALL JEVEUO(IMPCNT,'E',JIMPCT)
      CALL JEVEUO(IMPCNL,'E',JIMPCL)
      CALL JEVEUO(IMPCNV,'E',JIMPCV)
      CALL JEVEUO(IMPCNA,'E',JIMPCA)      
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL DESAGG(VALPLU,K24BID,K24BID,K24BID,K24BID,
     &            VITPLU,K24BID,K24BID,K24BID)  
      CALL DESAGG(VALMOI,K24BID,K24BID,K24BID,COMMOI,
     &            K24BID,K24BID,K24BID,K24BID)       
      MASSE  = NMCHEX(MEASSE,'MEASSE','MEMASS')
      CNDIRI = NMCHEX(VEASSE,'VEASSE','CNDIRI')
      CNBUDI = NMCHEX(VEASSE,'VEASSE','CNBUDI')      
      CNVCFO = NMCHEX(VEASSE,'VEASSE','CNVCF0')
      CNFEXT = NMCHEX(VEASSE,'VEASSE','CNFEXT')      
      CNVCF1 = NMCHEX(VEASSE,'VEASSE','CNVCF1')      
      CNREFE = NMCHEX(VEASSE,'VEASSE','CNREFE')            
      CNFINT = NMCHEX(VEASSE,'VEASSE','CNFINT') 
C
C --- CALCUL DE LA FORCE DE REFERENCE POUR LA DYNAMIQUE
C
      IF (LDYNA) THEN
        FOINER = '&&CNPART.CHP1'
        CALL NDINER(NUMEDD,SDDYNA,VITPLU,MASSE  ,FOINER)
      ENDIF   
C
C --- CALCUL DES FORCES EXTERNES
C
      CALL NMFEXT(NUMEDD,ETA   ,FONACT,DEFICO,SDDYNA,
     &            VEASSE)        
C
C --- LA MATRICE DOIT EXISTER. SINON ON NE NE PEUT PAS DEVINER
C --- LES DDLS IMPOSES PAR AFFE_CHAR_CINE :
C
      CALL JEEXIN(MATASS(1:19)//'.REFA',JREFA)
      IF (JREFA.EQ.0) THEN
        IF (METHOD(5).NE.'DEPL_CALCULE') THEN
          CALL U2MESK('F','ALGELINE2_88',1,MATASS)
        ENDIF
      ENDIF  

      CALL JEEXIN(MATASS(1:19)//'.CCID',JCCID)
      LVCINE = (JCCID.GT.0)
      IF (LVCINE) THEN
        CALL JEVEUO(MATASS(1:19)//'.CCID','L',JCCID)
      ENDIF
      CALL DISMOI('F','PROF_CHNO',CNFINT,'CHAM_NO',IBID,PROFCH,IER)
      CALL JEVEUO(PROFCH(1:19)//'.DEEQ','L',JDEEQ)       
C      
C --- PREPARATION FETI
C
      CALL NMFETI(NUMEDD,IFM   ,LFETI ,NIVMPI,LFETIP)
C
C --- SI FETI PARALLELE, ON COMMUNIQUE A CHAQUE PROC LA SOMME DES
C --- CHAM_NOS GLOBAUX PARTIELLEMENT CALCULES
C --- A OPTIMISER VIA UN DES CRITERES LOCAUX
C
      IF (LFETIP) THEN
        CNFETI = CNDIRI(1:19)//'.VALE'
        CALL FETMPI(71    ,NEQ   ,IFM   ,NIVMPI,IBID  ,
     &              IBID  ,CNFETI,CNFETI,CNFETI,R8BID )
        CNFETI = CNBUDI(1:19)//'.VALE'
        CALL FETMPI(71    ,NEQ   ,IFM   ,NIVMPI,IBID  ,
     &              IBID  ,CNFETI,CNFETI,CNFETI,R8BID )
        CNFETI = CNFINT(1:19)//'.VALE'
        CALL FETMPI(71    ,NEQ   ,IFM   ,NIVMPI,IBID  ,
     &              IBID  ,CNFETI,K24BID,K24BID,R8BID )
        CNFETI = CNFEXT(1:19)//'.VALE'
        CALL FETMPI(71    ,NEQ   ,IFM   ,NIVMPI,IBID  ,
     &              IBID  ,CNFETI,K24BID,K24BID,R8BID )
        CNFETI = CNVCFO(1:19)//'.VALE'
        CALL FETMPI(71    ,NEQ   ,IFM   ,NIVMPI,IBID  ,
     &              IBID  ,CNFETI,K24BID,K24BID,R8BID)
        IF (LDYNA) THEN
          CNFETI = FOINER(1:19)//'.VALE'
          CALL FETMPI(71    ,NEQ   ,IFM   ,NIVMPI,IBID  ,
     &                IBID  ,CNFETI,K24BID,K24BID,R8BID)
        ENDIF
        IF (LINIT) THEN
          CNFETI = CNVCF1(1:19)//'.VALE'
          CALL FETMPI(71    ,NEQ   ,IFM   ,NIVMPI,IBID  ,
     &                IBID  ,CNFETI,K24BID,K24BID,R8BID)
        ENDIF
        IF (LREFE) THEN
          CNFETI = CNREFE(1:19)//'.VALE'
          CALL FETMPI(71    ,NEQ   ,IFM   ,NIVMPI,IBID  ,
     &                IBID  ,CNFETI,K24BID,K24BID,R8BID)
        ENDIF
      ENDIF
C
C --- ACCES AUX CHAM_NO
C
      CALL JEVEUO(CNFINT(1:19)//'.VALE','L',JFINT)
      CALL JEVEUO(CNDIRI(1:19)//'.VALE','L',JDIRI)
      CALL JEVEUO(CNFEXT(1:19)//'.VALE','L',JFEXT)
      CALL JEVEUO(CNVCFO(1:19)//'.VALE','L',JVCFO) 
      IF (LDYNA) THEN
        CALL JEVEUO(FOINER(1:19)//'.VALE','L',JINER)
      ENDIF  
      IF (LINIT) THEN
        CALL JEVEUO(CNVCF1(1:19)//'.VALE','L',JVCF1)
      ENDIF
      IF (LREFE) THEN
        CALL JEVEUO(CNREFE(1:19)//'.VALE','L',JREFE)
      ENDIF                 
C
C --- CALCUL DES RESIDUS
C
      DO 20 I = 1,NEQ
C
C --- SI CHARGEMENT CINEMATIQUE: ON IGNORE LA VALEUR DU RESIDU
C
        IF (LVCINE) THEN
          IF (ZI(JCCID+I-1).EQ.1) THEN
            GOTO 20
          ENDIF
        ENDIF
C                  
        VAL1  = ABS(ZR(JFINT+I-1)+ZR(JDIRI+I-1)-ZR(JFEXT+I-1))
        VAL2  = ABS(ZR(JDIRI+I-1)-ZR(JFEXT+I-1))+ABS(ZR(JVCFO+I-1))
        
C
C --- VRESI: MAX RESIDU D'EQUILIBRE
C
        IF (VRESI.LE.VAL1) THEN
          VRESI = VAL1
          IRESI = I
        ENDIF
C
C --- VCHAR: MAX CHARGEMENT EXTERIEUR EN STATIQUE
C
        IF (VCHAR.LE.VAL2) THEN
          VCHAR = VAL2
        ENDIF
C
C --- VCHAR: MAX CHARGEMENT EXTERIEUR EN DYNAMIQUE
C
        IF (LDYNA) THEN
          VAL3  = ABS(ZR(JINER+I-1))
          IF (VCHAR.LE.VAL3) THEN
            VCHAR = VAL3
          ENDIF
        ENDIF
C
C --- SI CONVERGENCE EN CONTRAINTE ACTIVE
C
        IF (LREFE) THEN
          IF (ZI(JDEEQ-1 + 2*I).GT.0) THEN          
            VAL4  = ABS(ZR(JFINT+I-1)+ZR(JDIRI+I-1)-ZR(JFEXT+I-1))/
     &                  ZR(JREFE+I-1)
            IF (VREFE.LE.VAL4) THEN
               VREFE = VAL4
               IREFE = I
            ENDIF
          ENDIF
        ENDIF
C
C --- SI TEST CONTRAINTES INITIALES
C
        IF (LINIT) THEN
          VAL5 = ABS(ZR(JVCF1+I-1))
          IF (VINIT.LE.VAL5) THEN
            VINIT = VAL5
          ENDIF
        ENDIF
 20   CONTINUE

      VMAXI = VRESI
      IMAXI = IRESI
      IF (VCHAR.GT.0.D0) THEN
        VRELA = VRESI/VCHAR
        IRELA = IRESI
      ELSE
        VRELA = -1.D0
      END IF
C
C --- ECRITURE DES INFOS SUR LES RESIDUS POUR AFFICHAGE
C
      CALL IMPCMP(IRELA,NUMEDD,ZK16(JIMPCL-1+1))
      ZK16(JIMPCT-1+1) = 'RESI_GLOB_RELA'
      ZR(JIMPCV-1+1)   = VRELA
      CALL IMPCMP(IMAXI,NUMEDD,ZK16(JIMPCL-1+2))
      ZK16(JIMPCT-1+2) = 'RESI_GLOB_MAXI'
      ZR(JIMPCV-1+2)   = VMAXI
      CALL IMPCMP(IREFE,NUMEDD,ZK16(JIMPCL-1+3))
      ZK16(JIMPCT-1+3) = 'RESI_GLOB_REFE'
      ZR(JIMPCV-1+3)   = VREFE
C
      CALL IMPSDR(SDIMPR(1:14),
     &            'RESI_RELA',K16BID,VRELA,IBID)
      CALL IMPSDR(SDIMPR(1:14),
     &            'RELA_NOEU',ZK16(JIMPCL-1+1),R8BID,IBID)
      CALL IMPSDR(SDIMPR(1:14),
     &            'RESI_MAXI',K16BID,VMAXI,IBID)
      CALL IMPSDR(SDIMPR(1:14),
     &            'MAXI_NOEU',ZK16(JIMPCL-1+2),R8BID,IBID)
      CALL IMPSDR(SDIMPR(1:14),
     &            'RESI_REFE',K16BID,VREFE,IBID)
      CALL IMPSDR(SDIMPR(1:14),
     &            'REFE_NOEU',ZK16(JIMPCL-1+3),R8BID,IBID)      
      
C
C --- SAUVEGARDES RESIDUS
C
      CONV(20) = VRELA
      CONV(21) = VMAXI      
C
C --- VERIFICATION QUE LES VARIABLES DE COMMANDE INITIALES CONDUISENT
C --- A DES FORCES NODALES NULLES
C
      IF (LINIT) THEN
        IF (VCHAR.GT.RESIGR) THEN
          VINIT = VINIT/VCHAR
        ENDIF
        IF (VINIT.GT.RESIGR) THEN
          CALL NMVCMX(MATE  ,MAILLA,COMREF,COMMOI,VCMAX  )
        ENDIF
      ENDIF    
C
 9999 CONTINUE
      CALL JEDEMA()
      END
