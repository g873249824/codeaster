      SUBROUTINE NMARCH(RESULT,NUMINS,SDDISC,FORCE ,COMPOR,
     &                  SDCRIT,RESOCO,VALPLU,INCR  ,MODELE,
     &                  MATE  ,CARELE,FONACT,LISCHA,SDDYNA)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 22/01/2008   AUTEUR FLEJOU J-L.FLEJOU 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE MABBAS M.ABBAS
C
      IMPLICIT NONE
      LOGICAL      FORCE,INCR,FONACT(*)
      INTEGER      NUMINS
      CHARACTER*8  RESULT
      CHARACTER*19 SDDISC,SDCRIT,SDDYNA
      CHARACTER*24 COMPOR,VALPLU(8),RESOCO
      CHARACTER*19 LISCHA
      CHARACTER*24 MODELE,MATE,CARELE
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME - UTILITAIRE)
C
C ARCHIVAGE DES CHAMPS
C
C ----------------------------------------------------------------------
C
C
C IN  FONACT : FONCTIONNALITES ACTIVEES (VOIR NMFONC)
C IN  SDDYNA : SD DEDIEE A LA DYNAMIQUE
C IN  RESULT : NOM UTILISATEUR DU CONCEPT RESULTAT
C IN  NUMINS : NUMERO DE L'INSTANT
C IN  SDDISC : SD PARA_TEMPS
C IN  RESOCO : SD DE RESOLUTION DU CONTACT
C IN  MODELE : NOM DU MODELE
C IN  FORCE  : VRAI SI ON SOUHAITE FORCER L'ARCHIVAGE
C IN  COMPOR : CARTE DECRIVANT LE TYPE DE COMPORTEMENT
C IN  SDCRIT : VALEUR DES CRITERES DE CONVERGENCE
C IN  VALPLU : ETAT EN T+
C IN  MATE   : CHAMP DE MATERIAU
C IN  CARELE : CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN  LISCHA : SD L_CHARGES
C IN  INCR   : VRAI S'IL FAUT INCREMENTER LE COMPTEUR D'ARCHIVAGE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      JINST,JCRR,JCRK,JPARA,NPARA
      PARAMETER    (NPARA=8)
      CHARACTER*24 TPSDIA
      INTEGER      JARCH
      INTEGER      IRET,K,IE,I15,I16,I19,II,LPARA(NPARA),IBID
      INTEGER      JDEPEN,JDEPP,JVITEN,JVITP,JACCEN,JACCP
      INTEGER      JIFL,JFFL,JCNSVR
      INTEGER      IFM,NIV
      INTEGER      NEQ,NUMARC,NBT,NBMODE
      REAL*8       INSTAP
      CHARACTER*8  K8BID
      CHARACTER*24 DEPPLU,SIGPLU,VARPLU,VITPLU,ACCPLU
      CHARACTER*24 CHAMP ,K24BID,NDYNKK
      CHARACTER*24 DEPENT,VITENT,ACCENT
      INTEGER      DIARCH
      REAL*8       DIINST
      LOGICAL      DIINCL,NDYNLO,ISFONC
      LOGICAL      LSSTRU,LMUAP ,LDYNA ,LCONT ,LGRFL
      CHARACTER*19 CNOINR,CNSINR
      CHARACTER*24 EXPL,KPRMO
      INTEGER      JEXPL
      INTEGER      NUMA
      INTEGER      JDEPGP,JVITGP,JACCGP
      INTEGER      JRESTD,JRESTV,JRESTA
      CHARACTER*24 CHGRFL,CHGRF2
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- FONCTIONNALITES ACTIVEES
C
      LCONT  = ISFONC(FONACT,'CONTACT')
      LDYNA  = NDYNLO(SDDYNA,'DYNAMIQUE')
      LSSTRU = NDYNLO(SDDYNA,'EXPL_GENE')
      LMUAP  = NDYNLO(SDDYNA,'MULTI_APPUI')
      LGRFL  = NDYNLO(SDDYNA,'FORCE_FLUIDE')
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL DESAGG(VALPLU,DEPPLU,SIGPLU,VARPLU,K24BID,
     &            VITPLU,ACCPLU,K24BID,K24BID)
      DEPENT = NDYNKK(SDDYNA,'DEPENT')
      VITENT = NDYNKK(SDDYNA,'VITENT')
      ACCENT = NDYNKK(SDDYNA,'ACCENT')
C
C --- ACCES SD LISTE D'INSTANTS
C
      TPSDIA = SDDISC(1:19)//'.DIAL'
      CALL JEVEUO(TPSDIA,'E',JARCH )
C
C --- NUMERO D'ARCHIVAGE
C
      NUMARC = DIARCH(SDDISC,NUMINS,FORCE,INCR)

      IF (NUMARC.GE.0) THEN
C
C --- ON SIGNALE QUE L'ON A BIEN ARCHIVE
C
       ZL(JARCH+NUMINS) = .TRUE.
C
C --- EXTENSION DE RESULT SI TROP PETIT
C
        CALL RSEXCH(RESULT,'DEPL',NUMARC,CHAMP,IRET)
        IF (IRET.EQ.110) THEN
          CALL RSAGSD(RESULT,0)
        ENDIF
C
C --- ARCHIVAGE DE L'INSTANT
C
        INSTAP = DIINST(SDDISC,NUMINS)
        CALL RSADPA(RESULT,'E',1,'INST',NUMARC,0,JINST,K8BID)
        ZR(JINST) = INSTAP
C
C --- ARCHIVAGE DU MODELE, MATERIAU, CARA_ELEM ET DE LA SD CHARGE
C
        CALL RSSEPA(RESULT,NUMARC,MODELE(1:8),MATE(1:8),CARELE(1:8),
     &              LISCHA)
C
C --- ARCHIVAGE DU COMPORTEMENT
C
        CALL RSEXCH(RESULT,'COMPORTEMENT',NUMARC,CHAMP,IRET)
        IF (IRET.LE.100) THEN
          CALL COPISD('CHAMP_GD','G',COMPOR(1:19),CHAMP(1:19))
          CALL RSNOCH(RESULT,'COMPORTEMENT',NUMARC,' ')
        END IF
C
C --- ARCHIVAGE DU CONTACT
C
        IF (LCONT) THEN
          CNSINR = RESOCO(1:14)//'.VALE'
          CALL JEEXIN(CNSINR(1:19)//'.CNSV',IRET)
          IF (IRET.NE.0) THEN
            CALL JEVEUO(CNSINR(1:19)//'.CNSV','L',JCNSVR)
            CALL RSEXCH(RESULT,'VALE_CONT',NUMARC,CNOINR,IRET)
            CALL CNSCNO(CNSINR,' ','NON','G',CNOINR,'F',IBID)
            CALL RSNOCH(RESULT,'VALE_CONT',NUMARC,' ')
            CALL DETRSD('CHAM_NO_S',CNSINR)
            CALL NMIMPR('IMPR','ARCHIVAGE','VALE_CONT',INSTAP,NUMARC)
          ENDIF
        END IF
C
C --- ARCHIVAGE DES CRITERES DE CONVERGENCE
C
        CALL JEEXIN(SDCRIT//'.CRTR',IRET)
        IF (IRET.NE.0) THEN
          CALL JEVEUO(SDCRIT//'.CRTR','L',JCRR)
          CALL JEVEUO(SDCRIT//'.CRDE','L',JCRK)
          CALL JELIRA(SDCRIT//'.CRDE','LONMAX',NBT,K8BID)
          CALL ASSERT(NBT.EQ.NPARA)
          CALL RSADPA(RESULT,'E',NBT,ZK16(JCRK),NUMARC,0,LPARA,K8BID)
          ZI(LPARA(1)) = NINT(ZR(JCRR))
          ZI(LPARA(2)) = NINT(ZR(JCRR+1))
          DO 10 K = 3,NBT
            ZR(LPARA(K)) = ZR(JCRR+K-1)
10        CONTINUE
        END IF
C
C --- DEPLACEMENTS
C
        IF (DIINCL(SDDISC,NUMINS,'DEPL',FORCE)) THEN
          CALL RSEXCH(RESULT,'DEPL',NUMARC,CHAMP,IRET)
          IF (IRET.LE.100) THEN
            CALL ASSDE2(DEPPLU)
            CALL COPISD('CHAMP_GD','G',DEPPLU(1:19),CHAMP(1:19))
            CALL RSNOCH(RESULT,'DEPL',NUMARC,' ')
            CALL NMIMPR('IMPR','ARCHIVAGE','DEPL',INSTAP,NUMARC)
          END IF
        END IF
C
C --- ARCHIVAGES CAS DYNAMIQUE
C
      IF (LDYNA) THEN
C
C --- CAS DES FORCE_FLUIDE
C
          IF (DIINCL(SDDISC,NUMINS,'DEPL',FORCE)) THEN
            IF (LGRFL) THEN
               CALL JEVEUO('&&GFLECT.INDICE'         ,'L',JIFL)
               CALL JEVEUO('&&OP0070.GRAPPE_FLUIDE  ','L',JFFL)
               II     = 5 + ZI(JIFL-1+5)
               I15    = ZI(JIFL-1+II+15)
               I16    = ZI(JIFL-1+II+16)
               I19    = ZI(JIFL-1+II+19)
               CALL RSADPA(RESULT,'E'   ,1     ,'GFUM'        ,NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZR(JPARA) = ZR(JFFL-1+I15+1)
               CALL RSADPA(RESULT,'E'   ,1     ,'GFUA'        ,NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZR(JPARA) = ZR(JFFL-1+I15+2)
               CALL RSADPA(RESULT,'E'   ,1     ,'GFUML'       ,NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZR(JPARA) = ZR(JFFL-1+I15+3)
               CALL RSADPA(RESULT,'E'   ,1     ,'GFUI'        ,NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZR(JPARA) = ZR(JFFL-1+I15+4)
               CALL RSADPA(RESULT,'E'   ,1     ,'GFVAG'       ,NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZR(JPARA) = ZR(JFFL-1+I16+1)
               CALL RSADPA(RESULT,'E'   ,1     ,'ITER_DASHPOT',NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZI(JPARA) = ZI(JIFL-1+4)
               CALL RSADPA(RESULT,'E'   ,1     ,'GFITER'      ,NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZI(JPARA) = ZI(JIFL-1+3)
               CALL RSADPA(RESULT,'E'   ,1     ,'GFVFD'       ,NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZR(JPARA) = ZR(JFFL-1+I19+1)
               CALL RSADPA(RESULT,'E'   ,1     ,'GFVAD'       ,NUMARC,
     &                     0     ,JPARA ,K8BID )
               ZR(JPARA) = ZR(JFFL-1+I19+2)
            END IF
          END IF
C
C --- VITESSES
C
          IF (DIINCL(SDDISC,NUMINS,'VITE',FORCE)) THEN
            CALL RSEXCH(RESULT,'VITE',NUMARC,CHAMP,IRET)
            IF (IRET.LE.100) THEN
              CALL COPISD('CHAMP_GD','G',VITPLU(1:19),CHAMP(1:19))
              CALL RSNOCH(RESULT,'VITE',NUMARC,' ')
              CALL NMIMPR('IMPR','ARCHIVAGE','VITE',INSTAP,NUMARC)
            END IF
          END IF
C
C --- ACCELERATIONS
C
          IF (DIINCL(SDDISC,NUMINS,'ACCE',FORCE)) THEN
            CALL RSEXCH(RESULT,'ACCE',NUMARC,CHAMP,IRET)
            IF (IRET.LE.100) THEN
              CALL COPISD('CHAMP_GD','G',ACCPLU(1:19),CHAMP(1:19))
              CALL RSNOCH(RESULT,'ACCE',NUMARC,' ')
              CALL NMIMPR('IMPR','ARCHIVAGE','ACCE',INSTAP,NUMARC)
            END IF
          END IF
C
C --- MULTI-APPUIS
C
          IF (LMUAP)THEN
            CALL JEVEUO(DEPENT(1:19)//'.VALE','E',JDEPEN)
            CALL JEVEUO(VITENT(1:19)//'.VALE','E',JVITEN)
            CALL JEVEUO(ACCENT(1:19)//'.VALE','E',JACCEN)
            CALL JEVEUO(DEPPLU(1:19)//'.VALE','L',JDEPP)
            CALL JEVEUO(VITPLU(1:19)//'.VALE','L',JVITP)
            CALL JEVEUO(ACCPLU(1:19)//'.VALE','L',JACCP)
            CALL JELIRA(DEPENT(1:19)//'.VALE','LONMAX',NEQ,K8BID)
            DO 20 IE = 1,NEQ
              ZR(JDEPEN+IE-1) = ZR(JDEPEN+IE-1) + ZR(JDEPP+IE-1)
              ZR(JVITEN+IE-1) = ZR(JVITEN+IE-1) + ZR(JVITP+IE-1)
              ZR(JACCEN+IE-1) = ZR(JACCEN+IE-1) + ZR(JACCP+IE-1)
   20       CONTINUE
C
C --- DEPLACEMENTS ABSOLUS
C
            IF (DIINCL(SDDISC,NUMINS,'DEPL_ABSOLU',FORCE)) THEN
              CALL RSEXCH(RESULT,'DEPL_ABSOLU',NUMARC,CHAMP,IRET)
              IF (IRET.LE.100) THEN
                CALL COPISD('CHAMP_GD','G',DEPENT(1:19),CHAMP(1:19))
                CALL RSNOCH(RESULT,'DEPL_ABSOLU',NUMARC,' ')
                CALL NMIMPR('IMPR','ARCHIVAGE','DEPL_ABSOLU',INSTAP,
     &                      NUMARC)
              END IF
            END IF
C
C --- VITESSES ABSOLUES
C
            IF (DIINCL(SDDISC,NUMINS,'VITE_ABSOLU',FORCE)) THEN
              CALL RSEXCH(RESULT,'VITE_ABSOLU',NUMARC,CHAMP,IRET)
              IF (IRET.LE.100) THEN
                CALL COPISD('CHAMP_GD','G',VITENT(1:19),CHAMP(1:19))
                CALL RSNOCH(RESULT,'VITE_ABSOLU',NUMARC,' ')
                CALL NMIMPR('IMPR','ARCHIVAGE','VITE_ABSOLU',INSTAP,
     &                      NUMARC)
              END IF
            END IF
C
C --- ACCELERATIONS ABSOLUES
C
            IF (DIINCL(SDDISC,NUMINS,'ACCE_ABSOLU',FORCE)) THEN
              CALL RSEXCH(RESULT,'ACCE_ABSOLU',NUMARC,CHAMP,IRET)
              IF (IRET.LE.100) THEN
                CALL COPISD('CHAMP_GD','G',ACCENT(1:19),CHAMP(1:19))
                CALL RSNOCH(RESULT,'ACCE_ABSOLU',NUMARC,' ')
                CALL NMIMPR('IMPR','ARCHIVAGE','ACCE_ABSOLU',INSTAP,
     &                      NUMARC)
              END IF
            END IF
          END IF
C
C --- CALCUL MODAL EN EXPLICITE
C
          IF (LSSTRU) THEN
            EXPL = SDDYNA(1:15)//'.EXPL_MOD'
            CALL JEVEUO(EXPL,'E',JEXPL)
            ZI(JEXPL+1-1) = ZI(JEXPL+1-1) + 1
            NUMA  = ZI(JEXPL+1-1)
            KPRMO = NDYNKK(SDDYNA,'PROJ_MODAL')
            CALL JELIRA(KPRMO(1:19)//'.DGEP','LONMAX',NBMODE,K8BID)
            CALL JEVEUO(RESULT(1:8)//'           .DGEN','E',JRESTD)
            CALL JEVEUO(RESULT(1:8)//'           .VGEN','E',JRESTV)
            CALL JEVEUO(RESULT(1:8)//'           .AGEN','E',JRESTA)
            CALL JEVEUO(KPRMO(1:19)//'.DGEP','E',JDEPGP)
            CALL JEVEUO(KPRMO(1:19)//'.VGEP','E',JVITGP)
            CALL JEVEUO(KPRMO(1:19)//'.AGEP','E',JACCGP)
            CALL DCOPY(NBMODE,ZR(JDEPGP),1,ZR(JRESTD+(NUMA-1)*NBMODE),1)
            CALL DCOPY(NBMODE,ZR(JVITGP),1,ZR(JRESTV+(NUMA-1)*NBMODE),1)
            CALL DCOPY(NBMODE,ZR(JACCGP),1,ZR(JRESTA+(NUMA-1)*NBMODE),1)
          ENDIF
        ENDIF
C
C --- CONTRAINTES
C
        IF (DIINCL(SDDISC,NUMINS,'SIEF_ELGA',FORCE)) THEN
          CALL RSEXCH(RESULT,'SIEF_ELGA',NUMARC,CHAMP,IRET)
          IF (IRET.LE.100) THEN
            CALL COPISD('CHAMP_GD','G',SIGPLU(1:19),CHAMP(1:19))
            CALL RSNOCH(RESULT,'SIEF_ELGA',NUMARC,' ')
            CALL NMIMPR('IMPR','ARCHIVAGE','SIEF_ELGA',INSTAP,NUMARC)
          END IF
        END IF
C
C --- VARIABLES INTERNES
C
        IF (DIINCL(SDDISC,NUMINS,'VARI_ELGA',FORCE)) THEN
          CALL RSEXCH(RESULT,'VARI_ELGA',NUMARC,CHAMP,IRET)
          IF (IRET.LE.100) THEN
            CALL COPISD('CHAMP_GD','G',VARPLU(1:19),CHAMP(1:19))
            CALL RSNOCH(RESULT,'VARI_ELGA',NUMARC,' ')
            CALL NMIMPR('IMPR','ARCHIVAGE','VARI_ELGA',INSTAP,NUMARC)
          END IF
        END IF
      END IF
C
C --- STOCKAGE DES FORCES FLUIDES
C
      IF (LGRFL) THEN
        CHGRFL = '&&OP0070.GRAPPE_FLUIDE  '
        CHGRF2 = '&&OP0070.GRAPPE_FLUIDE_C'
        CALL GFCOPY(CHGRF2,CHGRFL)
      ENDIF

      CALL JEDEMA()
      END
