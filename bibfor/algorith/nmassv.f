      SUBROUTINE NMASSV(TYPVEZ,
     &                  MODELZ,LISCHA,MATE  ,CARELE,COMPOR,
     &                  SOLVEU,NUMEDD,FONACT,INSTAM,INSTAP,
     &                  COEFML,COEFM2,SDDYNA,MEELEM,VALMOI,
     &                  VALPLU,SECMBR,DEPALG,POUGD ,VEELEM,
     &                  LSENSI,SDSENS,NRPASE,MEASSE,VECTOR)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 25/03/2008   AUTEUR REZETTE C.REZETTE 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      CHARACTER*(*) MODELZ,TYPVEZ    
      CHARACTER*19  LISCHA,SOLVEU
      REAL*8        INSTAM,INSTAP,COEFML,COEFM2
      LOGICAL       FONACT(*)
      CHARACTER*19  SDDYNA,MEASSE(8)
      CHARACTER*24  MATE,CARELE,COMPOR,NUMEDD            
      CHARACTER*24  VALMOI(8),VALPLU(8),SECMBR(8),DEPALG(8),POUGD (8)
      CHARACTER*19  MEELEM(8),VEELEM(30)
      CHARACTER*24  VECTOR
      LOGICAL       LSENSI
      CHARACTER*24  SDSENS    
      INTEGER       NRPASE  
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (CALCUL)
C
C ASSEMBLAGE DES VECTEURS ELEMENTAIRES
C      
C ----------------------------------------------------------------------
C
C
C IN  TYPVEC : TYPE DE CALCUL VECT_ELEM
C IN  MODELE : MODELE
C IN  LISCHA : LISTE DES CHARGES
C IN  MATE   : CHAMP MATERIAU
C IN  CARELE : CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN  COMPOR : COMPORTEMENT
C IN  SOLVEU : SOLVEUR
C IN  NUMEDD : NUME_DDL
C IN  FONACT : FONCTIONNALITES ACTIVEES (VOIR NMFONC)
C IN  INSTAM : INSTANT MOINS
C IN  INSTAP : INSTANT PLUS
C IN  COEFML : COEFFICIENT POUR SCHEMA HHT_COMPLET
C IN  COEFM2 : COEFFICIENT POUR MATRICE MASSE
C IN  SDDYNA : SD DYNAMIQUE
C IN  MEELEM : MATRICES ELEMENTAIRES
C IN  VALMOI : ETAT EN T-
C IN  VALPLU : ETAT EN T+
C IN  POUGD  : INFOS POUTRES EN GRANDES ROTATIONS
C IN  DEPALG : VARIABLE CHAPEAU POUR DEPLACEMENTS
C IN  SECMBR : SECONDS MEMBRES
C IN  VEELEM : VECTEURS ELEMENTAIRES
C IN  LSENSI : .TRUE. SI CALCUL SENSIBILITE
C IN  SDSENS : SD SENSIBILITE
C IN  NRPASE : NUMERO PARAMETRE SENSIBLE
C IN  MEASSE : MATRICES ASSEMBLEES
C OUT VECTOR : VECT_ASSE CALCULEE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      REAL*8       DINST ,R8BID
      CHARACTER*19 VEBUDI,VEFNOD,VEDIDO 
      CHARACTER*19 VEDIPI,VEFEDO,VEFEPI,VELAMP,VEONDE
      CHARACTER*19 VEFSDO,VEINER,VEHYST,VEMODA,VEIMPE
      CHARACTER*19 VEMASE
      CHARACTER*19 MESSTR
      CHARACTER*24 VAONDE,VADIDO,VAFEDO,VALAMP,VAIMPE 
      CHARACTER*24 VAFEPI,VAFSDO  
      CHARACTER*8  MODELE
      CHARACTER*8  K8BID  
      CHARACTER*24 K24BID  
      CHARACTER*24 DEPMOI,VITPLU,ACCPLU,DEPDEL
      CHARACTER*24 DEPKM1,VITKM1,ACCKM1,ROMKM1,ROMK  
      CHARACTER*24 CNDIDI,CNLAMP,CHGRFL,CNONDE,CNTRAV
      CHARACTER*24 CHARGE,INFOCH,FOMULT
      CHARACTER*24 NDYNKK,FEPILD,FEDOLD,CNFOLD
      CHARACTER*16 TYPVEC
      CHARACTER*19 SSTRU
      INTEGER      JINER,JHYST,JMODA,JIMPE
      INTEGER      JCNFE,JONDE,JVAANC 
      INTEGER      IRET,NEQ
      INTEGER      NBSST        
      LOGICAL      NDYNLO,FOPREC,LGRFL,LONDE,LIMPED
      LOGICAL      ISFONC,LMACR
C      
      CHARACTER*8  NOPASE
      CHARACTER*13 INPSCO       
      CHARACTER*24 STYPSE
      INTEGER      TYPESE       
      INTEGER      IFM,NIV    
C      
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- INITIALISATIONS
C      
      TYPVEC = TYPVEZ
      MODELE = MODELZ       
      VEBUDI = VEELEM(3)
      VEFNOD = VEELEM(4)
      VEDIDO = VEELEM(5)
      VEDIPI = VEELEM(6)  
      VEFEDO = VEELEM(7)  
      VEFEPI = VEELEM(8)  
      VELAMP = VEELEM(9)
      VEONDE = VEELEM(10)
      VEFSDO = VEELEM(11)
      VEINER = VEELEM(12)
      VEHYST = VEELEM(13)
      VEMODA = VEELEM(14)
      VEIMPE = VEELEM(15)
      VEMASE = VEELEM(16) 
      MESSTR = MEELEM(6)
      SSTRU  = MEASSE(6)                                 
C                
      DINST  = INSTAP - INSTAM
      CNLAMP = '&&CNLAME'
      CNONDE = '&&CNONDE'
      CNTRAV = '&&CNPART.CHP1'
      VALAMP = '&&VALAME'
      VAIMPE = '&&VAIMPE'      
      CHARGE = LISCHA(1:19)//'.LCHA'
      INFOCH = LISCHA(1:19)//'.INFC'        
      FOMULT = LISCHA(1:19)//'.FCHA'  
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ,K8BID,IRET) 
C
C --- FONCTIONNALITES ACTIVEES
C    
      FOPREC = NDYNLO(SDDYNA,'FOPREC') 
      LGRFL  = NDYNLO(SDDYNA,'FORCE_FLUIDE') 
      LONDE  = NDYNLO(SDDYNA,'ONDE_PLANE') 
      LMACR  = ISFONC(FONACT,'MACR_ELEM_STAT')  
      LIMPED = NDYNLO(SDDYNA,'IMPE_ABSO')
C
C --- CAS D'UN CHARGEMENT AVEC SENSIBILITE
C
      IF (LSENSI) THEN
        CALL NMCALS(SDSENS,NRPASE,NOPASE,INPSCO,TYPESE,
     &              STYPSE)
      ELSE
        NOPASE = ' '
        INPSCO = ' '
        STYPSE = ' '
        TYPESE = 0
        STYPSE = ' '
      ENDIF 
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><VECT> ASSEMBLAGE DES VECT_ELEM' //
     &                ' DE TYPE <',TYPVEC,'>'  
      ENDIF                  
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL DESAGG(VALMOI,DEPMOI,K24BID,K24BID,K24BID,
     &            K24BID,K24BID,K24BID,K24BID)
      CALL DESAGG(VALPLU,K24BID,K24BID,K24BID,K24BID,
     &            VITPLU,ACCPLU,K24BID,K24BID)     
      CALL DESAGG(SECMBR,K24BID,K24BID,K24BID,K24BID,
     &            K24BID,K24BID,CNDIDI,K24BID) 
      CALL DESAGG(DEPALG,K24BID,DEPDEL,K24BID,K24BID,
     &            K24BID,K24BID,K24BID,K24BID)    
      CALL DESAGG(POUGD ,DEPKM1,VITKM1,ACCKM1,ROMKM1,
     &            ROMK  ,K24BID,K24BID,K24BID)                 
C
C --- ASSEMBLAGE VECTEURS ELEMENTAIRES
C
      IF (TYPVEC.EQ.'LAGR_MECA') THEN           
        CALL ASSVEC('V',VECTOR,1,VEBUDI,1.D0,NUMEDD,' ','ZERO',1) 
C        
      ELSEIF (TYPVEC.EQ.'FORC_NODA') THEN
        CALL ASSVEC('V',VECTOR,1,VEFNOD,1.D0,NUMEDD,' ','ZERO',1)
        IF (LMACR) THEN
          CALL NMMACV(DEPMOI,MESSTR,SSTRU ,VECTOR)  
        ENDIF 
C
      ELSEIF (TYPVEC.EQ.'DEPL_FIXE') THEN           
        CALL ASASVE(VEDIDO, NUMEDD, 'R', VADIDO)
        CALL ASCOVA('D',VADIDO,FOMULT,'INST', INSTAP, 'R',VECTOR)
C --- CORRECTION POUR TENIR COMPTE DU TYPE DIRICHLET DIFFERENTIEL
        CALL EXISD('CHAMP',CNDIDI, IRET)
        IF (IRET.NE.0) CALL VTAXPY(1.D0,CNDIDI,VECTOR)
C
      ELSEIF (TYPVEC.EQ.'DEPL_PILO') THEN  
        CALL ASSVEC('V',VECTOR,1,VEDIPI,1.D0,NUMEDD,' ','ZERO',1)
C
      ELSEIF (TYPVEC.EQ.'FORC_SENS') THEN 
        IF (TYPESE.EQ.2) THEN
          CALL ASSVEC('V',VECTOR,1,VEMASE,1.D0,NUMEDD,' ','ZERO',1)
        ELSE
          CALL ASSVEC('V',VECTOR,1,VEMASE,1.D0,NUMEDD,' ','ZERO',1)
          CALL ASASVE(VEFEDO,NUMEDD,'R',VAFEDO)
          CALL ASCOVA('D',VAFEDO,FOMULT,'INST',INSTAP,'R',CNTRAV)
          CALL VTAXPY(1.D0,CNTRAV,VECTOR)  
        ENDIF    
C
      ELSEIF (TYPVEC.EQ.'FORC_FIXE') THEN 
        CALL ASASVE(VEFEDO,NUMEDD,'R',VAFEDO)
        CALL ASCOVA('D',VAFEDO,FOMULT,'INST',INSTAP,'R',VECTOR)
C --- CALCUL PAR SOUS-STRUCTURATION 
        CALL NMLSSV('LECT',LISCHA,NBSST)       
        IF (NBSST.GT.0) THEN
          CALL NMSSSV(MODELE,MATE  ,CARELE,NUMEDD,LISCHA,
     &                INSTAP,VEELEM,MEELEM,MEASSE,VECTOR)    
        ENDIF
        CALL JEVEUO(VECTOR(1:19)//'.VALE','E',JCNFE)
C --- FORCES DE LAPLACE        
        CALL ASASVE(VELAMP,NUMEDD,'R',VALAMP)
        CALL ASCOVA('D',VALAMP,FOMULT,'INST',INSTAP,'R',CNLAMP)
        CALL VTAXPY(1.D0,CNLAMP,VECTOR)
C --- ONDES PLANES        
        IF (LONDE) THEN
          CALL ASASVE(VEONDE,NUMEDD,'R',VAONDE)
          CALL ASCOVA('D',VAONDE,' ','INST',R8BID,'R',CNONDE)
          CALL JEVEUO(CNONDE(1:19)//'.VALE','L',JONDE)
          CALL DAXPY(NEQ, -1.D0, ZR(JONDE), 1, ZR(JCNFE), 1)
        ENDIF
C --- FORCES FLUIDES        
        IF ( LGRFL ) THEN
          CHGRFL = NDYNKK(SDDYNA,'CHGRFL')       
          CALL NMGRFL(NUMEDD,CHGRFL,DEPMOI,DEPDEL,VITKM1,
     &                ACCKM1,DINST ,VECTOR)
        ENDIF    
C --- SCHEMA HHT_COMPLET
        IF (NDYNLO(SDDYNA,'HHT_COMPLET')) THEN
          FOPREC = NDYNLO(SDDYNA,'FOPREC')
          IF (FOPREC) THEN
            FEDOLD = NDYNKK(SDDYNA,'FEDOLD')
            CALL EXISD('CHAMP',FEDOLD, IRET)
            IF (IRET.NE.0) THEN
              CALL VTAXPY(COEFML,FEDOLD,VECTOR)
            ENDIF  
          ENDIF  
        ENDIF      
C             
      ELSEIF (TYPVEC.EQ.'FORC_PILO') THEN 
        CALL ASASVE(VEFEPI,NUMEDD,'R',VAFEPI)
        CALL ASCOVA('D',VAFEPI,FOMULT,'INST',INSTAP,'R',VECTOR)
C --- SCHEMA HHT_COMPLET        
        IF (NDYNLO(SDDYNA,'HHT_COMPLET')) THEN
          FOPREC = NDYNLO(SDDYNA,'FOPREC')
          IF (FOPREC) THEN
            FEPILD = NDYNKK(SDDYNA,'FEPILD')
            CALL EXISD('CHAMP',FEPILD, IRET)
            IF (IRET.NE.0) THEN
              CALL VTAXPY(COEFML,FEPILD,VECTOR)
            ENDIF  
          ENDIF  
        ENDIF      
C
      ELSEIF (TYPVEC.EQ.'CINE_IMPO') THEN       
        CALL NMCVCI(CHARGE,INFOCH,FOMULT,NUMEDD,DEPMOI,
     &              INSTAP,VECTOR)
C     
      ELSEIF (TYPVEC.EQ.'FORC_SUIV_IMPO') THEN
        CALL ASASVE(VEFSDO,NUMEDD,'R',VAFSDO)
        CALL ASCOVA('D',VAFSDO,FOMULT,'INST',INSTAP,'R',VECTOR)  
        IF (NDYNLO(SDDYNA,'STATIQUE')) THEN
          GOTO 999        
        ELSE               
          CALL JEVEUO(VECTOR(1:19)//'.VALE','E',JCNFE)
          CALL JEVEUO(VEINER(1:8) //'           .VALE','L',JINER)
          CALL DAXPY(NEQ, COEFM2, ZR(JINER), 1, ZR(JCNFE), 1) 
          IF (NDYNLO(SDDYNA,'MAT_AMORT'))THEN
            CALL JEVEUO(VEHYST(1:8) //'           .VALE','L',JHYST)
            CALL DAXPY(NEQ,COEFM2,ZR(JHYST), 1, ZR(JCNFE), 1)
          ENDIF
          IF (NDYNLO(SDDYNA,'AMOR_MODAL'))THEN
            CALL JEVEUO(VEMODA(1:8) //'           .VALE','L',JMODA)
            CALL DAXPY(NEQ,COEFM2, ZR(JMODA), 1, ZR(JCNFE), 1)
          ENDIF   
          IF (LIMPED)THEN
            CALL ASASVE(VEIMPE,NUMEDD,'R',VAIMPE)
            CALL JEVEUO(VAIMPE,'L',JVAANC)
            CALL JEVEUO(ZK24(JVAANC)(1:19)//'.VALE','L',JIMPE)
            CALL DAXPY(NEQ,COEFM2, ZR(JIMPE), 1, ZR(JCNFE), 1)
          ENDIF      
C --- SCHEMA HHT_COMPLET        
          IF (NDYNLO(SDDYNA,'HHT_COMPLET')) THEN
            FOPREC = NDYNLO(SDDYNA,'FOPREC')
            IF (FOPREC) THEN
              CNFOLD = NDYNKK(SDDYNA,'CNFOLD')
              CALL EXISD('CHAMP',CNFOLD, IRET)
              IF (IRET.NE.0) THEN
                CALL VTAXPY(((-1.D0)*COEFML),CNFOLD,VECTOR)
              ENDIF  
            ENDIF  
          ENDIF        
        ENDIF            
C
      ELSEIF (TYPVEC.EQ.'FORC_SUIV_PILO') THEN
        CALL EXISD('CHAMP',VECTOR(1:19),IRET)
        IF (IRET.EQ.0) CALL VTCREB(VECTOR,NUMEDD,'V','R',NEQ) 
C
      ELSEIF (TYPVEC.EQ.'FORC_SENS_DYNA') THEN
        CALL JEVEUO(VECTOR(1:19)//'.VALE','E',JCNFE)
        CALL JEVEUO(VEINER(1:8) //'           .VALE','L',JINER)
        CALL DAXPY (NEQ,-1.D0, ZR(JINER), 1, ZR(JCNFE), 1) 
        IF (NDYNLO(SDDYNA,'MAT_AMORT'))THEN
          CALL JEVEUO(VEHYST(1:8) //'           .VALE','L',JHYST)
          CALL DAXPY(NEQ,-1.D0,ZR(JHYST), 1, ZR(JCNFE), 1)
        ENDIF
        IF (NDYNLO(SDDYNA,'AMOR_MODAL'))THEN
          CALL JEVEUO(VEMODA(1:8) //'           .VALE','L',JMODA)
          CALL DAXPY(NEQ,-1.D0, ZR(JMODA), 1, ZR(JCNFE), 1)
        ENDIF   
        IF (LIMPED)THEN
          CALL ASASVE(VEIMPE,NUMEDD,'R',VAIMPE)
          CALL JEVEUO(VAIMPE,'L',JVAANC)
          CALL JEVEUO(ZK24(JVAANC)(1:19)//'.VALE','L',JIMPE)
          CALL DAXPY(NEQ,-1.D0, ZR(JIMPE), 1, ZR(JCNFE), 1)
        ENDIF
C
      ELSEIF (TYPVEC(1:15).EQ.'FORC_ACCE_INIT1') THEN  
        CALL ASASVE(VEFEDO,NUMEDD,'R',VAFEDO)
        CALL ASCOVA('D',VAFEDO,FOMULT,'INST',INSTAP,'R',VECTOR)
      ELSEIF (TYPVEC(1:15).EQ.'FORC_ACCE_INIT2') THEN        
        CALL ASASVE(VEFSDO,NUMEDD,'R',VAFSDO)
        CALL ASCOVA('D',VAFSDO,FOMULT,'INST',INSTAP,'R',VECTOR)
      ELSEIF (TYPVEC(1:15).EQ.'FORC_ACCE_INIT3') THEN        
        CALL ASASVE(VEDIDO,NUMEDD,'R',VADIDO)
        CALL ASCOVA('D',VADIDO,FOMULT,'INST', INSTAP, 'R',VECTOR)
C                       
      ELSE  
        WRITE(6,*) 'TYPVEC: ',TYPVEC
        CALL ASSERT(.FALSE.)
      ENDIF
C
 999  CONTINUE
C
      CALL JEDEMA()      
C
      END
