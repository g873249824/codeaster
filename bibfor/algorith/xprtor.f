      SUBROUTINE XPRTOR(METHOD,MODEL,NOMA,CNXINV,FISPRE,FISS,
     &    VCN,GRLR,CNSLN,GRLN,CNSLT,GRLT,TORE,RADTOR,RADIMP,
     &    CNSDIS,DISFR,CNSBL,NODCAL,ELECAL,LIGGRD,VCNT,GRLRT)
      IMPLICIT NONE

      CHARACTER*8    METHOD,MODEL,NOMA,FISPRE,FISS
      CHARACTER*19   CNSLN,GRLN,CNSLT,GRLT,NODCAL,ELECAL,
     &               CNSDIS,DISFR,CNSBL,CNXINV,LIGGRD
      CHARACTER*24   VCN,GRLR,VCNT,GRLRT
      LOGICAL        TORE
      REAL*8         RADTOR,RADIMP

C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 27/06/2011   AUTEUR SELLENET N.SELLENET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE COLOMBO D.COLOMBO
C TOLE CRP_20 CRP_21

C     ------------------------------------------------------------------
C
C       XPRTOR   : X-FEM PROPAGATION : CREATION DU TOR POUR LA
C       ------     -     --                        ---
C                  LOCALISATION DU DOMAINE DU CALCUL
C
C DANS LE CONTEXTE DE LA PROPAGATION X-FEM ET DE LA REPRESENTATION DE LA
C FISSURE PAR LEVEL SETS (METHODES UPWIND ET SIMPLEXE), CETTE ROUTINE
C DEFINIT UN DOMAINE DE CALCUL LOCALISE AUTOUR DU FOND DE LA FISSURE.
C CELA PERMET DE RENDRE LE CALCUL PLUS RAPIDE ET FIABLE.
C
C    ENTREE
C    ------
C      METHOD = METHODE UTILISE POUR LA REINITIALISATION ET LA
C               REORTHOGONALISATION DES LEVEL SETS (UPWIND/SIMPLEXE)
C      MODEL  = NOM DU MODELE SUR LEQUEL LES LEVEL SETS SONT DEFINIES
C      NOMA   = NOM DU MAILLAGE DU MODELE
C      CNXINV = CONNECTIVITE INVERSEE DU MAILLAGE NOMA
C      FISPRE = NOM DU CONCEPT FISSURE X-FEM DE LA FISSURE A PROPAGER
C      FISS   = NOM DU CONCEPT FISSURE X-FEM DE LA NOUVELLE FISSURE
C      VCN    = METHODE UPWIND SEULEMENT. VOIR XPRCNU.F POUR LA
C               DESCRIPTION DE CET OBJET.
C      GRLR   = METHODE UPWIND SEULEMENT. VOIR XPRCNU.F POUR LA
C               DESCRIPTION DE CET OBJET.
C      CNSLN  = CHAMP_NO_S DES VALEURS DE LA LEVEL SET NORMALE
C      GRLN   = CHAMP_NO_S DES VALEURS DU GRADIENT DE CNSLN
C      CNSLT  = CHAMP_NO_S DES VALEURS DE LA LEVEL SET TANGENTE
C      GRLT   = CHAMP_NO_S DES VALEURS DU GRADIENT DE CNSLT
C      TORE   = .TRUE. SI LE TORE DOIT ETRE CREE (LOCALISATION ACTIVE)
C               .FALSE. SI LE MAILLAGE ENTIER DOIT ETRE UTILISE
C      RADTOR = VALEUR MINIMALE DU RAYON DU TORE A UTILISER
C      RADIMP = VALEUR DU RAYON DU TORE A IMPOSER (PLUS GRANDE DE CELLE
C               QUI EST DONNEE PAR RADTOR)
C               SI LE CALCUL DOIT ETRE FAITE AUTOMATIQUEMENT, ON DONNE
C               UNE VALEUR NEGATIVE
C      CNSDIS = CHAM_NO_S VECTEUR DISTANCE ENTRE CHAQUE NODE DU
C               MAILLAGE ET SON PROJECTION SUR LE FOND DE FISSURE
C      DISFR  = VECTEUR INDIQUANT LA DISTANCE^2 ENTRE CHAQUE NODE DU
C               MAILLAGE NOMA ET LE FOND DU FISSURE
C      CNSBL  = CHAM_NO_S BASE LOCALE POUR CHAQUE NODE DU MAILLAGE
C               (AXE NORMALE ET AXE TANGENTE AU PLANE DE LA FISSURE)
C
C    SORTIE
C    ------
C      NODCAL = VECTEUR CONTENANT LE NUMERO DES NOEUDS DANS LE TORE
C      ELECAL = VECTEUR CONTENANT LE NUMERO DES ELEMENTS DANS LE TORE
C      LIGGRD = LIGREL DEFINISSENT LE TORE (A UTILISER POUR LE CALCUL
C               DES GRADIENT DES LEVEL SETS)
C      VCNT   = METHODE UPWIND SEULEMENT. VECTEUR CONNEXION NODALE TORE.
C               VOIR XPRCNU.F POUR LA DESCRIPTION DE CETTE OBJET.
C      GRLRT  = METHODE UPWIND SEULEMENT. VECTEUR DISTANCE NODALE TORE.
C               VOIR XPRCNU.F POUR LA DESCRIPTION DE CETTE OBJET.
C      CNSLN  = CHAMP_NO_S DES NOUVELLES VALEURS DE LA LEVEL SET
C               NORMALE
C      GRLN   = CHAMP_NO_S DES NOUVELLES VALEURS DU GRADIENT DE CNSLN
C      CNSLT  = CHAMP_NO_S DES NOUVELLES VALEURS DE LA LEVEL SET
C               TANGENTE
C      GRLT   = CHAMP_NO_S DES NOUVELLES VALEURS DU GRADIENT DE CNSLT
C      RADTOR = VALEUR DU RAYON DU TORE UTILISEE
C
C     ------------------------------------------------------------------

C     ----- DEBUT COMMUNS NORMALISES  JEVEUX  --------------------------
      INTEGER          ZI
      COMMON  /IVARJE/ ZI(1)
      REAL*8           ZR
      COMMON  /RVARJE/ ZR(1)
      COMPLEX*16       ZC
      COMMON  /CVARJE/ ZC(1)
      LOGICAL          ZL
      COMMON  /LVARJE/ ZL(1)
      CHARACTER*8      ZK8
      CHARACTER*16             ZK16
      CHARACTER*24                      ZK24
      CHARACTER*32                               ZK32
      CHARACTER*80                                        ZK80
      COMMON  /KVARJE/ ZK8(1), ZK16(1), ZK24(1), ZK32(1), ZK80(1)
      CHARACTER*32    JEXNUM,JEXATR
C     -----  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------

C     GENERAL PURPOSE
      INTEGER      IBID,IRET,I,J,K,NDIM,IFM,NIV,ELDIM
      CHARACTER*8  K8B
      REAL*8       MESERR(2)

C     TORUS
      INTEGER      JLISNO,NNODGR,JNOCAL,JDISFR,NNODTO,NBELNO,JNOEL,
     &             JCONX1,JCONX2,NOCUR,NUMELM,JMAI,ITYPMA,NBMA,
     &             JELCAL,NELETO,JELECA,JAUX,JTMDIM,NODINS
      INTEGER      JNDSUP
      CHARACTER*19 LISTEL
      REAL*8       RDNEW

C     LEVEL SETS AND LOCAL BASE
      INTEGER      JLSN,JLST,JBL,JDISV

C     NODAL CONNECTION TABLE
      INTEGER      JVCN,JVCND,JVCNT,JVCNDT,JLISOL,JGRLR,JGRLRT
      CHARACTER*24 LISOLD

C     EVALUATION OF THE GRADIENT OF THE LEVEL SET
      CHARACTER*8      LPAIN(4),LPAOUT(2)
      CHARACTER*19     CNOLN,CNOLT,CELGLS,CHAMS
      CHARACTER*24     LCHIN(4),LCHOUT(2)

C-----------------------------------------------------------------------
C     DEBUT
C-----------------------------------------------------------------------
      CALL JEMARQ()
      CALL INFMAJ()
      CALL INFNIV(IFM,NIV)

C     RETRIEVE THE NUMBER OF NODES DEFINING THE GRID
      CALL DISMOI('F','NB_NO_MAILLA',NOMA,'MAILLAGE',NNODGR,K8B,IRET)

C     RETRIEVE THE NUMBER OF ELEMENTS IN THE MESH
      CALL DISMOI('F','NB_MA_MAILLA',NOMA,'MAILLAGE',NBMA,K8B,IRET)

C     RETRIEVE THE TYPE OF EACH ELEMENT IN THE MESH
      CALL JEVEUO(NOMA//'.TYPMAIL','L',JMAI)

C     RETRIEVE THE DIMENSIONS OF THE EXISTING ELEMENTS
      CALL JEVEUO('&CATA.TM.TMDIM','L',JTMDIM)

C     RETRIEVE THE PROBLEM DIMENSION
      CALL DISMOI('F','DIM_GEOM',NOMA,'MAILLAGE',NDIM,K8B,IRET)

C     RETRIEVE THE DEFINITION OF THE ELEMENTS IN TERMS OF NODES
      CALL JEVEUO(NOMA//'.CONNEX','L',JCONX1)
      CALL JEVEUO(JEXATR(NOMA//'.CONNEX','LONCUM'),'L',JCONX2)

C     ELABORATE THE TORUS ONLY IF THE LOCALIZATION HAS BEEN REQUESTED
      IF (.NOT.TORE) THEN

C        THE LOCALIZATION HAS NOT BEEN REQUESTED BY THE USER. THEREFORE
C        ALL THE ELEMENTS OF THE GRID MUST BE USED FOR THE COMPUTATION.

C        CREATE THE BOOLEAN LIST TO MARK THE ELEMENTS AND THE NODES
C        THAT ARE INSIDE THE TORUS
         CALL WKVECT('&&XPRTOR.LISTELE','V V L',NBMA,JELCAL)
         CALL WKVECT('&&XPRTOR.LISTNOD','V V L',NNODGR,JLISNO)

         CALL JEUNDF('&&XPRTOR.LISTELE')
         CALL JEUNDF('&&XPRTOR.LISTNOD')

         CALL JEVEUO('&&XPRTOR.LISTELE','E',JELCAL)
         CALL JEVEUO('&&XPRTOR.LISTNOD','E',JLISNO)

C        COUNTER FOR THE NUMBER OF NODES IN THE DOMAIN
         NNODTO=0

C        COUNTER FOR THE NUMBER OF ELEMENTS IN THE DOMAIN
         NELETO=0

         DO 200 I=1,NBMA

C           WORK ONLY WITH THE ELEMENTS OF THE SAME DIMENSION OF
C           THE MODEL
            ITYPMA=ZI(JMAI-1+I)
            ELDIM=ZI(JTMDIM-1+ITYPMA)

            IF(ELDIM.EQ.NDIM) THEN

C              MARK THE ELEMENT AS INSIDE THE DOMAIN
               ZL(JELCAL-1+I) = .TRUE.

               NELETO = NELETO+1

C              RETRIEVE THE NODES DEFINING THE ELEMENT
               CALL JEVEUO(JEXNUM('&CATA.TM.NBNO',ITYPMA),'L',
     &                     JAUX)

               DO 201 K=1,ZI(JAUX)

C                 SELECT EACH NODE OF THE ELEMENT
                  NOCUR = ZI(JCONX1-1+ZI(JCONX2-1+I)+K-1)

C                 MARK THE NODE AS INSIDE THE DOMAIN
                  IF (.NOT.ZL(JLISNO-1+NOCUR)) THEN
                     ZL(JLISNO-1+NOCUR) = .TRUE.
                     NNODTO = NNODTO+1
                  ENDIF

201            CONTINUE

            ENDIF

200      CONTINUE

C        BUILD THE LIST OF THE NODES OF THE DOMAIN
         CALL WKVECT(NODCAL,'V V I',NNODTO,JNOCAL)
         J=1
         DO 202 I=1,NNODGR
            IF (ZL(JLISNO-1+I)) THEN
               ZI(JNOCAL-1+J) = I
               J=J+1
            ENDIF
202      CONTINUE

C        BUILD THE LIST OF THE ELEMENTS OF THE DOMAIN
         CALL WKVECT(ELECAL,'V V I',NELETO,JELECA)
         J=1
         DO 203 I=1,NBMA
            IF (ZL(JELCAL-1+I)) THEN
               ZI(JELECA-1+J) = I
               J=J+1
            ENDIF
203      CONTINUE

C        CREATE THE LIGREL
         CALL EXLIM1(ZI(JELECA),NELETO,MODEL,'V',LIGGRD)

         CALL WKVECT(FISS//'.PRO.NOEUD_TORE','G V L',NNODGR,JNOCAL)
         DO 204 I=1,NNODGR
            ZL(JNOCAL-1+I) = ZL(JLISNO-1+I)
204      CONTINUE

         CALL JEDETR('&&XPRTOR.LISTELE')
         CALL JEDETR('&&XPRTOR.LISTNOD')

      ELSE

C        RETREIVE THE DISTANCES OF THE NODES FROM THE FRONT
         CALL JEVEUO(DISFR,'L',JDISFR)

C        RETRIEVE THE DISTANCE VECTOR AS WELL
         CALL JEVEUO(CNSDIS//'.CNSV','L',JDISV)

C        RETRIEVE THE LEVEL SETS
         CALL JEVEUO(CNSLN//'.CNSV','E',JLSN)
         CALL JEVEUO(CNSLT//'.CNSV','E',JLST)

C        RETRIEVE THE LOCAL BASE FOR EACH NODE OF THE GRID
         CALL JEVEUO(CNSBL//'.CNSV','L',JBL)

C        CREATE THE BOOLEAN LIST TO MARK THE ELEMENTS THAT ARE INSIDE
C        THE TORUS
         LISTEL='&&XPRTOR.LISTELE'
         CALL WKVECT(LISTEL,'V V L',NBMA,JELCAL)

         DO 400 I=1,NBMA
            ZL(JELCAL-1+I) = .FALSE.
400      CONTINUE

C        COUNTER FOR THE NUMBER OF NODES IN THE NEW TORUS
         NNODTO=0

C        COUNTER FOR THE NUMBER OF ELEMENTS IN THE NEW TORUS
         NELETO=0

C        ***********************************************************
C        SELECT THE NODES INSIDE THE NEW TORUS
C        ***********************************************************

C        CREATE A COPY OF THE LOGICAL LIST OF THE NODES INSIDE THE
C        TORUS OF THE ACTUAL CRACK
         LISOLD='&&OP0010.TORE'
         CALL JEEXIN(FISPRE//'.PRO.NOEUD_TORE',IBID)
         IF (IBID.EQ.0) THEN
C           THE DOMAIN LOCALISATION WAS NOT USED IN THE PREVIOUS
C           PROPAGATION STEP. ALL THE NODES WERE CONSIDERED IN THE
C           CALCULATION. A LIST WITH ALL THE NODES TO .TRUE. IS THEN
C           CREATED.
            CALL WKVECT(LISOLD,'G V L',NNODGR,JLISOL)

            DO 302 I=1,NNODGR
               ZL(JLISOL-1+I) = .TRUE.
302         CONTINUE
         ELSE
C           THE DOMAIN LOCALISATION WAS USED IN THE PREVIOUS PROPAGATION
C           STEP. WE JUST NEED TO COPY IT.
            CALL JEDUPO(FISPRE//'.PRO.NOEUD_TORE','V',LISOLD,.FALSE.)
            CALL JEVEUO(LISOLD,'L',JLISOL)
         ENDIF

C        CREATE THE LOGICAL LIST FOR THE TORUS OF THE PROPAGATED CRACK
         CALL WKVECT(FISS//'.PRO.NOEUD_TORE','G V L',NNODGR,JLISNO)

C        RESET THE LIST FOR THE NEW TORUS
         DO 500 I=1,NNODGR
            ZL(JLISNO-1+I) = .FALSE.
500      CONTINUE

C        VARIABLE USED FOR THE COMPUTATION OF THE EFFECTIVE RADIUS OF
C        THE TORUS
         RDNEW = RADTOR

C        ELABORATE EACH NODE OF THE GRID
         DO 1000 I=1,NNODGR

            IF (ZR(JDISFR-1+I).LE.RADTOR)
     &         THEN

C              RETRIEVE THE ELEMENTS CONTAINING THE NODE
               CALL JELIRA(JEXNUM(CNXINV,I),'LONMAX',NBELNO,K8B)
               CALL JEVEUO(JEXNUM(CNXINV,I),'L',JNOEL)

C              ALL THE NODES OF THE ELEMENTS CONTAINING THE SELECTED
C              NODE MUST BE INCLUDED IN THE TORUS IN ORDER TO CORRECTLY
C              DEFINE THE TORUS
               DO 1500 J=1,NBELNO

                  NUMELM=ZI(JNOEL-1+J)

C                 WORK ONLY WITH THE ELEMENTS OF THE SAME DIMENSION OF
C                 THE MODEL
                  ITYPMA=ZI(JMAI-1+NUMELM)
                  ELDIM=ZI(JTMDIM-1+ITYPMA)

                  IF(ELDIM.EQ.NDIM) THEN

C                    RETRIEVE THE NODES DEFINING THE ELEMENT
                     CALL JEVEUO(JEXNUM('&CATA.TM.NBNO',ITYPMA),'L',
     &                           JAUX)

                     DO 1700 K=1,ZI(JAUX)
C                       SELECT EACH NODE OF THE ELEMENT
                        NOCUR = ZI(JCONX1-1+ZI(JCONX2-1+NUMELM)+K-1)
C                       UPDATE THE RADIUS OF THE TORUS
                        IF (ZR(JDISFR-1+NOCUR).GT.RDNEW)
     &                        RDNEW=ZR(JDISFR-1+NOCUR)
1700                 CONTINUE

                  ENDIF

1500           CONTINUE

            ENDIF

1000     CONTINUE

C        ESTIMATE THE RADIUS OF THE TORUS THAT MUST BE IMPOSED, IF ITS
C        VALUE HAS NOT BEEN GIVEN AS INPUT
         IF (RADIMP.LT.0.D0) RADIMP = (SQRT(RADTOR)+2*(SQRT(RDNEW)-
     &                                SQRT(RADTOR)))**2

C        IF THE RADIUS OF THE TORUS THAT MUST BE IMPOSED IS LOWER THAN
C        THE RADIUS OF THE TORUS THAT MUST BE GUARANTEED, A FATAL ERROR
C        IS ISSUED
         IF (RADIMP.LT.RDNEW) THEN

            MESERR(1) = SQRT(RADIMP)
            MESERR(2) = SQRT(RDNEW)
            CALL U2MESR('F','XFEM2_99',2,MESERR)

         ENDIF

C        UPDATE THE RADIUS OF THE TORUS
         RADTOR = RADIMP

C        OK. LET'S ELABORATE THE TORUS THAT MUST BE IMPOSED.
C        ELABORATE EACH NODE OF THE GRID
         DO 1001 I=1,NNODGR

            IF (ZR(JDISFR-1+I).LE.RADIMP)
     &         THEN

C              SET THE FLAG TO MARK THAT THE NODE MUST BE CONSIDERED
C              IN THE CALCULATIONS
               ZL(JLISNO-1+I) = .TRUE.
            ENDIF

1001     CONTINUE

C        CREATE A TEMPORARY LOGICAL LIST FOR THE NODES IN ORDER TO
C        FIND AND ELIMINATE THE NODES WHOSE SUPPORT IS NOT IN THE
C        LIST OF ELEMENTS INSIDE THE TORUS
         CALL WKVECT('&&XPRTOR.NODSUPP','V V L',NNODGR,JNDSUP)
         CALL JEUNDF('&&XPRTOR.NODSUPP')
         CALL JEVEUO('&&XPRTOR.NODSUPP','E',JNDSUP)

C        ALL THE ELEMENTS WHOSE NODES ARE INSIDE THE IMPOSED TORUS MUST
C        BE SELECTED IN ORDER TO CORRECTLY DEFINE THE DOMAIN
         DO 1002 I=1,NNODGR

C           ELABORATE ONLY THE SELECTED NODES
            IF (ZL(JLISNO-1+I)) THEN

C              RETRIEVE THE ELEMENTS CONTAINING THE NODE
               CALL JELIRA(JEXNUM(CNXINV,I),'LONMAX',NBELNO,K8B)
               CALL JEVEUO(JEXNUM(CNXINV,I),'L',JNOEL)

C              CHECK EACH ELEMENT CONTAINING THE NODE
               DO 1502 J=1,NBELNO

                  NUMELM=ZI(JNOEL-1+J)

C                 WORK ONLY WITH THE ELEMENTS OF THE SAME DIMENSION OF
C                 THE MODEL
                  ITYPMA=ZI(JMAI-1+NUMELM)
                  ELDIM=ZI(JTMDIM-1+ITYPMA)

                  IF(ELDIM.EQ.NDIM) THEN

C                    RETRIEVE THE NODES DEFINING THE ELEMENT
                     CALL JEVEUO(JEXNUM('&CATA.TM.NBNO',ITYPMA),'L',
     &                           JAUX)

C                    RESET THE COUNTER FOR THE NUMBER OF NODES OF THE
C                    ELEMENT WHICH ARE INSIDE THE TORE
                     NODINS=0

                     DO 1702 K=1,ZI(JAUX)

                        NOCUR = ZI(JCONX1-1+ZI(JCONX2-1+NUMELM)+K-1)
                        IF (ZL(JLISNO-1+NOCUR)) NODINS=NODINS+1

1702                 CONTINUE

C                    SELECT THE ELEMENT IF ALL OF ITS NODES ARE INSIDE
C                    THE TORUS
                     IF (NODINS.EQ.ZI(JAUX)) THEN
                        ZL(JNDSUP-1+I) = .TRUE.
                        IF(.NOT.ZL(JELCAL-1+NUMELM)) THEN
                           ZL(JELCAL-1+NUMELM) = .TRUE.
                           NELETO = NELETO+1
                        ENDIF
                     ENDIF

                  ENDIF

1502           CONTINUE

            ENDIF

1002     CONTINUE

C        THE NODES FOR WHICH ALL THE ELEMENTS OF THE SUPPORT DO NOT
C        BELONG TO THE DOMAIN MUST BE REMOVED FROM THE LIST (UNDEFINED
C        GRADIENT!)
         DO 1734 I=1,NNODGR
            IF (.NOT.ZL(JNDSUP-1+I).AND.ZL(JLISNO-1+I)) THEN
               ZL(JLISNO-1+I)=.FALSE.
            ENDIF
1734     CONTINUE

         CALL JEDETR('&&XPRTOR.NODSUPP')

C        ***********************************************************
C        CALCULATE THE NEW LEVEL SETS FOR EACH NODE IF NECESSARY
C        ***********************************************************

C        ELABORATE EACH NODE OF THE GRID
         DO 2000 I=1,NNODGR

            IF (ZL(JLISNO-1+I)) THEN

C              CHECK IF THE LEVEL SET MUST BE CALCULATED FOR THIS NODE
               IF (.NOT.ZL(JLISOL-1+I)) THEN

C                 YES, THE LEVEL SET VALUE MUST BE UPDATED
                  ZR(JLSN-1+I) = 0.D0
                  ZR(JLST-1+I) = 0.D0

C                 CALCULATE THE NORMAL AND TANGENTIAL DISTANCES AS
C                 A SCALAR PRODUCT BETWEEN THE DISTANCE VECTOR AND THE
C                 AXIS OF THE LOCAL BASE IN THE NODE
                  DO 2500 J=1,NDIM

                     ZR(JLSN-1+I)=ZR(JLSN-1+I)+ZR(JDISV-1+NDIM*(I-1)+J)*
     &               ZR(JBL-1+2*NDIM*(I-1)+J)

                     ZR(JLST-1+I)=ZR(JLST-1+I)+ZR(JDISV-1+NDIM*(I-1)+J)*
     &               ZR(JBL-1+2*NDIM*(I-1)+J+NDIM)

2500              CONTINUE

               ENDIF

C              INCREMENT THE COUNTER FOR THE NODES IN THE TORUS
               NNODTO = NNODTO+1

            ENDIF

2000     CONTINUE

C        ***********************************************************
C        - CREATE THE LIST OF THE NUMBER OF THE NODES IN THE TORUS
C        - CREATE THE LIST OF THE NUMBER OF THE ELEMENTS IN THE TORUS
C        - CREATE THE NODAL CONNECTION TABLE FOR THE TORUS
C        ***********************************************************

C        CREATE A VECTOR CONTAINING THE NUMBER OF THE NODES INSIDE THE
C        TORUS
         CALL WKVECT(NODCAL,'V V I',NNODTO,JNOCAL)

C        CREATE A VECTOR CONTAINING THE NUMBER OF THE ELEMENTS INSIDE
C        THE TORUS
         CALL WKVECT(ELECAL,'V V I',NELETO,JELECA)

         IF (METHOD(1:6).EQ.'UPWIND') THEN
C           CREATE THE VECTORS FOR THE NODAL CONNECTION TABLE OF THE
C           TORUS
            CALL WKVECT(VCNT,'V V I',6*NNODTO,JVCNT)
            CALL WKVECT(GRLRT,'V V R',10+6*NNODTO,JGRLRT)
            JVCNDT = JGRLRT+10

C           RETRIEVE THE NODAL CONNECTION TABLE OF THE GRID
            CALL JEVEUO(VCN,'L',JVCN)
            CALL JEVEUO(GRLR,'L',JGRLR)
            JVCND = JGRLR+10

C           COPY THE LOCAL BASE OF THE GRID AND THE VALUE OF THE
C            SHORTEST EDGE IN THE GRID
            DO 2100 I=1,10
               ZR(JGRLRT-1+I) = ZR(JGRLR-1+I)
2100        CONTINUE
         ENDIF

C        TEMPORARY POINTER
         J=1

         DO 3000 I=1,NNODGR

            IF (ZL(JLISNO-1+I)) THEN

               CALL ASSERT(J.LE.NNODTO)

C              STORE THE NUMBER OF THE NODE
               ZI(JNOCAL-1+J) = I

               IF (METHOD(1:6).EQ.'UPWIND') THEN
C                 STORE THE CONNECTION TABLE FOR THE NODE
                  DO 3500 K=1,6
                     ZI(JVCNT-1+6*(J-1)+K)  = ZI(JVCN-1+6*(I-1)+K)
                     ZR(JVCNDT-1+6*(J-1)+K) = ZR(JVCND-1+6*(I-1)+K)
3500              CONTINUE
               ENDIF

C              INCREMENT THE POINTER FOR THE ACTUAL NODE IN THE TORUS
               J = J+1

            ENDIF

3000     CONTINUE

C        TEMPORARY POINTER
         J=1

         DO 4700 I=1,NBMA

            IF (ZL(JELCAL-1+I)) THEN

               CALL ASSERT(J.LE.NELETO)
               ZI(JELECA-1+J) = I
               J=J+1

            ENDIF

4700     CONTINUE

C        ***********************************************************
C        UPDATE THE NODAL CONNECTION TABLE FOR THE TORUS
C        ***********************************************************

         IF (METHOD(1:6).EQ.'UPWIND') THEN

            DO 4000 I=1,NNODTO

               DO 4500 J=1,6

C                 RETRIEVE THE Jth NEIGHBORING NODE OF THE Ith NODE OF
C                 THE TORUS
                  K = ZI(JVCNT-1+6*(I-1)+J)

C                 IF THE NEIGHBORING NODE EXISTS, CHECK IF IT'S INSIDE
C                 THE TORUS
                  IF (K.GT.0) THEN
C                   IF NOT, IT MUST BE REMOVED FROM THE CONNECTION TABLE
C                   OF THE TORUS
                    IF (.NOT.ZL(JLISNO-1+K)) ZI(JVCNT-1+6*(I-1)+J)=0

                  ENDIF

4500           CONTINUE

4000        CONTINUE

         ENDIF

C        ***********************************************************
C        CREATE THE NEW LIGREL FOR THE TORUS IN ORDER TO SPEED UP
C        THE CALCULUS OF THE GRADIENT
C        ***********************************************************

C        CREATE THE LIGREL
         CALL EXLIM1(ZI(JELECA),NELETO,MODEL,'V',LIGGRD)

C        ***********************************************************
C        CALCULATE THE GRADIENTS OF THE LEVEL SETS
C        ***********************************************************

C        DECLARE SOME DATA STRUCTURES FOR THE EVALUATION OF THE GRADIENT
         CNOLN  = '&&XPRTOR.CNOLN'
         CNOLT  = '&&XPRTOR.CNOLT'
         CELGLS = '&&XPRTOR.CELGLS'
         CHAMS  = '&&XPRTOR.CHAMS'

C        EVALUATION OF THE GRADIENT OF THE NORMAL LEVEL SET
         CALL CNSCNO(CNSLN,' ','NON','V',CNOLN,'F',IBID)
         LPAIN(1)='PGEOMER'
         LCHIN(1)=NOMA//'.COORDO'
         LPAIN(2)='PNEUTER'
         LCHIN(2)=CNOLN
         LPAOUT(1)='PGNEUTR'
         LCHOUT(1)=CELGLS

         CALL CALCUL('S','GRAD_NEUT_R',LIGGRD,2,LCHIN,LPAIN,1,LCHOUT,
     &               LPAOUT,'V','OUI')

         CALL CELCES (CELGLS, 'V', CHAMS)
         CALL CESCNS (CHAMS, ' ', 'V', GRLN, ' ', IBID)

C        EVALUATION OF THE GRADIENT OF THE TANGENTIAL LEVEL SET
         CALL CNSCNO(CNSLT,' ','NON','V',CNOLT,'F',IBID)
         LPAIN(1)='PGEOMER'
         LCHIN(1)=NOMA//'.COORDO'
         LPAIN(2)='PNEUTER'
         LCHIN(2)=CNOLT
         LPAOUT(1)='PGNEUTR'
         LCHOUT(1)=CELGLS

         CALL CALCUL('S','GRAD_NEUT_R',LIGGRD,2,LCHIN,LPAIN,1,LCHOUT,
     &               LPAOUT,'V','OUI')

         CALL CELCES (CELGLS, 'V', CHAMS)
         CALL CESCNS (CHAMS, ' ', 'V', GRLT, ' ', IBID)

C        DESTROY THE TEMPORARY JEVEUX OBJECTS
         CALL JEDETR(CNOLN)
         CALL JEDETR(CNOLT)
         CALL JEDETR(CELGLS)
         CALL JEDETR(CHAMS)
         CALL JEDETR(LISOLD)
         CALL JEDETR(LISTEL)

      ENDIF

C-----------------------------------------------------------------------
C     FIN
C-----------------------------------------------------------------------
      CALL JEDEMA()
      END
