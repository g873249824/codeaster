      SUBROUTINE NMCHSV(CNFINT,SECMBR,SDDYNA,SDDISC,NUMINS)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 14/04/2008   AUTEUR GREFFET N.GREFFET 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      CHARACTER*19  CNFINT,SDDYNA,SDDISC
      CHARACTER*24  SECMBR(8)
      INTEGER       NUMINS
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (DYNAMIQUE - ALGORITHME)
C
C SAUVEGARDE DES VECTEURS SECONDS MEMBRES ET EFFORTS INTERIEURS
C      
C ----------------------------------------------------------------------
C
C
C IN  CNFINT : VECTEUR ASSEMBLE DES FORCES INTERIEURES
C IN  SECMBR : VECTEURS ASSEMBLES DES FORCES EXTERIEURES
C IN  SDDYNA : SD DYNAMIQUE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER       IRET     
      CHARACTER*24  HHTC ,LOSD
      INTEGER       JHHTC,JLOSD,DIARCH
      CHARACTER*24  CNFEDO,CNFEPI,CNDIDO,CNDIPI,CNFSDO,CNFSPI
      CHARACTER*24  CNDIDI,CNCINE
      CHARACTER*24  FEDOLD,FEPILD,DIDOLD,DIPILD,FSDOLD,FSPILD
      CHARACTER*24  DIDILD,CINELD,CNFOLD
      LOGICAL       NDYNLO
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- ACCES AUX OBJETS DE LA SD SDDYNA
C
      HHTC = SDDYNA(1:15)//'.HHT_COMP'
      LOSD = SDDYNA(1:15)//'.INFO_SD'
      CALL JEVEUO(HHTC,'L',JHHTC)
      CALL JEVEUO(LOSD,'E',JLOSD)
C
C --- DECOMPACTION DES VARIABLES CHAPEAUX
C
      CALL DESAGG(SECMBR,CNFEDO,CNFEPI,CNDIDO,CNDIPI,
     &            CNFSDO,CNFSPI,CNDIDI,CNCINE)      
C
C --- NOM DES CHAMPS
C      
      FEDOLD = ZK24(JHHTC+1-1)
      FEPILD = ZK24(JHHTC+2-1)
      DIDOLD = ZK24(JHHTC+3-1)
      DIPILD = ZK24(JHHTC+4-1)
      FSDOLD = ZK24(JHHTC+5-1)
      FSPILD = ZK24(JHHTC+6-1)
      DIDILD = ZK24(JHHTC+7-1)
      CINELD = ZK24(JHHTC+8-1) 
      CNFOLD = ZK24(JHHTC+9-1)       
C
C --- RECOPIE DES CHAMPS
C
      CALL COPISD('CHAMP_GD','V',CNFINT,CNFOLD)
      IF  ( NUMINS .LT. 2 ) THEN
        CALL EXISD('CHAMP',CNFEDO, IRET)
        IF ( IRET .NE. 0 ) THEN
          CALL EXISD('CHAMP',FEDOLD, IRET)
          IF ( IRET .EQ. 0 ) THEN
            CALL COPISD('CHAMP_GD','V',CNFEDO,FEDOLD)
          ENDIF
        ENDIF
        CALL EXISD('CHAMP',CNFEPI, IRET)
        IF ( IRET .NE. 0 ) THEN
          CALL EXISD('CHAMP',FEPILD, IRET)
          IF ( IRET .EQ. 0 ) THEN
            CALL COPISD('CHAMP_GD','V',CNFEPI,FEPILD)
          ENDIF
        ENDIF
        CALL EXISD('CHAMP',CNDIDO, IRET)
        IF ( IRET .NE. 0 ) THEN
          CALL EXISD('CHAMP',DIDOLD, IRET)
          IF ( IRET .EQ. 0 ) THEN
            CALL COPISD('CHAMP_GD','V',CNDIDO,DIDOLD)
          ENDIF
        ENDIF
        CALL EXISD('CHAMP',CNDIPI, IRET)
        IF ( IRET .NE. 0 ) THEN
          CALL EXISD('CHAMP',DIPILD, IRET)
          IF ( IRET .EQ. 0 ) THEN
            CALL COPISD('CHAMP_GD','V',CNDIPI,DIPILD)
          ENDIF
        ENDIF
        CALL EXISD('CHAMP',CNFSDO, IRET)
        IF ( IRET .NE. 0 ) THEN
          CALL EXISD('CHAMP',FSDOLD, IRET)
          IF ( IRET .EQ. 0 ) THEN
            CALL COPISD('CHAMP_GD','V',CNFSDO,FSDOLD)
          ENDIF
        ENDIF
        CALL EXISD('CHAMP',CNFSPI, IRET)
        IF ( IRET .NE. 0 ) THEN
          CALL EXISD('CHAMP',FSPILD, IRET)
          IF ( IRET .EQ. 0 ) THEN
            CALL COPISD('CHAMP_GD','V',CNFSPI,FSPILD)
          ENDIF
        ENDIF
        CALL EXISD('CHAMP',CNDIDI, IRET)
        IF ( IRET .NE. 0 ) THEN
          CALL EXISD('CHAMP',DIDILD, IRET)
          IF ( IRET .EQ. 0 ) THEN
            CALL COPISD('CHAMP_GD','V',CNDIDI,DIDILD)
          ENDIF
        ENDIF
        CALL EXISD('CHAMP',CNCINE, IRET)
        IF ( IRET .NE. 0 ) THEN
          CALL EXISD('CHAMP',CINELD, IRET)
          IF ( IRET .EQ. 0 ) THEN
            CALL COPISD('CHAMP_GD','V',CNCINE,CINELD)
          ENDIF
        ENDIF
      ENDIF
C      
      ZL(JLOSD+10-1) = .TRUE.
C
      CALL JEDEMA()
      END
