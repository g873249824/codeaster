      SUBROUTINE NOLI75(NOMRES,SDNOLZ)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 13/10/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2008  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C TOLE CRP_20
C
      IMPLICIT NONE
      CHARACTER*(*) SDNOLZ
      CHARACTER*8   NOMRES
C
C ----------------------------------------------------------------------
C
C OPERATEUR DE RETOUR A LA BASE PHYSIQUE A PARTIR DE DONNEES
C GENERALISEES DANS LE CAS D'UN CALCUL TRANSITOIRE NON-LINEAIRE
C
C ----------------------------------------------------------------------
C
C  
C IN  SDNOLI : NOM DU CONCEPT DE TYPE EVOL_NOLI LU
C IN  NOMRES : NOM DU CONCEPT DE TYPE EVOL_NOLI CREE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      CHARACTER*32  JEXNUM,JEXNOM
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      CHARACTER*8  K8BID
      INTEGER      IBID,IRET,IRETOU,IE,IERD,I,J
      INTEGER      ICHAM,IARCH,IMODE
      REAL*8       R8BID
      COMPLEX*16   C16BID
      INTEGER      NBCHAM,NUME
      CHARACTER*16 CHAMP(8),TYPRES
      INTEGER      N0,N1
      INTEGER      INOE,ICMP,IDDL
      CHARACTER*8  BASEMO,MAILLA,LINTF,NOMNOL,NOMCMP(6)
      CHARACTER*8  MACREL,MAYA  ,NOGDSI
      INTEGER      NMC,NEC,NEQ
      INTEGER      NBINST
      INTEGER      NBMODE,NBNOE,NBMDEF,NBMDYN,NBNDYN
      INTEGER      IADREF,IADRIF,IADESM,IACONX,IAPRNO
      INTEGER      JNOCMP,LNOCMP,IDBASE,JRESTR,IVALE,LDNEW,LINST
      CHARACTER*14 NUMDDL
      CHARACTER*24 NUMEDD,NPRNO,NOMCHA,CHAMNO
      CHARACTER*19 CHAM19,CHGENE,SDNOLA
      CHARACTER*19 KNUME,KINST,KREFE
      INTEGER      JNUME,JINST,JREFE
      CHARACTER*8  CTYPE,SDNOLI
      CHARACTER*24 TRGENE
      INTEGER      JTRGEN      
C      
      DATA NOMCMP  /'DX      ','DY      ','DZ      ',
     &              'DRX     ','DRY     ','DRZ     '/      
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      NMC    = 0
      BASEMO = ' '
      CTYPE  = 'K24'    
      TYPRES = 'EVOL_NOLI' 
      SDNOLI = SDNOLZ
      SDNOLA = SDNOLZ
      KREFE  = NOMRES
C 
C --- RECUPERATION BASE MODALE
C      
      CALL GETVID(' ','MACR_ELEM_DYNA',1,1,1,MACREL,NMC)
      IF (NMC.NE.0) THEN
        CALL JEVEUO(MACREL//'.MAEL_REFE','L',IADREF)
        BASEMO = ZK24(IADREF)
      ELSE
        CALL GETVID(' ','BASE_MODALE',1,1,1,BASEMO,IBID)
      ENDIF
C     
C --- NOMBRE DE MODES
C         
      CALL RSORAC(BASEMO,'LONUTI',IBID  ,R8BID ,K8BID ,
     &            C16BID,R8BID   ,K8BID ,NBMODE,1     ,
     &            IBID)
C
C --- NUME_DDL ATTACHE A LA BASE MODALE
C     
      CALL JEVEUO(BASEMO//'           .REFD','L',IADRIF)
      NUMEDD = ZK24(IADRIF+3)
C
C --- TRAITEMENT DES MACRO-ELEMENTS DYNAMIQUES
C
      IF (NMC.NE.0) THEN
        CALL DISMOI('F'   ,'NOM_MAILLA',NUMEDD(1:14),'NUME_DDL',
     &              IBID  ,MAILLA      ,IRET)
     
        LINTF = ZK24(IADRIF+4)
        CALL JELIRA(JEXNUM(LINTF//'.IDC_LINO',1),'LONMAX',
     &              NBNOE ,K8BID)
     
C       --- NOMBRE DE DEFORMEES ET DE MODES DYNAMIQUES
    
        CALL BMNBMD(BASEMO,'DEFORMEE',NBMDEF)
        NBMDYN = NBMODE-NBMDEF

C       --- NOMBRE DE NOEUDS DYNAMIQUES 
       
        CALL JEVEUO(MACREL//'.DESM','L',IADESM)
        NBNDYN = ZI(IADESM+1)-NBNOE
        IF (NBNDYN.NE.0) THEN
          NEC    = NBMDYN/NBNDYN
        ELSE
          NEC    = 0
        ENDIF

C       --- CREATION DU TABLEAU NOEUD-COMPOSANTE ASSOCIES AUX MODES
           
        CALL WKVECT('&&NOLI75.NOECMP','V V K8',2*NBMODE,JNOCMP)
        CALL JEVEUO(MACREL//'.LINO','L',IACONX)
        
        DO 21 I=1,NBNDYN
          CALL JENUNO(JEXNUM(MAILLA//'.NOMNOE',ZI(IACONX+I-1)),NOMNOL)
          DO 22 J=1,NEC
            ZK8(JNOCMP+2*NEC*(I-1)+2*J-2) = NOMNOL
            ZK8(JNOCMP+2*NEC*(I-1)+2*J-1) = NOMCMP(J)
  22      CONTINUE
  21    CONTINUE
        DO 23 I=NBMDYN+1,NBMODE
          CALL RSADPA(BASEMO,'L',1,'NOEUD_CMP',I,0,LNOCMP,K8BID)
          ZK8(JNOCMP+2*I-2) = ZK16(LNOCMP)(1:8)
          ZK8(JNOCMP+2*I-1) = ZK16(LNOCMP)(9:16)
  23    CONTINUE
  
      ENDIF
C      
C --- NOUVELLE NUMEROTATION ?
C         
      CALL GETVID(' ','NUME_DDL',1,1,1,K8BID,IBID  )
      IF (IBID.NE.0) THEN
        CALL GETVID(' ','NUME_DDL',1,1,1,NUMEDD,IBID)
        NUMEDD = NUMEDD(1:14)//'.NUME'
      ENDIF
      NUMDDL = NUMEDD(1:14)
C
C --- RECOPIE DES MODES PROPRES DANS UN VECTEUR DE TRAVAIL 
C       
      CALL DISMOI('F','NB_EQUA',NUMDDL,'NUME_DDL',NEQ,K8BID,IRET)
      CALL WKVECT('&&NOLI75.BASE','V V R',NBMODE*NEQ,IDBASE)
      CALL COPMO2(BASEMO,NEQ   ,NUMDDL,NBMODE,ZR(IDBASE))
C
C --- CHAMPS SUR LESQUELS ON RESTITUE
C      
      CALL GETVTX(' ','TOUT_CHAM',1,1,0,K8BID,N0)
      IF (N0.NE.0) THEN
        NBCHAM   = 3
        CHAMP(1) = 'DEPL'
        CHAMP(2) = 'VITE'
        CHAMP(3) = 'ACCE'
      ELSE
        CALL GETVTX(' ','NOM_CHAM',1,1,0,CHAMP,N1)
        IF (N1.NE.0) THEN
          NBCHAM = -N1
          IF (NBCHAM.GT.8) THEN
            CALL ASSERT(.FALSE.)
          ENDIF
          CALL GETVTX(' ','NOM_CHAM',1,1,NBCHAM,CHAMP,N1)
        ELSE
          CALL U2MESS('A','ALGORITH10_93')
          GOTO 9999
        ENDIF
      ENDIF
C      
C --- RECUPERATION DES INSTANTS ET DES NUMEROS DE RANGEMENT 
C        
      KNUME  = '&&NOLI75.NUM_RANG'
      KINST  = '&&NOLI75.INSTANT'
      CALL RSTRAN('NON' ,SDNOLA,' '   ,1     ,KINST ,
     &            KNUME ,NBINST,IRETOU)
      IF (IRETOU .NE. 0) THEN
        CALL U2MESS('F','UTILITAI4_24')
      ENDIF
      CALL JEEXIN(KINST,IRET  )
      IF ( IRET .GT. 0 ) THEN
        CALL JEVEUO(KINST ,'L',JINST )
        CALL JEVEUO(KNUME ,'L',JNUME )
      END IF 
C           
C --- CREATION DE LA SD RESULTAT EVOL_NOLI
C
      CALL RSCRSD('G',NOMRES,TYPRES,NBINST)
C
C --- ACCES AU PROF_CHNO SI MACRO-ELEMENTS DYNAMIQUES
C
      IF (NMC.NE.0) THEN
        CALL WKVECT('&&NOLI75.RESTR','V V R',NBMODE,JRESTR)
        CALL RSEXCH(SDNOLI,'DEPL',1,CHAM19,IRET )
        CALL DISMOI('F','NOM_MAILLA',CHAM19,'CHAMP'   ,IBID  ,MAYA  ,IE)
        CALL DISMOI('F','NOM_GD'    ,CHAM19,'CHAMP'   ,IBID  ,NOGDSI,IE)
        CALL DISMOI('F','NB_EC'     ,NOGDSI,'GRANDEUR',NEC ,K8BID ,IERD)
        CALL DISMOI('F','PROF_CHNO' ,CHAM19,'CHAMP'   ,IBID  ,NPRNO ,IE)
        NPRNO = NPRNO(1:19)//'.PRNO'
        CALL JEVEUO(JEXNUM(NPRNO,1),'L',IAPRNO)
      ENDIF
C
C --- PROJECTION SUR BASE PHYSIQUE
C
      DO 300 ICHAM = 1 , NBCHAM
        DO 310 IARCH = 1, NBINST
        
          NUME   = ZI(JNUME+IARCH-1)
          
C         --- RECUP POINTEUR SUR CHAMP GENERALISE
          
          IF (NMC.EQ.0) THEN
            
            CALL RSADPA(SDNOLI,'L',1,'TRAN_GENE_NOLI',NUME  ,1,
     &                  JTRGEN,CTYPE)
            TRGENE = ZK24(JTRGEN)
            
            IF ( CHAMP(ICHAM) .EQ. 'DEPL' ) THEN
              CHGENE = TRGENE(1:18)//'D'
            ELSEIF ( CHAMP(ICHAM) .EQ. 'VITE' ) THEN
              CHGENE = TRGENE(1:18)//'V'              
            ELSEIF ( CHAMP(ICHAM) .EQ. 'ACCE' ) THEN
              CHGENE = TRGENE(1:18)//'D'
            ELSE
              CALL U2MESS('A','ALGORITH10_94')
              GOTO 300
            ENDIF
            
            CALL JEEXIN(CHGENE,IRET)
            IF (IRET.EQ.0) THEN
              CALL U2MESS('F','MECANONLINE5_32')
            ELSE
              CALL JEVEUO(CHGENE,'L',JRESTR)    
            ENDIF
            
          ELSE
          
            CALL RSEXCH(SDNOLI,CHAMP(ICHAM)(1:4),NUME  ,NOMCHA,IRET)
            NOMCHA = NOMCHA(1:19)//'.VALE'
            CALL JEVEUO(NOMCHA,'L',IVALE)
            
            DO 24 IMODE=1,NBMODE
              NOMNOL = ZK8(JNOCMP+2*IMODE-2)
              CALL JENONU(JEXNOM(MAYA//'.NOMNOE',NOMNOL),INOE)
              IF (ZK8(JNOCMP+2*IMODE-1).EQ.'DX') ICMP = 1
              IF (ZK8(JNOCMP+2*IMODE-1).EQ.'DY') ICMP = 2
              IF (ZK8(JNOCMP+2*IMODE-1).EQ.'DZ') ICMP = 3
              IF (ZK8(JNOCMP+2*IMODE-1).EQ.'DRX') ICMP = 4
              IF (ZK8(JNOCMP+2*IMODE-1).EQ.'DRY') ICMP = 5
              IF (ZK8(JNOCMP+2*IMODE-1).EQ.'DRZ') ICMP = 6
              IDDL   = ZI(IAPRNO-1+(NEC+2)*(INOE-1)+1)
              ZR(JRESTR+IMODE-1) = ZR(IVALE+IDDL-1+ICMP-1)
  24        CONTINUE
          ENDIF 
          
C         --- RECUP POINTEUR SUR CHAMP PHYSIQUE DANS SD RESULTAT
 
          CALL RSEXCH(NOMRES,CHAMP(ICHAM)(1:4),IARCH,CHAMNO,IRET)
          
C         --- CREATION DU CHAMP       
          
          CALL VTCREB(CHAMNO,NUMEDD,'G','R',NEQ)
          CALL JEVEUO(CHAMNO(1:19)//'.VALE','E',LDNEW) 
          
C         --- TRANSFERT EFFECTIF SUR BASE PHYSIQUE    

          CALL MDGEPH(NEQ   ,NBMODE,ZR(IDBASE),ZR(JRESTR),ZR(LDNEW))
          
C         --- STOCKAGE CHAMP PHYSIQUE

          CALL RSNOCH(NOMRES,CHAMP(ICHAM)(1:4),IARCH,' ')
          IF (ICHAM.EQ.1) THEN
            CALL RSADPA(NOMRES,'E',1,'INST',IARCH,0,LINST,K8BID)
            ZR(LINST) = ZR(JINST+IARCH-1)
          ENDIF
          
          CALL JELIBE(CHGENE)

 310    CONTINUE     
 300  CONTINUE   
C 
C --- ENRICHISSEMENT SD TRAN_GENE -> EVOL_NOLI SD_VERI = 'NON' !!!
C
      CALL WKVECT(KREFE(1:19)//'.REFD','G V K24',6,JREFE)
      ZK24(JREFE  ) = ZK24(IADRIF)
      ZK24(JREFE+1) = ZK24(IADRIF+1)
      ZK24(JREFE+2) = ZK24(IADRIF+2)
      ZK24(JREFE+3) = NUMEDD
      ZK24(JREFE+4) = ZK24(IADRIF+4)
      ZK24(JREFE+5) = ZK24(IADRIF+5)
      CALL JELIBE(KREFE(1:19)//'.REFD')      
C
 9999 CONTINUE   
C
C --- MENAGE
C
      CALL JEDETR('&&NOLI75.BASE'    )
      CALL JEDETR('&&NOLI75.RESTR'   )
      CALL JEDETR('&&NOLI75.NOECMP'  )
      CALL JEDETR('&&NOLI75.NUM_RANG')
      CALL JEDETR('&&NOLI75.INSTANT' )
C
      CALL JEDEMA()
      END
