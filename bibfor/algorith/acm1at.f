      SUBROUTINE ACM1AT(CM1A,MATR,MATASS,MATPRE,CINE,LMAT,GCPC,NEQ,
     &                 NBLIAC,IDEBUC,JLIAC,JAPPTR,JAPCOE,JAPDDL,INDIC,
     &                 XJVMAX)

C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 13/01/2003   AUTEUR PABHHHH N.TARDIEU 
C ======================================================================
C COPYRIGHT (C) 1991 - 2003  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================

      IMPLICIT NONE

      LOGICAL GCPC
      INTEGER IDEBUC,NBLIAC,NEQ,JLIAC,INDIC,LMAT,JAPPTR,JAPCOE,JAPDDL
      REAL*8  XJVMAX
      CHARACTER*19 CM1A,MATASS,MATPRE,MATR
      CHARACTER*24 CINE

C ----------------------------------------------------------------------
C  ROUTINE REALISANT LE CALCUL DE A.C-1.AT PAR RESOLUTION DE C.X=A(I)
C     A(I) -> I-EME COLONNE DE A
C     X    -> I-EME COLONNE DE C-1.A
C  LA ROUTINE EST OPTIMISEE PAR TRAITEMENT DES SECONDS MEMBRES PAR BLOCS
C ----------------------------------------------------------------------
C  CM1A   : MATRICE C-1.AT
C  MATR   : MATRICE A.C-1.AT
C  MATASS : MATRICE ASSEMBLEE DU PROBLEME GLOBAL
C  MATPRE : MATRICE DE PRECONDITIONNEMENT SI GCPC
C  CINE   : CHARGEMENT DE TYPE DIRICHLET
C  LMAT   : DESCRIPTEUR DE LA MATASS 
C  GCPC   : VRAI SI GCPC
C  NEQ    : NOMBRE D'EQUATIONS DU PROBLEME GLOBAL
C  NBLIAC : NOMBRE DE LIAISONS ACTIVES
C  IDEBUC : NUMERO DE LA LIAISON OU COMMENCER LE CALCUL
C  JLIAC  : ADRESSE DE LA SD LISTE DES LIAISONS POTENTIELLES
C  JAPPTR : ADRESSE DE LA SD APPARIEMENT
C  JAPCOE : ADRESSE DE LA SD COEF D'APPARIEMENT
C  JAPDDL : ADRESSE DE LA SD DDL A APPARIER
C  INDIC  : INDIQUE SI L'ON ENLEVE OU AJOUTE UNE LIAISON
C  XJVMAX : UTILE POUR L'ELIMINATION DES PIVOTS NULS
C ----------------------------------------------------------------------

C --------------- DEBUT DECLARATIONS NORMALISEES JEVEUX ---------------

      CHARACTER*32 JEXNUM,JEXNOM
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)

C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------

      INTEGER IRET1,IRET2,IRET3
      INTEGER ILIAC,KK,JCM1A,JCHSEC,LLIAC,JRCINE
      INTEGER JDECAL,NBDDL,JCHSOL,JVA,JVALE
      INTEGER IL,LG,IBID,I,IERD,NBLOC,LGBLMA,DESC,JJ,LLJAC,NPAST
      INTEGER ADRE,LGIND,NBSN,NBSM,NPAS,LGBLOC,NREST,IPAS
      INTEGER TAMPON
      REAL*8 XJVMIN,R8PREM,VAL
      CHARACTER*14 NU
      CHARACTER*19 SOLVEU,CHASEC,CHASOL
      CHARACTER*24 NOMP01,NOMP03,NOMP16,NOMMAT,NOMT26
      DATA NOMT26/'PROVISOI.POINTEUR_TEMP26'/

C ----------------------------------------------------------------------

      CALL JEMARQ()

      SOLVEU = '&&OP0070.SOLVEUR'
      CHASOL = '&&ALGOCO.CHASOL'
      CHASEC = '&&ALGOCO.CHASEC'
      CALL JEVEUO(JEXNUM(MATR//'.VALE',1),'E',JVALE)

      IF (INDIC.NE.-1) THEN

        IF (GCPC) THEN

C - PAR GRADIENT CONJUGUE

          DO 20 ILIAC = IDEBUC,NBLIAC
            LLIAC = ZI(JLIAC+ILIAC-1)

C --- CALCUL DE CHAQUE COLONNE DE AT (UNE PAR LIAISON ACTIVE)

            CALL JEVEUO(JEXNUM(CM1A,LLIAC),'E',JCM1A)
            DO 10 KK = 1,NEQ
              ZR(JCM1A-1+KK) = 0.0D0
   10       CONTINUE
            JDECAL = ZI(JAPPTR+LLIAC-1)
            NBDDL = ZI(JAPPTR+LLIAC) - ZI(JAPPTR+LLIAC-1)
            CALL CALATM(NEQ,NBDDL,1.D0,ZR(JAPCOE+JDECAL),
     &                  ZI(JAPDDL+JDECAL),ZR(JCM1A))

C --- CALCUL DE C-1.AT (EN TENANT COMPTE DES CHARGES DIRICHLET)
            CALL JACOPO(NEQ,'R',JCM1A,JCHSEC)
            CALL RESOUD(MATASS,MATPRE,CHASEC,SOLVEU,CINE,'V',CHASOL,
     &                  '&&ALGOCO_CRIT')
            CALL JEVEUO(CHASOL//'.VALE','L',JCHSOL)
            CALL JACOPO(NEQ,'R',JCHSOL,JCM1A)


            CALL JELIBE(JEXNUM(CM1A,LLIAC))

   20     CONTINUE

        ELSE

C - PAR METHODE DIRECTE AVEC BLOCS DE SECONDS MEMBRES

C --- CALCUL DE LGBLOC

          CALL JEDISP(1,LG)
          LG = LG/2
          NOMMAT = ZK24(ZI(LMAT+1))
          CALL DISMOI('F','NOM_NUME_DDL',NOMMAT,'MATR_ASSE',IBID,NU,
     &                IERD)
          IF (IERD.EQ.0) THEN
            NOMP16 = NU(1:14)//'.MLTF.LGBL'
            NOMP01 = NU(1:14)//'.MLTF.DESC'
            NOMP03 = NU(1:14)//'.MLTF.ADRE'

            CALL JEEXIN(NOMP16,IRET1)
            CALL JEEXIN(NOMP03,IRET2)
            CALL JEEXIN(NOMP01,IRET3)
            IF ((IRET1*IRET2*IRET3).EQ.0) THEN
              LGBLOC = MIN(96,LG/4)
            ELSE
              CALL JEVEUO(NOMP16,'L',LGBLOC)
              CALL JEVEUO(NOMP03,'L',ADRE)
              CALL JEVEUO(NOMP01,'L',DESC)
              NBSN = ZI(DESC+1)
              LGIND = ZI(ADRE+NBSN) - 1
              NBLOC = ZI(DESC+2)
              LGBLMA = 0
              DO 30 I = 0,NBLOC - 1
                IF (ZI(LGBLOC+I).GT.LGBLMA) LGBLMA = ZI(LGBLOC+I)
   30         CONTINUE
              LGBLOC = (LG-LGBLMA-LGIND-15*NEQ)/ (2* (NEQ+1))
              CALL JELIBE(NOMP16)
              CALL JELIBE(NOMP01)
              CALL JELIBE(NOMP03)
            END IF
          ELSE
            LGBLOC = MIN(96,LG/4)
          END IF
          NBSM = NBLIAC - IDEBUC + 1
          NPAS = NBSM/LGBLOC
          NREST = NBSM - LGBLOC*NPAS

          IF (NREST.GT.0) THEN
            NPAST = NPAS + 1
          ELSE
            NPAST = NPAS
          END IF
          CALL WKVECT(NOMT26,' V V R ',NEQ*LGBLOC,TAMPON)
          DO 80 IPAS = 1,NPAST
            LG = LGBLOC
            IF (NPAST.NE.NPAS .AND. (IPAS.EQ.NPAST)) LG = NREST

            DO 40 KK = 1,NEQ*LG
              ZR(TAMPON-1+KK) = 0.0D0
   40       CONTINUE
            DO 50 IL = 1,LG
              ILIAC = LGBLOC* (IPAS-1) + IL + (IDEBUC-1)
              LLIAC = ZI(JLIAC+ILIAC-1)

C --- CALCUL DE CHAQUE COLONNE DE AT (UNE PAR LIAISON ACTIVE)

              JDECAL = ZI(JAPPTR+LLIAC-1)
              NBDDL = ZI(JAPPTR+LLIAC) - ZI(JAPPTR+LLIAC-1)
              CALL CALATM(NEQ,NBDDL,1.D0,ZR(JAPCOE+JDECAL),
     &                    ZI(JAPDDL+JDECAL),ZR(TAMPON+NEQ* (IL-1)))
   50       CONTINUE

C --- CALCUL DE C-1.AT (EN TENANT COMPTE DES CHARGES CINEMATIQUES)

            CALL JEVEUO(CINE(1:19)//'.VALE','E',JRCINE)
            CALL NMRLDB(LMAT,ZR(JRCINE),ZR(TAMPON),LG)

C --- RECOPIE
            DO 70 IL = 1,LG
              ILIAC = LGBLOC* (IPAS-1) + IL + (IDEBUC-1)
              LLIAC = ZI(JLIAC+ILIAC-1)
              CALL JEVEUO(JEXNUM(CM1A,LLIAC),'E',JCM1A)
              DO 60 KK = 1,NEQ
                ZR(JCM1A-1+KK) = ZR(TAMPON-1+NEQ* (IL-1)+KK)
   60         CONTINUE
              CALL JELIBE(JEXNUM(CM1A,LLIAC))
   70       CONTINUE

   80     CONTINUE
          CALL JEDETR(NOMT26)
        END IF

      END IF

      XJVMAX = 0.D0
      XJVMIN = 1.D0/R8PREM()
      DO 100 ILIAC = IDEBUC,NBLIAC
        LLIAC = ZI(JLIAC+ILIAC-1)
        CALL JEVEUO(JEXNUM(CM1A,LLIAC),'L',JCM1A)

C - CALCUL DE -A.C-1.AT (REDUITE AUX LIAISONS ACTIVES)
C - (STOCKAGE DE LA MOITIE PAR SYMETRIE)

        DO 90 JJ = 1,ILIAC
          LLJAC = ZI(JLIAC-1+JJ)
          JVA = JVALE - 1 + (ILIAC-1)*ILIAC/2 + JJ
          ZR(JVA) = 0.0D0
          JDECAL = ZI(JAPPTR+LLJAC-1)
          NBDDL = ZI(JAPPTR+LLJAC) - ZI(JAPPTR+LLJAC-1)
          CALL CALADU(NEQ,NBDDL,ZR(JAPCOE+JDECAL),ZI(JAPDDL+JDECAL),
     &                ZR(JCM1A),VAL)
          ZR(JVA) = ZR(JVA) - VAL
          IF (ABS(ZR(JVA)).GT.XJVMAX) XJVMAX = ABS(ZR(JVA))
          IF (ABS(ZR(JVA)).LT.XJVMIN) XJVMIN = ABS(ZR(JVA))
   90   CONTINUE

        CALL JELIBE(JEXNUM(CM1A,LLIAC))
  100 CONTINUE

      CALL JEDEMA()

C ======================================================================


      END
