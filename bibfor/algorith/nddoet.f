      SUBROUTINE NDDOET(RESULT,MODELE,MODEDE,NUMEDD,MATE,COMPOR,CARELE,
     &                  MEMASS,MEDIRI,LISCHA,INSTAM,COMMOI,DEPMOI,
     &                  VITPLU,ACCPLU,SIGMOI,VARMOI,MAPREC,SOLVEU,
     &                  CARCRI,VARDEM,LAGDEM,PARTPS)

C MODIF ALGORITH  DATE 11/09/2002   AUTEUR VABHHTS J.PELLET 
C ======================================================================
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ACBHHCD G.DEVESA
C TOLE CRP_21

      IMPLICIT NONE
      CHARACTER*8 RESULT,MODEDE
      CHARACTER*24 MODELE,NUMEDD,CARELE,MEMASS,MEDIRI,MATE,VARDEM
      CHARACTER*24 COMMOI,COMPOR,LAGDEM
      CHARACTER*24 DEPMOI,VITPLU,ACCPLU,SIGMOI,VARMOI,CARCRI
      CHARACTER*19 SOLVEU,MAPREC,LISCHA,PARTPS
      REAL*8 INSTAM
C ----------------------------------------------------------------------
C     D Y N A M I Q U E  N O N  L I N E A I R E
C     SAISIE OU CREATION DES CHAMPS A L'ETAT INITIAL

C IN  MODELE  : NOM DU MODELE
C IN  LISCHA  : SD L_CHARGES
C OUT COMMOI  : VARIABLES DE COMMANDE INITIALES
C OUT INSTAM  : INSTANT INITIAL
C OUT NEWCAL  : =.TRUE.  SI LE CALCUL DEMARRE
C               =.FALSE. SI LE CALCUL SE POURSUIT
C OUT DEPMOI  : CHAM_NO DE DEPLACEMENTS INITIAUX
C OUT VITPLU  : CHAM_NO DE VITESSES INITIALES
C OUT ACCPLU  : CHAM_NO D'ACCELERATIONS INITIALES
C OUT SIGMOI  : CHAM_ELEM DE CONTRAINTES INITIALES
C OUT VARMOI  : CHAM_ELEM DE VARIABLES INTERNES INITIALES
C               VARMOI CONTIENDRA PAR LA SUITE LES VI MISES A JOUR
C               A LA FIN DES PAS DE TEMPS

C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------------------

      CHARACTER*32 JEXNUM,JEXNOM,JEXR8,JEXATR
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)

C --- FIN DECLARATIONS NORMALISEES JEVEUX ------------------------------

      LOGICAL LBID,EVONOL
      CHARACTER*1 BASE
      CHARACTER*8 K8BID,LPAIN(1),LPAOUT(2),CRITER
      CHARACTER*16 OPT
      CHARACTER*24 LIGRMO,EVOL,LCHIN(1),LCHOUT(2)
      CHARACTER*24 TYPE,CHAMP
      CHARACTER*24 CHGEOM
      CHARACTER*24 K24BID,LIGRDE
      CHARACTER*19 LISINS
      REAL*8 RBID,INST,PREC,R8VIDE
      COMPLEX*16 CBID
      INTEGER IBID,IRETVI,IRETAC,IERR
      INTEGER JINFC,NBCHAR,N2,NUME
      INTEGER IACHAR,IACHA2,I,JINST,NCHOUT
      INTEGER IRET,NOCC,REENTR,N1,NBR


C -- EXTENSION DU COMPORTEMENT : NOMBRE DE VARIABLES INTERNES

      CALL DISMOI('F','NOM_LIGREL',MODELE,'MODELE',IBID,LIGRMO,IRET)
      CALL EXISD('CHAM_ELEM_S',COMPOR,IRET)
      IF (IRET.EQ.0) CALL CESVAR(CARELE,COMPOR,LIGRMO,COMPOR)


C -- PAS D'ETAT INITIAL EN PRESENCE D'UN CONCEPT REENTRANT

      CALL GETFAC('ETAT_INIT',NOCC)
      CALL JEEXIN(RESULT//'           .DESC',REENTR)
      IF (NOCC.EQ.0 .AND. REENTR.NE.0) CALL UTMESS('A','NMDOET',
     &    'SURCHARGE D''UN RESULTAT SANS DEFINIR D''ETAT INITIAL : '//
     &    'ON PREND UN ETAT INITIAL NUL')

      BASE = 'V'

C ======================================================================
C         ETAT INITIAL DEFINI PAR UN CONCEPT DE TYPE EVOL_NOLI
C ======================================================================

      CALL GETVID('ETAT_INIT','EVOL_NOLI',1,1,1,EVOL,NOCC)
      EVONOL = NOCC .GT. 0

      IF (EVONOL) THEN

C      CONTROLE DU TYPE DE EVOL
        CALL DISMOI('F','TYPE_RESU',EVOL,'RESULTAT',IBID,TYPE,IRET)
        IF (TYPE.NE.'EVOL_NOLI') CALL UTMESS('F','NMDOET',
     &              'LE CONCEPT DANS ETAT_INIT N''EST DU TYPE EVOL_NOLI'
     &                                )


C -- NUMERO D'ACCES ET INSTANT CORRESPONDANT

        CALL GETVR8('ETAT_INIT','INST',1,1,1,INST,N1)
        CALL GETVIS('ETAT_INIT','NUME_ORDRE',1,1,1,NUME,N2)

C      NUME_ORDRE ET INST ABSENTS, ON PREND LE DERNIER PAS ARCHIVE
        IF (N1+N2.EQ.0) THEN
          CALL RSORAC(EVOL,'DERNIER',IBID,RBID,K8BID,CBID,RBID,K8BID,
     &                NUME,1,N2)
          IF (N2.EQ.0) CALL UTMESS('F','NDDOET','PAS DE NUMERO '//
     &                             'D''ORDRE POUR LE CONCEPT '//EVOL)
        END IF

C      ACCES PAR INSTANT
        IF (N1.NE.0) THEN
          CALL GETVR8('ETAT_INIT','PRECISION',1,1,1,PREC,IBID)
          CALL GETVTX('ETAT_INIT','CRITERE',1,1,1,CRITER,IBID)
          CALL RSORAC(EVOL,'INST',IBID,INST,K8BID,CBID,PREC,CRITER,NUME,
     &                1,NBR)
          IF (NBR.EQ.0) CALL UTMESS('F','NMDOET',
     &                              'L''INSTANT SPECIFIE '//
     &                            'SOUS ''ETAT_INIT'' N''EST PAS TROUVE'
     &                              )
          IF (NBR.LT.0) CALL UTMESS('F','NMDOET','PLUSIEURS INSTANTS '//
     &               'CORRESPONDENT A CELUI SPECIFIE SOUS ''ETAT_INIT'''
     &                              )
        END IF

C      ACCES PAR NUMERO D'ORDRE
        IF (N2.NE.0) THEN
          CALL RSADPA(EVOL,'L',1,'INST',NUME,0,JINST,K8BID)
          INST = ZR(JINST)
        END IF


C -  CALCUL DES MATRICES ELEMENTAIRES DE MASSE
        CALL JEVEUO(LISCHA//'.INFC','L',JINFC)
        NBCHAR = ZI(JINFC)
        CALL JEVEUO(LISCHA//'.LCHA','L',IACHAR)
        CALL WKVECT('&&NDDOET.LISTE_CHARGE','V V K8',NBCHAR,IACHA2)
        DO 10,I = 1,NBCHAR
          ZK8(IACHA2-1+I) = ZK24(IACHAR-1+I) (1:8)
   10   CONTINUE
        CALL MEMAME('MASS_MECA',MODELE,NBCHAR,ZK8(IACHA2),MATE,CARELE,
     &              .TRUE.,INST,COMPOR,MEMASS,BASE)
        CALL JEDETR('&&NDDOET.LISTE_CHARGE')

C -- LECTURE DES DEPLACEMENTS

        CALL RSEXCH(EVOL,'DEPL',NUME,CHAMP,IRET)
        IF (IRET.NE.0) CALL UTMESS('F','NMDOET','LE CHAMP DE DEPL_R '//
     &                             'N''EST PAS TROUVE DANS LE CONCEPT '
     &                             //EVOL)
        CALL VTCOPY(CHAMP,DEPMOI,IRET)


C -- LECTURE DES CONTRAINTES AUX POINTS DE GAUSS

        CALL RSEXCH(EVOL,'SIEF_ELGA',NUME,CHAMP,IRET)
        IF (IRET.EQ.0) THEN
          CALL COPISD('CHAMP_GD','V',CHAMP,SIGMOI)
        ELSE

C       CONTRAINTES AUX NOEUDS : PASSAGE AUX POINTS DE GAUSS
          CALL RSEXCH(EVOL,'SIEF_ELNO',NUME,CHAMP,IRET)
          IF (IRET.NE.0) CALL UTMESS('F','NMDOET',
     &                               'LE CHAMP DE SIEF_R '//
     &                              'N''EST PAS TROUVE DANS LE CONCEPT '
     &                               //EVOL)
          CALL MENOGA('SIEF_ELGA_ELNO  ',LIGRMO,COMPOR,CHAMP,SIGMOI,
     &                K24BID,K24BID,K24BID,K24BID)
        END IF


C -- LECTURE DES VITESSES

        CALL RSEXCH(EVOL,'VITE',NUME,CHAMP,IRETVI)
        IF (IRETVI.NE.0) THEN
          CALL UTMESS('I','NDDOET_05','LE CHAMP DE VITE N''EST PA'//
     &                'S TROUVE DANS LE CONCEPT '//EVOL//
     &                ' ON CREE UN CHAMP DE VITESSES NULLES')
          CALL NULVEC(VITPLU)
        ELSE
          CALL VTCOPY(CHAMP,VITPLU,IERR)
        END IF


C -- LECTURE DES ACCELERATIONS

        CALL RSEXCH(EVOL,'ACCE',NUME,CHAMP,IRETAC)
        IF (IRETAC.NE.0) THEN
          IF (IRETVI.NE.0) THEN
            CALL UTMESS('I','NDDOET_06','LE CHAMP D''ACCE N''EST '//
     &                  'PAS TROUVE DANS LE CONCEPT '//EVOL//
     &                  ' ON CALCULE UN CHAMP D''ACCELERATIONS, CE '//
     &                  'QUI EST POSSIBLE PUISQUE LES VITESSES SONT '//
     &                  'NULLES')
            CALL ACCEL0(MODELE,NUMEDD,MATE,COMPOR,CARELE,MEMASS,MEDIRI,
     &                  LISCHA,INST,COMMOI,DEPMOI,SIGMOI,ACCPLU,MAPREC,
     &                  SOLVEU,CARCRI)
          ELSE
            CALL UTMESS('F','NDDOET_07','LE CHAMP D''ACCE N''EST '//
     &                  'PAS TROUVE DANS LE CONCEPT '//EVOL//
     &                  ' ON NE PEUT PAS, POUR L''INSTANT, CALCULER '//
     &                  'LE CHAMP DES ACCELERATIONS CAR LES VITESSES'//
     &                  ' NE SONT PAS NULLES')
          END IF
        ELSE
          CALL VTCOPY(CHAMP,ACCPLU,IERR)
        END IF

C -- LECTURE DES VARIABLES INTERNES AUX POINTS DE GAUSS

        CALL RSEXCH(EVOL,'VARI_ELGA',NUME,CHAMP,IRET)
        IF (IRET.EQ.0) THEN
          CALL COPISD('CHAMP_GD','V',CHAMP,VARMOI)
          CALL VRCOMP(COMPOR,VARMOI)
        ELSE

C        VARIABLES INTERNES AUX NOEUDS : PASSAGE AUX POINTS DE GAUSS
          CALL RSEXCH(EVOL,'VARI_ELNO',NUME,CHAMP,IRET)
          IF (IRET.NE.0) CALL UTMESS('F','NMDOET','LE CHAMP '//
     &                    'DE VARI_R N''EST PAS TROUVE DANS LE CONCEPT '
     &                               //EVOL)
          CALL VRCOMP(COMPOR,CHAMP)
          CALL COPISD('CHAM_ELEM_S','V',COMPOR,VARMOI)
          CALL MENOGA('VARI_ELGA_ELNO  ',LIGRMO,COMPOR,CHAMP,VARMOI,
     &                K24BID,K24BID,K24BID,K24BID)
        END IF


C -- LECTURE DES VARIABLES NON LOCALES

        IF (MODEDE.NE.' ') THEN
          CALL RSEXCH(EVOL,'VARI_NON_LOCAL',NUME,CHAMP,IRET)
          IF (IRET.NE.0) CALL UTMESS('F','NMDOET','LE CHAMP DE '//
     &               'VARI_NON_LOCAL N''EST PAS TROUVE DANS LE CONCEPT '
     &                               //EVOL)
          CALL VTCOPY(CHAMP,VARDEM,IRET)
        END IF


C -- LECTURE DES MULTIPLICATEURS DE LAGRANGE NON LOCAUX

        IF (MODEDE.NE.' ') THEN
          CALL RSEXCH(EVOL,'LANL_ELGA',NUME,CHAMP,IRET)
          IF (IRET.NE.0) CALL UTMESS('F','NMDOET','LE CHAMP DE '//
     &                    'LANL_ELGA N''EST PAS TROUVE DANS LE CONCEPT '
     &                               //EVOL)
          CALL COPISD('CHAMP_GD','V',CHAMP,LAGDEM)
        END IF


      ELSE

C ======================================================================
C      DEFINITION CHAMP PAR CHAMP (OU PAS D'ETAT INITIAL DU TOUT)
C ======================================================================


        NCHOUT = 0
        INSTAM = 0.D0
        CALL GETVR8('ETAT_INIT','INST_ETAT_INIT',1,1,1,INSTAM,N2)
        IF (N2.EQ.0) CALL GETVR8('INCREMENT','INST_INIT',1,1,1,INSTAM,
     &                           N2)

C -  CALCUL DES MATRICES ELEMENTAIRES DE MASSE

        CALL JEVEUO(LISCHA//'.INFC','L',JINFC)
        NBCHAR = ZI(JINFC)
        CALL JEVEUO(LISCHA//'.LCHA','L',IACHAR)
        CALL WKVECT('&&NDDOET.LISTE_CHARGE','V V K8',NBCHAR,IACHA2)
        DO 20,I = 1,NBCHAR
          ZK8(IACHA2-1+I) = ZK24(IACHAR-1+I) (1:8)
   20   CONTINUE
        CALL MEMAME('MASS_MECA',MODELE,NBCHAR,ZK8(IACHA2),MATE,CARELE,
     &              .TRUE.,INST,COMPOR,MEMASS,BASE)
        CALL JEDETR('&&NDDOET.LISTE_CHARGE')


C -- LECTURE DES DEPLACEMENTS

        CALL GETVID('ETAT_INIT','DEPL',1,1,1,CHAMP,NOCC)
        IF (NOCC.NE.0) THEN
          CALL VTCOPY(CHAMP,DEPMOI,IRET)
        ELSE
          CALL UTMESS('I','NDDOET_09','L''ETAT INITIAL N''APPARTIENT'//
     &                ' PAS A UN EVOL_NOLI : ON SUPPOSE QU''ON'//
     &                ' PART D''UN ETAT A DEPLACEMENTS NULS')
          CALL NULVEC(DEPMOI)
        END IF


C -- LECTURE DES VITESSES

        CALL GETVID('ETAT_INIT','VITE',1,1,1,CHAMP,NOCC)
        IF (NOCC.NE.0) THEN
          CALL VTCOPY(CHAMP,VITPLU,IERR)
        ELSE
          CALL UTMESS('I','NDDOET_10','L''ETAT INITIAL N''APPARTIENT'//
     &                ' PAS A UN EVOL_NOLI : ON SUPPOSE QU''ON'//
     &                ' PART D''UN ETAT A VITESSES NULLES')
          CALL NULVEC(VITPLU)
        END IF


C -- LECTURE DES CONTRAINTES AUX POINTS DE GAUSS

        CALL GETVID('ETAT_INIT','SIGM',1,1,1,CHAMP,NOCC)

C      PREPARATION POUR CREER UN CHAMP NUL
        IF (NOCC.EQ.0) THEN
          NCHOUT = NCHOUT + 1
          LPAOUT(NCHOUT) = 'PSIEF_R'
          LCHOUT(NCHOUT) = SIGMOI
          CALL COPISD('CHAM_ELEM_S','V',COMPOR,SIGMOI)

        ELSE
          CALL DISMOI('F','TYPE_CHAMP',CHAMP,'CHAMP',IBID,TYPE,IRET)

C        PASSAGE NOEUDS -> POINTS DE GAUSS LE CAS ECHEANT
          IF (TYPE.EQ.'ELNO') THEN
            CALL MENOGA('SIEF_ELGA_ELNO  ',LIGRMO,COMPOR,CHAMP,SIGMOI,
     &                  K24BID,K24BID,K24BID,K24BID)
          ELSE
            CALL COPISD('CHAMP_GD','V',CHAMP,SIGMOI)
          END IF
        END IF


C -- LECTURE DES VARIABLES INTERNES

        CALL GETVID('ETAT_INIT','VARI',1,1,1,CHAMP,NOCC)

C      PREPARATION POUR CREER UN CHAMP NUL
        IF (NOCC.EQ.0) THEN
          NCHOUT = NCHOUT + 1
          LPAOUT(NCHOUT) = 'PVARI_R'
          LCHOUT(NCHOUT) = VARMOI
          CALL COPISD('CHAM_ELEM_S','V',COMPOR,VARMOI)

        ELSE
          CALL DISMOI('F','TYPE_CHAMP',CHAMP,'CHAMP',IBID,TYPE,IRET)

C        PASSAGE NOEUDS -> POINTS DE GAUSS LE CAS ECHEANT
          IF (TYPE.EQ.'ELNO') THEN
            CALL VRCOMP(COMPOR,CHAMP)
            CALL COPISD('CHAM_ELEM_S','V',COMPOR,VARMOI)
            CALL MENOGA('VARI_ELGA_ELNO  ',LIGRMO,COMPOR,CHAMP,VARMOI,
     &                  K24BID,K24BID,K24BID,K24BID)
          ELSE
            CALL COPISD('CHAMP_GD','V',CHAMP,VARMOI)
            CALL VRCOMP(COMPOR,VARMOI)
          END IF
        END IF


C -- CREATION DES CHAM_ELEM DE CONTRAINTES ET DE VARIABLES INTERNES NULS

        IF (NCHOUT.GT.0) THEN
          CALL MEGEOM(MODELE,' ',LBID,CHGEOM)
          LCHIN(1) = CHGEOM
          LPAIN(1) = 'PGEOMER'
          OPT = 'TOU_INI_ELGA    '
      CALL CALCUL('S',OPT,LIGRMO,1,LCHIN,LPAIN,NCHOUT,LCHOUT,LPAOUT,'V')

C        CHARGEMENTS DE TYPE PRECONTRAINTE (LE CAS ECHEANT)
          CALL NMSIGI(LIGRMO,COMPOR,SIGMOI)
        END IF


C -- CALCUL DES ACCELERATIONS INITIALES

        IF (N2.EQ.0) THEN
          CALL GETVID('INCREMENT','LIST_INST'  ,1,1,1,LISINS,N1)
          CALL JEVEUO(LISINS // '.VALE', 'L', JINST)
          INST = ZR(JINST)
        ELSE
          INST = INSTAM
        END IF
        CALL ACCEL0(MODELE,NUMEDD,MATE,COMPOR,CARELE,MEMASS,MEDIRI,
     &              LISCHA,INST,COMMOI,DEPMOI,SIGMOI,ACCPLU,MAPREC,
     &              SOLVEU,CARCRI)

C -- LECTURE DES VARIABLES NON LOCALES

        IF (MODEDE.NE.' ') THEN
          CALL GETVID('ETAT_INIT','VARI_NON_LOCAL',1,1,1,CHAMP,IRET)
          IF (IRET.NE.0) CALL VTCOPY(CHAMP,VARDEM,IRET)
        END IF


C -- CREATION DU CHAMP DE MULTIPLICATEURS DE LAGRANGE NON LOCAUX NULS

        IF (MODEDE.NE.' ') THEN
          CALL DISMOI('F','NOM_LIGREL',MODEDE,'MODELE',IBID,LIGRDE,IRET)
          CALL MEGEOM(MODEDE,' ',LBID,CHGEOM)
          LCHIN(1) = CHGEOM
          LPAIN(1) = 'PGEOMER'
          LCHOUT(1) = LAGDEM
          LPAOUT(1) = 'PVALO_R'
          OPT = 'TOU_INI_ELGA'
          CALL CALCUL('S',OPT,LIGRDE,1,LCHIN,LPAIN,1,LCHOUT,LPAOUT,'V')
        END IF
      END IF


C -- LECTURE DE L'INSTANT DU CHARGEMENT INITIAL (SI DONNE)

      CALL GETVR8('ETAT_INIT','INST_ETAT_INIT',1,1,1,INSTAM,NOCC)
      IF (NOCC.EQ.0) THEN
        IF (EVONOL) THEN
          INSTAM = INST
        ELSE
          INSTAM = R8VIDE()
        END IF
      END IF


      END
