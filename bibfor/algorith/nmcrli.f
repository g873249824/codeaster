      SUBROUTINE NMCRLI(INSTIN,LISINS,SDDISC,NUMINI,DELMIN,
     &                  NOMCMD)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 19/12/2007   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT     NONE
      CHARACTER*19 SDDISC,LISINS
      REAL*8       INSTIN,DELMIN
      INTEGER      NUMINI  
      CHARACTER*16 NOMCMD   
C
C ----------------------------------------------------------------------
C
C ROUTINE *_NON_LINE (STRUCTURES DE DONNES)
C
C CREATION SD DISCRETISATION
C
C ----------------------------------------------------------------------
C
C
C IN  NOMCMD : NOM DE LA COMMANDE APPELANTE (THER, STAT ou DYNA)
C IN  INSTIN : INSTANT INITIAL QUAND ETAT_INIT 
C IN  LISINS : LISTE D'INSTANTS 
C OUT SDDISC : SD DISCRETISATION
C OUT NUMINI : NUMERO DU PREMIER INSTANT DE CALCUL 
C OUT DELMIN : PAS DE TEMPS MINI ENTRE INSTANT DE LA LISTE
C
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ----------------------------
C
      INTEGER      ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8       ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16   ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL      ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8  ZK8
      CHARACTER*16    ZK16
      CHARACTER*24        ZK24
      CHARACTER*32            ZK32
      CHARACTER*80                ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C --- FIN DECLARATIONS NORMALISEES JEVEUX ------------------------------
C
      INTEGER      JINST
      INTEGER      NUMFIN,SENS,POS
      INTEGER      I
      INTEGER      N1,N2,N3,N4,N5
      INTEGER      NBTEMP,NBINST
      REAL*8       DELTAT,TOLE,INST
      REAL*8       R8BID
      REAL*8       DT,DTMIN,INS
      LOGICAL      LINSTI,LEINIT
      CHARACTER*8  K8BID
      CHARACTER*16 CHRONO
      CHARACTER*24 TPSDIT,TPSDIN
      INTEGER      JTEMPS,JNIVTP      
      INTEGER      IFM,NIV 
C      
C ----------------------------------------------------------------------
C      
      CALL JEMARQ()
C
C --- AFFICHAGE
C
      IF (NOMCMD(1:4).EQ.'THER') THEN
        CALL INFDBG('THER_NON_LINE',IFM,NIV)
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<THERNONLINE> ... CREATION SD DISCRETISATION'
        ENDIF    
      ELSE
        CALL INFDBG('MECA_NON_LINE',IFM,NIV)
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE> ... CREATION SD DISCRETISATION'
        ENDIF          
      ENDIF  
C
C --- INITIALISATIONS
C
      CHRONO = ' '
      LINSTI = .FALSE.
C
C --- ACCES SD LISTE D'INSTANTS
C    
      TPSDIT = SDDISC(1:19)//'.DITR'  
      TPSDIN = SDDISC(1:19)//'.DINI'    
C
C --- CONSTRUCTION DE LA LISTE D'INSTANTS
C
      CALL GETVTX('INCREMENT','EVOLUTION',1,1,1,CHRONO,N1)
      CALL JEVEUO(LISINS(1:19)//'.VALE','L',JINST)
      CALL JELIRA(LISINS(1:19)//'.VALE','LONMAX',NBINST,K8BID)
      NBINST = NBINST-1
C
C --- VERIFICATIONS IL Y A AU MOINS UN INSTANT DE CALCUL
C
      IF (NBINST.LE.0) THEN
        CALL U2MESS('F','DISCRETISATION_86')
      ENDIF
C      
C --- VERIFICATION DU CARACTERE CROISSANT DE LA LISTE D'INSTANTS
C
      IF (CHRONO .NE. 'SANS') THEN
        DELMIN = ZR(JINST+1) - ZR(JINST)
        DO 10 I = 0,NBINST-1
          DELTAT = ZR(JINST + I+1) - ZR(JINST + I)
          DELMIN = MIN(DELTAT,DELMIN)
          IF (DELTAT.LE.0) THEN
            CALL U2MESS('F','DISCRETISATION_87')
          ENDIF
10      CONTINUE
        CALL GETVR8('INCREMENT','PRECISION'     ,1,1,1,TOLE,N1)
        TOLE = DELMIN * TOLE
      END IF
C
C --- L'INSTANT DE L'ETAT INITIAL EXISTE-T-IL ?
C
      LEINIT = .TRUE.
C
      IF (NOMCMD(5:13).EQ.'_NON_LINE') THEN
        CALL GETVR8('ETAT_INIT','INST_ETAT_INIT',1,1,1,R8BID,N5)
        IF (NOMCMD(1:4).EQ.'THER') THEN
          CALL GETVID('ETAT_INIT','EVOL_THER'     ,1,1,1,K8BID,N4)
        ELSE
          CALL GETVID('ETAT_INIT','EVOL_NOLI'     ,1,1,1,K8BID,N4)
        ENDIF  
        IF (N5.EQ.0) THEN
          IF (N4.EQ.0) THEN
            LEINIT = .FALSE.
          ENDIF
        ENDIF  
      ELSEIF (NOMCMD(5:13).EQ.'_LINEAIRE') THEN  
        IF (NOMCMD(1:4).EQ.'THER') THEN
          CALL GETVID('ETAT_INIT','EVOL_THER'     ,1,1,1,K8BID,N4)
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF        
        IF (N4.EQ.0) THEN
          LEINIT = .FALSE.
        ELSE
          LEINIT = .TRUE.
        ENDIF      
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF 
C
C --- DETERMINATION DU NUMERO D'ORDRE INITIAL
C
      CALL GETVIS('INCREMENT','NUME_INST_INIT',1,1,1,NUMINI,N1)
      CALL GETVR8('INCREMENT','INST_INIT'     ,1,1,1,INST  ,N2)
      CALL GETFAC('ETAT_INIT',N3)
C
C --- PAS D'INSTANT INITIAL
C
      IF (.NOT.LEINIT) THEN
        N3     = 0
      ENDIF
C      
C --- PAS D'OCCURENCE DES MOTS-CLES -> NUMERO INITIAL
C
      IF (N1+N2+N3 .EQ. 0) THEN      
        IF (CHRONO .EQ. 'RETROGRADE') THEN
          NUMINI = NBINST
        ELSE
          NUMINI = 0
        END IF
C        
C --- MOTS-CLES INST_INIT OU INSTANT DEFINI PAR ETAT_INIT
C
      ELSE IF (N1 .EQ. 0) THEN
        IF (CHRONO.EQ.'SANS') THEN
          CALL U2MESS('F','DISCRETISATION_88')
        ENDIF
C        
C --- INSTANT DEFINI PAR ETAT_INIT
C        
        IF (N2 .EQ. 0) THEN
          INST   = INSTIN
          CALL UTACLI(INST  ,ZR(JINST),NBINST,TOLE,NUMINI)
C
C --- SI INST NON PRESENT DANS LA LISTE D INSTANT
C --- ON CHERCHE L INSTANT LE PLUS PROCHE AVANT L'INSTANT CHERCHE
C --- (CAS CHRONOLOGIQUE) OU APRES L'INSTANT CHERCHE (CAS RETROGRADE)
C
          IF (NUMINI.LT.0) THEN
            LINSTI = .TRUE.
            DTMIN  = INST-ZR(JINST)
            INS    = ZR(JINST)
            DO 40 I=1,NBINST
              DT     = INST-ZR(JINST+I)
              IF (CHRONO .EQ. 'RETROGRADE') THEN
                IF (DT.GE.0.D0) THEN
                  GOTO 45
                ENDIF  
                IF (DT.GT.DTMIN) THEN
                  DTMIN  = DT
                  INS    = ZR(JINST+I)
                ENDIF
              ELSE
                IF (DT.LE.0.D0) GOTO 45
                IF (DT.LT.DTMIN) THEN
                  DTMIN  = DT
                  INS    = ZR(JINST+I)
                ENDIF
              ENDIF
 40         CONTINUE
 45         CONTINUE
            INST   = INS
          ENDIF
        ENDIF
C
        CALL UTACLI(INST  ,ZR(JINST),NBINST,TOLE,NUMINI)
        IF (NUMINI .LT. 0) THEN
          CALL U2MESS('F','DISCRETISATION_89')
        ENDIF  
      ENDIF
C
C --- DETERMINATION DU NUMERO D'ORDRE FINAL
C
      CALL GETVIS('INCREMENT','NUME_INST_FIN',1,1,1,NUMFIN,N1)
      CALL GETVR8('INCREMENT','INST_FIN'     ,1,1,1,INST  ,N2)
C      
C --- PAS D'OCCURENCE DES MOTS-CLES -> NUMERO INITIAL
C
      IF (N1+N2 .EQ. 0) THEN
        IF (CHRONO .EQ. 'RETROGRADE') THEN
          NUMFIN = 0
        ELSE
          NUMFIN = NBINST
        END IF
C        
C --- MOTS-CLES INST_FIN
C
      ELSE IF (N1 .EQ. 0) THEN
        IF (CHRONO.EQ.'SANS') THEN
          CALL U2MESS('F','DISCRETISATION_88')
        ENDIF
        CALL UTACLI(INST,ZR(JINST),NBINST,TOLE,NUMFIN)
        IF (NUMFIN .LT. 0) THEN
          CALL U2MESS('F','DISCRETISATION_90')
        ENDIF  
      ENDIF
C
C --- SENS DE LA LISTE
C
      IF (CHRONO .EQ. 'RETROGRADE') THEN
        SENS = -1
        IF (NUMINI .LE. NUMFIN) THEN
          CALL U2MESS('F','DISCRETISATION_91')
        ENDIF  
      ELSE
        SENS = 1
        IF (NUMINI.GE.NUMFIN) THEN
          CALL U2MESS('F','DISCRETISATION_92')
        ENDIF  
      END IF
C
C --- VERIFICATION DES BORNES
C
      IF (NUMINI.LT.0 .OR. NUMINI.GT.NBINST) THEN
        CALL U2MESS('F','DISCRETISATION_93')
      ENDIF  
      IF (NUMFIN.LT.0 .OR. NUMFIN.GT.NBINST) THEN
        CALL U2MESS('A','DISCRETISATION_94')
        IF (CHRONO .EQ. 'RETROGRADE') THEN
          NUMFIN = 0
        ELSE
          NUMFIN = NBINST
        END IF
      END IF
C
C --- ECRITURE DE LA LISTE D'INSTANTS
C       
      NBTEMP = (NUMFIN-NUMINI)*SENS
      CALL WKVECT(TPSDIT,'V V R8',NBTEMP+1,JTEMPS)
C      
C --- TPSDIN: INDICATEUR DU NIVEAU DE SUBDIVISION
C --- DES PAS DE TEMPS : ON L INITIALISE ICI A 1
C
      CALL WKVECT(TPSDIN,'V V I' ,NBTEMP+1,JNIVTP)
      POS = 0
      DO 20 I = NUMINI, NUMFIN, SENS
       ZR(JTEMPS+POS) = ZR(JINST+I)
       ZI(JNIVTP+POS) = 1
       POS = POS+1
 20   CONTINUE
C 
C --- SI L'INSTANT INITIAL N'EXISTAIT PAS DANS LA LISTE D'INSTANTS
C --- ON A PRIS PLUS HAUT L'INSTANT LE PLUS PROCHE PRECEDENT : ICI 
C --- ON MET LA BONNE VALEUR COMME INSTANT INITIAL
C
      IF (LINSTI) THEN
        ZR(JTEMPS)=INSTIN
      ENDIF  
C
      CALL JEDEMA()

      END
