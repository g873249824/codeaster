      SUBROUTINE NMLERR(SDDISC,ACTION,INFZ,VALR,VALI)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 13/06/2012   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT      NONE
      INCLUDE 'jeveux.h'
      CHARACTER*19  SDDISC
      CHARACTER*1   ACTION
      CHARACTER*(*) INFZ
      INTEGER       VALI
      REAL*8        VALR(*)
C
C ----------------------------------------------------------------------
C
C ROUTINE *_NON_LINE (STRUCTURES DE DONNES - SD DISCRETISATION)
C
C LECTURE/ECRITURE DANS SD STOCKAGE DES INFOS EN COURS DE CALCUL
C
C ----------------------------------------------------------------------
C
C IN  SDDISC : SD DISCRETISATION
C IN  ACTION : 'L' OU 'E'
C IN  INFO   : TYPE D'INFO A STOCKER OU A LIRE
C   1 MXITER               : MAX( ITER_GLOB_MAXI , ITER_GLOB_ELAS )
C   2 MNITER               : MIN( ITER_GLOB_MAXI , ITER_GLOB_ELAS )
C   3 NBITER               : NOMBRE MAX ITERATIONS (Y COMPRIS EXTRAPOL)
C   4 PAS_MINI_ELAS        : PAS_MINI_ELAS
C   5 RESI_GLOB_RELA       : RESI_GLOB_RELA DONNE
C   6 RESI_GLOB_MAXI       : RESI_GLOB_MAXI
C   7 TYPE_RESI            :  =1 ON A DONNE RESI_GLOB_RELA
C                             =2 ON A DONNE RESI_GLOB_MAXI
C                             =3 C'EST (1) ET (2)
C                             =0 ON A RIEN DONNE ==> =1 (DEFAUT)
C   8 INIT_NEWTON_KRYLOV   : RESIDU INITIAL POUR NEWTON KRYLOV
C   9 ITER_NEWTON_KRYLOV   : RESIDU COURANT POUR NEWTON KRYLOV
C  10 ITERSUP              : =3 ON AUTORISE DES ITERATIONS EN PLUS
C
C I/O VALR(*)   : REEL   A ECRIRE OU A LIRE
C     VALI      : ENTIER A ECRIRE OU A LIRE
C
C
C
C
      CHARACTER*24 INFOCV
      INTEGER      JIFCV
      CHARACTER*24 INFO
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      INFOCV = SDDISC(1:19)//'.IFCV'
      CALL JEVEUO(INFOCV,'E',JIFCV)
      INFO   = INFZ
C
      CALL ASSERT( (ACTION.EQ.'E').OR.(ACTION.EQ.'L') )
C
      IF (INFO.EQ.'MXITER') THEN
        IF (ACTION.EQ.'L') THEN
          VALI  = NINT(ZR(JIFCV+1-1))
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+1-1) = VALI
        ENDIF
      ELSEIF (INFO.EQ.'MNITER') THEN
        IF (ACTION.EQ.'L') THEN
          VALI  = NINT(ZR(JIFCV+2-1))
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+2-1) = VALI
        ENDIF
      ELSEIF (INFO.EQ.'NBITER') THEN
        IF (ACTION.EQ.'L') THEN
          VALI  = NINT(ZR(JIFCV+3-1))
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+3-1) = VALI
        ENDIF
      ELSEIF (INFO.EQ.'PAS_MINI_ELAS') THEN
        IF (ACTION.EQ.'L') THEN
          VALR(1)  = ZR(JIFCV+4-1)
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+4-1) = VALR(1)
        ENDIF
      ELSEIF (INFO.EQ.'RESI_GLOB_RELA') THEN
        IF (ACTION.EQ.'L') THEN
          VALR(1)  = ZR(JIFCV+5-1)
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+5-1) = VALR(1)
        ENDIF
      ELSEIF (INFO.EQ.'RESI_GLOB_MAXI') THEN
        IF (ACTION.EQ.'L') THEN
          VALR(1)  = ZR(JIFCV+6-1)
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+6-1) = VALR(1)
        ENDIF
      ELSEIF (INFO.EQ.'TYPE_RESI') THEN
        IF (ACTION.EQ.'L') THEN
          VALI  = NINT(ZR(JIFCV+7-1))
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+7-1) = VALI
        ENDIF
      ELSEIF (INFO.EQ.'INIT_NEWTON_KRYLOV') THEN
        IF (ACTION.EQ.'L') THEN
          VALR(1)  = ZR(JIFCV+8-1)
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+8-1) = VALR(1)
        ENDIF
      ELSEIF (INFO.EQ.'ITER_NEWTON_KRYLOV') THEN
        IF (ACTION.EQ.'L') THEN
          VALR(1)  = ZR(JIFCV+9-1)
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+9-1) = VALR(1)
        ENDIF
      ELSEIF (INFO.EQ.'ITERSUP') THEN
        IF (ACTION.EQ.'L') THEN
          VALI  = NINT(ZR(JIFCV+10-1))
        ELSEIF (ACTION.EQ.'E') THEN
          ZR(JIFCV+10-1) = VALI
        ENDIF
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
      CALL JEDEMA()
C
      END
