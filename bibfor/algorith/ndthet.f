      SUBROUTINE NDTHET(FONACT,SDDYNA,FOINER,VEASSE,CNFINT,
     &                  CNFEXT)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 22/12/2009   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2008  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      INTEGER       FONACT(*)
      CHARACTER*19  SDDYNA
      CHARACTER*19  VEASSE(*)
      CHARACTER*19  FOINER,CNFINT,CNFEXT
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME)
C
C RESULTANTE DES EFFORTS POUR ESTIMATION DE L'EQUILIBRE
C CAS DU THETA_SCHEMA EN VITESSE
C      
C ----------------------------------------------------------------------
C
C
C IN  SDDYNA : SD DYNAMIQUE
C IN  FONACT : FONCTIONNALITES ACTIVEES
C IN  VEASSE : VARIABLE CHAPEAU POUR NOM DES VECT_ASSE
C IN  FOINER : VECTEUR DES FORCES D'INERTIE POUR CONVERGENCE
C OUT CNFINT : VECTEUR RESULTANT DES FORCES INTERNES
C OUT CNFEXT : VECTEUR RESULTANT DES FORCES EXTERNES
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      IFM,NIV
      CHARACTER*19 CNDUMM,CNUNIL,CNCTDC
      CHARACTER*19 CNFFDO,CNFVDO
      CHARACTER*19 FINTPR,FINTCO
      LOGICAL      ISFONC,LCTCD,LUNIL,LKRENK,NDYNLO
      INTEGER      IFDO,N
      CHARACTER*19 VECT(20)
      REAL*8       COEF(20)   
      REAL*8       NDYNRE,COEEXT,COEEX2,KAPPA
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- FONCTIONNALITES ACTIVEES
C    
      LCTCD  = ISFONC(FONACT,'CONT_DISCRET'    )
      LUNIL  = ISFONC(FONACT,'LIAISON_UNILATER')      
C
C --- INITIALISATIONS
C
      IFDO   = 0   
      CNFFDO = '&&CNCHAR.FFDO'
      CNFVDO = '&&CNCHAR.FVDO'                   
      CNDUMM = '&&CNCHAR.DUMM'                    
      CALL VTZERO(CNFEXT)   
          
C
C --- FORCES DE CONTACT DISCRET
C
      IF (LCTCD) THEN
        CALL NMCHEX(VEASSE,'VEASSE','CNCTDC',CNCTDC) 
        IFDO       = IFDO + 1 
        COEF(IFDO) = -1.D0   
        VECT(IFDO) = CNCTDC
      ENDIF      
C
C --- FORCES DE LIAISON_UNILATER
C
      IF (LUNIL) THEN
        CALL NMCHEX(VEASSE,'VEASSE','CNUNIL',CNUNIL) 
        IFDO       = IFDO + 1 
        COEF(IFDO) = -1.D0   
        VECT(IFDO) = CNUNIL
      ENDIF
C
C --- COEFFICIENTS POUR MULTI-PAS
C  
      COEEXT = NDYNRE(SDDYNA,'COEF_MPAS_FEXT_PREC')   
      COEEX2 = NDYNRE(SDDYNA,'COEF_MPAS_FEXT_COUR')       
C
C --- CALCUL DU VECTEUR DES CHARGEMENTS FIXES        (NEUMANN)      
C       
      CALL NMASFI(FONACT,SDDYNA,VEASSE,CNFFDO,CNDUMM)
C      
C --- CALCUL DU VECTEUR DES CHARGEMENTS VARIABLES    (NEUMANN)     
C
      CALL NMASVA(SDDYNA,VEASSE,CNFVDO)        
C
C --- CHARGEMENTS EXTERIEURS DONNEES DANS CNFEXT
C
      IFDO       = IFDO + 1 
      COEF(IFDO) = 1.D0   
      VECT(IFDO) = CNFFDO
      IFDO       = IFDO + 1 
      COEF(IFDO) = 1.D0   
      VECT(IFDO) = CNFVDO
C
C --- FORCES DE CONTACT DISCRET DANS CNFEXT
C
      IF (LCTCD) THEN
        CALL NMCHEX(VEASSE,'VEASSE','CNCTDC',CNCTDC) 
        IFDO       = IFDO + 1 
        COEF(IFDO) = -1.D0   
        VECT(IFDO) = CNCTDC
      ENDIF      
C
C --- FORCES DE LIAISON_UNILATER DANS CNFEXT
C
      IF (LUNIL) THEN
        CALL NMCHEX(VEASSE,'VEASSE','CNUNIL',CNUNIL) 
        IFDO       = IFDO + 1 
        COEF(IFDO) = -1.D0   
        VECT(IFDO) = CNUNIL
      ENDIF        
C
C --- CHARGEMENTS DES TERMES INERTIE DANS CNFEXT
C      
      IFDO       = IFDO + 1 
      COEF(IFDO) = 1.D0   
      VECT(IFDO) = FOINER
C
C --- VECTEUR RESULTANT DES FORCES EXTERNES
C     
      IF (IFDO.GT.20) THEN
        CALL ASSERT(.FALSE.)
      ENDIF 
      DO 10 N = 1,IFDO
        CALL VTAXPY(COEF(N),VECT(N),CNFEXT)   
 10   CONTINUE       
C
C --- INITIALISATIONS POUR FORCES INTERNES
C
      IFDO   = 0    
      CALL VTZERO(CNFINT)   
      CALL NMCHEX(VEASSE,'VEASSE','CNFINT',FINTCO)
      CALL NDYNKK(SDDYNA,'OLDP_CNFINT',FINTPR)
C
C --- AJOUT FORCES INTERNES
C --- ON VEUT:
C          (1-THETA)*FINTPR +  (THETA)*FINTCO     
C 
      LKRENK = NDYNLO(SDDYNA,'KRENK')

      IF (LKRENK) THEN
        KAPPA  = NDYNRE(SDDYNA,'KAPPA')
        COEEXT = (1.D0 - (KAPPA/2.D0))
        COEEX2 = KAPPA/2.D0
      ENDIF     
      IFDO       = IFDO + 1 
      COEF(IFDO) = COEEXT   
      VECT(IFDO) = FINTPR
      IFDO       = IFDO + 1      
      COEF(IFDO) = COEEX2   
      VECT(IFDO) = FINTCO     
C
C --- VECTEUR RESULTANT DES FORCES INTERNES
C     
      IF (IFDO.GT.20) THEN
        CALL ASSERT(.FALSE.)
      ENDIF 
      DO 13 N = 1,IFDO
        CALL VTAXPY(COEF(N),VECT(N),CNFINT)   
 13   CONTINUE 
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        CALL NMDEBG('VECT',CNFEXT,IFM   )   
        CALL NMDEBG('VECT',CNFINT,IFM   )            
      ENDIF       
C
      CALL JEDEMA()
      END
