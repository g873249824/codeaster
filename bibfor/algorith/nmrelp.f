      SUBROUTINE NMRELP(MODELE,NUMEDD,MATE  ,CARELE,COMREF,
     &                  COMPOR,LISCHA,CARCRI,FONACT,ITERAT,
     &                  SDSTAT,SDNUME,SDDYNA,PARMET,METHOD,
     &                  DEFICO,VALINC,SOLALG,VEELEM,VEASSE,
     &                  SDTIME,CONV  ,LDCCVG)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 09/04/2013   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_21
C
      IMPLICIT NONE
      INCLUDE 'jeveux.h'
      INTEGER       FONACT(*)
      INTEGER       ITERAT,LDCCVG
      REAL*8        PARMET(*),CONV(*)
      CHARACTER*16  METHOD(*)
      CHARACTER*24  CARCRI,SDTIME,DEFICO,SDSTAT
      CHARACTER*19  LISCHA,SDDYNA,SDNUME
      CHARACTER*24  MODELE,NUMEDD,MATE  ,CARELE, COMREF, COMPOR
      CHARACTER*19  VEELEM(*),VEASSE(*)
      CHARACTER*19  SOLALG(*),VALINC(*)
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME)
C
C RECHERCHE LINEAIRE DANS LA DIRECTION DE DESCENTE
C
C ----------------------------------------------------------------------
C
C
C IN  MODELE : MODELE
C IN  NUMEDD : NUME_DDL
C IN  MATE   : CHAMP MATERIAU
C IN  CARELE : CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN  COMREF : VARI_COM DE REFERENCE
C IN  COMPOR : COMPORTEMENT
C IN  LISCHA : LISTE DES CHARGES
C IN  CARCRI : PARAMETRES DES METHODES D'INTEGRATION LOCALES
C IN  SDTIME : SD TIMER
C IN  SDSTAT : SD STATISTIQUES
C IN  FONACT : FONCTIONNALITES ACTIVEES
C IN  ITERAT : NUMERO D'ITERATION DE NEWTON
C IN  SDNUME : SD NUMEROTATION
C IN  PARMET : PARAMETRES DES METHODES DE RESOLUTION
C                 1 : REAC_INCR
C                 2 : REAC_ITER
C                 3 : PAS_MINI_ELAS
C                 4 : REAC_ITER_ELAS
C             5 - 9 : -- INUTILISE --
C                10 : ITER_LINE_MAXI
C                11 : RESI_LINE_RELA
C                12 : -- INUTILISE --
C                13 : -- INUTILISE --
C                14 : RHO_MIN
C                15 : RHO_MAX
C                16 : RHO_EXCL
C           17 - 30 : -- INUTILISE --
C IN  METHOD : INFORMATIONS SUR LES METHODES DE RESOLUTION
C IN  VALINC : VARIABLE CHAPEAU POUR INCREMENTS VARIABLES
C IN  SOLALG : VARIABLE CHAPEAU POUR INCREMENTS SOLUTIONS
C IN  VEASSE : VARIABLE CHAPEAU POUR NOM DES VECT_ASSE
C IN  VEELEM : VARIABLE CHAPEAU POUR NOM DES VECT_ELEM
C IN  SDDYNA : SD DYNAMIQUE
C OUT LDCCVG : CODE RETOUR DE L'INTEGRATION DU COMPORTEMENT
C                -1 : PAS D'INTEGRATION DU COMPORTEMENT
C                 0 : CAS DU FONCTIONNEMENT NORMAL
C                 1 : ECHEC DE L'INTEGRATION DE LA LDC
C                 3 : SIZZ PAS NUL POUR C_PLAN DEBORST
C OUT CONV   : INFORMATIONS SUR LA CONVERGENCE DU CALCUL
C                10 : ITERATIONS RECHERCHE LINEAIRE
C                11 : VALEUR DE RHO
C
C ----------------------------------------------------------------------
C
      INTEGER      ZSOLAL,ZVALIN
      PARAMETER    (ZSOLAL=17,ZVALIN=28)
C
      INTEGER      ITEMAX,ITERHO,NEQ   ,ACT   ,OPT   ,LDCOPT,IRET
      INTEGER      DIMMEM,NMAX
      REAL*8       RHOMIN,RHOMAX,RHOEXM,RHOEXP
      REAL*8       RHOM  ,RHOOPT,RHO
      REAL*8       F0    ,FM    ,F     ,FOPT  ,FCVG
      REAL*8       PARMUL,RATCVG,SENS
      REAL*8       MEM(2,10),R8MAEM
      CHARACTER*8  K8BID
      LOGICAL      STITE,LNKRY
      LOGICAL      ISFONC,LGROT,LENDO
      CHARACTER*19 CNFINS(2),CNDIRS(2),K19BLA
      CHARACTER*19 DEPPLU,SIGPLU,VARPLU,COMPLU
      INTEGER      JDDEPL
      CHARACTER*19 SIGPLT,VARPLT,DEPPLT
      CHARACTER*24 CODERE
      CHARACTER*19 VEFINT,VEDIRI
      CHARACTER*19 CNFINT,CNDIRI,CNFEXT
      CHARACTER*19 DEPDET,DDEPLA,DEPDEL
      CHARACTER*19 SOLALT(ZSOLAL),VALINT(ZVALIN,2)
      LOGICAL      ECHEC
      INTEGER      IFM,NIV
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... RECHERCHE LINEAIRE'
      ENDIF
C
C --- FONCTIONNALITES ACTIVEES
C
      LGROT  = ISFONC(FONACT,'GD_ROTA')
      LENDO  = ISFONC(FONACT,'ENDO_NO')
      LNKRY  = ISFONC(FONACT,'NEWTON_KRYLOV')
C
C --- INITIALISATIONS
C
      PARMUL = 3.D0
      FOPT   = R8MAEM()
      K19BLA = ' '
      LDCCVG = -1
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ,K8BID,IRET)
      CALL NMCHAI('VALINC','LONMAX',NMAX  )
      CALL ASSERT(NMAX.EQ.ZVALIN)
      CALL NMCHAI('SOLALG','LONMAX',NMAX  )
      CALL ASSERT(NMAX.EQ.ZSOLAL)
C
C --- PARAMETRES RECHERCHE LINEAIRE
C
      ITEMAX = NINT(PARMET(10))
      RHOMIN = PARMET(14)
      RHOMAX = PARMET(15)
      RHOEXM = -PARMET(16)
      RHOEXP = PARMET(16)
      RATCVG = PARMET(11)
      DIMMEM = 10
      IF (ITEMAX .GT. 1000) THEN
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- DECOMPACTION VARIABLES CHAPEAUX
C
      CALL NMCHEX(VALINC,'VALINC','DEPPLU',DEPPLU)
      CALL NMCHEX(VALINC,'VALINC','SIGPLU',SIGPLU)
      CALL NMCHEX(VALINC,'VALINC','VARPLU',VARPLU)
      CALL NMCHEX(VALINC,'VALINC','COMPLU',COMPLU)
      CALL NMCHEX(VEASSE,'VEASSE','CNFINT',CNFINT)
      CALL NMCHEX(VEASSE,'VEASSE','CNDIRI',CNDIRI)
      CALL NMCHEX(VEASSE,'VEASSE','CNFEXT',CNFEXT)
      CALL NMCHEX(VEELEM,'VEELEM','CNFINT',VEFINT)
      CALL NMCHEX(VEELEM,'VEELEM','CNDIRI',VEDIRI)
      CALL NMCHEX(SOLALG,'SOLALG','DDEPLA',DDEPLA)
      CALL NMCHEX(SOLALG,'SOLALG','DEPDEL',DEPDEL)
C
C --- ACCES VARIABLES
C
      CALL JEVEUO(DDEPLA(1:19)//'.VALE','E',JDDEPL)
C
C --- PREPARATION DES ZONES TEMPORAIRES POUR ITERATION COURANTE
C
      CNFINS(1) =  CNFINT
      CNFINS(2) = '&&NMRECH.RESI'
      CNDIRS(1) =  CNDIRI
      CNDIRS(2) = '&&NMRECH.DIRI'
      DEPDET    = '&&CNPART.CHP1'
      DEPPLT    = '&&CNPART.CHP2'
      SIGPLT    = '&&NMRECH.SIGP'
      VARPLT    = '&&NMRECH.VARP'
      CALL VTZERO(DEPDET)
      CALL VTZERO(DEPPLT)
      CALL COPISD('CHAMP_GD','V',VARPLU,VARPLT)
      CALL COPISD('CHAMP_GD','V',SIGPLU,SIGPLT)
      CALL VTCREB('&&NMRECH.RESI',NUMEDD,'V','R',NEQ)
      CALL VTCREB('&&NMRECH.DIRI',NUMEDD,'V','R',NEQ)
C
C --- CONSTRUCTION DES VARIABLES CHAPEAUX
C
      CALL NMCHA0('VALINC','ALLINI',' ',VALINT(1,1))
      CALL NMCHSO(VALINC,'VALINC','      ',K19BLA,VALINT(1,1))
      CALL NMCHSO(VALINT(1,1),'VALINC','DEPPLU',DEPPLT,VALINT(1,1))
      CALL NMCHA0('VALINC','ALLINI',' ',VALINT(1,2))
      CALL NMCHSO(VALINC,'VALINC','      ',K19BLA,VALINT(1,2))
      CALL NMCHSO(VALINT(1,2),'VALINC','DEPPLU',DEPPLT,VALINT(1,2))
      CALL NMCHSO(VALINT(1,2),'VALINC','SIGPLU',SIGPLT,VALINT(1,2))
      CALL NMCHSO(VALINT(1,2),'VALINC','VARPLU',VARPLT,VALINT(1,2))
      CALL NMCHSO(SOLALG,'SOLALG','DEPDEL',DEPDET,SOLALT)
C
C --- CALCUL DE F(RHO=0)
C
      CALL NMRECZ(NUMEDD,CNDIRI,CNFINT,CNFEXT,DDEPLA,
     &            F0    )

      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... FONCTIONNELLE INITIALE: ',F0
      ENDIF
C
C --- VALEUR DE CONVERGENCE
C
      FCVG = ABS(RATCVG * F0)
C
C --- INITIALISATION ET DIRECTION DE DESCENTE
C
      IF (METHOD(7).EQ.'CORDE') THEN
        SENS = 1.D0
        RHOM = 0.D0
        FM   = F0
      ELSEIF (METHOD(7).EQ.'MIXTE') THEN
        IF (F0.LE.0.D0) THEN
          SENS = 1.D0
        ELSE
          SENS = -1.D0
        ENDIF
        CALL ZBINIT(SENS*F0,PARMUL,DIMMEM,MEM   )
        RHOOPT = 1.D0
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- BOUCLE DE RECHERCHE LINEAIRE
C
      RHO  = SENS
      ACT  = 1

      DO 20 ITERHO = 0, ITEMAX
C
C ----- CALCUL DE L'INCREMENT DE DEPLACEMENT TEMPORAIRE
C
        CALL NMMAJI(NUMEDD,LGROT ,LENDO ,SDNUME,RHO   ,
     &              DEPDEL,DDEPLA,DEPDET,0)
        CALL NMMAJI(NUMEDD,LGROT ,LENDO ,SDNUME,RHO   ,
     &              DEPPLU,DDEPLA,DEPPLT,1)
        IF (LNKRY) THEN
          CALL VLAXPY(1.D0-RHO,DDEPLA,DEPDET)
          CALL VLAXPY(1.D0-RHO,DDEPLA,DEPPLT)
        ENDIF
C
C ----- AFFICHAGE
C
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... ITERATION <',ITERHO,'>'
          WRITE (IFM,*) '<MECANONLINE> ...... RHO COURANT = ',RHO
          WRITE (IFM,*) '<MECANONLINE> ...... INCREMENT DEPL.'
          CALL NMDEBG('VECT',DEPPLT,6)
          WRITE (IFM,*) '<MECANONLINE> ...... INCREMENT DEPL. TOTAL'
          CALL NMDEBG('VECT',DEPDET,6)
        ENDIF
C
C ----- REACTUALISATION DES FORCES INTERIEURES
C
        CALL NMFINT(MODELE,MATE  ,CARELE,COMREF,COMPOR,
     &              CARCRI,FONACT,ITERAT,SDDYNA,SDSTAT,
     &              SDTIME,VALINT(1,ACT),SOLALT,LDCCVG,
     &              CODERE,VEFINT)
C
C ----- ASSEMBLAGE DES FORCES INTERIEURES
C
        CALL NMAINT(NUMEDD,FONACT,DEFICO,VEASSE,VEFINT,
     &              CNFINS(ACT),SDNUME)
C
C ----- REACTUALISATION DES REACTIONS D'APPUI BT.LAMBDA
C
C        if (act.NE.1) call copisd('CHAMP_GD','V',cndiri,cndirs(act))
        CALL NMTIME(SDTIME,'INI','SECO_MEMB')
        CALL NMTIME(SDTIME,'RUN','SECO_MEMB')
        CALL NMDIRI(MODELE,MATE  ,CARELE,LISCHA,SDDYNA,
     &              DEPPLT,K19BLA,K19BLA,VEDIRI)
        CALL NMADIR(NUMEDD,FONACT,DEFICO,VEASSE,VEDIRI,
     &              CNDIRS(ACT))
        CALL NMTIME(SDTIME,'END','SECO_MEMB')
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... FORCES INTERNES'
          CALL NMDEBG('VECT',CNFINS(ACT),6)
          WRITE (IFM,*) '<MECANONLINE> ...... REACTIONS D''APPUI'
          CALL NMDEBG('VECT',CNDIRS(ACT),6)
         ENDIF
C
C ----- ON A NECESSAIREMENT INTEGRE LA LOI DE COMPORTEMENT
C
        CALL ASSERT(LDCCVG.NE.-1)
C
C ----- ECHEC A L'INTEGRATION DE LA LOI DE COMPORTEMENT
C
        IF (LDCCVG.NE.0) THEN
C
C ------- S'IL EXISTE DEJA UN RHO OPTIMAL, ON LE CONSERVE
C
          IF (ITERHO.GT.0) THEN
            GOTO 100
          ELSE
            GOTO 9999
          ENDIF
        ENDIF
C
C ----- CALCUL DE F(RHO)
C
        CALL NMRECZ(NUMEDD,CNDIRS(ACT),CNFINS(ACT),CNFEXT,DDEPLA,
     &              F    )

        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE> ... FONCTIONNELLE COURANTE: ',F
        ENDIF
C
C ----- CALCUL DU RHO OPTIMAL
C
        IF (METHOD(7).EQ.'CORDE') THEN
          CALL NMRECH(FM    ,F     ,FOPT  ,FCVG  ,RHOMIN,
     &                RHOMAX,RHOEXM,RHOEXP,RHOM  ,RHO   ,
     &                RHOOPT,LDCOPT,LDCCVG,OPT   ,ACT   ,
     &                STITE)

        ELSEIF (METHOD(7).EQ.'MIXTE') THEN
          CALL NMREBO(F     ,MEM   ,SENS  ,RHO   ,RHOOPT,
     &                LDCOPT,LDCCVG,FOPT  ,FCVG  ,OPT   ,
     &                ACT   ,RHOMIN,RHOMAX,RHOEXM,RHOEXP,
     &                STITE ,ECHEC)
          IF (ECHEC) THEN
            GOTO 100
          ENDIF
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
        IF (STITE) THEN
          GOTO 100
        ENDIF
 20   CONTINUE
      ITERHO = ITEMAX
C
C --- STOCKAGE DU RHO OPTIMAL ET DES CHAMPS CORRESPONDANTS
C
 100  CONTINUE
C
C --- AJUSTEMENT DE LA DIRECTION DE DESCENTE
C
      CALL DAXPY(NEQ  ,RHOOPT-1.D0,ZR(JDDEPL),1,ZR(JDDEPL),1)
C
C --- RECUPERATION DES VARIABLES EN T+ SI NECESSAIRE
C
      IF (OPT.NE.1) THEN
        CALL COPISD('CHAMP_GD','V',SIGPLT,SIGPLU)
        CALL COPISD('CHAMP_GD','V',VARPLT,VARPLU)
        CALL COPISD('CHAMP_GD','V',CNFINS(OPT),CNFINT)
        CALL COPISD('CHAMP_GD','V',CNDIRS(OPT),CNDIRI)
      END IF
C
C --- INFORMATIONS SUR LA RECHERCHE LINEAIRE
C
      CONV(10) = ITERHO
      CONV(11) = RHOOPT
      LDCCVG   = LDCOPT
C
 9999 CONTINUE
C
      CALL DETRSD('CHAMP', '&&NMRECH.RESI')
      CALL DETRSD('CHAMP', '&&NMRECH.DIRI')
      CALL JEDEMA()

      END
