      SUBROUTINE NMTIMR(SDTIME,TIMERZ,PHASE ,VALR  )
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 17/12/2012   AUTEUR DESOZA T.DESOZA 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      INCLUDE 'jeveux.h'
      CHARACTER*24  SDTIME
      CHARACTER*(*) TIMERZ
      CHARACTER*1   PHASE
      REAL*8        VALR
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (UTILITAIRE)
C
C GESTION DES TIMERS - LECTURE INFORMATIONS
C
C ----------------------------------------------------------------------
C
C
C IN  SDTIME : SD TIMER
C IN  TIMER  : NOM DU TIMER
C              'PAS'               TIMER PAS DE TEMPS
C              'ITE'               TIMER ITERATION DE NEWTON
C              'ARC'               TIMER ARCHIVAGE
C              'INTEGRATION'       TIMER INTEG. LDC
C              'ASSE_MATR'         TIMER ASSEMBLAGE MATRICES
C              'FACTOR'            TIMER FACTORISATION
C              'SECO_MEMB'         TIMER CALCUL SECOND MEMBRE
C              'SOLVE'             TIMER RESOLUTION
C              'CONT_GEOM'         TIMER APPARIEMENT CONTACT
C              'CTCD_ALGO'         TIMER RESOLUTION CONTACT DISCRET
C              'CTCC_PREP'         TIMER PREPARATION CONTACT CONTINU
C              'CTCC_MATR'         TIMER CALCUL MATRICE CONTINU
C              'CTCC_VECT'         TIMER CALCUL VECTEUR CONTINU
C              'CTCC_CONT'         TIMER RESOLUTION CONTACT CONTINU
C              'CTCC_FROT'         TIMER RESOLUTION FROTTEMENT CONTINU
C              'POST_TRAITEMENT'   TIMER POST_PROCESSING
C              'PAS_LOST'          TEMPS PERDU DANS PAS (DECOUPE)
C IN  PHASE  : TYPE DE VALEUR EN LECTURE
C              'N' SUR L'ITERATION DE NEWTON COURANTE
C              'P' SUR LE PAS COURANT
C              'T' SUR TOUT LE TRANSITOIRE
C OUT VALR   : TEMPS MESURE
C
C
C
C
      CHARACTER*24 TIMET,TIMEP,TIMEN
      INTEGER      JTIMET,JTIMEP,JTIMEN
      CHARACTER*24 TIMER
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      TIMER  = TIMERZ
C
C --- ACCES SDTIME: TOTAL/PAS/NEWTON
C
      TIMET  = SDTIME(1:19)//'.TIMT'
      TIMEP  = SDTIME(1:19)//'.TIMP'
      TIMEN  = SDTIME(1:19)//'.TIMN'
      CALL JEVEUO(TIMET ,'L',JTIMET)
      CALL JEVEUO(TIMEP ,'L',JTIMEP)
      CALL JEVEUO(TIMEN ,'L',JTIMEN)
C
      IF (TIMER.EQ.'TEMPS_PHASE') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+1)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+1)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+2)

      ELSEIF (TIMER.EQ.'INTEGRATION') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+4)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+4)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+4)

      ELSEIF (TIMER.EQ.'ASSE_MATR') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+5)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+5)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+5)

      ELSEIF (TIMER.EQ.'FACTOR') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+6)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+6)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+6)

      ELSEIF (TIMER.EQ.'SECO_MEMB') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+7)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+7)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+7)

      ELSEIF (TIMER.EQ.'SOLVE') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+8)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+8)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+8)

      ELSEIF (TIMER.EQ.'CONT_GEOM') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+9)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+9)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+9)

      ELSEIF (TIMER.EQ.'CTCD_ALGO') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+10)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+10)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+10)

      ELSEIF (TIMER.EQ.'CTCC_PREP') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+11)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+11)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+11)

      ELSEIF (TIMER.EQ.'CTCC_MATR') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+12)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+12)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+12)

      ELSEIF (TIMER.EQ.'CTCC_VECT') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+13)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+13)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+13)

      ELSEIF (TIMER.EQ.'CTCC_CONT') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+14)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+14)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+14)

      ELSEIF (TIMER.EQ.'CTCC_FROT') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+15)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+15)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+15)

      ELSEIF (TIMER.EQ.'POST_TRAITEMENT') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+16)
        IF (PHASE.EQ.'P') VALR = ZR(JTIMEP-1+16)
        IF (PHASE.EQ.'N') VALR = ZR(JTIMEN-1+16)

      ELSEIF (TIMER.EQ.'PAS_LOST') THEN
        IF (PHASE.EQ.'T') VALR = ZR(JTIMET-1+17)
        IF (PHASE.EQ.'P') CALL ASSERT(.FALSE.)
        IF (PHASE.EQ.'N') CALL ASSERT(.FALSE.)

      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
      CALL JEDEMA()
      END
