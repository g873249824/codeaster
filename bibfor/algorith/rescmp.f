      SUBROUTINE RESCMP(CNDIRI,CNVCFO,CNFEXT,CNFINT,CNFNOD,
     &                  MAXRES,NODDLM,NUMNO )
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 13/06/2012   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT     NONE
      INCLUDE 'jeveux.h'
      REAL*8       MAXRES
      CHARACTER*8  NODDLM
      INTEGER      NUMNO
      CHARACTER*19 CNDIRI,CNVCFO,CNFEXT,CNFINT,CNFNOD     
C      
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (UTILITAIRE - RESIDU) 
C
C CALCULE LE MAX DES RESIDUS PAR CMP POUR LE RESIDU RESI_COMP_RELA 
C
C ----------------------------------------------------------------------
C
C
C IN  CNFEXT : VECT_ASSE DES FORCES EXTERIEURES APPLIQUEES (NEUMANN)
C IN  CNFINT : VECT_ASSE DES FORCES INTERIEURES
C IN  CNFNOD : VECT_ASSE DES FORCES NODALES
C IN  CNDIRI : VECT_ASSE REACTIONS D'APPUI
C OUT MAXRES : RESIDU RESI_NODA_RELA
C OUT NUMNO  : NUMERO DU NOEUD PENALISANT
C OUT NODDLM : NOM DU MECANISME SUR LEQUEL PORTE LE RESIDU 
C
C
C
C

      INTEGER      NDDMAX
      PARAMETER    (NDDMAX = 6)
      CHARACTER*8  NOMDDL(NDDMAX)
      REAL*8       MAXDDF(NDDMAX),MAXDDR(NDDMAX)
      INTEGER      NUMNOD(NDDMAX) 
C
      CHARACTER*3  TSCA
      INTEGER      CMPMAX
      INTEGER      JVCFOS
      CHARACTER*19 CFNOS,CFNINT,CFNDIR,CFNFEX
      INTEGER      IBID,I,K
      REAL*8       RESIM,FONAM,RES
      INTEGER      JCNSD,JFINTS,JDIRIS,JFEXTS,JCNSL,JCNSC
      INTEGER      JCNSK,LICMPU(999)
      INTEGER      NBCMP,NBNO,INC,INO,NBCMPU
      CHARACTER*8  NOMGD
      INTEGER      JFINT,JDIRI,JFEXT,JVCFO,JFNOD
      REAL*8       EPSI
      PARAMETER    (EPSI = 1.D-50)
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- ACCES AUX CHAM_NO
C
      CALL JEVEUO(CNVCFO(1:19)//'.VALE','L',JVCFO) 
      CALL JEVEUO(CNFINT(1:19)//'.VALE','L',JFINT)
      CALL JEVEUO(CNDIRI(1:19)//'.VALE','L',JDIRI)
      CALL JEVEUO(CNFEXT(1:19)//'.VALE','L',JFEXT)
      CALL JEVEUO(CNFNOD(1:19)//'.VALE','L',JFNOD) 
C
C --- TRANSFORMATION EN CHAMPS SIMPLES
C 
      CFNOS  = '&&NMRESI.CHAM_NO_S'
      CFNINT = '&&NMRESII.CHAM_NO_S'
      CFNDIR = '&&NMRESID.CHAM_NO_S'
      CFNFEX = '&&NMRESIX.CHAM_NO_S'
      CALL CNOCNS(CNFNOD,'V',CFNOS )
      CALL CNOCNS(CNFINT,'V',CFNINT)
      CALL CNOCNS(CNDIRI,'V',CFNDIR)
      CALL CNOCNS(CNFEXT,'V',CFNFEX)
C
C --- ACDES VALEURES
C
      CALL JEVEUO(CFNOS (1:19)//'.CNSV','L', JVCFOS)
      CALL JEVEUO(CFNINT(1:19)//'.CNSV','L',JFINTS)
      CALL JEVEUO(CFNDIR(1:19)//'.CNSV','L',JDIRIS)
      CALL JEVEUO(CFNFEX(1:19)//'.CNSV','L',JFEXTS)
      CALL JEVEUO(CFNOS(1:19)//'.CNSD','L',JCNSD)
      CALL JEVEUO(CFNOS(1:19)//'.CNSL','L',JCNSL)
      CALL JEVEUO(CFNOS(1:19)//'.CNSC','L',JCNSC)
      CALL JEVEUO(CFNOS(1:19)//'.CNSK','L',JCNSK)
C
      NBCMP  = ZI(JCNSD-1+2)
      NBNO   = ZI(JCNSD-1+1)
      NOMGD  = ZK8(JCNSK-1+2)           
C
C --- NB DE CMP DANS LE CHAMP
C
      NBCMPU = 0
      DO 30 INC = 1,NBCMP
        DO 10 INO = 1,NBNO    
           IF(ZL(JCNSL-1+(INO-1)*NBCMP+INC))GOTO 20   
 10     CONTINUE
        GOTO 30
 20     CONTINUE
        NBCMPU = NBCMPU + 1
        CALL ASSERT(NBCMPU.LT.999)
        LICMPU(NBCMPU) = INC
 30   CONTINUE
C
      IF (NBCMPU.GT.NDDMAX) CALL ASSERT(.FALSE.)
      CALL DISMOI('F','TYPE_SCA',NOMGD,'GRANDEUR',IBID,TSCA,IBID)
      IF( TSCA.NE.'R')  CALL ASSERT(.FALSE.)
C
      DO 31 INC = 1,NBCMPU    
        NOMDDL(INC) = ZK8(JCNSC-1+LICMPU(INC))
        MAXDDF(INC) = 0.D0   
        MAXDDR(INC) = 0.D0   
        NUMNOD(INC) = 0
 31   CONTINUE
C 
C
      DO 28 INO = 1,NBNO       
        DO 29 INC = 1,NBCMPU
            K =  LICMPU(INC) 
            IF(ZL(JCNSL-1+(INO-1)*NBCMP+K))THEN
               I = NBCMP*(INO-1)+K
               RESIM=ABS(ZR(JFINTS+I-1)+ZR(JDIRIS+I-1)-ZR(JFEXTS+I-1))  
               FONAM =  ABS(ZR(JVCFOS+I-1))   
               IF(RESIM.GT.MAXDDR(INC))THEN
                  MAXDDR(INC)= RESIM
                  NUMNOD(INC)= INO
               ENDIF
               MAXDDF(INC)=MAX(FONAM,MAXDDF(INC))
            ENDIF
 29     CONTINUE
 28   CONTINUE
      MAXRES=0.D0

C
      DO 50 INC = 1,NBCMPU
          IF(MAXDDF(INC).GT.0.D0)THEN
             RES = MAXDDR(INC)/MAXDDF(INC)
          ELSE
             RES = -1
          ENDIF
          IF (RES.GT.MAXRES) THEN
            MAXRES = RES
            CMPMAX = INC
          ENDIF
  50  CONTINUE
C  
C  POUR INFO SI BESOIN NUMDDL  : NUMERO DU DDL PENALISANT
C    NUMDDL   = NUMN(CMPMAX)
C   
      IF(MAXRES.LT.EPSI)THEN
        MAXRES = -1.D0
        NUMNO   = 0
        NODDLM  = '   '
      ELSE
        NUMNO   = NUMNOD(CMPMAX)
        NODDLM  = NOMDDL(CMPMAX)
      ENDIF
      
      CALL DETRSD('CHAM_NO_S',CFNOS)
      CALL DETRSD('CHAM_NO_S',CFNINT)
      CALL DETRSD('CHAM_NO_S',CFNDIR)
      CALL DETRSD('CHAM_NO_S',CFNFEX)
           
      CALL JEDEMA()
      

C
      END
