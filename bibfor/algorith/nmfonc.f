      SUBROUTINE NMFONC(ZFON  ,PARCRI,PARMET,SOLVEU,MODELE,
     &                  DEFICO,DEFICU,LISCHA,REAROT,SDSENS,
     &                  SDDYNA,FONACT)

C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 03/11/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2006  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE MABBAS M.ABBAS
C
      IMPLICIT NONE
      INTEGER      ZFON
      LOGICAL      FONACT(ZFON),REAROT
      REAL*8       PARCRI(*),PARMET(*)
      CHARACTER*19 SOLVEU,LISCHA,SDDYNA
      CHARACTER*24 MODELE
      CHARACTER*24 DEFICO,DEFICU,SDSENS
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (INITIALISATION)
C
C FONCTIONNALITES ACTIVEES
C      
C ----------------------------------------------------------------------
C
C      
C IN  MODELE : MODELE MECANIQUE
C IN  DEFICO : SD DE DEFINITION DU CONTACT
C IN  DEFICU : SD DE DEFINITION D'UNE LIAISON UNILATERALE
C IN  REAROT : .TRUE. SI POUTRES EN GRANDES ROTATIONS
C IN  SOLVEU : NOM DU SOLVEUR DE NEWTON
C IN  SDDYNA : SD DYNAMIQUE
C IN  SDSENS : SD SENSIBILITE
C IN  PARMET : PARAMETRES DES METHODES DE RESOLUTION
C IN  PARCRI : RESI_CONT_RELA VAUT R8VIDE SI NON ACTIF
C IN  ZFON   : LONGUEUR DU VECTEUR FONACT
C IN  LISCHA : SD DE DEFINITION DES CHARGES
C OUT FONACT : FONCTIONNALITES SPECIFIQUES ACTIVEES
C       FONACT(1) :  RECHERCHE LINEAIRE
C       FONACT(2) :  PILOTAGE
C       FONACT(3) :  FROTTEMENT DISCRET
C       FONACT(4) :  CONTACT DISCRET
C       FONACT(5) :  CONTACT CONTINU
C       FONACT(6) :  METHODE XFEM
C       FONACT(7) :  ALGORITHME DE DE BORST
C       FONACT(8) :  CONVERGENCE PAR RESIDU DE REFERENCE
C       FONACT(9) :  CONTACT XFEM
C       FONACT(10):  FROTTEMENT CONTINU
C       FONACT(11):  SOLVEUR FETI
C       FONACT(12):  LIAISON UNILATERALE
C       FONACT(13):  CHARGEMENT SUIVEUR
C       FONACT(14):  MACRO-ELEMENTS STATIQUES
C       FONACT(15):  POUTRES EN GRANDES ROTATIONS
C       FONACT(16):  SENSIBILITE
C       FONACT(17):  CONTACT DISCRET EN MODE VERIF
C       FONACT(18):  CALCUL DE FLAMBEMENT
C       FONACT(19):  CALCUL DE MODES VIBRATOIRES
C       FONACT(20):  FORCES DE LAPLACE
C       FONACT(21):  CALCUL ERREUR EN TEMPS
C       FONACT(22):  CHARGEMENT DE TYPE DIDI
C       FONACT(23):  CONTACT BOUCLE FIXE GEOMETRIE
C
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ---------------------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C --- FIN DECLARATIONS NORMALISEES JEVEUX -----------------------------
C
      INTEGER      IBID,NOCC,JINFC,NBCHAR,IRET,NBSS,NBSST
      INTEGER      TYPALC,TYPALF,NBFONC,CFDISI,IZONE
      INTEGER      JSOLVE,JXC,IXFEM,ICONT,IUNIL,ICHAR,IFLAMB,IMVIBR
      REAL*8       R8VIDE       
      CHARACTER*8  K8BID
      CHARACTER*16 NOMCMD,K16BID,CHAINE
      INTEGER      NBPASE 
      CHARACTER*24 SENSNB
      INTEGER      JSENSN  
      CHARACTER*24 K24BID,K24BLA
      REAL*8       R8BID
      LOGICAL      LCTFC
      LOGICAL      ISFONC,LSTAT,LDYNA
      INTEGER      IFM,NIV 
C      
C ----------------------------------------------------------------------
C      
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C      
C --- VOUS AVEZ CHANGE (AJOUTE/RETIRE UNE FONCTIONNALITE)
C --- ZFON MODIFIEE DANS OP0070
C --- MODIFIER LA LIGNE CI-DESSOUS ET DOCUMENTER DANS L'ENTETE
C
      IF (ZFON.NE.24) THEN
        CALL ASSERT(.FALSE.)
      ENDIF
      NBFONC = 0
      K24BLA = ' '
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... CREATION VECTEUR '//
     &                'FONCTIONNALITES ACTIVEES: '
      ENDIF      
C
C --- NOM DE LA COMMANDE: STAT_NON_LINE, DYNA_NON_LINE
C
      CALL GETRES(K8BID,K16BID,NOMCMD)
      LSTAT = NOMCMD(1:4).EQ.'STAT'    
      LDYNA = NOMCMD(1:4).EQ.'DYNA'    
C
C --- RECHERCHE LINEAIRE
C      
      IF (LSTAT) THEN
        CALL GETFAC('RECH_LINEAIRE',NOCC)
        FONACT(1) = NOCC .NE. 0
      ENDIF  
C
C --- PILOTAGE
C
      IF (LSTAT) THEN
        NOCC = 0
        CALL GETFAC('PILOTAGE',NOCC)
        FONACT(2) = NOCC .NE. 0
      ENDIF
C
C --- LIAISON UNILATERALE
C
      CALL JEEXIN(DEFICU(1:16)//'.METHCU',IUNIL)
      FONACT(12) = IUNIL .NE. 0
C
C --- DEBORST ?
C
      CALL NMBORS(FONACT(7))
C
C --- CONVERGENCE SUR CRITERE EN CONTRAINTE GENERALISEE
C
      IF (PARCRI(6).NE.R8VIDE()) THEN
        FONACT(8) = .TRUE.
      ENDIF
C
C --- X-FEM 
C
      CALL EXIXFE(MODELE,IXFEM)
      IF (IXFEM.NE.0) THEN
        FONACT(6) = .TRUE.
      ENDIF
C
C --- CONTACT / FROTTEMENT
C
      CALL JEEXIN(DEFICO(1:16)//'.METHCO',ICONT)        
      IF (ICONT.NE.0) THEN
        CALL CFDISC(DEFICO,' ',TYPALC,TYPALF,IBID,IBID)
        IF (ABS(TYPALC).EQ.3) THEN
          FONACT(5) = .TRUE.
          CALL MMINFP(0    ,DEFICO,K24BLA,'FROTTEMENT',
     &                IBID ,R8BID ,K24BID,LCTFC) 
          FONACT(10) = LCTFC
        ELSE
          FONACT(4) = .TRUE.
          IF (TYPALC.EQ.5) THEN
            FONACT(17) = .TRUE.
          ENDIF
          IF (TYPALF.NE.0) THEN
            FONACT(3)  = .TRUE.
          ENDIF
C
C --- BOUCLE SUR GEOMETRIE
C
          IZONE      = 0
          FONACT(23) = CFDISI(DEFICO,'REAC_GEOM',IZONE).NE.0
        ENDIF
      ENDIF
C
C --- X-FEM ET CONTACT 
C
      IF (FONACT(6)) THEN
        CALL JEVEUO(MODELE(1:8)//'.XFEM_CONT'  ,'L',JXC)
        IF (ZI(JXC) .EQ. 1) THEN
          FONACT(9) = .TRUE.
          FONACT(5) = .TRUE.          
        ENDIF 
      ENDIF      
C
C --- FETI
C
      CALL  JEVEUO(SOLVEU//'.SLVK','L',JSOLVE)
      IF (ZK24(JSOLVE)(1:4).EQ.'FETI') THEN
        FONACT(11)=.TRUE.
      ELSE
        FONACT(11)=.FALSE.
      ENDIF
C
C --- CHARGES SUIVEUSES
C
      CALL  JEVEUO(LISCHA//'.INFC','L',JINFC)
      NBCHAR = ZI(JINFC)
      DO 10 ICHAR = 1,NBCHAR
        FONACT(13) = FONACT(13).OR.(ZI(JINFC+NBCHAR+ICHAR).EQ.4) 
 10   CONTINUE
C
C --- CHARGES DE TYPE DIDI
C
      DO 12 ICHAR = 1,NBCHAR
        FONACT(22) = FONACT(22).OR.(ZI(JINFC+3*NBCHAR+2+ICHAR).EQ.1) 
 12   CONTINUE 
C
C --- SOUS STRUCTURES STATIQUES
C
      CALL DISMOI('F','NB_SS_ACTI',MODELE,'MODELE',NBSS,K8BID,IRET)
      FONACT(14) = NBSS.GT.0    
C
C --- CALCUL PAR SOUS-STRUCTURATION
C
      CALL NMLSSV('LECT',LISCHA,NBSST) 
      IF (NBSST.GT.0)THEN
        FONACT(24) = .TRUE.  
      ENDIF        
C
C --- POUTRES EN GRANDES ROTATIONS
C
      FONACT(15) = REAROT
C
C --- SENSIBILITE
C
      SENSNB = SDSENS(1:16)//'.NBPASE '
      CALL JEVEUO(SENSNB,'L',JSENSN)
      NBPASE = ZI(JSENSN+1-1)
      FONACT(16) = NBPASE.GT.0
C
C --- CALCUL DE FLAMBEMENT
C
      CALL GETFAC('CRIT_FLAMB',IFLAMB)   
      FONACT(18) = IFLAMB.GT.0
C
C --- CALCUL DE MODES VIBRATOIRES
C
      IMVIBR = 0
      IF (LDYNA) THEN
        CALL GETFAC('MODE_VIBR',IMVIBR) 
      ENDIF    
      FONACT(19) = IMVIBR.GT.0 
C
C --- FORCES DE LAPLACE
C
      IF (NBCHAR.NE.0) THEN
        FONACT(20) = ZI(JINFC+2*NBCHAR+2)*NBCHAR.NE.0
      ENDIF    
C
C --- ERREUR EN TEMPS
C
      IF (LSTAT) THEN
        CALL GETVTX( 'INCREMENT','ERRE_TEMPS',1,1,1,CHAINE,NOCC)
        IF (NOCC.NE.0) THEN
          FONACT(21) = CHAINE.EQ.'OUI'
        ENDIF
      ENDIF  
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        IF (ISFONC(FONACT,'RECH_LINE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... RECHERCHE LINEAIRE'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'PILOTAGE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... PILOTAGE'
          NBFONC = NBFONC + 1
        ENDIF
C
        IF (ISFONC(FONACT,'CONTACT')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CONTACT'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'CONT_DISCRET')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CONTACT DISCRET'
          NBFONC = NBFONC + 1
        ENDIF 
        IF (ISFONC(FONACT,'CONT_CONTINU')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CONTACT CONTINU'
          NBFONC = NBFONC + 1
        ENDIF 
        IF (ISFONC(FONACT,'CONT_XFEM')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CONTACT XFEM'
          NBFONC = NBFONC + 1
        ENDIF    
        IF (ISFONC(FONACT,'CONT_VERIF')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CONTACT DISCRET '//
     &                  'EN MODE VERIF'
          NBFONC = NBFONC + 1
        ENDIF         
C        
        IF (ISFONC(FONACT,'FROTTEMENT')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... FROTTEMENT'
          NBFONC = NBFONC + 1
        ENDIF             
        IF (ISFONC(FONACT,'FROT_DISCRET')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... FROTTEMENT DISCRET'
          NBFONC = NBFONC + 1
        ENDIF 
        IF (ISFONC(FONACT,'FROT_CONTINU')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... FROTTEMENT CONTINU'
          NBFONC = NBFONC + 1
        ENDIF          
C        
        IF (ISFONC(FONACT,'XFEM')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... XFEM'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'DEBORST')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... METHODE DEBORST'
          NBFONC = NBFONC + 1
        ENDIF                        
        IF (ISFONC(FONACT,'RESI_REFE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CONVERGENCE PAR RESI_REFE'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'FETI')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... METHODE FETI'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'LIAISON_UNILATER')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... LIAISON UNILATERALE'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'FORCE_SUIVEUSE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... FORCE SUIVEUSE'
          NBFONC = NBFONC + 1
        ENDIF 
        IF (ISFONC(FONACT,'MACR_ELEM_STAT')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... MACRO-ELEMENTS STATIQUES'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'REAROT')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... POUTRES EN GRANDES'//
     &                  'ROTATIONS'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'SENSIBILITE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CALCUL AVEC SENSIBILITE'
          NBFONC = NBFONC + 1
        ENDIF
        IF (ISFONC(FONACT,'CRIT_FLAMB')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CALCUL CRITERE FLAMBEMENT'
          NBFONC = NBFONC + 1
        ENDIF     
        IF (ISFONC(FONACT,'MODE_VIBR')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CALCUL MODES VIBRATOIRES'
          NBFONC = NBFONC + 1
        ENDIF 
        IF (NBFONC.EQ.0) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... <AUCUNE>'
        ENDIF          
      ENDIF     
C      
C --- FONCTIONNALITES INCOMPATIBLES
C
      CALL EXFONC(FONACT,PARMET,SOLVEU,DEFICO,SDDYNA)
C
      CALL JEDEMA()
      END
