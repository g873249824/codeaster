      SUBROUTINE NMRESO(PILOTE, NBDONN, CODONN, CNDONN, NBPILO,
     &                  COPILO, CNPILO, CNCINE, SOLVEU, MATRIX,
     &                  DEPDEL, DINST , DEPOLD, MODELE, MATE  ,
     &                  COMPOR, VALMOI, DDEPLA, ETA   , LICCVG)

C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 19/09/2001   AUTEUR PBBHHPB P.BADEL 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
C RESPONSABLE ADBHHVV V.CANO

      IMPLICIT NONE
      INTEGER       NBDONN, NBPILO, LICCVG
      REAL*8        CODONN(*), COPILO(*), ETA, DINST
      CHARACTER*14  PILOTE
      CHARACTER*19  MATRIX(2),SOLVEU, CNDONN(*), CNPILO(*)
      CHARACTER*24  CNCINE, DEPDEL, DDEPLA
      CHARACTER*24  DEPOLD, MODELE, MATE, COMPOR, VALMOI

C ----------------------------------------------------------------------
C     METHODE DE NEWTON : RESOLUTION AVEC PILOTAGE  K.DU = F0 + ETA F1
C              PILOTAGE :  'DDL_IMPO', 'LONG_ARC', 'CRITERE'
C ----------------------------------------------------------------------
C
C       IN PILOTE : SD PILOTAGE
C       IN NBDONN : NOMBRE DE SECONDS MEMBRES DONNES
C       IN CODONN : COEFFICIENTS A AFFECTER AUX SECONDS MEMBRES DONNES
C       IN CNDONN : CHAMPS NODAUX DES SECONDS MEMBRES DONNES
C       IN NBPILO : NOMBRE DE SECONDS MEMBRES PILOTES
C       IN COPILO : COEFFICIENTS A AFFECTER AUX SECONDS MEMBRES PILOTES
C       IN CNPILO : CHAMPS NODAUX DES SECONDS MEMBRES PILOTES
C       IN CNCINE : CHAM_NO DE CHARGE CINEMATIQUE
C       IN SOLVEU : SOLVEUR
C       IN MATRIX : MATRICE FACTORISEE (1=MATASS, 2=MAPREC)
C       IN MAPREC : MATRICE DE PRECONDITIONNEMENT
C       IN DEPDEL : INCREMENT DE DEPLACEMENT
C       IN DINST  : INCREMENT DE TEMPS
C       IN DEPOLD : INCREMENT DE DEPLACEMENT PAS PRECEDENT ('LONG_ARC')
C       IN MODELE : MODELE       ('CRITERE')
C       IN MATE   : MATERIAU     ('CRITERE')
C       IN COMPOR : COMPORTEMENT ('CRITERE')
C       IN VALMOI : ETAT EN T-   ('CRITERE')
C IN/JXOUT DDEPLA : CORRECTION DE DEPLACEMENT
C      OUT ETA    : ETA_PILOTAGE
C      OUT LICCVG : CODE DE CONVERGENCE POUR LE PILOTAGE
C                     - 1 : BORNE ATTEINTE -> FIN DU CALCUL
C                       0 : RAS
C                       1 : PILOTAGE NON CONVERGE
C
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ---------------------------
C
      CHARACTER*32       JEXNUM , JEXNOM , JEXATR
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C ---------- FIN  DECLARATIONS  NORMALISEES  JEVEUX -------------------

      LOGICAL      EXPILO, BORMIN, BORMAX
      INTEGER      JPLTK, JPLIR, JGC0, JGC1, IBID, IER
      INTEGER      IRET, NEQ, N, JSCD0, JSCD1, JDONN, JPILO
      INTEGER      JDEPDE, JLINE, JDEP0, JDEP1, JDDEPL, JDUREF, JCOEF
      REAL*8       DTAU, ETAMAX, ETAMIN, DU, RN, RD, R0, R1, R2
      REAL*8       R8DOT, R8VIDE
      CHARACTER*8  K8BID
      CHARACTER*24 TYPILO
      CHARACTER*19 CRGC, CNDEP0, CNDEP1, CNSCD0, CNSCD1, CNGC0,CNGC1
      CHARACTER*19 NUMEQU


      DATA CNGC0 , CNGC1   /'&&NMRESO.GC0 ', '&&NMRESO.GC1 '/
      DATA CRGC            /'&&RESGRA_GCPC'/
C ----------------------------------------------------------------------


      CALL JEMARQ()

C    EXISTENCE DE PILOTAGE
      CALL JEEXIN(PILOTE // '.PLTK',IRET)
      EXPILO = IRET .NE. 0
      LICCVG = 0


C ======================================================================
C                    RESOLUTION DES SYSTEMES LINEAIRES
C ======================================================================


C -- CREATION DES SECONDS MEMBRES

C    SECOND MEMBRE DES CHARGEMENTS DONNES
      CNSCD0 = '&&CNPART.CHP1'
      CALL JELIRA(CNSCD0 // '.VALE','LONMAX',NEQ,K8BID)
      CALL JEVEUO(CNSCD0 // '.VALE','E',JSCD0)
      CALL R8INIR(NEQ,0.D0,ZR(JSCD0),1)
      DO 10 N = 1, NBDONN
        CALL JEVEUO(CNDONN(N) // '.VALE','L',JDONN)
        CALL R8AXPY(NEQ,CODONN(N),ZR(JDONN),1,ZR(JSCD0),1)
 10   CONTINUE

C    SECOND MEMBRE DES CHARGEMENTS PILOTES
      IF (EXPILO) THEN
        CNSCD1 = '&&CNPART.CHP2'
        CALL JEVEUO(CNSCD1 // '.VALE','E',JSCD1)
        CALL R8INIR(NEQ,0.D0,ZR(JSCD1),1)
        DO 20 N = 1, NBPILO
          CALL JEVEUO(CNPILO(N) // '.VALE','L',JPILO)
          CALL R8AXPY(NEQ,COPILO(N),ZR(JPILO),1,ZR(JSCD1),1)
 20     CONTINUE
      END IF


C -- INVERSION DES SYSTEMES LINEAIRES

      IF (.NOT. EXPILO) THEN

C      EN L'ABSENCE DE PILOTAGE
        CALL EXISD('CHAMP_GD',CNGC0,IRET)
        IF (IRET.EQ.0) CALL VTDEFS (CNGC0,CNSCD0,'V',' ')
        CALL RESOUD(MATRIX(1), MATRIX(2), CNSCD0, SOLVEU, CNCINE, 'V',
     &              CNGC0,CRGC)
        CALL COPISD('CHAMP_GD','V',CNGC0,DDEPLA)
        ETA = 0.D0

      ELSE

C      INVERSION DU 2ND MEMBRE DONNE -> CNDEP0 = A-1.CNSCD0
        CALL EXISD('CHAMP_GD',CNGC0,IRET)
        IF (IRET.EQ.0) CALL VTDEFS (CNGC0,CNSCD0,'V',' ')
        CALL RESOUD(MATRIX(1), MATRIX(2), CNSCD0, SOLVEU, CNCINE, 'V',
     &              CNGC0,CRGC)
        CALL COPISD('CHAMP_GD','V',CNGC0, PILOTE // '.PL0R')

C      INVERSION DU 2ND MEMBRE PILOTE -> CNDEP1 = A-1.CNSCD1
        CALL EXISD('CHAMP_GD',CNGC1,IRET)
        IF (IRET.EQ.0) CALL VTDEFS (CNGC1,CNSCD1,'V',' ')
        CALL RESOUD(MATRIX(1), MATRIX(2), CNSCD1, SOLVEU, CNCINE, 'V',
     &              CNGC1,CRGC)
        CALL COPISD('CHAMP_GD','V',CNGC1, PILOTE // '.PL1R')

C      CALCUL DE ETA_PILOTAGE
        CALL NMPILO(PILOTE, DINST , 1.D0  , DEPDEL, DEPOLD,
     &              MODELE, MATE  , COMPOR, VALMOI, 1     ,
     &              IBID  , DDEPLA, ETA   , LICCVG)

      END IF

      CALL JEDETR ( CRGC // '.CRTI' )
      CALL JEDETR ( CRGC // '.CRTR' )
      CALL JEDETR ( CRGC // '.CRDE' )

      CALL JEDEMA()
      END
