      SUBROUTINE DFLLTY(SDLIST,METLIS,DTMIN )
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 23/04/2013   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C
      IMPLICIT NONE
      INCLUDE 'jeveux.h'

      CHARACTER*8  SDLIST
      CHARACTER*16 METLIS
      REAL*8       DTMIN
C
C ----------------------------------------------------------------------
C
C OPERATEUR DEFI_LIST_INST
C
C LECTURE DU TYPE DE CONSTRUCTION DE LA LISTE D'INSTANTS
C
C MOT-CLEF DEFI_LIST
C
C ----------------------------------------------------------------------
C
C CONSTRUCTION DE SDLIST//'.LIST.INFOR'
C
C     ZR(JLINR-1 + 1)  <===> 'METHODE' = 1 SI 'MANUEL'
C                                      = 2 SI 'AUTO'
C     ZR(JLINR-1 + 2)  <===> 'PAS_MINI
C     ZR(JLINR-1 + 3)  <===> 'PAS_MAXI'
C     ZR(JLINR-1 + 4)  <===> 'NB_PAS_MAX'
C     ZR(JLINR-1 + 5)  <===> DTMIN
C     ZR(JLINR-1 + 6)  <===> DT ACTUEL (VOIR NMCRLI...)
C     ZR(JLINR-1 + 7)  <===> REDECOUPE SI DIVE_ERRE (POUR CRESOL)
C     ZR(JLINR-1 + 8)  <===> NBINST
C     ZR(JLINR-1 + 9)  <===> NECHEC
C     ZR(JLINR-1 + 10) <===> NADAPT
C
C IN  SDLIST : NOM DE LA SD RESULTAT
C OUT METLIS : NOM DE LA METHODE DE GESTION DE LA LISTE D'INSTANTS
C OUT DTMIN  : INTERVALLE DE TEMPS MINIMUM SUR LA LISTE
C
C ----------------------------------------------------------------------
C
      CHARACTER*16 MOTFAC
      CHARACTER*16 MODETP
      INTEGER      DFLLVD,LLINR
      CHARACTER*24 LISIFR
      INTEGER      JLINR
      CHARACTER*19 LISINS,TABLPC,LISRES
      INTEGER      NBINST,NADAPT
      INTEGER      JINST,JDITR,JLISRE
      INTEGER      N1,N2,NVAL,I,IRET,IBID,N3,J
      REAL*8       PASMIN,PASMAX,PAS0,R8B,DT
      INTEGER      NBPAMX,NBDEC
      INTEGER      IARG,NUMREP
      CHARACTER*8  RESU
      CHARACTER*2  TYPE
      LOGICAL      EXIST
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      MOTFAC = 'DEFI_LIST'
      METLIS = ' '
      DTMIN  = 0.D0
C
C --- TAILLE DES VECTEURS
C
      LLINR  = DFLLVD('LLINR')
C
C --- CONSTRUCTION DE LA SD
C
      LISIFR = SDLIST(1:8)//'.LIST.INFOR'
      CALL WKVECT(LISIFR,'G V R',LLINR ,JLINR )
C
C --- LECTURE METHODE
C
      CALL GETVTX(MOTFAC,'METHODE',1,IARG,1,METLIS,IBID)
C
C --- METHODE DE CONSTRUCTION DE LA LISTE D'INSTANT
C
      IF (METLIS.EQ.'MANUEL') THEN
        ZR(JLINR-1+1)= 1.D0
      ELSEIF (METLIS.EQ.'AUTO') THEN
        ZR(JLINR-1+1)= 2.D0
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- RECUPERATION DE LA LISTE D'INSTANTS FOURNIE
C
      CALL GETVID(MOTFAC,'LIST_INST',1,IARG,1,LISINS,N1)
      CALL GETVR8(MOTFAC,'VALE'     ,1,IARG,0,R8B   ,N2)
      CALL GETVID(MOTFAC,'RESULTAT' ,1,IARG,1,RESU  ,N3)

C     CAS OU ON A RENSEIGNE VALE : ON RECONSTRUIT UNE SD LISTE
      IF (N2.NE.0) THEN
        LISINS = '&&DFLLTY.LIST_INST'
        NVAL = -N2
        CALL WKVECT(LISINS//'.VALE','V V R',NVAL,JINST)
        CALL GETVR8(MOTFAC,'VALE',1,IARG,NVAL,ZR(JINST),N2)
      ENDIF

C     CAS OU ON A RENSEIGNE RESU : ON RECONSTRUIT UNE LISTE PLUS FINE
      IF (N3.NE.0) THEN
C
C       VERIF QUE LA COLONNE 'INST' EXISTE BIEN DANS LA TABLE
        CALL LTNOTB(RESU,'PARA_CALC',TABLPC)
        CALL TBEXIP(TABLPC,'INST',EXIST,TYPE)
        IF (.NOT.EXIST.OR.TYPE.NE.'R') THEN
          CALL U2MESK('F','DISCRETISATION_3',1,RESU)
        ENDIF

        CALL NMARNR(RESU,'PARA_CALC',NUMREP)

        IF (NUMREP.GT.1) THEN
          CALL U2MESK('F','DISCRETISATION_4',1,RESU)
        ENDIF

C       EXTRACTION DE LA COLONNE 'INST' DANS UN OBJET TEMPORAIRE
C       NVAL EST LE NOMBRE D'INSTANTS CALCULES DANS LA SD_RESULTAT
        LISRES = '&&DFLLTY.RESU_INST'
        CALL TBEXVE(TABLPC,'INST',LISRES,'V',NVAL,TYPE)
        CALL JEVEUO(LISRES,'L',JLISRE)

C       RECUPERATION DU NOMBRE DE DECOUPE
        CALL GETVIS(MOTFAC,'SUBD_PAS' ,1,IARG,1,NBDEC,IRET)
        CALL ASSERT(IRET.NE.0)
        CALL ASSERT(NBDEC.GT.0)

C       CREATION DE LA LISTE "NBDEC" FOIS PLUS FINE
        LISINS = '&&DFLLTY.LIST_INST'
        CALL WKVECT(LISINS//'.VALE','V V R',NBDEC*(NVAL-1)+1,JINST)
        DO 10 I=1,NVAL-1
          DO 11 J=1,NBDEC
            DT = ZR(JLISRE-1+I+1)-ZR(JLISRE-1+I)
            ZR(JINST-1+NBDEC*(I-1)+J) = ZR(JLISRE-1+I) + DT*(J-1)/NBDEC
 11       CONTINUE
 10     CONTINUE
        ZR(JINST-1+NBDEC*(NVAL-1)+1)=ZR(JLISRE-1+NVAL)
C
      ENDIF
C
C --- VERIFICATIONS LISTE D'INSTANTS (CROISSANCE, TAILLE, ETC.)
C
      CALL DFLLLI(LISINS,DTMIN ,NBINST)
C
C --- ACCES LISTE INSTANTS
C
      CALL JEVEUO(LISINS//'.VALE','L',JINST)
C
C --- CREATION LISTE D'INSTANTS DANS SDLIST
C
      CALL WKVECT(SDLIST//'.LIST.DITR','G V R',NBINST,JDITR)
      DO 20 I=1,NBINST
        ZR(JDITR-1+I) = ZR(JINST-1+I)
 20   CONTINUE
C
C --- INTERVALLE MINIMUM + NOMBRE INSTANTS STOCKES
C
      ZR(JLINR-1+5) = DTMIN
      ZR(JLINR-1+8) = NBINST
C
C --- A CAUSE D IMPLEX, ON VA RECUPERER DE SUITE LE MODE DE CALCUL
C --- DE T+
C
      IF (METLIS.EQ.'AUTO')THEN
        CALL GETFAC('ADAPTATION',NADAPT)
        CALL GETVTX('ADAPTATION','MODE_CALCUL_TPLUS',NADAPT,IARG,1,
     &              MODETP,IBID)
        IF (NADAPT.NE.1.AND.MODETP.EQ.'IMPLEX') THEN
          CALL U2MESS('F','DISCRETISATION_15')
        ENDIF
      ENDIF
C
C --- PARAMETRES DE LA METHODE AUTOMATIQUE
C
      IF (METLIS.EQ.'AUTO') THEN
C
        CALL GETVR8(MOTFAC,'PAS_MAXI' ,1,IARG,1,PASMAX,IRET)
        IF (IRET.EQ.0) PASMAX = ZR(JDITR-1+NBINST) - ZR(JDITR-1+1)
C
C ----- CAS D'IMPLEX
C
        IF (MODETP.EQ.'IMPLEX') THEN
          PAS0   = ZR(JINST+1)-ZR(JINST)
          PASMIN = PAS0/1000
          IF (IRET.EQ.0) PASMAX = PAS0*10
        ELSE
C         PASMIN = CELLE DE VAL_MIN DE PAS_MINI (DEFI_LIST_INST.CAPY)
          PASMIN = 1.D-12
          IF (IRET.EQ.0) PASMAX = ZR(JDITR-1+NBINST) - ZR(JDITR-1+1)
        ENDIF
C
        CALL GETVR8(MOTFAC,'PAS_MINI'    ,1,IARG,1,PASMIN,IRET)
        IF (PASMIN.GT.DTMIN) CALL U2MESS('F','DISCRETISATION_1')
C
        CALL GETVIS(MOTFAC,'NB_PAS_MAXI' ,1,IARG,1,NBPAMX,IRET)
C
        ZR(JLINR-1+2) = PASMIN
        ZR(JLINR-1+3) = PASMAX
        ZR(JLINR-1+4) = NBPAMX
      ENDIF
C
      CALL JEDEMA()
      END
