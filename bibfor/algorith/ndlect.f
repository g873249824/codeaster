      SUBROUTINE NDLECT(MODELE,MATE  ,CARELE,LISCHA,SDDYNA)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 15/04/2013   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_20
C
      IMPLICIT NONE
      INCLUDE 'jeveux.h'
      CHARACTER*19 SDDYNA
      CHARACTER*24 MODELE,MATE,CARELE
      CHARACTER*19 LISCHA
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (INITIALISATION)
C
C LECTURE DES OPERANDES DYNAMIQUES ET REMPLISSAGE DE SDDYNA
C
C ----------------------------------------------------------------------
C
C
C IN  MODELE : NOM DU MODELE
C IN  MATE   : NOM DU CHAM_MATER
C IN  CARELE : NOM DU CARA_ELEM
C IN  LISCHA : SD L_CHARGES
C IN  SDDYNA : SD DYNAMIQUE
C
C ----------------------------------------------------------------------
C
      REAL*8        UNDEMI,UN,QUATRE
      PARAMETER     (UNDEMI = 0.5D0,UN   = 1.D0)
      PARAMETER     (QUATRE = 4.D0 )
C
      INTEGER       NMODAM,NREAVI,NONDP
      INTEGER       NBMODS,NBMODA,NBMODP
      INTEGER       IRET,IBID
      INTEGER       N1,N2,NBMG,NRV
      INTEGER       NBEXCI,NBGENE
      CHARACTER*24  TSCH ,PSCH ,LOSD ,NOSD ,TFOR
      INTEGER       JTSCH,JPSCH,JLOSD,JNOSD,JTFOR
      CHARACTER*24  TCHA ,NCHA ,VEOL ,VAOL
      INTEGER       JTCHA,JNCHA,JVEOL,JVAOL
      CHARACTER*24  VECENT,VECABS
      INTEGER       JVECEN,JVECAB
      CHARACTER*8   K8BID, LICMP(3),REP
      CHARACTER*8   REP1,REP2,REP3,REP4,RIGIAM
      CHARACTER*16  SCHEMA,KFORM,K16BID,NOMCMD
      CHARACTER*24  TEXTE
      CHARACTER*19  SDAMMO,STADYN
      CHARACTER*15  SDMUAP,SDPRMO,SDEXSO
      CHARACTER*24  CHONDP
      INTEGER       IFORM
      INTEGER       IFM,NIV
      REAL*8        ALPHA ,BETA  ,GAMMA ,THETA ,PHI, KAPPA
      REAL*8        RCMP(3),SHIMA,R8PREM
      COMPLEX*16    C16BID
      LOGICAL       NDYNLO,LMUAP,LAMMO,LSHIMA,LVISS,LAMRA
      LOGICAL       LAMOR,LKTAN,LONDE ,LIMPED,LDYNA,LEXPL
C
      CHARACTER*19  VEFSDO,VEFINT,VEDIDO,VESSTF
      CHARACTER*19  VEFEDO,VEONDP,VEDIDI,VELAPL
C
      CHARACTER*19  CNFEDO,CNFSDO,CNDIDI,CNFINT
      CHARACTER*19  CNDIDO,CNCINE
      CHARACTER*19  CNONDP,CNLAPL
      CHARACTER*19  CNSSTF
C
      CHARACTER*19  DEPENT,VITENT,ACCENT
      CHARACTER*19  DEPABS,VITABS,ACCABS
      INTEGER      IARG
C
      DATA CNFEDO,CNFSDO    /'&&NDLECT.CNFEDO','&&NDLECT.CNFSDO'/
      DATA CNDIDO,CNDIDI    /'&&NDLECT.CNDIDO','&&NDLECT.CNDIDI'/
      DATA CNFINT           /'&&NDLECT.CNFINT'/
      DATA CNONDP,CNLAPL    /'&&NDLECT.CNONDP','&&NDLECT.CNLAPL'/
      DATA CNCINE,CNSSTF    /'&&NDLECT.CNCINE','&&NDLECT.CNSSTF'/
C
      DATA VEFEDO,VEFSDO    /'&&NDLECT.VEFEDO','&&NDLECT.VEFSDO'/
      DATA VEDIDO,VEDIDI    /'&&NDLECT.VEDIDO','&&NDLECT.VEDIDI'/
      DATA VEFINT           /'&&NDLECT.VEFINT'/
      DATA VEONDP,VELAPL    /'&&NDLECT.VEONDP','&&NDLECT.VELAPL'/
      DATA VESSTF           /'&&NDLECT.VESSTF'/
C
      DATA DEPENT           /'&&NDLECT.DEPENT'/
      DATA VITENT           /'&&NDLECT.VITENT'/
      DATA ACCENT           /'&&NDLECT.ACCENT'/
C
      DATA DEPABS           /'&&NDLECT.DEPABS'/
      DATA VITABS           /'&&NDLECT.VITABS'/
      DATA ACCABS           /'&&NDLECT.ACCABS'/
C
      DATA STADYN           /'&&NDLECT.STADYN'/
      DATA SDPRMO           /'&&NDLECT.SDPRMO'/
      DATA SDMUAP           /'&&NDLECT.SDMUAP'/
      DATA SDAMMO           /'&&NDLECT.SDAMMO'/
      DATA SDEXSO           /'&&NDLECT.SDEXSO'/
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- OPERATEUR APPELANT (STATIQUE OU DYNAMIQUE)
C
      CALL GETRES(K8BID ,K16BID,NOMCMD)
C
C --- INITIALISATIONS
C
      BETA   = 0.D0
      GAMMA  = 0.D0
      PHI    = 0.D0
      THETA  = 0.D0
      KAPPA  = 0.D0
C
C --- LECTURE DONNEES DYNAMIQUE
C
      LDYNA   = NDYNLO(SDDYNA,'DYNAMIQUE')
      IF (LDYNA) THEN
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE> ... REMPLISSAGE SD DYNAMIQUE'
        ENDIF
      ELSE
        GOTO 999
      ENDIF
C
C --- ACCES AUX OBJETS DE LA SD SDDYNA
C
      TSCH   = SDDYNA(1:15)//'.TYPE_SCH'
      TFOR   = SDDYNA(1:15)//'.TYPE_FOR'
      PSCH   = SDDYNA(1:15)//'.PARA_SCH'
      LOSD   = SDDYNA(1:15)//'.INFO_SD'
      NOSD   = SDDYNA(1:15)//'.NOM_SD'
      TCHA   = SDDYNA(1:15)//'.TYPE_CHA'
      NCHA   = SDDYNA(1:15)//'.NBRE_CHA'
      VEOL   = SDDYNA(1:15)//'.VEEL_OLD'
      VAOL   = SDDYNA(1:15)//'.VEAS_OLD'
      VECENT = SDDYNA(1:15)//'.VECENT'
      VECABS = SDDYNA(1:15)//'.VECABS'
      CALL JEVEUO(TSCH  ,'E',JTSCH )
      CALL JEVEUO(TFOR  ,'E',JTFOR )
      CALL JEVEUO(PSCH  ,'E',JPSCH )
      CALL JEVEUO(LOSD  ,'E',JLOSD )
      CALL JEVEUO(NOSD  ,'E',JNOSD )
      CALL JEVEUO(TCHA  ,'E',JTCHA )
      CALL JEVEUO(NCHA  ,'E',JNCHA )
      CALL JEVEUO(VEOL  ,'E',JVEOL )
      CALL JEVEUO(VAOL  ,'E',JVAOL )
      CALL JEVEUO(VECENT,'E',JVECEN)
      CALL JEVEUO(VECABS,'E',JVECAB)
C
C --- EXISTENCE D'AMORTISSEMENT DE RAYLEIGH
C
      LAMOR  = .FALSE.
      LKTAN  = .FALSE.
      CALL DISMOI('F','EXI_AMOR_ALPHA',MATE,'CHAM_MATER',IBID,REP1,IBID)
      CALL DISMOI('F','EXI_AMOR_BETA' ,MATE,'CHAM_MATER',IBID,REP2,IBID)
      CALL DISMOI('F','EXI_AMOR_NOR'  ,MATE,'CHAM_MATER',IBID,REP3,IBID)
      CALL DISMOI('F','EXI_AMOR_TAN'  ,MATE,'CHAM_MATER',IBID,REP4,IBID)
      IF ((REP1(1:3).EQ.'OUI').OR.
     &    (REP2(1:3).EQ.'OUI').OR.
     &    (REP3(1:3).EQ.'OUI').OR.
     &    (REP4(1:3).EQ.'OUI')) THEN
        LAMOR = .TRUE.
        CALL GETVTX(' ','AMOR_RAYL_RIGI',1,IARG,1,RIGIAM,IRET)
        IF ( RIGIAM .EQ. 'TANGENTE') LKTAN = .TRUE.
      ENDIF
      LAMRA = LAMOR
C
      IF ((REP1(1:3).EQ.'OUI').OR.
     &    (REP2(1:3).EQ.'OUI')) THEN
        CALL U2MESS('I','MECANONLINE5_7')
      ENDIF
      IF (.NOT.LAMOR) CALL NMAMAB(MODELE,CARELE,LAMOR)
      ZL(JLOSD+1-1)  = LAMOR
      ZL(JLOSD+13-1) = LKTAN
      ZL(JLOSD+16-1) = LAMRA
C
C --- PARAMETRES DU SCHEMA TEMPS
C
      CALL GETVTX('SCHEMA_TEMPS','SCHEMA',1,IARG,1,SCHEMA,IRET)
C
      IF (SCHEMA(1:9).EQ.'DIFF_CENT')THEN
        BETA   = 0.D0
        GAMMA  = 0.5D0
        PHI    = 0.5D0
        ZK16(JTSCH+7-1) = 'DIFF_CENTREE'
      ELSEIF (SCHEMA(1:7).EQ.'TCHAMWA')THEN
        BETA   = 0.D0
        GAMMA  = 0.5D0
        CALL GETVR8('SCHEMA_TEMPS','PHI',1,IARG,1,PHI,N1)
        ZK16(JTSCH+8-1) = 'TCHAMWA'
      ELSEIF (SCHEMA(1:7).EQ.'NEWMARK')THEN
        CALL GETVR8('SCHEMA_TEMPS','BETA',1,IARG,1,BETA,N1)
        CALL GETVR8('SCHEMA_TEMPS','GAMMA',1,IARG,1,GAMMA,N1)
        PHI    = 0.5D0
        ZK16(JTSCH+2-1) = 'NEWMARK'
      ELSEIF (SCHEMA(1:13).EQ.'THETA_METHODE')THEN
        CALL GETVR8('SCHEMA_TEMPS','THETA',1,IARG,1,THETA,N2)
        ZK16(JTSCH+4-1) = 'THETA_METHODE'
        PHI    = 0.5D0
      ELSEIF (SCHEMA(1:3).EQ.'HHT')THEN
        CALL GETVR8('SCHEMA_TEMPS','ALPHA',1,IARG,1,ALPHA,N1)
        CALL GETVTX('SCHEMA_TEMPS','MODI_EQUI',1,IARG,1,REP,N1)
        IF ( REP(1:3) .EQ. 'NON' ) THEN
           ZK16(JTSCH+3-1) = 'HHT'
        ELSE
           ZK16(JTSCH+5-1) = 'HHT_COMPLET'
        ENDIF
        PHI   = UNDEMI
        BETA  = (UN-ALPHA)* (UN-ALPHA)/QUATRE
        GAMMA = UNDEMI - ALPHA
      ELSEIF (SCHEMA(1:5).EQ.'KRENK')THEN
        CALL GETVR8('SCHEMA_TEMPS','KAPPA',1,IARG,1,KAPPA,N2)
        ZK16(JTSCH+9-1) = 'KRENK'
        PHI = 0.5D0
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
      ZR(JPSCH+1-1) = BETA
      ZR(JPSCH+2-1) = GAMMA
      ZR(JPSCH+3-1) = PHI
      ZR(JPSCH+4-1) = THETA
      ZR(JPSCH+5-1) = KAPPA
      ZR(JPSCH+7-1) = ALPHA
C
C --- TYPE DE SCHEMA
C
      LEXPL =  NDYNLO(SDDYNA,'EXPLICITE')
C
C --- NOM DE QUELQUES SD
C
      ZK24(JNOSD+3-1) = SDPRMO
      ZK24(JNOSD+4-1) = STADYN
      ZK24(JNOSD+2-1) = SDAMMO
      ZK24(JNOSD+1-1) = SDMUAP
      ZK24(JNOSD+5-1) = SDEXSO
C
C --- DECALAGE MASSE
C
      CALL GETVR8('SCHEMA_TEMPS','COEF_MASS_SHIFT',1,IARG,1,
     &           SHIMA ,N1)
      IF (ABS(SHIMA).GT.R8PREM()) THEN
        LSHIMA = .TRUE.
      ELSE
        LSHIMA = .FALSE.
      ENDIF
      ZR(JPSCH+6-1)  = SHIMA
      ZL(JLOSD+14-1) = LSHIMA
C
C --- TYPE DE FORMULATION
C
      CALL GETVTX('SCHEMA_TEMPS','FORMULATION',1,IARG,1,KFORM,N1)
      IF (KFORM(1:11).EQ.'DEPLACEMENT')THEN
        IFORM  = 1
      ELSEIF (KFORM(1:7).EQ.'VITESSE')THEN
        IFORM  = 2
      ELSEIF (KFORM(1:12).EQ.'ACCELERATION')THEN
        IFORM  = 3
      ENDIF
      ZI(JTFOR+1-1) = IFORM
C
C --- INCOMPATIBILITES SCHEMA/FORMULATION/PARAMETRES
C
      IF ((NDYNLO(SDDYNA,'NEWMARK')).OR.
     &    (NDYNLO(SDDYNA,'HHT_COMPLET')).OR.
     &    (NDYNLO(SDDYNA,'HHT'))) THEN
        IF (BETA.EQ.0.D0) THEN
          CALL U2MESS('F','MECANONLINE5_9')
        ENDIF
        IF (IFORM.EQ.2) THEN
          CALL U2MESS('F','MECANONLINE5_11')
        ENDIF
      ENDIF
      IF (NDYNLO(SDDYNA,'THETA_METHODE')) THEN
        IF (IFORM.EQ.3) THEN
          CALL U2MESS('F','MECANONLINE5_12')
        ENDIF
      ENDIF
      IF (LEXPL) THEN
        IF (IFORM.NE.3) THEN
          CALL U2MESS('F','MECANONLINE5_10')
        ENDIF
      ENDIF
C
C --- VERIFICATION DE LA PRESENCE D'ELEMENTS AVEC 'IMPE_ABSO'
C
      CALL NMIMPE(MODELE,LIMPED)
      ZL(JLOSD+6-1)   = LIMPED
C
C --- NOMBRE DE CHARGEMENTS
C
      CALL GETFAC('EXCIT',NBEXCI)
      ZI(JNCHA+1-1)   = NBEXCI
      CALL GETFAC('EXCIT_GENE',NBGENE)
      ZI(JNCHA+3-1)   = NBGENE
C
C --- TEST DE LA PRESENCE DE CHARGES DE TYPE 'ONDE_PLANE'
C
      CALL NMONDP(LISCHA,LONDE,CHONDP,NONDP)
      ZL(JLOSD+7-1)   = LONDE
      ZI(JNCHA+2-1)   = NONDP
      ZK24(JTCHA+1-1) = CHONDP
C
C --- MULTI-APPUI - VECTEURS DE DEPL/VITE/ACCE D'ENTRAINEMENT
C
      ZK24(JVECEN+1-1) = DEPENT
      ZK24(JVECEN+2-1) = VITENT
      ZK24(JVECEN+3-1) = ACCENT
C
C --- MULTI-APPUI - VECTEURS DE DEPL/VITE/ACCE ABSOLUS
C
      ZK24(JVECAB+1-1) = DEPABS
      ZK24(JVECAB+2-1) = VITABS
      ZK24(JVECAB+3-1) = ACCABS
C
C --- MASSE DIAGONALE POUR SCHEMAS EXPLICITES
C
      ZL(JLOSD+4-1) = .FALSE.
      CALL GETVTX(' ','MASS_DIAG',1,IARG,1,TEXTE,N1)
      IF (N1.GT.0) THEN
        IF (TEXTE(1:3).EQ.'OUI') THEN
          IF (LEXPL) THEN
            ZL(JLOSD+4-1) = .TRUE.
          ELSE
            CALL U2MESS('F','MECANONLINE5_13')
          ENDIF
        ENDIF
      ENDIF
C
C --- PROJECTION MODALE POUR SCHEMAS EXPLICITES
C
      ZL(JLOSD+5-1) = .FALSE.
      ZL(JLOSD+9-1) = .FALSE.
      IF (LEXPL)THEN
        CALL GETFAC('PROJ_MODAL',IRET)
        IF (IRET.GT.0)THEN
          ZL(JLOSD+5-1)   = .TRUE.
          CALL MXMOAM(SDDYNA,NBMODP)
          CALL GETVID('PROJ_MODAL','MASS_GENE',1,IARG,1,K8BID,NBMG)
          ZL(JLOSD+9-1)   = NBMG.NE.0
          ZI(JNCHA+5-1)   = NBMODP
        ENDIF
      ENDIF
C
C --- SCHEMA MULTIPAS: VECT_* SAUVEGARDES PAS PRECEDENT
C
      IF ((ZK16(JTSCH+5-1)(1:11).EQ.'HHT_COMPLET').OR.
     &    (ZK16(JTSCH+4-1)(1:13).EQ.'THETA_METHODE').OR.
     &    (ZK16(JTSCH+9-1)(1:5).EQ.'KRENK')) THEN
        ZK24(JVEOL+1-1)  = VEFEDO
        ZK24(JVEOL+2-1)  = VEFSDO
        ZK24(JVEOL+3-1)  = VEDIDO
        ZK24(JVEOL+4-1)  = VEDIDI
        ZK24(JVEOL+5-1)  = VEFINT
        ZK24(JVEOL+6-1)  = VEONDP
        ZK24(JVEOL+7-1)  = VELAPL
        ZK24(JVEOL+8-1)  = VESSTF
        ZK24(JVAOL+1-1)  = CNFEDO
        ZK24(JVAOL+2-1)  = CNFSDO
        ZK24(JVAOL+3-1)  = CNDIDO
        ZK24(JVAOL+4-1)  = CNDIDI
        ZK24(JVAOL+5-1)  = CNFINT
        ZK24(JVAOL+6-1)  = CNONDP
        ZK24(JVAOL+7-1)  = CNLAPL
        ZK24(JVAOL+8-1)  = CNSSTF
        ZK24(JVAOL+9-1)  = CNCINE
      ENDIF
C
C --- CARTE STADYN POUR POUTRES
C
      LICMP(1) = 'STAOUDYN'
      LICMP(2) = 'ALFNMK'
      LICMP(3) = 'DELNMK'
      RCMP(1)  = UN
      RCMP(2)  = BETA
      RCMP(3)  = GAMMA
      CALL JEDETR(STADYN)
      CALL MECACT('V',STADYN,'MODELE',MODELE(1:8)//'.MODELE',
     &            'STAOUDYN',3,LICMP,IBID,RCMP,C16BID,K8BID)
C
C --- MODE MULTI-APPUI
C
      CALL GETVID(' ','MODE_STAT',1,IARG,1,K8BID,NBMODS)
      LMUAP = NBMODS.GT.0
      IF (LMUAP) THEN
        CALL NMMUAP(SDDYNA)
      END IF
      ZL(JLOSD+2-1)   = LMUAP
C
C --- AMORTISSEMENT MODAL
C
      CALL GETFAC('AMOR_MODAL',NMODAM)
      LAMMO = NMODAM.GT.0
      IF (LAMMO) THEN
        CALL NMMOAM(SDAMMO,NBMODA)
        NREAVI          = 0
C
C --- REACTUALISATION DE L'AMORT A CHAQUE ITERATION ?
C
        CALL GETVTX('AMOR_MODAL','REAC_VITE',1,IARG,1,K8BID,NRV)
        IF (K8BID.EQ.'OUI') NREAVI = 1
      ELSE
        NREAVI          = 0
        NBMODA          = 0
      END IF
      ZL(JLOSD+3-1)   = LAMMO
      ZL(JLOSD+12-1)  = NREAVI.GT.0
      ZI(JNCHA+4-1)   = NBMODA
C
C --- VECT ISS
C
      CALL NMCSOL(LISCHA,SDDYNA,LVISS )
      ZL(JLOSD+15-1)  = LVISS
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... '//
     &                'FONCTIONNALITES ACTIVEES EN DYNAMIQUE '

        IF (NDYNLO(SDDYNA,'IMPLICITE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... SCHEMA IMPLICITE'
        ENDIF
        IF (NDYNLO(SDDYNA,'EXPLICITE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... SCHEMA EXPLICITE'
        ENDIF

        IF (NDYNLO(SDDYNA,'MAT_AMORT')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... MATRICE AMORTISSEMENT'
        ENDIF
        IF (NDYNLO(SDDYNA,'MULTI_APPUI')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... MULTI APPUI'
        ENDIF
        IF (NDYNLO(SDDYNA,'AMOR_MODAL')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... AMORTISSEMENT MODAL'
        ENDIF
        IF (NDYNLO(SDDYNA,'MASS_DIAG')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... MATRICE MASSE DIAGONALE'
        ENDIF
        IF (NDYNLO(SDDYNA,'PROJ_MODAL')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... PROJECTION MODALE'
        ENDIF
        IF (NDYNLO(SDDYNA,'IMPE_ABSO')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... ELEMENTS D''IMPEDANCE'
        ENDIF
        IF (NDYNLO(SDDYNA,'ONDE_PLANE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CHARGEMENT ONDES PLANES'
        ENDIF
        IF (NDYNLO(SDDYNA,'EXPL_GENE')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... CALCUL EXPLICITE EN MODAL'
        ENDIF
        IF (NDYNLO(SDDYNA,'NREAVI')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... REAC. VITE'
        ENDIF
        IF (NDYNLO(SDDYNA,'COEF_MASS_SHIFT')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... COEF. MASS. SHIFT'
        ENDIF
        IF (NDYNLO(SDDYNA,'VECT_ISS')) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... FORCE SOL'
        ENDIF
      ENDIF
C
  999 CONTINUE
C
      CALL JEDEMA()

      END
