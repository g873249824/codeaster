      SUBROUTINE NMCHOI(PHASE ,PARMET,METHOD,SDDISC,METCOR,
     &                  METPRE,NUMINS,PREMIE,ITERAT,DEFICO,
     &                  SDDYNA,OPTION,REASMA,LRIGI ,LFINT ,
     &                  LDIRI )
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 19/12/2007   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      REAL*8       PARMET(*)
      CHARACTER*16 METHOD(*)
      CHARACTER*16 METCOR,METPRE,OPTION
      CHARACTER*19 SDDISC,SDDYNA
      INTEGER      NUMINS,ITERAT
      LOGICAL      PREMIE,REASMA
      LOGICAL      LRIGI,LDIRI,LFINT
      CHARACTER*10 PHASE
      CHARACTER*24 DEFICO
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (CALCUL)
C
C CHOIX DES CALCULS
C   - CALCUL DES MATR_ELEM DE RIGIDITE ? OPTION DE CALCUL ?
C   - CALCUL DES VECT_ELEM DES REACTIONS D'APPUI ?
C   - CALCUL DES VECT_ELEM DES FORCES INTERIEURES ?
C   - ASSEMBLAGE FINALE DE LA MTRICE DE RESOLUTION GLOBALE ?
C      
C ----------------------------------------------------------------------
C
C
C IN  PHASE  : PHASE DE CALCUL
C                'PREDICTION'
C                'CORRECTION' 
C                'FORCES_INT' 
C                'FLAMBEMENT' 
C IN  METHOD : INFORMATIONS SUR LES METHODES DE RESOLUTION
C                 VOIR DETAIL DES COMPOSANTES DANS NMLECT
C IN  PARMET : PARAMETRES DES METHODES DE RESOLUTION
C                 VOIR DETAIL DES COMPOSANTES DANS NMLECT
C IN  SDDISC : SD DISC_INST
C IN  PREMIE : SI PREMIER INSTANT DE CALCUL
C IN  NUMINS : NUMERO D'INSTANT
C IN  ITERAT : NUMERO D'ITERATION
C IN  DEFICO : SD DEF. CONTACT
C IN  SDDYNA : SD POUR LA DYNAMIQUE
C OUT METCOR : TYPE DE MATRICE DE CORRECTION
C OUT METPRE : TYPE DE MATRICE DE PREDICTION
C OUT REASMA : REASSEMBLAGE MATRICE GLOBALE
C OUT LRIGI  : .TRUE. SI CALCUL DES MATR_ELEM DE RIGIDITE A FAIRE
C OUT LDIRI  : .TRUE. SI CALCUL DES VECT_ELEM DE LAGRANGE
C OUT LFINT  : .TRUE. SI CALCUL DES VECT_ELEM DES FORCES INTERIEURS
C OUT OPTION : NOM D'OPTION PASSE A MERIMO ('CORRECTION')
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      REAL*8       INSTAM,INSTAP,DIINST,PASMIN 
      INTEGER      REINCR,REITER
      INTEGER      IBID,MATTAN
      LOGICAL      MATFRO,NDYNLO
      INTEGER      IFM,NIV
C      
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><CALC> CHOIX D''ASSEMBLAGE DES '//
     &                'MATRICES' 
        WRITE (IFM,*) '<MECANONLINE><CALC> PHASE: ',PHASE
      ENDIF          
C
C --- PARAMETRES
C
      REINCR = NINT(PARMET(1))
      REITER = NINT(PARMET(2))
      METCOR = METHOD(2)
      METPRE = METHOD(5)
      INSTAM = DIINST(SDDISC, NUMINS-1)
      INSTAP = DIINST(SDDISC, NUMINS  )
      PASMIN = PARMET(3)
      LRIGI  = .FALSE.
C
C --- MATRICE DE FROTTEMENT ?
C
      CALL CFDISC(DEFICO,' ',IBID,IBID,IBID,MATTAN)
      MATFRO = MATTAN.EQ.1            
C      
C --- PASSAGE A LA MATRICE ELASTIQUE EN-DESSOUS DE PAS_MINI_ELAS   
C   
      IF (ABS(INSTAP-INSTAM) .LT. PASMIN) THEN
        REINCR = 1
        REITER = NINT(PARMET(4))
        METPRE = 'SECANTE'
        METCOR = 'SECANTE'
      END IF
C
C --- REASSEMBLAGE DE LA MATRICE GLOBALE      
C
      IF (PHASE.EQ.'CORRECTION' .OR. PHASE.EQ.'FORCES_INT') THEN
        IF ((METCOR.EQ.'TANGENTE').OR.(METCOR.EQ.'SECANTE')) THEN
          REASMA = .FALSE.
          IF (REITER.NE.0) THEN
            REASMA = MOD(ITERAT+1,REITER) .EQ. 0
          ENDIF  
          IF (MATFRO) THEN
            REASMA = .TRUE.
          ENDIF
        ELSE
          REASMA = .FALSE.
        END IF
      ELSE IF ((PHASE.EQ.'PREDICTION').OR.(PHASE.EQ.'FLAMBEMENT')) THEN
        IF ((REINCR.EQ.0) .AND. (NUMINS.NE.1)) THEN
          REASMA = .FALSE.
        ENDIF  
        IF (NUMINS.EQ.1) THEN
          REASMA = .TRUE.
        ENDIF  
        IF ((REINCR.NE.0) .AND. (NUMINS.NE.1)) THEN
          REASMA = MOD(NUMINS-1,REINCR) .EQ. 0
        END IF
      ELSE IF (PHASE.EQ.'EXPLICITE') THEN
        REASMA = PREMIE 
      ELSE
        CALL ASSERT(.FALSE.)
      END IF
C
C --- OPTION DE CALCUL DE MERIMO
C
      IF (PHASE.EQ.'CORRECTION' .OR. PHASE.EQ.'FORCES_INT') THEN
        IF (REASMA) THEN
          IF (METCOR.EQ.'TANGENTE') THEN
            OPTION = 'FULL_MECA'
          ELSE
            OPTION = 'FULL_MECA_ELAS'
          ENDIF
        ELSE
          OPTION = 'RAPH_MECA'
        END IF
      ELSE IF ((PHASE.EQ.'PREDICTION').OR.(PHASE.EQ.'FLAMBEMENT')) THEN
        IF (METPRE.EQ.'TANGENTE') THEN
          OPTION = 'RIGI_MECA_TANG'
        ELSE IF (METPRE.EQ.'SECANTE') THEN
          OPTION = 'RIGI_MECA_ELAS'
        ELSE
          OPTION = 'RIGI_MECA'
        END IF
      ELSE IF (PHASE.EQ.'EXPLICITE') THEN
        OPTION = 'RIGI_MECA_TANG'  
      ELSE
        CALL ASSERT(.FALSE.)
      END IF
C
C --- MATRICE DE RIGIDITE A RECALCULER
C
      IF ((PHASE.EQ.'PREDICTION').OR.(PHASE.EQ.'FLAMBEMENT')) THEN
        LRIGI  = REASMA
      END IF  
      IF (PHASE.EQ.'EXPLICITE') THEN
        IF (NDYNLO(SDDYNA,'MAT_AMORT')) THEN
          IF (PREMIE.OR.METPRE.EQ.'TANGENTE') THEN
            LRIGI  = .TRUE.
          ENDIF
        ENDIF  
      ENDIF
C
C --- VECT_ELEM DE LAGRANGE A RECALCULER
C
      IF (REASMA) THEN
        IF (OPTION(1:9).EQ.'FULL_MECA') THEN
          LDIRI  = .TRUE.    
        ELSE IF (OPTION(1:10).EQ.'RIGI_MECA ') THEN
          LDIRI  = .FALSE.                  
        ELSE IF (OPTION(1:10).EQ.'RIGI_MECA_') THEN
          LDIRI  = .FALSE.                  
        ELSE IF (OPTION(1:9).EQ.'RAPH_MECA') THEN
          LDIRI  = .TRUE.                  
        ELSE
          CALL ASSERT(.FALSE.)
        END IF          
      ENDIF  
C
C --- VECT_ELEM DES FORCES INTERNES A RECALCULER
C --- FAIT POUR L'INSTANT DANS MERIMO EN MEME TEMPS QUE LA MATRICE
C
      LFINT  = LRIGI       
C
C --- AFFICHAGE
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE><CALC> OPTION: ',OPTION
        IF (REASMA) THEN
          WRITE (IFM,*) '<MECANONLINE><CALC> ON ASSEMBLE LA MATRICE'
        ELSE
          WRITE (IFM,*) '<MECANONLINE><CALC> ON N''ASSEMBLE PAS '//
     &                'LA MATRICE'        
        ENDIF  
        IF (LRIGI) THEN
          WRITE (IFM,*) '<MECANONLINE><CALC> CALCUL DES MATR_ELEM '//
     &                  ' DE RIGIDITE'
        ELSE
          WRITE (IFM,*) '<MECANONLINE><CALC> PAS DE CALCUL DES '//
     &                  ' MATR_ELEM DE RIGIDITE'
        ENDIF  
        IF (LDIRI) THEN
          WRITE (IFM,*) '<MECANONLINE><CALC> CALCUL DES VECT_ELEM '//
     &                  ' DE LAGRANGE'
        ELSE
          WRITE (IFM,*) '<MECANONLINE><CALC> PAS DE CALCUL DES '//
     &                  ' VECT_ELEM DE LAGRANGE'
        ENDIF
        IF (LFINT) THEN
          WRITE (IFM,*) '<MECANONLINE><CALC> CALCUL DES VECT_ELEM '//
     &                  ' DES FORCES INTERIEURES'
        ELSE
          WRITE (IFM,*) '<MECANONLINE><CALC> PAS DE CALCUL DES '//
     &                  ' VECT_ELEM DES FORCES INTERIEURES'
        ENDIF        
      ENDIF             
C
      CALL JEDEMA()      
C
      END
