      SUBROUTINE NMMEAR(SOLALG,MODELZ,DEFICO,FONACT)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 27/06/2011   AUTEUR MASSIN P.MASSIN 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
      IMPLICIT NONE
      CHARACTER*8   MODELE
      CHARACTER*24  DEFICO,MODELZ
      CHARACTER*19  SOLALG(*)
      INTEGER       FONACT(*)
C  --------------------------------------------------------------------
C CONTACT XFEM : MISE A ECHELLE INCREMENT LAGRANGIENS DE CONTACT
C IN/OUT SOLALG : VARIABLE CHAPEAU INCREMENTS
C IN MODELZ : MODELE
C IN DEFICO : SD DEFINITION DU CONTACT
C IN FONACT : FONCTIONNALITES ACTIVES
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
      CHARACTER*32 JEXNUM
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
      CHARACTER*8  NOMFIS,KBID,MA,NOMGD
      CHARACTER*19 STNO,NOMCMP,CORR1,CORR2
      CHARACTER*19 OKNOE,STNOS,DEPSO1,PRNO
      INTEGER      IZONE,IBID,I,JOKNOE
      INTEGER      NNO2,IADG,ICO,IEQ,INO,IVAL,ICMP
      INTEGER      IFISS,JMOFIS,JCORR1,JCORR2,JDESC
      INTEGER      JNOCMP,JNUEQ,JPRNO,JREFE,JVALE
      INTEGER      JLAGD2,JLAGL2,JLAGV2,IB,KCMP
      INTEGER      NCMP,NCMP1,NCMPMX,NEC
      INTEGER      JNFIS,NFISS,NNO,XXCONI
      REAL*8       COECHE,MMINFR
      REAL*8       COEFEC,COEFEF,COPENC,COPENF
      LOGICAL      CFDISL,LEXIP,EXISDG
C ----------------------------------------------------------------------
      CALL JEMARQ()
C
C INITIALISATION OBJET DE TRAVAIL
C
      MODELE= MODELZ(1:8)
      OKNOE = '&&NMEAR.OKNOE'
      STNOS = '&&NMEAR.STNOS'
      NOMCMP = '&&NMMEAR.NOM_CMP'
      CORR1 = '&&NMMEAR.CORR1'
      CORR2 = '&&NMMEAR.CORR2'
C
C RECUPERATION INFOS MODELE
C
      CALL JEVEUO(MODELE//'.NFIS','L',JNFIS)
      NFISS  = ZI(JNFIS)
      CALL JEVEUO(MODELE//'.FISS','L',JMOFIS)
      LEXIP = CFDISL(DEFICO,'EXIS_PENA')
C
C DECOMPACTION VARIABLES CHAPEAU
C
      CALL NMCHEX(SOLALG,'SOLALG','DEPSO1',DEPSO1)
C
C RECUPERATION DU PROF_CHNO
C
      CALL DISMOI('F','PROF_CHNO',DEPSO1,'CHAM_NO',IB,PRNO,IB)
      CALL JEVEUO(JEXNUM(PRNO//'.PRNO',1),'L',JPRNO)
      CALL JEVEUO(PRNO//'.NUEQ','L',JNUEQ)
C
C RECUP INFOS SUR LE CHAM_NO
C
      CALL DISMOI('F','NOM_MAILLA',DEPSO1,'CHAM_NO',IBID,MA,IBID)
      CALL DISMOI('F','NB_NO_MAILLA',MA,'MAILLAGE',NNO,KBID,IBID)
      CALL DISMOI('F','NOM_GD',DEPSO1,'CHAM_NO',IBID,NOMGD,IBID)
      CALL DISMOI('F','NB_EC',NOMGD,'GRANDEUR',NEC,KBID,IBID)
      CALL JEVEUO(DEPSO1//'.REFE','L',JREFE)
      CALL JEVEUO(DEPSO1//'.DESC','L',JDESC)
      CALL JEVEUO(DEPSO1//'.VALE','E',JVALE)
C
      CALL CMPCHA(DEPSO1,NOMCMP,CORR1,
     &            CORR2,NCMP1,NCMPMX)
      CALL JEVEUO(NOMCMP,'L',JNOCMP)
      CALL JEVEUO(CORR1,'L',JCORR1)
      CALL JEVEUO(CORR2,'L',JCORR2)
C
      CALL WKVECT(OKNOE,'V V L',NNO,JOKNOE)
      DO 100 I=1,NNO
         ZL(JOKNOE) = .FALSE.
100   CONTINUE
C
C BOUCLE DE MISE A ECHELLE
C
      DO 10 IFISS=1,NFISS
C
C RECUP NOM FISSURE ET STATUT DU NOEUD
C
         NOMFIS = ZK8(JMOFIS-1 + IFISS)
         STNO = NOMFIS//'.STNO'
         CALL CNOCNS(STNO,'V',STNOS)
         CALL JEVEUO(STNOS//'.CNSD','L',JLAGD2)
         CALL JEVEUO(STNOS//'.CNSL','L',JLAGL2)
         CALL JEVEUO(STNOS//'.CNSV','L',JLAGV2)
         NNO2=ZI(JLAGD2)
         CALL ASSERT(ZI(JLAGD2+1).EQ.1)
         CALL ASSERT(NNO2.EQ.NNO)                 
C
C COEFFS DE MISE A ECHELLE
C                  
         IZONE  = XXCONI(DEFICO,NOMFIS,'MAIT')
         COECHE = MMINFR(DEFICO,'COEF_ECHELLE',IZONE)
         COPENC = MMINFR(DEFICO,'COEF_PENA_CONT',IZONE)
         COPENF = MMINFR(DEFICO,'COEF_PENA_FROT',IZONE)

         IF(.NOT.LEXIP) THEN
           COEFEC = COECHE
         ELSE
           COEFEC = COPENC
         ENDIF
         IF(.NOT.LEXIP) THEN
           COEFEF = 1.D0
         ELSE
           COEFEF = COPENF
         ENDIF
         DO 1 INO=1,NNO
C
C SI NOEUD DEJA TRAITE OU NON APPARTENANT A LA FISSURE ON SORT
C
          IF(ZL(JOKNOE-1+INO).OR.(ZI(JLAGV2-1+INO).EQ.0)) GOTO 1
C         NCMP : NOMBRE DE CMPS SUR LE NOEUD INO
C         IVAL : ADRESSE DU DEBUT DU NOEUD INO DANS .NUEQ
C         IADG : DEBUT DU DESCRIPTEUR GRANDEUR DU NOEUD INO
          NCMP = ZI(JPRNO-1+ (INO-1)* (NEC+2)+2)
          IF (NCMP.EQ.0) GO TO 1
          IVAL = ZI(JPRNO-1+ (INO-1)* (NEC+2)+1)
          IADG = JPRNO - 1 + (INO-1)* (NEC+2) + 3
          ICO = 0
          DO 70,KCMP = 1,NCMP1
            ICMP=ZI(JCORR2-1+KCMP)
            IF (EXISDG(ZI(IADG),ICMP)) THEN
              ICO = ICO + 1
              IF(ZK8(JNOCMP-1+KCMP).EQ.'LAGS_C') THEN
                IEQ = ZI(JNUEQ-1+IVAL-1+ICO)
                ZR(JVALE-1+IEQ) = ZR(JVALE-1+IEQ)*COEFEC
              ELSE IF(ZK8(JNOCMP-1+KCMP).EQ.'LAGS_F1'.OR.
     &                ZK8(JNOCMP-1+KCMP).EQ.'LAGS_F2') THEN
                IEQ = ZI(JNUEQ-1+IVAL-1+ICO)
                ZR(JVALE-1+IEQ) = ZR(JVALE-1+IEQ)*COEFEF                
              ENDIF
            END IF
70        CONTINUE

            ZL(JOKNOE-1+I)=.TRUE.
1        CONTINUE
10    CONTINUE
C
C MENAGE
C
      CALL DETRSD('CHAM_NO_S',STNOS)
      CALL JEDETR(OKNOE)
      CALL JEDETR(NOMCMP)
      CALL JEDETR(CORR1)
      CALL JEDETR(CORR2) 
C
      CALL JEDEMA()
C
      END
