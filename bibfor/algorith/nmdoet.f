      SUBROUTINE NMDOET(MODELE,COMPOR,FONACT,NUMEDD,SDSENS,
     &                  SDPILO,SDDYNA,SDERRO,DEFICO,RESOCO,
     &                  SOLALG,LACC0 ,INSTIN)
C
C MODIF ALGORITH  DATE 21/02/2011   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C TOLE CRP_20
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT     NONE
      REAL*8       INSTIN
      CHARACTER*24 MODELE,COMPOR,SDSENS,DEFICO,RESOCO,SDERRO
      CHARACTER*24 NUMEDD
      CHARACTER*19 SDDYNA,SDPILO
      CHARACTER*19 SOLALG(*)
      INTEGER      FONACT(*)
      LOGICAL      LACC0
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (INITIALISATION)
C
C SAISIE DES CHAMPS A L'ETAT INITIAL
C
C ----------------------------------------------------------------------
C
C
C IN  MODELE : NOM DU MODELE
C IN  COMPOR : CARTE COMPORTEMENT
C IN  FONACT : FONCTIONNALITES ACTIVEES
C IN  NUMEDD : NUME_DDL
C IN  SOLALG : VARIABLE CHAPEAU POUR INCREMENTS SOLUTIONS
C IN  SDSENS : SD SENSIBILITE
C IN  SDPILO : SD DE PILOTAGE
C IN  SDDYNA : SD DYNAMIQUE
C IN  SDERRO : SD ERREUR
C OUT LACC0  : .TRUE. SI ACCEL. INITIALE A CALCULER
C OUT INSTIN : INSTANT INITIAL
C                R8VIDE SI NON DEFINI
C
C --- DEBUT DECLARATIONS NORMALISEES JEVEUX ---------------------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C --- FIN DECLARATIONS NORMALISEES JEVEUX -----------------------------
C
      LOGICAL      LBID,EVONOL,LNOCC,LEINIT
      INTEGER      NEQ,NOCC,NUMEIN,NCHOUT,IRET,IBID,I
      INTEGER      NRPASE,IER,JPLTK,IRETVI,IERR,IRETAC
      CHARACTER*8  LPAIN(1),LPAOUT(2),K8BID
      CHARACTER*8  NOPASE,CALCRI
      CHARACTER*8  RESULT,RESULS
      CHARACTER*16 OPT,MOTFAC
      CHARACTER*24 LIGRMO,EVOL,LCHIN(1),LCHOUT(2)
      CHARACTER*24 K24BID,TYPECH
      CHARACTER*24 TYPPIL,TYPSEL,COMPOM
      CHARACTER*24 VALK(2)
      CHARACTER*19 DEPOLD,XINDC0,XSEUC0,XCOHE0,XINDCO,XCOHES,XSEUCO
      CHARACTER*19 DEPMOI,SIGMOI,VARMOI,VITMOI,ACCMOI
      CHARACTER*24 CHAMP,CHAMP2,CHGEOM,DEP2,DEP1,ERRTPS
      INTEGER      JDEP1,JDEP2,JDEPOL,JPLIR,JINST,JERRT
      INTEGER      NBPASE
      CHARACTER*24 SENSNB
      INTEGER      JSENSN
      LOGICAL      ISFONC,LPILO,LPIARC,LCTCC,LXFCM
      LOGICAL      NDYNLO,LDYNA,LEXGE,LREUSE,LERRT
      LOGICAL      CFDISL,LXFFM,LXCZM
      REAL*8       R8VIDE,COEFAV
      INTEGER      IFM,NIV
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- INITIALISATIONS
C
      DEP1   = '&&CNPART.CHP1'
      DEP2   = '&&CNPART.CHP2'
      COMPOM = ' '
      LACC0  = .FALSE.
      LPIARC = .FALSE.
      LNOCC  = .FALSE.
      MOTFAC = 'ETAT_INIT'
C      
      CALL DISMOI('F','NOM_LIGREL',MODELE,'MODELE',IBID  ,LIGRMO,IRET)
      CALL DISMOI('F','NB_EQUA',NUMEDD,'NUME_DDL',NEQ,K8BID,IRET)
C
C --- ON VERIFIE QUE LE MODELE SAIT CALCULER UNE RIGIDITE
C
      CALL DISMOI('F','CALC_RIGI',MODELE,'MODELE',IBID,CALCRI,IRET)
      IF (CALCRI.NE.'OUI') CALL U2MESK('F','CALCULEL2_65',1,MODELE)
C
C --- ACCES SD SENSIBILITE
C
      SENSNB = SDSENS(1:16)//'.NBPASE '
      CALL JEVEUO(SENSNB,'L',JSENSN)
      NBPASE = ZI(JSENSN+1-1)
C
C --- FONCTIONNALITES ACTIVEES
C
      LPILO  = ISFONC(FONACT,'PILOTAGE')
      LDYNA  = NDYNLO(SDDYNA,'DYNAMIQUE')
      LCTCC  = ISFONC(FONACT,'CONT_CONTINU')
      LEXGE  = NDYNLO(SDDYNA,'EXPL_GENE')
      LXFCM  = ISFONC(FONACT,'CONT_XFEM')
      LREUSE = ISFONC(FONACT,'REUSE')
      LERRT  = ISFONC(FONACT,'ERRE_TEMPS')
      IF (LXFCM) THEN
        LXFFM  = ISFONC(FONACT,'FROT_XFEM')
        LXCZM  = CFDISL(DEFICO,'EXIS_XFEM_CZM')
      ENDIF 
C
C --- EXTRACTION VARIABLES CHAPEAUX
C
      CALL NMCHEX(SOLALG,'SOLALG','DEPOLD',DEPOLD)
C
C --- PILOTAGE LONGUEUR D'ARC AVEC ANGL_INCR_DEPL: IL FAUT LES DEUX
C --- DERNIERS DEPLACEMENTS POUR QUE CA MARCHE (CHAMP DEPOLD)
C
      IF (LPILO) THEN
        CALL JEVEUO(SDPILO(1:19)//'.PLTK','L',JPLTK)
        TYPPIL = ZK24(JPLTK)
        TYPSEL = ZK24(JPLTK+5)
        LPIARC = .FALSE.
        IF (TYPPIL.EQ.'LONG_ARC'.OR.TYPPIL.EQ.'SAUT_LONG_ARC') THEN
          IF (TYPSEL(1:14).EQ.'ANGL_INCR_DEPL') THEN
            LPIARC = .TRUE.
          ENDIF
        ENDIF
      ENDIF
C
C --- PAS D'ETAT INITIAL EN PRESENCE D'UN CONCEPT REENTRANT
C
      CALL GETFAC(MOTFAC,NOCC)
      CALL ASSERT(NOCC.LE.1)
      LEINIT = NOCC.GT.0
      IF (LEINIT) THEN
        IF (NIV.GE.2) THEN
          WRITE (IFM,*) '<MECANONLINE> LECTURE ETAT INITIAL'
        ENDIF
      ELSE
        IF (LREUSE) THEN
          CALL U2MESS('A','ETATINIT_1')
        ENDIF
      ENDIF
C
C --- CONCEPT EVOL_NOLI DONNE DANS ETAT_INIT
C
      CALL GETVID(MOTFAC,'EVOL_NOLI',1,1,1,EVOL,NOCC)
      CALL ASSERT(NOCC.LE.1)
      EVONOL = NOCC .GT. 0
C
C --- ALARME SI CONTACT CONTINU AVEC UN CONCEPT REENTRANT
C
      IF (LCTCC) THEN
        IF (LREUSE) THEN
          CALL U2MESS('A','MECANONLINE4_14')
        ELSE IF (EVONOL) THEN
          CALL U2MESS('A','MECANONLINE4_15')
        ENDIF
      ENDIF
C
C --- INSTANT INITIAL
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... INSTANT INITIAL'
      ENDIF
      CALL NMDOIN(EVOL  ,EVONOL,INSTIN,NUMEIN)
      IF (NIV.GE.2) THEN
        IF (INSTIN.EQ.R8VIDE()) THEN
          WRITE (IFM,*) '<MECANONLINE> ...... NON DEFINI PAR ETAT_INIT'
        ELSE
          WRITE (IFM,*) '<MECANONLINE> ...... VALEUR    : ',INSTIN
        ENDIF
      ENDIF
C
C --- BOUCLE SUR L'INITIALISATION DES CHAMPS PRINCIPAUX ET DERIVES
C
      DO 10 NRPASE = NBPASE,0,-1
C
C ----- NOM DES CHAMPS
C
        CALL NMNSLE(SDSENS,NRPASE,'DEPMOI',DEPMOI)
        CALL NMNSLE(SDSENS,NRPASE,'SIGMOI',SIGMOI)
        CALL NMNSLE(SDSENS,NRPASE,'VARMOI',VARMOI)
        IF (LDYNA) THEN
          CALL NMNSLE(SDSENS,NRPASE,'VITMOI',VITMOI)
          CALL NMNSLE(SDSENS,NRPASE,'ACCMOI',ACCMOI)
        ENDIF
C
        IF (EVONOL) THEN
C
C ------- ETAT INITIAL DEFINI PAR UN CONCEPT DE TYPE EVOL_NOLI
C
          IF (NRPASE.GT.0) THEN
            CALL NMNSLE(SDSENS,NRPASE,'NOPASE',NOPASE)
            CALL PSGENC(EVOL  ,NOPASE,RESULS  ,IRET  )
            IF ( IRET.NE.0 ) THEN
              VALK(1) = EVOL
              VALK(2) = NOPASE//'                '
              CALL U2MESK('F','SENSIBILITE_3', 2 ,VALK)
            ENDIF
            RESULT = RESULS
          ELSE
            RESULT = EVOL(1:8)
          ENDIF
C
C ------- LECTURE DES DEPLACEMENTS (OU DERIVE)
C
          CALL RSEXCH(RESULT,'DEPL',NUMEIN,CHAMP ,IRET  )
          IF (IRET.EQ.0) THEN
            CALL VTCOPY(CHAMP,DEPMOI)
          ELSE
            CALL U2MESK('F','MECANONLINE4_41',1,EVOL  )
          ENDIF
C
C ------- VERIFICATION COMPATIBILITE PILOTAGE
C
          IF (LPIARC) THEN
            CALL RSEXCH(RESULT,'DEPL',NUMEIN-1,CHAMP2,IRET)
            IF (IRET.NE.0) THEN
              CALL U2MESK('F','MECANONLINE4_47',1,EVOL  )
            ENDIF
            CALL VTCOPY(CHAMP,DEP1)
            CALL VTCOPY(CHAMP2,DEP2)
            CALL JEVEUO(DEP1(1:19)//'.VALE','L',JDEP1)
            CALL JEVEUO(DEP2(1:19)//'.VALE','L',JDEP2)
            CALL JEVEUO(DEPOLD(1:19)//'.VALE','E',JDEPOL)
            DO 156 I = 1,NEQ
              ZR(JDEPOL-1+I) = ZR(JDEP1-1+I) - ZR(JDEP2-1+I)
 156        CONTINUE
            CALL JEVEUO(SDPILO(1:19)//'.PLIR','E',JPLIR)
            CALL RSADPA(RESULT,'L',1,'COEF_MULT',NUMEIN,0,JINST,K8BID)
            COEFAV = ZR(JINST)
            IF (COEFAV.NE.0.D0.AND.COEFAV.NE.R8VIDE()) THEN
              ZR(JPLIR+5) = COEFAV
            ENDIF
          ENDIF
C
C ------- LECTURE DES CONTRAINTES AUX POINTS DE GAUSS (OU DERIVE)
C
          CALL RSEXCH(RESULT,'SIEF_ELGA',NUMEIN,CHAMP,IRET)
          IF (IRET.EQ.0) THEN
            CALL COPISD('CHAMP_GD','V',CHAMP,SIGMOI)
          ELSE
C
C --------- CONTRAINTES AUX NOEUDS : PASSAGE AUX POINTS DE GAUSS
C
            CALL RSEXCH(RESULT,'SIEF_ELNO',NUMEIN,CHAMP,IRET)
            IF (IRET.NE.0) THEN
              CALL U2MESK('F','MECANONLINE4_42',1,EVOL)
            ENDIF
            CALL COPISD('CHAM_ELEM_S','V',COMPOR,SIGMOI)
            CALL MENOGA('SIEF_ELGA_ELNO  ',LIGRMO,COMPOR,CHAMP,SIGMOI,
     &                  K24BID)
          END IF
C
C ------- CHARGEMENTS DE TYPE PRECONTRAINTE (LE CAS ECHEANT)
C
          CALL NMSIGI(LIGRMO,COMPOR,SIGMOI)
C
C ------- LECTURE DES VARIABLES INTERNES AUX POINTS DE GAUSS (OU DERIVE)
C
          CALL RSEXCH(RESULT,'COMPORTEMENT',NUMEIN,COMPOM,IRET)
          IF (IRET.NE.0) COMPOM = ' '

          CALL RSEXCH(RESULT,'VARI_ELGA',NUMEIN,CHAMP,IRET)
          IF (IRET.EQ.0) THEN
            CALL COPISD('CHAMP_GD','V',CHAMP,VARMOI)
            IF (NRPASE.EQ.NBPASE) CALL VRCOMP(COMPOM,COMPOR,VARMOI,
     &                                        LIGRMO)
          ELSE
C
C --------- VARIABLES INTERNES AUX NOEUDS : PASSAGE AUX POINTS DE GAUSS
C
            CALL RSEXCH(RESULT,'VARI_ELNO',NUMEIN,CHAMP,IRET)
            IF (IRET.NE.0) THEN
              CALL U2MESK('F','MECANONLINE4_46',1,EVOL)
            ENDIF
            IF (NRPASE.EQ.NBPASE)CALL VRCOMP(COMPOM,COMPOR,CHAMP,LIGRMO)
            CALL COPISD('CHAM_ELEM_S','V',COMPOR,VARMOI)
            CALL MENOGA('VARI_ELGA_ELNO  ',LIGRMO,COMPOR,CHAMP,VARMOI,
     &                  K24BID)
          END IF
C
C ------- LECTURE DES VITESSES (OU DERIVE)
C
          IF (LDYNA) THEN
            CALL RSEXCH(RESULT,'VITE',NUMEIN,CHAMP,IRETVI)
            IF (IRETVI.NE.0) THEN
              CALL U2MESK('I','MECANONLINE4_43',1,EVOL)
              CALL NULVEC(VITMOI)
            ELSE
              CALL VTCOPY(CHAMP,VITMOI)
            END IF
          ENDIF
C
C ------- LECTURE DES ACCELERATIONS (OU DERIVE)
C
          IF (LDYNA) THEN
            CALL RSEXCH(RESULT,'ACCE',NUMEIN,CHAMP,IRETAC)
            IF (IRETAC.NE.0) THEN
              IF (IRETVI.NE.0) THEN
                CALL U2MESK('I','MECANONLINE4_44',1,EVOL  )
                LACC0 = .TRUE.
              ELSE
                CALL U2MESK('F','MECANONLINE4_45',1,EVOL  )
              END IF
            ELSE
              CALL VTCOPY(CHAMP,ACCMOI)
            END IF
          ENDIF
C
C ------- LECTURE DU CONTACT XFEM+CZM
C
          IF (LXFCM) THEN
            CALL ASSERT(NRPASE.EQ.0)
C
C --------- LECTURE DU STATUT DE CONTACT
C
            XINDC0 = RESOCO(1:14)//'.XFI0'
            XINDCO = RESOCO(1:14)//'.XFIN'
            CALL RSEXCH(RESULT,'INDC_ELGA',NUMEIN,CHAMP,IRET)
            IF (IRET.EQ.0) THEN
              CALL COPISD('CHAMP_GD','V',CHAMP ,XINDCO)
            ELSE
              CALL COPISD('CHAMP_GD','V',XINDC0,XINDCO)  
            ENDIF
C
C --------- LECTURE DU SEUIL DE FROTTEMENT
C
            XSEUC0 = RESOCO(1:14)//'.XFS0'
            XSEUCO = RESOCO(1:14)//'.XFSE'
            CALL RSEXCH(RESULT,'SECO_ELGA',NUMEIN,CHAMP,IRET)
            IF (IRET.EQ.0) THEN
              CALL COPISD('CHAMP_GD','V',CHAMP,XSEUCO)
            ELSE
              CALL COPISD('CHAMP_GD','V',XSEUC0,XSEUCO)               
            ENDIF
C
C --------- LECTURE DE LA VALEUR DE LA COHESION
C
            XCOHE0 = RESOCO(1:14)//'.XCO0'
            XCOHES = RESOCO(1:14)//'.XCOH'
            CALL RSEXCH(RESULT,'COHE_ELGA',NUMEIN,CHAMP,IRET)
            IF (IRET.EQ.0) THEN
              CALL COPISD('CHAMP_GD','V',CHAMP,XCOHES)
            ELSE
              CALL COPISD('CHAMP_GD','V',XCOHE0,XCOHES)               
            ENDIF

          ENDIF
C
C ------- LECTURE DES INDICATEURS D'ERREUR EN TEMPS EN THM
C         
          IF (LERRT) THEN
            ERRTPS = SDERRO(1:19)//'.ERRT'      
            CALL JEVEUO(ERRTPS,'L',JERRT )
            CALL RSADPA(RESULT,'L',1,'ERRE_TPS_LOC' ,
     &                  NUMEIN,0,JINST,K8BID)
            ZR(JERRT-1+1) = ZR(JINST)
            CALL RSADPA(RESULT,'L',1,'ERRE_TPS_GLOB',
     &                  NUMEIN,0,JINST,K8BID)
            ZR(JERRT-1+2) = ZR(JINST)
          ENDIF          
          
          
        ELSE
C
C ------- DEFINITION CHAMP PAR CHAMP (OU PAS D'ETAT INITIAL DU TOUT)
C
          NCHOUT = 0
C
C ------- LECTURE DES DEPLACEMENTS
C
          CALL GETVID(MOTFAC,'DEPL',1,1,1,CHAMP,NOCC)
          IF (NOCC.NE.0) THEN
            CALL CHPVER('F',CHAMP(1:19),'NOEU','DEPL_R',IER)
            CALL VTCOPY(CHAMP,DEPMOI)
            IF (LPIARC) THEN
              CALL U2MESK('F','MECANONLINE4_47',1,EVOL  )
            ENDIF
          ENDIF

          IF (NOCC.NE.0 .AND. NBPASE.GT.0) THEN
            CALL U2MESS('F','SENSIBILITE_21')
          ENDIF
C
C ------- LECTURE DES CONTRAINTES AUX POINTS DE GAUSS
C
          CALL GETVID(MOTFAC,'SIGM',1,1,1,CHAMP,NOCC)
          IF (NOCC.NE.0 .AND. NBPASE.GT.0 .AND. NRPASE.EQ.0 ) THEN
            CALL U2MESS('F','SENSIBILITE_21')
          ENDIF
C
C ------- PREPARATION POUR CREER UN CHAMP NUL
C
          IF (NOCC.EQ.0) THEN
            NCHOUT = NCHOUT + 1
            LPAOUT(NCHOUT) = 'PSIEF_R'
            LCHOUT(NCHOUT) = SIGMOI
            CALL COPISD('CHAM_ELEM_S','V',COMPOR,SIGMOI)
          ELSE
            CALL CHPVER('F',CHAMP(1:19),'*','SIEF_R',IER)
            CALL DISMOI('F','TYPE_CHAMP',CHAMP,'CHAMP',IBID,TYPECH,IRET)
            IF (TYPECH.EQ.'ELNO') THEN
              CALL COPISD('CHAM_ELEM_S','V',COMPOR,SIGMOI)
              CALL MENOGA('SIEF_ELGA_ELNO  ',LIGRMO,COMPOR,CHAMP,SIGMOI,
     &                    K24BID)
            ELSE
              CALL COPISD('CHAMP_GD','V',CHAMP,SIGMOI)
            END IF
          END IF
C
C ------- LECTURE DES VARIABLES INTERNES
C
          CALL GETVID(MOTFAC,'VARI',1,1,1,CHAMP,NOCC)
C
          IF (NOCC.NE.0 .AND. NBPASE.GT.0) THEN
            CALL U2MESS('F','SENSIBILITE_21')
          ENDIF
C
C ------- PREPARATION POUR CREER UN CHAMP NUL
C
          IF (NOCC.EQ.0) THEN
            NCHOUT = NCHOUT + 1
            LPAOUT(NCHOUT) = 'PVARI_R'
            LCHOUT(NCHOUT) = VARMOI
            CALL COPISD('CHAM_ELEM_S','V',COMPOR,VARMOI)

          ELSE
            CALL CHPVER('F',CHAMP(1:19),'ELXX','VARI_R',IER)
            CALL DISMOI('F','TYPE_CHAMP',CHAMP,'CHAMP',IBID,TYPECH,IRET)
            IF (TYPECH.EQ.'ELNO') THEN
              IF (NRPASE.EQ.NBPASE) CALL VRCOMP(' ',COMPOR,CHAMP,LIGRMO)
              CALL COPISD('CHAM_ELEM_S','V',COMPOR,VARMOI)
              CALL MENOGA('VARI_ELGA_ELNO  ',LIGRMO,COMPOR,CHAMP,VARMOI,
     &                    K24BID)
            ELSE
              CALL COPISD('CHAMP_GD','V',CHAMP,VARMOI)
              IF (NRPASE.EQ.NBPASE)CALL VRCOMP(' ',COMPOR,VARMOI,LIGRMO)
            END IF
          END IF
C
C ------- CREATION DES CHAMPS DE CONTRAINTES ET DE VARI. INTERNES NULS
C
          IF (NCHOUT.GT.0) THEN
            CALL MEGEOM(MODELE,' ',LBID,CHGEOM)
            LCHIN(1) = CHGEOM
            LPAIN(1) = 'PGEOMER'
            OPT = 'TOU_INI_ELGA'
            CALL CALCUL('S',OPT,LIGRMO,1,LCHIN,LPAIN,NCHOUT,LCHOUT,
     &                  LPAOUT,'V','OUI')
            CALL NMSIGI(LIGRMO,COMPOR,SIGMOI)
          END IF
C
C ------- LECTURE DES VITESSES
C
          IF (LDYNA) THEN
            CALL GETVID(MOTFAC,'VITE',1,1,1,CHAMP,NOCC)
            LNOCC=(LNOCC.OR.(NOCC.NE.0))
            IF (NOCC.NE.0) THEN
              CALL CHPVER('F',CHAMP(1:19),'NOEU','DEPL_R',IERR)
              CALL VTCOPY(CHAMP,VITMOI)
            ELSE
              CALL U2MESS('I','MECANONLINE4_22')
              CALL NULVEC(VITMOI)
            END IF
          ENDIF
C
C ------- LECTURE DES ACCELERATIONS
C
          IF (LDYNA) THEN
            CALL GETVID(MOTFAC,'ACCE',1,1,1,CHAMP,NOCC)
            IF (NOCC.NE.0) THEN
              CALL CHPVER('F',CHAMP(1:19),'NOEU','DEPL_R',IERR)
              CALL VTCOPY(CHAMP,ACCMOI)
            ELSE
              LACC0 = .TRUE.
            END IF
          ENDIF
C
C ------- LECTURE DU CONTACT XFEM+CZM
C          
          IF (LXFCM) THEN
            CALL ASSERT(NRPASE.EQ.0)     
C          
C --------- LECTURE DU STATUT DE CONTACT: ON PREND ZERO
C
            XINDC0 = RESOCO(1:14)//'.XFI0'
            XINDCO = RESOCO(1:14)//'.XFIN'
C            CALL COPISD('CHAMP_GD','V',XINDC0,XINDCO)  
C
C --------- LECTURE DU SEUIL DE FROTTEMENT: ON PREND ZERO
C
            IF (LXFFM) THEN 
              XSEUC0 = RESOCO(1:14)//'.XFS0'
              XSEUCO = RESOCO(1:14)//'.XFSE'
C              CALL COPISD('CHAMP_GD','V',XSEUC0,XSEUCO)
            ENDIF           
C
C --------- LECTURE DE LA VALEUR DE LA COHESION: ON PREND ZERO
C       
            IF (LXCZM) THEN
              XCOHE0 = RESOCO(1:14)//'.XCO0'
              XCOHES = RESOCO(1:14)//'.XCOH'
C              CALL COPISD('CHAMP_GD','V',XCOHE0,XCOHES)
            ENDIF              

          ENDIF          
          
        END IF
   10 CONTINUE
C
C --- AFFICHAGES
C
      IF (NIV.GE.2) THEN
        WRITE (IFM,*) '<MECANONLINE> ... DEPMOI : '
        CALL NMDEBG('VECT',DEPMOI,IFM)
        WRITE (IFM,*) '<MECANONLINE> ... SIGMOI : '
        CALL NMDEBG('CHEL',SIGMOI,IFM)
        WRITE (IFM,*) '<MECANONLINE> ... VARMOI : '
        CALL NMDEBG('CHEL',VARMOI,IFM)
        IF (LDYNA) THEN
          WRITE (IFM,*) '<MECANONLINE> ... VITMOI : '
          CALL NMDEBG('VECT',VITMOI,IFM)
          IF (.NOT.LACC0) THEN
            WRITE (IFM,*) '<MECANONLINE> ... ACCMOI : '
            CALL NMDEBG('VECT',ACCMOI,IFM)
          ENDIF
        ENDIF
      ENDIF
C
C --- PROJECTION MODALE EN EXPLICITE
C
      IF (LDYNA) THEN
        IF (LEXGE) THEN
          CALL ASSERT(NBPASE.EQ.0)
          RESULT = EVOL(1:8)
          CALL NDLOAM(SDDYNA,RESULT,EVONOL,NUMEIN)
        ENDIF
      ENDIF
C
      CALL JEDEMA()
      END
