      SUBROUTINE NMFLIN(SDPOST,MATASS,FREQR ,LINSTA)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 02/04/2012   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT     NONE
      CHARACTER*19 SDPOST
      CHARACTER*19 MATASS
      LOGICAL      LINSTA
      REAL*8       FREQR
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (POST-TRAITEMENT)
C
C DETECTION D'UNE INSTABILITE
C
C ----------------------------------------------------------------------
C
C
C IN  MATASS : MATRICE ASSEMBLEE
C IN  SDPOST : SD POUR POST-TRAITEMENTS (CRIT_STAB ET MODE_VIBR)
C IN  FREQR  : FREQUENCE SOLUTION INSTABILITE
C OUT LINSTA : .TRUE. SI INSTABILITE DETECTEE
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      LOGICAL      VALTST,LDIST
      CHARACTER*24 K24BID
      REAL*8       FREQR0,PREC,R8BID,MINMAT,MAXMAT
      CHARACTER*16 OPTRIG,SIGN
      INTEGER      IBID
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      LINSTA = .FALSE.
C
C --- PARAMETRES
C
      CALL NMLESD('POST_TRAITEMENT',SDPOST,'SOLU_FREQ_FLAM',
     &            IBID             ,FREQR0,K24BID)
      IF (ABS(FREQR0).GT.1.D30) FREQR0=FREQR
      CALL NMLESD('POST_TRAITEMENT',SDPOST,'RIGI_GEOM_FLAMB',
     &            IBID             ,R8BID ,OPTRIG)
      CALL NMLESD('POST_TRAITEMENT',SDPOST,'PREC_INSTAB',
     &            IBID             ,PREC  ,K24BID)
      CALL NMLESD('POST_TRAITEMENT',SDPOST,'SIGN_INSTAB',
     &            IBID             ,R8BID ,SIGN  )
C
C --- DETECTION INSTABILITE
C
      IF (OPTRIG.EQ.'RIGI_GEOM_NON' ) THEN
        LDIST = .FALSE.
        CALL ECHMAT(MATASS,LDIST,MINMAT,MAXMAT)
        IF (((FREQR0*FREQR).LT.0.D0).OR.
     &         (ABS(FREQR).LT.(PREC*MINMAT))) THEN
          LINSTA = .TRUE.
        ENDIF
      ELSE
        VALTST = .FALSE.
        IF (SIGN.EQ.'POSITIF') THEN
          VALTST =
     &       ((FREQR.GE.0.D0).AND.(ABS(FREQR).LT.(1.D0+PREC)))
        ELSEIF (SIGN.EQ.'NEGATIF') THEN
          VALTST =
     &       ((FREQR.LE.0.D0).AND.(ABS(FREQR).LT.(1.D0+PREC)))
        ELSEIF (SIGN.EQ.'POSITIF_NEGATIF') THEN
          VALTST = (ABS(FREQR).LT.(1.D0+PREC))
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
        IF (VALTST) LINSTA = .TRUE.
      ENDIF

      CALL JEDEMA()
      END
