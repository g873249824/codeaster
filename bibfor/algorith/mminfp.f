      SUBROUTINE MMINFP(IZONE ,DEFICO,QUESTZ,IREP  ,RREP  ,
     &                  LREP   )
C     
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 22/12/2009   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2006  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C TOLE CRP_20
C
      IMPLICIT NONE
      CHARACTER*24  DEFICO
      INTEGER       IZONE
      CHARACTER*(*) QUESTZ
      INTEGER       IREP(*)
      REAL*8        RREP(*)
      LOGICAL       LREP(*)
C      
C ----------------------------------------------------------------------
C
C ROUTINE UTILITAIRE POUR LE CONTACT (TOUTES METHODES)
C
C REPOND A UNE QUESTION SUR UNE OPTION/CARACTERISTIQUE DU CONTACT
C VARIABLE SUIVANT LA ZONE
C
C ----------------------------------------------------------------------
C
C
C IN  DEFICO : SD POUR LA DEFINITION DU CONTACT
C IN  IZONE  : NUMERO DE LA ZONE DE CONTACT QU'ON INTERROGE
C IN  QUESTI : QUESTION POSEE
C OUT IREP   : VALEUR SI C'EST UN ENTIER
C OUT RREP   : VALEUR SI C'EST UN REEL
C OUT LREP   : VALEUR SI C'EST UN BOOLEEN
C
C -------------- DEBUT DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER ZI
      COMMON /IVARJE/ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C ---------------- FIN DECLARATIONS NORMALISEES JEVEUX -----------------
C
      INTEGER      IRET
      INTEGER      CFDISI,IFORM,NZOCO
      INTEGER      CFMMVD,ZCMCF,ZMETH,ZTOLE,ZEXCL,ZDIRN,ZCMDF,ZCMXF
      CHARACTER*24 CARACF,CARADF,CARAXF,DIRNOR,METHCO
      INTEGER      JCMCF,JCMDF,JCMXF,JDIRNO,JMETH
      CHARACTER*24 TOLECO,DIRAPP,EXCLFR
      INTEGER      JTOLE,JDIRAP,JEXCLF 
      CHARACTER*24 QUESTI
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C 
C --- INITIALISATIONS
C
      IREP(1)= 0
      RREP(1)= 0.D0
      LREP(1)= .FALSE.
      QUESTI = QUESTZ
C   
C --- ACCES AUX SDS
C 
      CARACF = DEFICO(1:16)//'.CARACF'
      CARADF = DEFICO(1:16)//'.CARADF'
      CARAXF = DEFICO(1:16)//'.CARAXF'      
      DIRAPP = DEFICO(1:16)//'.DIRAPP'
      DIRNOR = DEFICO(1:16)//'.DIRNOR'     
      METHCO = DEFICO(1:16)//'.METHCO'
      TOLECO = DEFICO(1:16)//'.TOLECO'   
      EXCLFR = DEFICO(1:16)//'.EXCLFR'        
C
      ZMETH  = CFMMVD('ZMETH')
      ZTOLE  = CFMMVD('ZTOLE')
      ZCMCF  = CFMMVD('ZCMCF')
      ZCMDF  = CFMMVD('ZCMDF')
      ZCMXF  = CFMMVD('ZCMXF')       
      ZEXCL  = CFMMVD('ZEXCL')  
      ZDIRN  = CFMMVD('ZDIRN')
C
      NZOCO  = CFDISI(DEFICO,'NZOCO' )
      IFORM  = CFDISI(DEFICO,'FORMULATION')
      CALL ASSERT(IZONE.GT.0)
      IF (NZOCO.NE.0) THEN
        CALL ASSERT(IZONE.LE.NZOCO)
      ENDIF       
C
C ---- INTERROGATION METHCO
C 
      IF (QUESTI(1:11).EQ.'APPARIEMENT')    THEN
        CALL JEVEUO(METHCO,'L',JMETH)      
        IREP(1) = ZI(JMETH+ZMETH*(IZONE-1)+1-1) 
C
      ELSEIF (QUESTI.EQ.'NORMALE') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IREP(1) = ZI(JMETH+ZMETH*(IZONE-1)+8-1) 
C
      ELSEIF (QUESTI.EQ.'MAIT') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IF (ZI(JMETH+ZMETH*(IZONE-1)+8-1).EQ.0) THEN
          LREP(1) = .TRUE.
        ELSE
          LREP(1) = .FALSE.
        ENDIF 
C
      ELSEIF (QUESTI.EQ.'MAIT_ESCL') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IF (ZI(JMETH+ZMETH*(IZONE-1)+8-1).EQ.1) THEN
          LREP(1) = .TRUE.
        ELSE
          LREP(1) = .FALSE.
        ENDIF
C
      ELSEIF (QUESTI.EQ.'ESCL') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IF (ZI(JMETH+ZMETH*(IZONE-1)+8-1).EQ.2) THEN
          LREP(1) = .TRUE.
        ELSE
          LREP(1) = .FALSE.
        ENDIF    
C
      ELSEIF (QUESTI.EQ.'VECT_MAIT') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IREP(1) = ZI(JMETH+ZMETH*(IZONE-1)+7-1)
C        
      ELSEIF (QUESTI.EQ.'VECT_MAIT_DIRX') THEN   
        CALL JEVEUO(METHCO,'L',JMETH)         
        IF (ZI(JMETH+ZMETH*(IZONE-1)+7-1).GT.0) THEN
          CALL JEVEUO(DIRNOR,'L',JDIRNO)
          RREP(1) = ZR(JDIRNO+ZDIRN*(IZONE-1))  
        ELSE
          CALL ASSERT(.FALSE.)  
        ENDIF 
C        
      ELSEIF (QUESTI.EQ.'VECT_MAIT_DIRY') THEN  
        CALL JEVEUO(METHCO,'L',JMETH)            
        IF (ZI(JMETH+ZMETH*(IZONE-1)+7-1).GT.0) THEN
          CALL JEVEUO(DIRNOR,'L',JDIRNO)
          RREP(1) = ZR(JDIRNO+ZDIRN*(IZONE-1)+1)  
        ELSE
          CALL ASSERT(.FALSE.)  
        ENDIF         
C        
      ELSEIF (QUESTI.EQ.'VECT_MAIT_DIRZ') THEN   
        CALL JEVEUO(METHCO,'L',JMETH)           
        IF (ZI(JMETH+ZMETH*(IZONE-1)+7-1).GT.0) THEN
          CALL JEVEUO(DIRNOR,'L',JDIRNO)
          RREP(1) = ZR(JDIRNO+ZDIRN*(IZONE-1)+2)  
        ELSE
          CALL ASSERT(.FALSE.)  
        ENDIF                                   
C
      ELSEIF (QUESTI.EQ.'VECT_ESCL') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IREP(1) = ZI(JMETH+ZMETH*(IZONE-1)+10-1)
C              
      ELSEIF (QUESTI.EQ.'VECT_ESCL_DIRX') THEN  
        CALL JEVEUO(METHCO,'L',JMETH)   
        IF (ZI(JMETH+ZMETH*(IZONE-1)+10-1).GT.0) THEN
          CALL JEVEUO(DIRNOR,'L',JDIRNO)
          RREP(1) = ZR(JDIRNO+ZDIRN*(IZONE-1)+3) 
        ELSE
          CALL ASSERT(.FALSE.) 
        ENDIF  
C              
      ELSEIF (QUESTI.EQ.'VECT_ESCL_DIRY') THEN  
        CALL JEVEUO(METHCO,'L',JMETH)   
        IF (ZI(JMETH+ZMETH*(IZONE-1)+10-1).GT.0) THEN
          CALL JEVEUO(DIRNOR,'L',JDIRNO)
          RREP(1) = ZR(JDIRNO+ZDIRN*(IZONE-1)+4)
        ELSE
          CALL ASSERT(.FALSE.) 
        ENDIF        
C              
      ELSEIF (QUESTI.EQ.'VECT_ESCL_DIRZ') THEN  
        CALL JEVEUO(METHCO,'L',JMETH)   
        IF (ZI(JMETH+ZMETH*(IZONE-1)+10-1).GT.0) THEN
          CALL JEVEUO(DIRNOR,'L',JDIRNO)
          RREP(1) = ZR(JDIRNO+ZDIRN*(IZONE-1)+5)
        ELSE
          CALL ASSERT(.FALSE.) 
        ENDIF     
C
      ELSEIF (QUESTI.EQ.'TYPE_APPA') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IREP(1) = ZI(JMETH+ZMETH*(IZONE-1)+9-1)                        
C
      ELSEIF (QUESTI.EQ.'TYPE_APPA_FIXE') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        LREP(1) = ZI(JMETH+ZMETH*(IZONE-1)+9-1).EQ.1
C
      ELSEIF (QUESTI.EQ.'TYPE_APPA_DIRX') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IF (ZI(JMETH+ZMETH*(IZONE-1)+9-1).EQ.1) THEN
          CALL JEVEUO(DIRAPP,'L',JDIRAP)
          RREP(1) = ZR(JDIRAP+3*(IZONE-1))
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF  
C
      ELSEIF (QUESTI.EQ.'TYPE_APPA_DIRY') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IF (ZI(JMETH+ZMETH*(IZONE-1)+9-1).EQ.1) THEN
          CALL JEVEUO(DIRAPP,'L',JDIRAP)
          RREP(1) = ZR(JDIRAP+3*(IZONE-1)+1)
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF   
C
      ELSEIF (QUESTI.EQ.'TYPE_APPA_DIRZ') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        IF (ZI(JMETH+ZMETH*(IZONE-1)+9-1).EQ.1) THEN
          CALL JEVEUO(DIRAPP,'L',JDIRAP)
          RREP(1) = ZR(JDIRAP+3*(IZONE-1)+2)
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF                         
C
      ELSEIF (QUESTI.EQ.'GLISSIERE_ZONE') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        LREP(1) = .FALSE.
        IF (IFORM.EQ.1) THEN       
          CALL JEVEUO(CARADF,'L',JCMDF ) 
          LREP(1) = NINT(ZR(JCMDF+ZCMDF*(IZONE-1)+6 -1)).EQ.1
        ELSEIF (IFORM.EQ.2) THEN
          CALL JEVEUO(CARACF,'L',JCMCF)
          LREP(1) = NINT(ZR(JCMCF+ZCMCF*(IZONE-1)+27-1)).EQ.1
        ELSEIF (IFORM.EQ.3) THEN
          CALL JEVEUO(CARAXF,'L',JCMXF)
          LREP(1) = NINT(ZR(JCMXF+ZCMXF*(IZONE-1)+10-1)).EQ.1 
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF                       
C
      ELSEIF (QUESTI.EQ.'DIST_POUTRE') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        LREP(1) = ZI(JMETH+ZMETH*(IZONE-1)+4-1).EQ.1              
C
      ELSEIF (QUESTI.EQ.'DIST_COQUE') THEN
        CALL JEVEUO(METHCO,'L',JMETH)
        LREP(1) = ZI(JMETH+ZMETH*(IZONE-1)+5-1).EQ.1
C
C ---- INTERROGATION TOLECO
C 
      ELSEIF (QUESTI.EQ.'TOLE_PROJ_EXT') THEN
        IF (IFORM.EQ.3) THEN
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+15-1)
        ELSE
          CALL JEVEUO(TOLECO,'L',JTOLE)
          RREP(1) = ZR(JTOLE+ZTOLE*(IZONE-1)+1-1)
        ENDIF  
C        
      ELSEIF (QUESTI.EQ.'TOLE_APPA') THEN
        CALL JEVEUO(TOLECO,'L',JTOLE)
        RREP(1) = ZR(JTOLE+ZTOLE*(IZONE-1)+2-1)        
C
C ---- INTERROGATION CMCF/CMXF
C             
      ELSEIF (QUESTI.EQ.'INTEGRATION') THEN
        IF (IFORM.EQ.2) THEN
          CALL JEVEUO(CARACF,'L',JCMCF)
          IREP(1) = NINT(ZR(JCMCF+ZCMCF*(IZONE-1)+1-1))
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          IREP(1) = NINT(ZR(JCMXF+ZCMXF*(IZONE-1)+1-1))
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF 
C
      ELSEIF (QUESTI.EQ.'COEF_REGU_CONT') THEN
        IF (IFORM.EQ.2) THEN
          CALL JEVEUO(CARACF,'L',JCMCF)
          RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+2-1)
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+2-1)              
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF 
C
      ELSEIF (QUESTI.EQ.'COEF_REGU_FROT') THEN
        IF (IFORM.EQ.2) THEN
          CALL JEVEUO(CARACF,'L',JCMCF)
          RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+3-1)
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+3-1)              
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
C
      ELSEIF (QUESTI.EQ.'COEF_COULOMB') THEN
        IF (IFORM.EQ.2) THEN
          CALL JEVEUO(CARACF,'L',JCMCF)
          RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+4-1)
        ELSEIF (IFORM.EQ.3) THEN  
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+4-1)
        ELSEIF (IFORM.EQ.1) THEN
          CALL JEVEUO(CARADF,'L',JCMDF ) 
          RREP(1) = ZR(JCMDF+ZCMDF*(IZONE-1)+4-1)       
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
                         
C
      ELSEIF (QUESTI.EQ.'FROTTEMENT_ZONE') THEN
        IF (IFORM.EQ.2) THEN
          CALL JEVEUO(CARACF,'L',JCMCF)
          IREP(1) = NINT(ZR(JCMCF+ZCMCF*(IZONE-1)+5-1))
          LREP(1) = (NINT(ZR(JCMCF+ZCMCF*(IZONE-1)+5-1)).EQ.3)
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          IREP(1) = NINT(ZR(JCMXF+ZCMXF*(IZONE-1)+5-1))
          LREP(1) = (NINT(ZR(JCMXF+ZCMXF*(IZONE-1)+5-1)).EQ.3)        
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF                 
C                
      ELSEIF (QUESTI.EQ.'SEUIL_INIT') THEN
        IF (IFORM.EQ.2) THEN      
          CALL JEVEUO(CARACF,'L',JCMCF)
          RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+6-1)
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+6-1)        
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
C
      ELSEIF (QUESTI.EQ.'COEF_ECHELLE') THEN
        IF (IFORM.EQ.3) THEN
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+8-1)   
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF          
C
      ELSEIF (QUESTI.EQ.'XFEM_ALGO_LAGR') THEN
        IF (IFORM.EQ.3) THEN
          CALL JEVEUO(CARAXF,'L',JCMXF)
          IREP(1) = NINT(ZR(JCMXF+ZCMXF*(IZONE-1)+9-1))   
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
C
      ELSEIF (QUESTI.EQ.'COMPLIANCE') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        IF (ZR(JCMCF+ZCMCF*(IZONE-1)+7-1) .EQ. 0.D0) THEN
          LREP(1) = .FALSE.
        ELSE
          LREP(1) = .TRUE.
        ENDIF
C
      ELSEIF (QUESTI.EQ.'COMPL_ASPERITE') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+8-1)
C
      ELSEIF (QUESTI.EQ.'COMPL_E_N') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+9-1)
C
      ELSEIF (QUESTI.EQ.'COMPL_E_V') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+10-1)                        
C
      ELSEIF (QUESTI.EQ.'FOND_FISSURE') THEN
        CALL JEEXIN(CARACF,IRET)
        IF (IRET.EQ.0) THEN
          LREP(1) = .FALSE.
        ELSE
          CALL JEVEUO(CARACF,'L',JCMCF)
          IF (ZR(JCMCF+ZCMCF*(IZONE-1)+11-1) .EQ. 0.D0) THEN
            LREP(1) = .FALSE.
          ELSE
            LREP(1) = .TRUE.
          ENDIF
        ENDIF
C        
      ELSEIF (QUESTI.EQ.'RACCORD_LINE_QUAD') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        IF (ZR(JCMCF+ZCMCF*(IZONE-1)+12-1) .EQ. 0.D0) THEN
          LREP(1) = .FALSE.
        ELSE
          LREP(1) = .TRUE.
        ENDIF
C        
      ELSEIF (QUESTI.EQ.'USURE') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        IF (ZR(JCMCF+ZCMCF*(IZONE-1)+13-1) .EQ. 0.D0) THEN
          LREP(1) = .FALSE.
          IREP(1) = 0
        ELSE
          LREP(1) = .TRUE.
          IREP(1) = 1
        ENDIF
C        
      ELSEIF (QUESTI.EQ.'USURE_K') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        RREP(1)  = ZR(JCMCF+ZCMCF*(IZONE-1)+14-1)  
C        
      ELSEIF (QUESTI.EQ.'USURE_H') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        RREP(1)  = ZR(JCMCF+ZCMCF*(IZONE-1)+15-1)
C
      ELSEIF (QUESTI.EQ.'COEF_STAB_CONT') THEN
        IF (IFORM.EQ.2) THEN      
          CALL JEVEUO(CARACF,'L',JCMCF)
          RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+17-1)
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+11-1)        
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF      
        
C
      ELSEIF (QUESTI.EQ.'COEF_PENA_CONT') THEN
        IF (IFORM.EQ.2) THEN      
          CALL JEVEUO(CARACF,'L',JCMCF)
          RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+18-1)
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+12-1)        
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF        
C
      ELSEIF (QUESTI.EQ.'COEF_STAB_FROT') THEN
        IF (IFORM.EQ.2) THEN      
          CALL JEVEUO(CARACF,'L',JCMCF)
          RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+20-1)
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+13-1)        
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF 
C
      ELSEIF (QUESTI.EQ.'COEF_PENA_FROT') THEN
        IF (IFORM.EQ.2) THEN      
          CALL JEVEUO(CARACF,'L',JCMCF)
          RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+21-1)
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          RREP(1) = ZR(JCMXF+ZCMXF*(IZONE-1)+14-1)        
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF 
C
      ELSEIF (QUESTI.EQ.'EXCLUSION_PIV_NUL') THEN
        CALL JEVEUO(CARACF,'L',JCMCF)
        RREP(1) = ZR(JCMCF+ZCMCF*(IZONE-1)+22-1)
C
      ELSEIF (QUESTI.EQ.'SANS_GROUP_NO') THEN
        CALL JEVEUO(CARACF,'L',JCMCF) 
        IF (NINT(ZR(JCMCF+ZCMCF*(IZONE-1)+23-1)).EQ.1) THEN
          LREP(1) = .TRUE.
        ELSE
          LREP(1) = .FALSE.
        ENDIF   
C
      ELSEIF (QUESTI.EQ.'SANS_GROUP_NO_FR') THEN
        CALL JEVEUO(CARACF,'L',JCMCF) 
        IF (NINT(ZR(JCMCF+ZCMCF*(IZONE-1)+24-1)).EQ.1) THEN
          LREP(1) = .TRUE.
        ELSE
          LREP(1) = .FALSE.
        ENDIF 
C
      ELSEIF (QUESTI.EQ.'CONTACT_INIT') THEN
        IF (IFORM.EQ.2) THEN
          CALL JEVEUO(CARACF,'L',JCMCF) 
          IF (NINT(ZR(JCMCF+ZCMCF*(IZONE-1)+26-1)).EQ.1) THEN
            LREP(1) = .TRUE.
          ELSE
            LREP(1) = .FALSE.
          ENDIF
        ELSEIF (IFORM.EQ.3) THEN 
          CALL JEVEUO(CARAXF,'L',JCMXF)
          IF (NINT(ZR(JCMXF+ZCMXF*(IZONE-1)+7-1)).EQ.1) THEN
            LREP(1) = .TRUE.
          ELSE
            LREP(1) = .FALSE.
          ENDIF                  
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF      
                                  
C
C ---- INTERROGATION CMDF
C       
      ELSEIF (QUESTI.EQ.'COEF_MATR_FROT')   THEN
        CALL JEVEUO(CARADF,'L',JCMDF ) 
        RREP(1) = ZR(JCMDF+ZCMDF*(IZONE-1)+1-1)

      ELSEIF (QUESTI.EQ.'E_N')   THEN
        CALL JEVEUO(CARADF,'L',JCMDF ) 
        RREP(1) = ZR(JCMDF+ZCMDF*(IZONE-1)+2-1)

      ELSEIF (QUESTI.EQ.'E_T')   THEN
        CALL JEVEUO(CARADF,'L',JCMDF ) 
        RREP(1) = ZR(JCMDF+ZCMDF*(IZONE-1)+3-1) 
        
      ELSEIF (QUESTI.EQ.'ALARME_JEU')   THEN
        CALL JEVEUO(CARADF,'L',JCMDF ) 
        RREP(1) = ZR(JCMDF+ZCMDF*(IZONE-1)+5-1)          
         
C
C --- INTERROGATION EXCLFR
C
      ELSEIF (QUESTI.EQ.'EXCL_FROT')   THEN
        CALL JEVEUO(CARACF,'L',JCMCF) 
        LREP(1) = NINT(ZR(JCMCF+ZCMCF*(IZONE-1)+25-1)).EQ.1
                      
      ELSEIF (QUESTI.EQ.'EXCL_FROT_1_DIRX')   THEN
        CALL JEVEUO(EXCLFR,'L',JEXCLF) 
        RREP(1) = ZR(JEXCLF+ZEXCL*(IZONE-1)+1-1)
      ELSEIF (QUESTI.EQ.'EXCL_FROT_1_DIRY')   THEN
        CALL JEVEUO(EXCLFR,'L',JEXCLF) 
        RREP(1) = ZR(JEXCLF+ZEXCL*(IZONE-1)+2-1)
      ELSEIF (QUESTI.EQ.'EXCL_FROT_1_DIRZ')   THEN
        CALL JEVEUO(EXCLFR,'L',JEXCLF) 
        RREP(1) = ZR(JEXCLF+ZEXCL*(IZONE-1)+3-1)        
C
      ELSEIF (QUESTI.EQ.'EXCL_FROT_2_DIRX')   THEN
        CALL JEVEUO(EXCLFR,'L',JEXCLF) 
        RREP(1) = ZR(JEXCLF+ZEXCL*(IZONE-1)+4-1)
      ELSEIF (QUESTI.EQ.'EXCL_FROT_2_DIRY')   THEN
        CALL JEVEUO(EXCLFR,'L',JEXCLF) 
        RREP(1) = ZR(JEXCLF+ZEXCL*(IZONE-1)+5-1)
      ELSEIF (QUESTI.EQ.'EXCL_FROT_2_DIRZ')   THEN
        CALL JEVEUO(EXCLFR,'L',JEXCLF) 
        RREP(1) = ZR(JEXCLF+ZEXCL*(IZONE-1)+6-1)  
C
      ELSE
        WRITE(6,*) '   NUM. ZONE    : <',IZONE  ,'>'
        WRITE(6,*) '   QUESTION     : <',QUESTI ,'>'
        WRITE(6,*) '   REPONSE  - I : <',IREP(1),'>'
        WRITE(6,*) '   REPONSE  - R : <',RREP(1),'>'
        WRITE(6,*) '   REPONSE  - L : <',LREP(1),'>'            
        CALL ASSERT(.FALSE.)
      ENDIF            
C
      CALL JEDEMA()
      END
