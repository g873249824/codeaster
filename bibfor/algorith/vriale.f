      SUBROUTINE VRIALE ( )
      IMPLICIT   NONE
C-----------------------------------------------------------------------
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 16/01/2002   AUTEUR DURAND C.DURAND 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
C
C  BUT: VERIFICATIONS SYNTAXIQUES POUR
C        LE CALCUL DYNAMIQUE ALEATOIRE
C
C-----------------------------------------------------------------------
C     ----- DEBUT COMMUNS NORMALISES  JEVEUX  --------------------------
      INTEGER          ZI
      COMMON  /IVARJE/ ZI(1)
      REAL*8           ZR
      COMMON  /RVARJE/ ZR(1)
      COMPLEX*16       ZC
      COMMON  /CVARJE/ ZC(1)
      LOGICAL          ZL
      COMMON  /LVARJE/ ZL(1)
      CHARACTER*8      ZK8
      CHARACTER*16            ZK16
      CHARACTER*24                    ZK24
      CHARACTER*32                            ZK32
      CHARACTER*80                                    ZK80
      COMMON  /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C     -----  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------
C
      INTEGER       IBID, NBAMOR, NBMODE, NINDEX, NBINDI, NBINDJ,
     +              NBCMPI, NBCMPJ, NNOEEX, NVASEX, NCMPEX, NMOST1,
     +              NAPEXC
      REAL*8        R8B, FREMIN, FREMAX
      CHARACTER*4   EXCMOD
      CHARACTER*8   K8B, INTREP
      CHARACTER*16  TYCONC, NOMCMD, GRAEXC
C     ------------------------------------------------------------------
C
      CALL GETRES(INTREP,TYCONC,NOMCMD)
C
C---NB MODES=NB AMORTISSEMENTS
C
      CALL GETVR8 ( 'BASE_MODALE', 'AMOR_REDUIT' , 1,1,0, R8B , NBAMOR )
      CALL GETVIS ( 'BASE_MODALE', 'NUME_ORDRE', 1,1,0, IBID, NBMODE )
      NBAMOR = -NBAMOR
      NBMODE = -NBMODE
      IF ( NBAMOR.NE.0 .AND. NBAMOR.NE.NBMODE ) THEN
         CALL UTMESS('E',NOMCMD,'LE NOMBRE D''AMORTISSEMENT MODAUX '//
     &               'EST DIFFERENT DU NOMBRE DE MODES DYNAMIQUES')
      ENDIF
C
      CALL GETVTX ( 'EXCIT', 'MODAL'       , 1,1,1, EXCMOD, IBID   )
      CALL GETVIS ( 'EXCIT', 'NUME_ORDRE_I', 1,1,0, IBID  , NINDEX )
      CALL GETVTX ( 'EXCIT', 'GRANDEUR'    , 1,1,1, GRAEXC, IBID   )
      CALL GETVIS ( 'EXCIT', 'NUME_ORDRE_I', 1,1,0, IBID  , NBINDI )
      CALL GETVIS ( 'EXCIT', 'NUME_ORDRE_J', 1,1,0, IBID  , NBINDJ )
C
C--- COHERENCE ENTRE LES MODES ET L'INTERSPECTRE DE LA FONCTION 
C                                  ACCEPTANCE
C
      NINDEX = -NINDEX
      IF ( EXCMOD.EQ.'OUI' .AND. NBMODE.NE.NINDEX ) THEN
         CALL UTMESS('A',NOMCMD,'IL N Y A PAS LE MEME NOMBRE DE MODES'//
     &      ' RETENUS DANS L''EXCITATION MODALE ET DANS LA BASE MODALE')
      ENDIF
C
C---NNOEEX=NINDEX OU NNOEEX=2*NINDEX
C
      IF ( NBINDI .EQ. 0 ) THEN
         CALL GETVID ( 'EXCIT', 'NOEUD_I'  , 1,1,0, K8B, NBINDI )
         CALL GETVID ( 'EXCIT', 'NOEUD_J'  , 1,1,0, K8B, NBINDJ )
         CALL GETVTX ( 'EXCIT', 'NOM_CMP_I', 1,1,0, K8B, NBCMPI )
         CALL GETVTX ( 'EXCIT', 'NOM_CMP_J', 1,1,0, K8B, NBCMPJ )
         IF ( NBCMPI .NE. NBCMPJ ) THEN
            CALL UTMESS('E',NOMCMD,'IL FAUT AUTANT DE CMP EN I ET J')
         ENDIF
         IF ( NBCMPI .NE. NBINDI ) THEN
            CALL UTMESS('E',NOMCMD,'IL FAUT AUTANT DE CMP QUE DE NOEUD')
         ENDIF
      ENDIF
      IF ( NBINDJ .NE. NBINDI ) THEN
         CALL UTMESS('E',NOMCMD,'IL FAUT AUTANT D''INDICES EN I ET J')
      ENDIF
      NINDEX = -NBINDI
C
      CALL GETVID ( 'EXCIT', 'NOEUD', 1,1,0, K8B, NNOEEX )
      NNOEEX = -NNOEEX
      IF ( NNOEEX .NE. 0 ) NAPEXC = NNOEEX
C
      CALL GETVID ( 'EXCIT', 'CHAM_NO', 1,1,0, K8B, NVASEX )
      NVASEX = -NVASEX
      IF ( NVASEX .NE. 0 ) THEN
         NAPEXC = NVASEX
         GRAEXC = 'EFFO'
      ENDIF
C
      IF ( (GRAEXC.EQ.'SOUR_PRESS').OR.(GRAEXC.EQ.'SOUR_FORCE')) THEN
         IF ( NNOEEX .NE. 2*NINDEX ) THEN
            CALL UTMESS('E',NOMCMD,'AVEC SOUR_PRESS ET SOUR_FORCE '//
     &                     'IL FAUT DEUX POINTS/DDLS D''APPLICATION')
         ENDIF
      ELSEIF ((NAPEXC.NE.NINDEX).AND.(EXCMOD.EQ.'NON')) THEN
         CALL UTMESS('E',NOMCMD,'MAUVAIS ACCORD ENTRE NOMBRE D APPUIS'//
     &            ' ET NOMBRE DE VALEUR DANS LE MOT-CLEF: NUME_ORDRE_I')
      ENDIF
C
C------NNOEEX=NCMPEX
C
      CALL GETVTX ( 'EXCIT', 'NOM_CMP', 1,1,0, K8B, NCMPEX )
      NCMPEX = -NCMPEX
      IF ( NNOEEX .NE. NCMPEX ) THEN
         CALL UTMESS('E',NOMCMD, 'IL FAUT AUTANT DE NOM DE '//
     &                           'COMPOSANTE QUE DE NOM DE NOEUD')
      ENDIF  
C
C---PRESENCE DE MODE STATIQUE QUAND ON EST EN DEPL IMPOSE
C
      CALL GETVID ( ' ', 'MODE_STAT', 0,1,0, K8B, NMOST1 )
      IF ((GRAEXC.EQ.'DEPL_R').AND.(NMOST1.EQ.0).AND.(NVASEX.EQ.0))THEN
         CALL UTMESS('E',NOMCMD,' VOUS AVEZ OUBLIE DE PRECISER '//
     &                          'LE MODE STATIQUE')
      ELSEIF ( (GRAEXC.NE.'DEPL_R').AND.(NMOST1.NE.0) ) THEN
         CALL UTMESS('E',NOMCMD,' MODE STATIQUE NON- NECESSAIRE')
      ENDIF
C
C---FREMIN < FREMAX
C
      CALL GETVR8 ( 'REPONSE', 'FREQ_MIN', 1,1,0, R8B, IBID )
      IF ( IBID .NE. 0 ) THEN
         CALL GETVR8 ( 'REPONSE', 'FREQ_MIN', 1,1,1, FREMIN, IBID )
      ENDIF
      CALL GETVR8 ( 'REPONSE', 'FREQ_MAX', 1,1,0, R8B, IBID )
      IF ( IBID .NE. 0 ) THEN
         CALL GETVR8 ( 'REPONSE', 'FREQ_MAX', 1,1,1, FREMAX, IBID )
         IF ( FREMIN .GE. FREMAX ) THEN
            CALL UTMESS('E',NOMCMD,'LA FREQUENCE MINI DOIT ETRE '//
     &                        'ETRE PLUS FAIBLE QUE LA FREQUENCE MAX')
         ENDIF
      ENDIF
C
      END
