      SUBROUTINE NMINCR(SDDYNA,DDINCR,COEDEP,COEVIT,COEACC,
     &                  DDDEPL,DDVITE,DDACCE)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 13/06/2012   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
C (AT YOUR OPTION) ANY LATER VERSION.                                   
C                                                                       
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
C                                                                       
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.         
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT NONE
      INCLUDE 'jeveux.h'
      CHARACTER*19 SDDYNA
      REAL*8       COEDEP,COEVIT,COEACC
      CHARACTER*19 DDINCR
      CHARACTER*19 DDDEPL,DDVITE,DDACCE
      
C 
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME - CALCUL)
C
C CONVERSION INCREMENT dINCR VENANT DE K.dINCR = F EN
C dU,dV,dA  SUIVANT SCHEMAS
C      
C ----------------------------------------------------------------------
C
C dU = COEDEP.DINCR
C dV = COEVIT.DINCR
C dA = COEACC.DINCR
C
C EN EXPLICITE PURE, CE NE SONT PAS DES INCREMENTS MAIS DIRECTEMENT
C LA SOLUTION EN N+1
C 
C
C IN  SDDYNA : SD DYNAMIQUE
C IN  DDINCR : INCREMENT SOLUTION DE K.DDINCR = F
C IN  COEDEP : COEF. POUR INCREMENT DEPLACEMENT
C IN  COEVIT : COEF. POUR INCREMENT VITESSE
C IN  COEACC : COEF. POUR INCREMENT ACCELERATION
C OUT DDDEPL : INCREMENT DEPLACEMENT
C OUT DDVITE : INCREMENT VITESSE
C OUT DDACCE : INCREMENT ACCELERATION
C
C
C
C
      LOGICAL      NDYNLO,LSTAT,LDYNA
      LOGICAL      LDEPL,LVITE,LACCE 
      INTEGER      NDYNIN   
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- FONCTIONNALITES ACTIVEES
C
      LSTAT  = NDYNLO(SDDYNA,'STATIQUE')
      LDYNA  = NDYNLO(SDDYNA,'DYNAMIQUE') 
C
C --- TYPE DE FORMULATION SCHEMA DYNAMIQUE GENERAL
C
      IF (LSTAT) THEN
        LDEPL = .TRUE.
        LVITE = .FALSE.
        LACCE = .FALSE.
      ELSEIF (LDYNA) THEN
        LDEPL = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.1
        LVITE = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.2
        LACCE = NDYNIN(SDDYNA,'FORMUL_DYNAMIQUE').EQ.3     
      ELSE
        CALL ASSERT(.FALSE.)    
      ENDIF
C
C --- CALCUL DES INCREMENTS
C
      IF (LDEPL) THEN
        CALL COPISD('CHAMP_GD','V',DDINCR,DDDEPL)
        IF (COEVIT.NE.0.D0) THEN
          CALL VTZERO(DDVITE)
          CALL VTAXPY(COEVIT,DDINCR,DDVITE)  
        ENDIF  
        IF (COEACC.NE.0.D0) THEN
          CALL VTZERO(DDACCE)
          CALL VTAXPY(COEACC,DDINCR,DDACCE)
        ENDIF                       
      ELSEIF (LVITE) THEN
        CALL COPISD('CHAMP_GD','V',DDINCR,DDVITE)
        CALL VTZERO(DDDEPL)
        CALL VTZERO(DDACCE)
        CALL VTAXPY(COEDEP,DDINCR,DDDEPL)
        CALL VTAXPY(COEACC,DDINCR,DDACCE)      
      
      ELSEIF (LACCE) THEN
        CALL COPISD('CHAMP_GD','V',DDINCR,DDACCE)
        CALL VTZERO(DDDEPL)
        CALL VTZERO(DDVITE)
        CALL VTAXPY(COEDEP,DDINCR,DDDEPL)
        CALL VTAXPY(COEVIT,DDINCR,DDVITE)      
      
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
      
C      
      CALL JEDEMA()
      END
