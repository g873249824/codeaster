      SUBROUTINE DIDECO(SDDISC,NUMINS,SDCRIT,FDECUP,RETOUR)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 23/09/2008   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE MABBAS M.ABBAS
C
      IMPLICIT NONE
      INTEGER      NUMINS,RETOUR,FDECUP
      CHARACTER*19 SDDISC,SDCRIT
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME)
C
C DECOUPAGE DU PAS DE TEMPS
C
C ----------------------------------------------------------------------
C
C
C IN  SDDISC : SD DISCRETISATION
C IN  NUMINS : NUMERO D'INSTANTS
C IN  SDCRIT : SD CRITERE
C IN  FDECUP : FORCE LA SUBDIVISION
C                 -1 = APPEL AU DEBUT D'OP0070
C                  1 = FORCE LA SUBDIVISION
C OUT RETOUR : CODE RETOUR
C                  0 = LA SUBDIVISION S'EST BIEN PASSEE
C                  1 = SUBDIVISION NON DEMANDE
C                  2 = FINESSE MAXIMALE ATTEINTE : SUBDIVISION INTERDITE
C                  3 = ON AUTORISE DES ITERATIONS EN PLUS
C
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      NBITER,NBNIVO,NBIGNO, NBFIN
      INTEGER      ITERAT,IRET
      INTEGER      DININS
      INTEGER      FREARC,NBRPAS
      REAL*8       PASMIN,RATIO,INSTAM,INSTAP,DELTAT
      REAL*8       DIINST
      CHARACTER*16 METHOD
      REAL*8       MXITER
      INTEGER      DEPART,LENIVO
      LOGICAL      LEXTRA
      REAL*8       VALRM(4)
      INTEGER      VALIM(2)
      CHARACTER*40 VALKM(1)
      CHARACTER*24 TPSMET,TPSDII,TPSERR
      INTEGER      JMETH ,JINFO ,JERRE ,JCRR
C      
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C    
C --- INITIALISATIONS
C
      RETOUR = 0
C
C --- ACCES SD LISTE D'INSTANTS
C    
      TPSMET = SDDISC(1:19)//'.METH'  
      TPSDII = SDDISC(1:19)//'.DIIR'
      TPSERR = SDDISC(1:19)//'.ERRE' 
      CALL JEVEUO(TPSMET,'L',JMETH )  
      CALL JEVEUO(TPSDII,'L',JINFO )  
      CALL JEVEUO(TPSERR,'L',JERRE )          
C
C --- NOM DE LA METHODE DE SUBDIVISION
C      
      METHOD = ZK16(JMETH)
C
C --- PAS DE SUBDIVISION AUTORISEE: ON SORT
C      
      IF (METHOD(1:6) .EQ. 'AUCUNE' ) THEN
        RETOUR = 1
        GOTO 9999
      ENDIF
C
C --- ERREUR DES CRITERES DE CONVERGENCE :  +O = ITERAT
C
      CALL JEEXIN(SDCRIT(1:19)//'.CRTR',IRET)
      IF (IRET.NE.0) THEN
        CALL JEVEUO(SDCRIT(1:19)//'.CRTR','L',JCRR)
        ITERAT = NINT(ZR(JCRR))
      ELSE
        RETOUR = 1
        GOTO 9999
      ENDIF
C
C --- CRITERES NBITER = MAX(ITER_GLOB_MAXI,ITER_GLOB_ELAS)
C
      NBITER = NINT(ZR(JERRE+1))
      IF (NBITER .EQ. 0) THEN
        RETOUR = 1
        GOTO 9999
      ENDIF
C
C --- LECTURE DES INFOS SUR LE PAS DE TEMPS
C
      INSTAM = DIINST(SDDISC,NUMINS-1)
      INSTAP = DIINST(SDDISC,NUMINS)
      DELTAT = INSTAP-INSTAM
C
C --- LECTURE DES INFOS SUR LES CONVERGENCES : CF NMCRSU
C
      MXITER = ZR(JERRE + 3) 
C
C --- ARGUMENTS DE LA SUBDIVISION
C
C     ZR(JINFO-1 + 2) <===> 'FREQUENCE ARCHIVAGE'
C     ZR(JINFO-1 + 3) <===> 'SUBD_PAS'
C     ZR(JINFO-1 + 4) <===> 'SUBD_PAS_MINI'
C     ZR(JINFO-1 + 5) <===> 'SUBD_COEF_PAS_1'
C     ZR(JINFO-1 + 6) <===> 'SUBD_NIVEAU'
C     ZR(JINFO-1 + 7) <===> 'SUBD_ITER_IGNO'
C     ZR(JINFO-1 + 8) <===> 'SUBD_ITER_FIN'
C
      FREARC = NINT(ZR(JINFO-1+2))
      NBRPAS = NINT(ZR(JINFO-1+3))
      PASMIN =      ZR(JINFO-1+4)
      RATIO  =      ZR(JINFO-1+5)
      NBNIVO = NINT(ZR(JINFO-1+6))
      NBIGNO = NINT(ZR(JINFO-1+7))
      NBFIN  = NINT(ZR(JINFO-1+8))
      LENIVO = DININS(SDDISC,NUMINS)
C
C --- NIVEAU MAXIMUM DE REDECOUPAGE ATTEINT
C
      IF (( NBNIVO .GT. 1 ).AND.(LENIVO.GT.NBNIVO) ) THEN
        VALIM(1) = LENIVO
        VALIM(2) = NBNIVO
        CALL U2MESI('I','SUBDIVISE_12',2,VALIM)
        RETOUR = 2
        GOTO 9999
      ENDIF
C
C --- TAILLE DE PAS MINIMALE ATTEINTE AVANT LA NOUVELLE SUBDIVISION
C    
      IF (DELTAT .LT. PASMIN) THEN
        VALKM(1) = 'Avant la nouvelle subdivision'
        CALL U2MESK('I','SUBDIVISE_13',1,VALKM)
        VALKM(1) = METHOD
        VALIM(1) = LENIVO-1
        VALRM(1) = DELTAT
        VALRM(2) = PASMIN
        CALL U2MESG('I','SUBDIVISE_15',1,VALKM,1,VALIM,2,VALRM)
        RETOUR = 2
        GOTO 9999
      END IF
C
C --- ON DEPASSE ITER_GLOB_MAXI OU ITER_GLOB_ELAS
C
      IF (ITERAT .GT. MXITER) THEN
        IF ( METHOD(1:7) .EQ. 'EXTRAP_' ) THEN
          METHOD = 'AUCUNE'
          RATIO  = 24.0D0/((3.0D0*NBRPAS+1.D0)**2 - 1.D0)
        ELSE
          METHOD = 'AUCUNE'
          RATIO  = 1.D0
        ENDIF
        VALIM(1) = NBRPAS
        VALIM(2) = LENIVO
        VALRM(1) = RATIO
        VALRM(2) = DELTAT
        CALL U2MESG('I','SUBDIVISE_10',0,VALKM,2,VALIM,2,VALRM)
        GOTO 8888
      ENDIF
C
C --- DANS LE CAS OU L'ON A SUBDIVISE ET QUE L'ON A PLUSIEURS NIVEAUX
C --- DE DIFFERENCE AVEC LE PAS SUIVANT. CELA CORRESPOND AU 1ER APPEL
C --- A DIDECO DANS OP0070 (DEBUT DU PAS DE TEMPS)
C
      IF ((FDECUP .EQ. -1).AND.(METHOD(1:8).NE.'UNIFORME')) THEN
        METHOD = 'AUCUNE'
        RATIO  = 1.D0
        GOTO 8888
      ENDIF
C      
C --- FORCE LA SUBDIVISION
C
      IF ( FDECUP .EQ. 1 ) THEN
        METHOD   = 'AUCUNE'
        RATIO    = 1.D0
        VALIM(1) = NBRPAS
        VALIM(2) = LENIVO
        VALRM(1) = RATIO
        VALRM(2) = DELTAT
        CALL U2MESG('I','SUBDIVISE_14',0,VALKM,2,VALIM,2,VALRM)
        GOTO 8888
      ENDIF
C
C --- SI LA METHODE UTILISE L'EXTRAPOLATION
C --- ON NE L'ACTIVE QUE SI SUBD_ITER_IGNO/SUBD_ITER_FIN OK
C
      LEXTRA = .FALSE.
      IF (     (METHOD(1:11).EQ.'EXTRAP_IGNO').AND.
     &         ((NBIGNO+3).LE.ITERAT) ) THEN
        LEXTRA = .TRUE.
        DEPART = NBIGNO
      ELSEIF ( (METHOD(1:10).EQ.'EXTRAP_FIN').AND.
     &         ((NBFIN+3).LE.ITERAT) ) THEN
        LEXTRA = .TRUE.
        DEPART = ITERAT - NBFIN
      ENDIF
      
      IF (LEXTRA) THEN      
        CALL NMDCEX(SDDISC,ITERAT,DELTAT,LENIVO,DEPART,
     &              NBRPAS,RATIO ,RETOUR)
      ENDIF
      IF (RETOUR.EQ.3) GOTO 9999
C
8888  CONTINUE
C
C --- SUBDIVISION
C
      CALL NMIMPR('IMPR','SUBDIVISE',' ',0.D0,NBRPAS)
C
C --- EXTENSION DE LA LISTE D'INSTANTS
C
      CALL NMDCEI(SDDISC,METHOD,NUMINS,INSTAM,DELTAT,
     &            LENIVO,PASMIN,NBRPAS,RATIO ,RETOUR)
      IF (RETOUR.EQ.2) THEN
        GOTO 9999
      ENDIF
C
C --- EXTENSION DE LA LISTE D'ARCHIVAGE
C   
      CALL NMDCEA(SDDISC,NUMINS,NBRPAS,FREARC)
C
9999  CONTINUE
C
      CALL JEDEMA()

      END
