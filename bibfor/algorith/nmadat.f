      SUBROUTINE NMADAT(SDDISC,NUMINS,NBITER,VALINC,FINPAS)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 12/07/2011   AUTEUR ABBAS M.ABBAS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE GENIAUT S.GENIAUT
C
      IMPLICIT NONE
      CHARACTER*19 VALINC(*)
      CHARACTER*19 SDDISC
      INTEGER      NUMINS,NBITER
      LOGICAL      FINPAS
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (ALGORITHME)
C
C GESTION DE L'ADAPTATION DE PAS DE TEMPS
C   CALCUL DE DTPLUS
C
C ----------------------------------------------------------------------
C
C
C IN  SDDISC : SD DISCRETISATION TEMPORELLE
C IN  NUMINS : NUMERO D'INSTANT
C IN  NBITER : NOMBRE D'ITERATIONS DE NEWTON
C IN  VALINC : VARIABLE CHAPEAU POUR INCREMENTS VARIABLES
C OUT FINPAS : .TRUE. SI ON NE FAIT PLUS D'AUTRES PAS DE TEMPS
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      INTEGER ZI
      COMMON /IVARJE/ ZI(1)
      REAL*8 ZR
      COMMON /RVARJE/ ZR(1)
      COMPLEX*16 ZC
      COMMON /CVARJE/ ZC(1)
      LOGICAL ZL
      COMMON /LVARJE/ ZL(1)
      CHARACTER*8 ZK8
      CHARACTER*16 ZK16
      CHARACTER*24 ZK24
      CHARACTER*32 ZK32
      CHARACTER*80 ZK80
      COMMON /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------
C
      INTEGER      IFM,NIV
      INTEGER      IBID,NADAPT,IADAPT,JDT,NIPO,IPO
      CHARACTER*19 METLIS,MODETP,DTPLUS
      CHARACTER*8  K8BID
      REAL*8       R8BID,R8MAEM,DT,MIN,PASMIN,PASMAX,DIINST,DTM,PIPO
      REAL*8       NEWINS,NEWDT
      REAL*8       INST,R8VIDE,PREC
      LOGICAL      LADAP,DIADAP,UNCROK
      CHARACTER*24 TPSITE,TPSIPO
      INTEGER      JITER,JIPO
      INTEGER      NBINI,NMAX,INSPAS
      LOGICAL      COMPR8
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
      CALL INFDBG('MECA_NON_LINE',IFM,NIV)
C
C --- INITIALISATIONS
C
      DTPLUS = '&&NMADAP.DTPLUS'
C
C --- PARAMETRES
C
      CALL UTDIDT('L'   ,SDDISC,'LIST',IBID  ,'PAS_MINI',
     &            PASMIN,IBID  ,K8BID )
      CALL UTDIDT('L'   ,SDDISC,'LIST',IBID  ,'PAS_MAXI',
     &            PASMAX,IBID  ,K8BID )
      CALL UTDIDT('L'   ,SDDISC,'LIST',IBID  ,'METHODE' ,
     &            R8BID ,IBID  ,METLIS)
      CALL UTDIDT('L'   ,SDDISC,'LIST',IBID  ,'NBINST'  ,
     &            R8BID ,NBINI ,K8BID )
      CALL UTDIDT('L'   ,SDDISC,'LIST',IBID  ,'NB_PAS_MAXI',
     &            R8BID ,NMAX  ,K8BID )
C
C --- NOM SDS DE LA SDDISC
C     
      TPSITE = SDDISC(1:19)//'.ITER'
      TPSIPO = SDDISC(1:19)//'.LIPO'
C
C --- PRECISION SUR LES INSTANTS
C --- (LIEE A CELLE DE VAL_MIN DE PAS_MINI DANS DEFI_LIST_INST.CAPY)
C
      PREC   = 1.D-12
C
C --- ON NE FAIT DE L'ADAPTATION DE PAS DE TEMPS QU'EN GESTION AUTO
C
      IF (METLIS.EQ.'MANUEL') THEN
        GOTO 9999
      ENDIF  
C
C --- INSTANT COURANT
C
      INST   = DIINST(SDDISC,NUMINS)
C
C --- PROCHAIN INSTANT DE PASSAGE OBLIGATOIRE (JALON) ?
C
      CALL JELIRA(TPSIPO,'LONMAX',NIPO,K8BID)
      CALL JEVEUO(TPSIPO,'L',JIPO)
      DO 10 IPO = 1,NIPO
        IF ( COMPR8(ZR(JIPO-1+IPO),'GT',INST,PREC,1) ) THEN
          PIPO = ZR(JIPO-1+IPO)
          GOTO 20
        ENDIF
        IF (IPO.EQ.NIPO) THEN
C         ON DOIT ETRE AU DERNIER PAS DE TEMPS
C         CAR ON NE TROUVE PLUS D'IPO
          FINPAS = .TRUE.
          GOTO 9999
        ENDIF
 10   CONTINUE

 20   CONTINUE
C
C --- NOMBRE DE SCHEMAS D'ADAPTATION : NADAPT
C
      CALL UTDIDT('L'   ,SDDISC,'LIST',IBID  ,'NADAPT',
     &            R8BID ,NADAPT,K8BID )
C
C --- LISTE DES NADAPT PAS DE TEMPS POSSIBLES
C
      CALL WKVECT(DTPLUS,'V V R',NADAPT,JDT)
C
C --- PAS DE TEMPS PAR DEFAUT (LE DERNIER, SAUF SI JALON) : DTM
C
      CALL UTDIDT('L'   ,SDDISC,'LIST',IBID  ,'DT-',
     &            DTM   ,IBID  ,K8BID )
C
C --- STOCKAGE DU NOMBRE D'ITERATIONS DE NEWTON ET EXTENSION
C
      CALL JEVEUO(TPSITE,'L',JITER)
      ZI(JITER-1+NUMINS) = NBITER
      CALL JUVECA(TPSITE,NBINI+1)
C
C ----------------------------------------------------------------------
C    CALCUL DU PAS DE TEMPS
C ----------------------------------------------------------------------
C     
      CALL U2MESS('I','ADAPTATION_1')
C
      DO 100 IADAPT = 1,NADAPT
C
        CALL UTDIDT('L'   ,SDDISC,'ADAP',IADAPT,'METHODE',
     &              R8BID ,IBID  ,MODETP)
C
        ZR(JDT-1+IADAPT) = R8VIDE()
C 
C ----- DOIT-ON ADAPTER ?
C
        LADAP  = DIADAP(SDDISC,IADAPT)
        IF (LADAP) THEN
          CALL NMCADT(SDDISC,IADAPT,NUMINS,VALINC,ZR(JDT-1+IADAPT))
        ENDIF
        NEWDT  = ZR(JDT-1+IADAPT)
C
C ----- AFFICHAGE
C
        IF (NEWDT .NE. R8VIDE() ) THEN
          CALL U2MESG('I','ADAPTATION_2',1,MODETP,0,0,1,NEWDT)
        ELSE
          CALL U2MESK('I','ADAPTATION_3',1,MODETP)
        ENDIF
 100  CONTINUE
C
C --- ON CHOISIT LE PLUS PETIT DT PARMI LES NADAPT PAS DE TEMPS
C --- POSSIBLES
C --- SI AUCUN CRITERE N'EST VERIFIE, ON PREND LE PAS DE TEMPS "MOINS"
C
      DT     = R8MAEM()
      UNCROK = .FALSE.
      DO 200 IADAPT = 1,NADAPT
        NEWDT  = ZR(JDT-1+IADAPT)
        IF (NEWDT .NE. R8VIDE() ) THEN
          DT     = MIN(DT,NEWDT)
          UNCROK = .TRUE.
        ENDIF
 200  CONTINUE
C
      IF (UNCROK) THEN
        CALL U2MESR('I','ADAPTATION_5',1,DT)
      ELSE
        DT = DTM
        CALL U2MESR('I','ADAPTATION_4',1,DT)
      ENDIF    
C
C --- PROJECTION SUR LES BORNES POUR IMPLEX
C --- (ATTENTION : A FAIRE AVANT L'AJUSTEMENT / PIPO)
C
      IF ((MODETP.EQ.'IMPLEX').OR.(MODETP.EQ.'IMPLEX2')) THEN
        IF (DT.LT.PASMIN) DT = PASMIN
        IF (DT.GT.PASMAX) DT = PASMAX
      ENDIF
C
C --- AJUSTEMENT DE DT EN FONCTION DU PROCHAIN JALON
C
      IF ( COMPR8(INST+DT ,'GT',PIPO,PREC,1) ) THEN
C       LE NOUVEAU PAS DEPASSE LE PROCHAIN IPO :
C       ON FORCE A Y PASSER ET ON N'ENREGISTRE PAS DT
        DT = PIPO-INST
      ELSEIF ( COMPR8(INST+DT ,'GT',PIPO-PASMIN,PREC,1) ) THEN
C       NOUVEAU DE PAS INFERIEUR A PIPO, MAIS TROP PROCHE DE PIPO :
C       ON FORCE A Y PASSER ET ON ENREGISTRE DT
        DT = PIPO-INST
        CALL UTDIDT('E',SDDISC,'LIST',IBID,'DT-',DT,IBID,K8BID)
      ELSE
C       NOUVEAU PAS DE TEMPS OK
C       ON ENREGISTRE DT
        CALL UTDIDT('E',SDDISC,'LIST',IBID,'DT-',DT,IBID,K8BID)
      ENDIF
C
      CALL U2MESR('I','ADAPTATION_6',1,DT)
C
C --- ON VERIFIE LES GARDE FOUS
C
      IF (MODETP(1:6).NE.'IMPLEX') THEN
        IF (DT.LT.PASMIN) CALL U2MESR('F','ADAPTATION_11',1,DT)
        IF (DT.GT.PASMAX) CALL U2MESR('F','ADAPTATION_12',1,DT)
      ENDIF
      IF (NUMINS.GT.NMAX) CALL U2MESS('F','ADAPTATION_13')
C
C --- INSERTION DU NOUVEL INSTANT
C
      INSPAS = 1
      NEWINS = INST+DT
      CALL NMDCEI(SDDISC,NUMINS,NEWINS,NBINI ,INSPAS,
     &            'ADAP',R8BID )
C
 9999 CONTINUE
C
      CALL JEDETR(DTPLUS)
      CALL JEDEMA()
      END
