      SUBROUTINE NMDECC(NOMLIS,LINFO ,OPTDEZ,DELTAT,INSTAM,
     &                  RATIO ,TYPDEC,NBRPAS,DELTAC,DTMIN ,
     &                  RETDEC)
C
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 13/06/2012   AUTEUR COURTOIS M.COURTOIS 
C ======================================================================
C COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
C (AT YOUR OPTION) ANY LATER VERSION.
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
C   1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
C ======================================================================
C RESPONSABLE ABBAS M.ABBAS
C
      IMPLICIT      NONE
      INCLUDE 'jeveux.h'
      CHARACTER*(*) OPTDEZ
      CHARACTER*24  NOMLIS
      CHARACTER*4   TYPDEC
      INTEGER       NBRPAS,RETDEC
      REAL*8        INSTAM,DELTAT,RATIO,DTMIN,DELTAC
      LOGICAL       LINFO
C
C ----------------------------------------------------------------------
C
C ROUTINE MECA_NON_LINE (GESTION DES EVENEMENTS - DECOUPE)
C
C DECOUPE DU PAS DE TEMPS - REMPLISSAGE DE LA LISTE
C
C ----------------------------------------------------------------------
C
C UNIFORME
C  *---*---*---*---*---*---*---*---*
C PROGRESSIF
C  *-------*---*---*---*---*---*---*
C DEGRESSIF
C  *---*---*---*---*---*---*-------*

C
C IN  NOMLIS : NOM DE LA LISTE DES INSTANTS A AJOUTER
C IN  LINFO  : .TRUE. SI ON FAIT UN AFFICHAGE
C IN  OPTDEC : OPTION DE DECOUPE
C     'UNIFORME'   - DECOUPE REGULIERE ET UNIFORME
C     'PROGRESSIF' - DECOUPE EN DEUX ZONES, UN PAS LONG+ UNE SERIE
C                    DE PAS UNIFORMES
C     'DEGRESSIF'  - DECOUPE EN DEUX ZONES, UNE SERIE DE PAS
C                    UNIFORMES + UN PAS LONG
C IN  INSTAM : INSTANT INITIAL
C IN  DELTAT : INCREMENT DE TEMPS
C IN  RATIO  : RATIO DE LA PREMIERE DECOUPE SI NON-UNIFORME
C IN  TYPDEC : TYPE DE DECOUPE
C     'SUBD' - SUBDIVISION PAR UN NOMBRE DE PAS DONNE
C     'DELT' - SUBDIVISION PAR UN INCREMENT DONNE
C I/O DELTAC : INCREMENT DE TEMPS CIBLE
C               SI TYPDEC='SUBD' -> C'EST OUT
C               SI TYPDEC='DELT' -> C'EST IN
C I/O NBRPAS : NOMBRE DE PAS DE TEMPS
C               SI TYPDEC='SUBD' -> C'EST IN
C               SI TYPDEC='DELT' -> C'EST OUT
C OUT DTMIN  : INTERVALLE DE TEMPS MINIMAL SUR LA LISTE CREEE
C OUT RETDEC : CODE RETOUR DECOUPE
C     0 - ECHEC DE LA DECOUPE
C     1 - ON A DECOUPE
C     2 - PAS DE DECOUPE
C
C
C
C
      REAL*8       INST,PASDT,PREMIE,SUIVAN,R8GAEM,VALR(3)
      REAL*8       R8PREM
      INTEGER      IPAS,JINST
      CHARACTER*16 K16BID,OPTDEC
C
C ----------------------------------------------------------------------
C
      CALL JEMARQ()
C
C --- INITIALISATIONS
C
      DTMIN  = R8GAEM()
      OPTDEC = OPTDEZ
      RETDEC = 0
C
C --- CONSTRUCTION DONNEES MANQUANTES
C
      IF (OPTDEC.EQ.'UNIFORME') THEN
        IF (TYPDEC.EQ.'SUBD') THEN
          PASDT  = DELTAT/NBRPAS
        ELSEIF (TYPDEC.EQ.'DELT') THEN
          NBRPAS = NINT(DELTAT/DELTAC)
          PASDT  = DELTAT/NBRPAS
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
      ELSEIF (OPTDEC.EQ.'PROGRESSIF') THEN
        IF (TYPDEC.EQ.'SUBD') THEN
          PREMIE = RATIO*DELTAT
          SUIVAN = ((1.D0-RATIO)*DELTAT)/(NBRPAS-1)
          IF (PREMIE.LE.R8PREM().OR.
     &        SUIVAN.LE.R8PREM()) THEN
            RETDEC = 2
            GOTO 99
          ENDIF
        ELSEIF (TYPDEC.EQ.'DELT') THEN
          CALL ASSERT(.FALSE.)
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
      ELSEIF (OPTDEC.EQ.'DEGRESSIF') THEN
        IF (TYPDEC.EQ.'SUBD') THEN
          PREMIE = ((1.D0-RATIO)*DELTAT)/(NBRPAS-1)
          SUIVAN = RATIO*DELTAT
          IF (PREMIE.LE.R8PREM().OR.
     &        SUIVAN.LE.R8PREM()) THEN
            RETDEC = 2
            GOTO 99
          ENDIF
        ELSEIF (TYPDEC.EQ.'DELT') THEN
          PREMIE = ((1.D0-RATIO)*DELTAT)
          SUIVAN = RATIO*DELTAT
          NBRPAS = NINT(PREMIE/DELTAC) + 1
          PREMIE = DELTAC
          SUIVAN = DELTAT-(NBRPAS-1)*DELTAC
          IF (PREMIE.LE.R8PREM().OR.
     &        SUIVAN.LE.R8PREM()) THEN
            RETDEC = 2
            GOTO 99
          ENDIF   
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- DECOUPE INUTILE ?
C
      IF (NBRPAS.LE.1) THEN
        RETDEC = 2
        GOTO 99
      ENDIF
C
C --- CONSTRUCTION DE LA LISTE
C
      CALL WKVECT(NOMLIS,'V V R',NBRPAS,JINST )
C
C --- REMPLISSAGE DE LA LISTE
C
      INST   = INSTAM
      IF (OPTDEC.EQ.'UNIFORME') THEN
        DO 10 IPAS = 1, NBRPAS
          INST             = INST + PASDT
          ZR(JINST+IPAS-1) = INST
          DTMIN            = MIN(DTMIN ,PASDT)
  10    CONTINUE
      ELSEIF (OPTDEC.EQ.'PROGRESSIF') THEN
        DO 15 IPAS = 1, NBRPAS
          IF (IPAS .EQ. 1) THEN
            PASDT  = PREMIE
          ELSE
            PASDT  = SUIVAN
          ENDIF
          INST             = INST + PASDT
          ZR(JINST+IPAS-1) = INST
          DTMIN            = MIN(DTMIN ,PASDT)
  15    CONTINUE
      ELSEIF (OPTDEC.EQ.'DEGRESSIF') THEN
        DO 20 IPAS = 1, NBRPAS
          IF (IPAS .EQ. NBRPAS) THEN
            PASDT  = SUIVAN
          ELSE
            PASDT  = PREMIE
          ENDIF
          INST             = INST + PASDT
          ZR(JINST+IPAS-1) = INST
          DTMIN            = MIN(DTMIN ,PASDT)
  20    CONTINUE
      ELSE
        CALL ASSERT(.FALSE.)
      ENDIF
C
C --- AFFICHAGE
C
      RETDEC = 1
      IF (LINFO) THEN
        IF (OPTDEC.EQ.'UNIFORME') THEN
          VALR(1) = INSTAM
          VALR(2) = PASDT
          CALL U2MESG('I','SUBDIVISE_10',0,K16BID,1,NBRPAS,2,VALR)
        ELSEIF (OPTDEC.EQ.'PROGRESSIF') THEN
          VALR(1) = INSTAM
          VALR(2) = PREMIE
          VALR(3) = SUIVAN
          CALL U2MESG('I','SUBDIVISE_11',0,K16BID,1,NBRPAS,3,VALR)
        ELSEIF (OPTDEC.EQ.'DEGRESSIF') THEN
          VALR(1) = INSTAM
          VALR(2) = PREMIE
          VALR(3) = SUIVAN
          CALL U2MESG('I','SUBDIVISE_12',0,K16BID,1,NBRPAS,3,VALR)
        ELSE
          CALL ASSERT(.FALSE.)
        ENDIF
      ENDIF
C
  99  CONTINUE
C
      CALL JEDEMA()

      END
