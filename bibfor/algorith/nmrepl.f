      SUBROUTINE NMREPL(MODELE, NUMEDD, MATE  , CARELE, COMREF,
     &                  COMPOR, LISCHA, CNFEXT, PARMET, CARCRI,
     &                  MODEDE, NUMEDE, SOLVDE, PARCRI,
     &                  INST  , ITERAT, VALMOI, POUGD , DEPDEL,
     &                  RESOCO, DDEPLA, VALPLU, CNRESI, CNDIRI,
     &                  CONV  , LICCVG, REAROT, INDRO , SECMBR,
     &                  DINST , PILOTE, ETAN  , ETA   , DEPOLD)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 10/04/2002   AUTEUR VABHHTS J.PELLET 
C TOLE CRP_21
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.				 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
      IMPLICIT NONE
      LOGICAL       REAROT
      INTEGER       ITERAT, LICCVG(2), INDRO
      REAL*8        PARMET(*), CONV(*), INST(3), DINST, ETA, ETAN
      REAL*8        PARCRI(*)
      CHARACTER*8   MODEDE
      CHARACTER*14  PILOTE
      CHARACTER*19  LISCHA, CNRESI, CNDIRI, CNFEXT, SOLVDE
      CHARACTER*24  MODELE, NUMEDD, MATE  , CARELE, COMREF, COMPOR
      CHARACTER*24  CARCRI, VALMOI, POUGD , DDEPLA, VALPLU, DEPDEL
      CHARACTER*24  RESOCO, SECMBR, DEPOLD, NUMEDE

C ----------------------------------------------------------------------
C
C        RECHERCHE LINEAIRE DANS LA DIRECTION DE DESCENTE DDEPLA
C
C                             AVEC PILOTAGE
C
C             INCOMPATIBLE LE CONTACT ET LES LOIS NON LOCALES
C
C ----------------------------------------------------------------------
C
C IN       MODELE K24  MODELE
C IN       NUMEDD K24  NUME_DDL
C IN       MATE   K24  CHAMP MATERIAU
C IN       CARELE K24  CARACTERISTIQUES DES ELEMENTS DE STRUCTURE
C IN       COMREF K24  VARI_COM DE REFERENCE
C IN       COMPOR K24  COMPORTEMENT
C IN       LISCHA K19  L_CHARGES
C IN/JXVAR CNFEXT K19  RESULTANTE DES EFFORTS EXTERIEURS
C                       (RECALCULEE QD DIRECTION DESCENTE = PREDICTION)
C IN       PARMET  R8  PARAMETRES DES METHODES DE RESOLUTION
C IN       CARCRI K24  PARAMETRES DES METHODES D'INTEGRATION LOCALES
C IN  MODEDE K8   MODELE NON LOCAL
C IN  NUMEDE K24  NUME_DDL NON LOCAL
C IN  SOLVDE K19  SOLVEUR NON LOCAL
C IN  PARCRI  R   CRITERES DE CONVERGENCE GLOBAUX
C IN       INST    R8  PARAMETRES INTEGRATION EN TEMPS (T+, DT, THETA)
C IN       ITERAT  I   NUMERO D'ITERATION DE NEWTON
C IN       VALMOI K24  ETAT EN T-
C IN       POUGD  K24  DONNES POUR POUTRES GRANDES DEFORMATIONS
C IN       DEPDEL K24  INCREMENT DE DEPLACEMENT
C IN       RESOCO K24  SD CONTACT
C IN/JXVAR DDEPLA K24  DIRECTION DE DESCENTE REACTUALISEE
C IN/JXVAR VALPLU K24  ETAT EN T+ : SIGPLU ET VARPLU
C IN/JXVAR CNRESI K19  FINT+BT.LAMBDA
C IN/JXVAR CNDIRI K19  BT.LAMBDA
C OUT      CONV    R8  INFORMATIONS SUR LA CONVERGENCE DU CALCUL
C                       (10) ITERATIONS RECHERCHE LINEAIRE
C                       (11) VALEUR DE RHO
C OUT      LICCVG  I   CODE RETOUR DE LA LOI DE COMPORTEMENT
C IN       REAROT  L   VRAI SI GRANDES ROTATIONS
C IN       INDRO   I   ADRESSE POUR GRANDES ROTATIONS
C IN       SECMBR K24  SECONDS MEMBRES
C IN       PILOTE K14  SD PILOTAGE
C IN       DINST   R8  INCREMENT DE TEMPS
C IN       ETAN    R8  ETA_PILOTAGE AU DEBUT DE L'ITERATION
C OUT      ETA     R8  PARAMETRE DE PILOTAGE
C IN       DEPOLD K24  DEPLACEMENT DE L'INSTANT D'AVANT
C
C -------------- DEBUT DECLARATIONS NORMALISEES  JEVEUX ----------------
C
      CHARACTER*32       JEXNUM , JEXNOM , JEXATR
      INTEGER            ZI
      COMMON  / IVARJE / ZI(1)
      REAL*8             ZR
      COMMON  / RVARJE / ZR(1)
      COMPLEX*16         ZC
      COMMON  / CVARJE / ZC(1)
      LOGICAL            ZL
      COMMON  / LVARJE / ZL(1)
      CHARACTER*8        ZK8
      CHARACTER*16                ZK16
      CHARACTER*24                          ZK24
      CHARACTER*32                                    ZK32
      CHARACTER*80                                              ZK80
      COMMON  / KVARJE / ZK8(1) , ZK16(1) , ZK24(1) , ZK32(1) , ZK80(1)
C
C -------------- FIN  DECLARATIONS  NORMALISEES  JEVEUX ----------------

      LOGICAL      GRAND, EXOPT, PBCVG, BMIN, BMAX
      INTEGER      ITEMAX, ITERHO, NEQ, I, ACT, OPT, NOCC, LICOPT
      INTEGER      LICPIL(2), SOL, LICLDC(2), SOLOPT
      INTEGER      JRESI, JDIRI, JDDEPL, JDEPDE, JDEPDT, JFEXT, JDEPM
      INTEGER      JDEPPT, JDEPP, NBEFFE, JPLTK
      INTEGER      NR, POS
      REAL*8       RHOMIN, RHOMAX, RHOEXC, RATCVG, FCVG, FG
      REAL*8       RHOM, RHOOPT, RHO, RHOTMP, F0, FM, F(2), FOPT, X(2)
      REAL*8       R8MAEM, R8PREM, R8GAEM, TR8BID(3)
      REAL*8       R(3), G(3)
      CHARACTER*8  K8BID
      CHARACTER*16 DEFO, CONFIG
      CHARACTER*19 CNREST(2), CNDIRT(2), CNFEPT(2)
      CHARACTER*24 DEPMOI, SIGMOI, COMMOI, TEMMOI, TEMPLU
      CHARACTER*24 DEPDET, DEPPLT, DDEP(2)
      CHARACTER*24 DEPPLU, SIGPLU, VARPLU, COMPLU, VARDEP, LAGDEP
      CHARACTER*24 SIGPLT, VARPLT, VALPLT(8,2), K24BID, K24BLA, TYPILO


      DATA K24BLA                 /' '/
C-----------------------------------------------------------------------


      CALL JEMARQ()


C -- CAS DES FONCTIONS DE PILOTAGE LINEAIRES :
C       RECHERCHE LINEAIRE STANDARD

      CALL JEVEUO (PILOTE // '.PLTK','L',JPLTK)
      TYPILO = ZK24(JPLTK)
      IF (TYPILO.EQ.'DDL_IMPO' ) THEN
        CALL NMRECH(MODELE, NUMEDD, MATE  , CARELE, COMREF,
     &              COMPOR, LISCHA, CNFEXT, PARMET, CARCRI,
     &              MODEDE, NUMEDE, SOLVDE, PARCRI,
     &              INST  , ITERAT, VALMOI, POUGD , DEPDEL,
     &              RESOCO, DDEPLA, VALPLU, CNRESI, CNDIRI,
     &              CONV  , LICCVG, REAROT, INDRO)
        GOTO 9999
      END IF


C -- INITIALISATION

      RHOMIN = -2.D0
      RHOMAX =  2.D0
      RHOEXC =  1.D-3

      CALL DESAGG(VALMOI, DEPMOI, SIGMOI, K24BID, COMMOI,
     &                      K24BID, K24BID, K24BID, K24BID)
      CALL DESAGG(VALPLU, DEPPLU, SIGPLU, VARPLU, COMPLU,
     &                    VARDEP, LAGDEP, K24BID, K24BID)

      ITEMAX = NINT(PARMET(10))
      RATCVG = PARMET(11)
      FOPT   = R8MAEM()
      DEPDET = '&&CNREPL.CHP1'
      DEPPLT = '&&CNREPL.CHP2'
      DDEP(1)= '&&CNREPL.CHP3'
      DDEP(2)= '&&CNREPL.CHP4'

      CALL JEVEUO (DEPMOI(1:19) // '.VALE','E',JDEPM )
      CALL JEVEUO (DEPDEL(1:19) // '.VALE','E',JDEPDE)
      CALL JEVEUO (DEPPLU(1:19) // '.VALE','E',JDEPP )
      CALL JEVEUO (DEPDET(1:19) // '.VALE','E',JDEPDT)
      CALL JEVEUO (DEPPLT(1:19) // '.VALE','E',JDEPPT)
      CALL JELIRA (DEPDEL(1:19) // '.VALE','LONMAX',NEQ,K8BID)


C -- PREPARATION DES ZONES TEMPORAIRES POUR ITERATION COURANTE

C    BUT : CONSERVER LES RESULTATS DE L'INTEGRATION POUR RHO OPTIMAL
C          SANS DUPLIQUER LES SD CORRESPONDANTES A CHAQUE ITERATION

      CNREST(1) =  CNRESI
      CNREST(2) = '&&NMREPL.RESI'
      CNDIRT(1) =  CNDIRI
      CNDIRT(2) = '&&NMREPL.DIRI'
      SIGPLT    = '&&NMREPL.SIGP'
      VARPLT    = '&&NMREPL.VARP'
      CALL AGGLOM(DEPPLT, SIGPLU, VARPLU, COMPLU,
     &            VARDEP, LAGDEP, K24BLA, K24BLA, 6, VALPLT(1,1))
      CALL AGGLOM(DEPPLT, SIGPLT, VARPLT, COMPLU,
     &            VARDEP, LAGDEP, K24BLA, K24BLA, 6, VALPLT(1,2))


C -- CALCUL DE F(RHO=0)

      CALL JEVEUO (CNFEXT // '.VALE','L',JFEXT)
      CALL JEVEUO (CNRESI // '.VALE','L',JRESI)
      F0 = 0.D0
      DO 10 I = 0, NEQ-1
         F0 = MAX(F0 , ABS(ZR(JRESI+I)-ZR(JFEXT+I)) )
  10  CONTINUE
      FCVG = ABS(RATCVG * F0)


C ======================================================================
C                     BOUCLE DE RECHERCHE LINEAIRE
C ======================================================================

      ACT  = 1
      RHO  = 1.D0

      NR   = 2
      R(1) = 0.D0
      R(3) = 1.D0
      G(1) = F0
      POS  = 3
      BMIN = .FALSE.
      BMAX = .FALSE.

      DO 20 ITERHO = 0, ITEMAX


C      CALCUL DE LA NOUVELLE DIRECTION DE DESCENTE
        CALL NMPILO(PILOTE, DINST , RHO   , DEPDEL, DEPOLD,
     &              MODELE, MATE  , COMPOR, VALMOI, 2     ,
     &              NBEFFE, DDEP  , X     , LICPIL)
        F(1) = R8MAEM()
        F(2) = R8MAEM()


        DO 25 SOL = 1, NBEFFE
          ETA = X(SOL) + ETAN*(1-RHO)


C        CALCUL DE L'INCREMENT DE DEPLACEMENT TEMPORAIRE
          CALL JEVEUO (DDEP(SOL)(1:19) // '.VALE','E',JDDEPL)
          CALL MAJOUR (NEQ,REAROT,ZI(INDRO),ZR(JDEPDE),ZR(JDDEPL),
     &               1.D0,ZR(JDEPDT))
          CALL MAJOUR (NEQ,REAROT,ZI(INDRO),ZR(JDEPP ),ZR(JDDEPL),
     &               1.D0,ZR(JDEPPT))


C        REACTUALISATION DES EFFORTS EXTERIEURS (AVEC ETA)
          CALL NMFEXT (NUMEDD, ETA, SECMBR, RESOCO, K24BID, CNFEXT)


C        INTEGRATION DU COMPORTEMENT -> CONTRAINTES ET RESIDUS
          CALL NMFINT (MODELE, NUMEDD, MATE  , CARELE, COMREF,
     &                 COMPOR, LISCHA, CARCRI, POUGD , ITERAT,
     &                 MODEDE, NUMEDE, SOLVDE, PARMET, PARCRI,
     &                 VALMOI, DEPDET, RESOCO, VALPLT(1,ACT),
     &                CNREST(ACT), CNDIRT(ACT), LICLDC(SOL),'RAPH_MECA',
     &                 CONV,K24BID,K24BID,K24BID)

C        ECHEC A L'INTEGRATION DE LA LOI DE COMPORTEMENT
          IF (LICLDC(SOL) .LT. 0) GOTO 25


C        CALCUL DE F(RHO)
          CALL JEVEUO (CNREST(ACT)//'.VALE', 'L', JRESI)
          CALL JEVEUO (CNFEXT     //'.VALE', 'L', JFEXT)
          F(SOL) = 0.D0
          DO 30 I=0, NEQ-1
            F(SOL) = MAX(F(SOL) , ABS( ZR(JRESI+I) - ZR(JFEXT+I)) )
  30      CONTINUE


C        PRISE EN COMPTE D'UN RESIDU OPTIMAL SI NECESSAIRE
          IF (ABS(F(SOL)) .LT. FOPT .AND. ABS(RHO).GT.RHOEXC) THEN
            EXOPT  = .TRUE.
            SOLOPT = SOL
            RHOOPT = RHO
            LICOPT = LICPIL(SOL)
            FOPT   = ABS(F(SOL))
            OPT    = ACT
            ACT    = 3 - ACT
          END IF

 25     CONTINUE

C      RESIDU MINIMAL (QUAND 2 SOLUTIONS)
        FG = MIN(F(1), F(2))

C      ARRET SI SATISFACTION DU CRITERE
        IF (FG .LT. FCVG) GOTO 100

C      PB CVG : S'IL EXISTE DEJA UN RHO OPTIMAL, ON LE CONSERVE
        PBCVG = LICLDC(1).LT.0 .OR. (NBEFFE.EQ.2 .AND. LICLDC(2).LT.0)
        IF (PBCVG) THEN
          IF (EXOPT) GOTO 100
          IF (NBEFFE.EQ.2) THEN
            LICCVG(2) = MIN(LICLDC(1), LICLDC(2))
          ELSE
            LICCVG(2) = LICLDC(1)
          END IF
          GOTO 9999
        END IF



C -- CALCUL DE RHO(N+1) PAR INTERPOLATION QUADRATIQUE AVEC BORNES

        G(POS) = FG
        CALL NMREP2(NR, R, G, FCVG, RHOMIN, BMIN, RHOMAX, BMAX, POS)
        RHO = R(POS)

 20   CONTINUE
      ITERHO = ITEMAX


C -- STOCKAGE DU RHO OPTIMAL ET DES CHAMPS CORRESPONDANTS

 100  CONTINUE


C    CALCUL DE LA DIRECTION DE DESCENTE ET DE ETA_PILOTAGE
      CALL NMPILO(PILOTE, DINST , RHOOPT, DEPDEL, DEPOLD,
     &            MODELE, MATE  , COMPOR, VALMOI, 2     ,
     &            NBEFFE, DDEP, X     , LICPIL)
      ETA = X(SOLOPT) + ETAN*(1-RHOOPT)
      LICOPT = LICPIL(SOLOPT)
      CALL COPISD('CHAMP_GD','V',DDEP(SOLOPT),DDEPLA)

C    CALCUL DES EFFORTS EXTERIEURS
      CALL NMFEXT (NUMEDD, ETA   , SECMBR, RESOCO, K24BID, CNFEXT)

C    RECUPERATION DES VARIABLES EN T+ SI NECESSAIRE
      IF (OPT.NE.1) THEN
        CALL COPISD('CHAMP_GD','V',SIGPLT,SIGPLU)
        CALL COPISD('CHAMP_GD','V',VARPLT,VARPLU)
        CALL COPISD('CHAMP_GD','V',CNREST(OPT),CNRESI)
        CALL COPISD('CHAMP_GD','V',CNDIRT(OPT),CNDIRI)
      END IF

C    INFORMATIONS SUR LA RECHERCHE LINEAIRE
      CONV(10) = ITERHO
      CONV(11) = RHOOPT

      LICCVG(1)   = LICOPT

 9999 CONTINUE
      CALL JEDEMA()
      END
