      SUBROUTINE  LIACAR (NOMRES,SST,INTF,FPLIN,FPLIO,II,ICAR)
      IMPLICIT REAL*8 (A-H,O-Z)
C            CONFIGURATION MANAGEMENT OF EDF VERSION
C MODIF ALGORITH  DATE 25/11/98   AUTEUR CIBHHGB G.BERTRAND 
C ======================================================================
C COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
C THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
C IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
C THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
C (AT YOUR OPTION) ANY LATER VERSION.                                 
C
C THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
C WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
C MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
C GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
C
C YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
C ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
C    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
C ======================================================================
C***********************************************************************
C P. RICHARD     DATE 13/10/92
C-----------------------------------------------------------------------
C    BUT : CALCUL DES CARACTERISTIQUES DES MATRICES DE LIAISON ORIENTEES
C
C          CALCULER LE NOMBRE DE LIGNES, DE COLONNES, ET LE PROFIL
C          LE PROFIL DE LA MATRICE DE LIAISON NON ORIENTEE EST EGALEMENT
C          CALCULE
C          POUR L'INSTANT ON EST A UN BLOC
C-----------------------------------------------------------------------
C
C NOMRES /I/ : NOM UTILISATEUR DU RESULTAT MODELE_GENE
C SST    /I/ : NOM DE LA SOUS-STRUCTURE
C INTF   /I/ : NOM DE L'INTERFACE
C FPLIO  /I/ : FAMILLE DES PROFNO MATRICES DE LIAISON ORIENTEES
C FPLIN  /I/ : FAMILLE DES PROFNO MATRICES DE LIAISON NON ORIENTEES
C II     /I/ : NUMERO INTERFACE COURANTE
C ICAR   /O/ : VECTEUR DES CARACTERISTIQUES LIAISON
C
C-------- DEBUT COMMUNS NORMALISES  JEVEUX  ----------------------------
C
      INTEGER          ZI
      COMMON  /IVARJE/ ZI(1)
      REAL*8           ZR
      COMMON  /RVARJE/ ZR(1)
      COMPLEX*16       ZC
      COMMON  /CVARJE/ ZC(1)
      LOGICAL          ZL
      COMMON  /LVARJE/ ZL(1)
      CHARACTER*8      ZK8
      CHARACTER*16              ZK16
      CHARACTER*24                        ZK24
      CHARACTER*32                                  ZK32
      CHARACTER*80                                            ZK80
      COMMON  /KVARJE/ ZK8(1),ZK16(1),ZK24(1),ZK32(1),ZK80(1)
C
      CHARACTER*32  JEXNOM,JEXNUM
C
C----------  FIN  COMMUNS NORMALISES  JEVEUX  --------------------------
C
C   PARAMETER REPRESENTANT LE NOMBRE MAX DE COMPOSANTES DE LA GRANDEUR
C   SOUS-JACENTE TRAITEE
C
      PARAMETER   (NBCMPM=10)
      CHARACTER*8  NOMRES,SST,INTF,KBID,NOMMCL,BASMOD,NOMG
      CHARACTER*24 FPLIO,FPLIN
      REAL*8       ROT(3),MATROT(NBCMPM,NBCMPM),ZERO,EPSI
      REAL*8       MATBUF(NBCMPM,NBCMPM),MATTMP(NBCMPM,NBCMPM)
      REAL*8       CODN(NBCMPM,NBCMPM),CODW
      INTEGER      IDECO(NBCMPM),IDECN(NBCMPM),ICAR(3),IDECW(NBCMPM)
      INTEGER      IDECW2(NBCMPM)
C
C-----------------------------------------------------------------------
      DATA ZERO /0.0D+00/
      DATA EPSI /1.0D-10/
C-----------------------------------------------------------------------
C
      CALL JEMARQ()
      NTAIL=NBCMPM**2
C
C-----RECUPERATION DU NOMBRE DU NOMBRE D'ENTIERS CODES ASSOCIE A DEPL_R
C
      NOMG = 'DEPL_R'
      CALL DISMOI('F','NB_EC',NOMG,'GRANDEUR',NBEC,KBID,IRET)
      IF (NBEC.GT.10) THEN
         CALL UTMESS('F','ROTLIS',
     +                   'LE DESCRIPTEUR_GRANDEUR DES DEPLACEMENTS'//
     +                    ' NE TIENT PAS SUR DIX ENTIERS CODES')
      ENDIF
C
C --- RECUPERATION DES NOMS DU MACR_ELEM ET DE LA BASE MODALE DE SST
C
      CALL MGUTDM(NOMRES,SST,IBID,'NOM_MACR_ELEM',IBID,NOMMCL)
      CALL MGUTDM(NOMRES,SST,IBID,'NOM_BASE_MODALE',IBID,BASMOD)
C
C --- RECUPERATION DES ROTATIONS DE LA SOUS-STRUCTURE
C
      CALL JENONU(JEXNOM(NOMRES//'      .MODG.SSNO',SST),IBID)
      CALL JEVEUO(JEXNUM(NOMRES//'      .MODG.SSOR',IBID),'L',LLROT)
      DO 10 I=1,3
        ROT(I)=ZR(LLROT+I-1)
10    CONTINUE
C
C --- CALCUL DE LA MATRICE DE ROTATION
C
      CALL INTET0(ROT(1),MATTMP,3)
      CALL INTET0(ROT(2),MATROT,2)
      CALL R8INIR(NTAIL,ZERO,MATBUF,1)
      CALL  PMPPR(MATTMP,NBCMPM,NBCMPM,1,MATROT,NBCMPM,NBCMPM,1,
     &            MATBUF,NBCMPM,NBCMPM)
      CALL INTET0(ROT(3),MATTMP,1)
      CALL  PMPPR(MATBUF,NBCMPM,NBCMPM,1,MATTMP,NBCMPM,NBCMPM,1,
     &            MATROT,NBCMPM,NBCMPM)
C
C --- RECUPERATION DES DONNEES MINI-PROFNO DE LA LIAISON
C
      CALL MGUTDM(NOMRES,SST,IBID,'NOM_BASE_MODALE',IBID,BASMOD)
      KBID=' '
      CALL BMNOIN(BASMOD,KBID,INTF,IBID,0,IBID,NBNOE)
C
      KBID=' '
      CALL EXPRLI(BASMOD,KBID,INTF,IBID,FPLIN,II)
      CALL JEVEUO(JEXNUM(FPLIN,II),'L',LDPRLI)
C
      CALL JECROC(JEXNUM(FPLIO,II))
      CALL JEECRA(JEXNUM(FPLIO,II),'LONMAX',NBNOE*(1+NBEC),' ')
      CALL JEVEUO(JEXNUM(FPLIO,II),'E',LDPROF)

C INITIALISATION
      DO 70 K1=1,NBCMPM
        DO 71 K2=1,NBCMPM
           CODN(K1,K2)=ZERO
71      CONTINUE
70    CONTINUE
C
C --- BOUCLE SUR LES NOEUDS DU MINI-PROFNO POUR REMPLISSAGE ET COMPTAGE
C
      ICOMP=0
      DO 20 I=1,NBNOE
        CALL ISDECO(ZI(LDPRLI+(I-1)*(1+NBEC)+1),IDECO,NBCMPM)
        DO 30 J=1,NBCMPM
C ICI ON FABRIQUE UN VECTEUR D ENTIERS DE CMP 1 SUR LA
C CMP COURANTE 0 AILLEURS
          DO 60 KK=1,NBCMPM
            IF (KK.EQ.J) THEN
              IDECW(KK)=1
            ELSE
              IDECW(KK)=0
            ENDIF
60        CONTINUE
C ON MULTIPLIE LE VECTEUR D'ENTIERS TRADUISANT LA PRESENCE DES
C CMPS SUR LE NOEUD PAR LE VECTEUR DE TRAVAIL EFFECTUE
C PRECEDEMMENT DE TELLE SORTE QU ON NE FAIT ICI QUE LA ROTATION
C DE LA CMP COURANTE -IE NUMERO J
C LE CRITERE DE PRESENCE DE LA CMP DANS L INTERFACE ORIENTE
C DEVIENT DONC VALABLE- IE IDECN
          DO 80 L=1,NBCMPM
             IDECW2(L)=IDECO(L)*IDECW(L)
80        CONTINUE
          DO 40 K1=1,NBCMPM
            DO 41 K2=1,NBCMPM
              CODN(J,K1)=CODN(J,K1)+MATROT(K1,K2)*IDECW2(K2)
41          CONTINUE
40        CONTINUE
30      CONTINUE
C
        DO 31 K=1,NBCMPM
          CODW=ZERO
          DO 32 J=1,NBCMPM
                CODW=CODW+ABS(CODN(J,K))
32        CONTINUE

         IF(CODW.GT.EPSI) THEN
            IDECN(K)=1
         ELSE
            IDECN(K)=0
         ENDIF
31      CONTINUE
        CALL ISCODE(IDECN,ZI(LDPROF+(I-1)*(NBEC+1)+1),NBCMPM)
        ZI(LDPROF+(I-1)*(NBEC+1))=ICOMP+1
        DO 50 K=1,NBCMPM
          ICOMP=ICOMP+IDECN(K)
50      CONTINUE
20    CONTINUE
      NBLIG=ICOMP
C
      ICAR(1)=NBLIG
      CALL BMNBMD(BASMOD,'TOUT',NBCOL)
      ICAR(2)=NBCOL
C
      CALL JEDEMA()
      END
