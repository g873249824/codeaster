#& MODIF COMMANDE  DATE 30/06/2008   AUTEUR PROIX J-M.PROIX 
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2006  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                  
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# RESPONSABLE PROIX J.M.PROIX
# -*- coding: iso-8859-1 -*-

from Macro.simu_point_mat_ops import simu_point_mat_ops

SIMU_POINT_MAT=MACRO(nom="SIMU_POINT_MAT", op=simu_point_mat_ops,sd_prod=table_sdaster,
                   UIinfo={"groupes":("Résolution",)},
                   fr="Calcul de l'évolution mécanique, en quasi-statique,"
                      +" d'un point matériel en non linéaire",
   COMP_INCR       =C_COMP_INCR(),
   COMP_ELAS       =FACT(statut='f',max='**',
           RESI_INTE_RELA  =SIMP(statut='f',typ='R',defaut= 1.0E-6),
           ITER_INTE_MAXI  =SIMP(statut='f',typ='I',defaut= 10 ),
           RELATION        =SIMP(statut='o',typ='TXM',defaut="ELAS",
                                 into=("ELAS","ELAS_VMIS_LINE","ELAS_VMIS_TRAC",
                                      "ELAS_POUTRE_GR","CABLE","ELAS_HYPER")),
           DEFORMATION     =SIMP(statut='f',typ='TXM',defaut="PETIT" ,into=("PETIT","GREEN","GREEN_GR",) ),
         ),
   MATER           =SIMP(statut='o',typ=mater_sdaster,max=30),
   INCREMENT       =FACT(statut='o',
           LIST_INST       =SIMP(statut='o',typ=listr8_sdaster),
           NUME_INST_INIT  =SIMP(statut='f',typ='I'),
           INST_INIT       =SIMP(statut='f',typ='R'),
           NUME_INST_FIN   =SIMP(statut='f',typ='I'),
           INST_FIN        =SIMP(statut='f',typ='R'),
           PRECISION       =SIMP(statut='f',typ='R',defaut=1.0E-3 ),
           # DEBUT DE BLOC POUR LA SUBDIVISION DES PAS DE TEMPS
           SUBD_METHODE    =SIMP( statut='f',typ='TXM',
              into =("AUCUNE","UNIFORME","EXTRAPOLE"),
              defaut="AUCUNE",
              fr="Méthode de subdivision des pas de temps en cas de non-convergence"
           ),
           b_subd_unif=BLOC(condition = "SUBD_METHODE == 'UNIFORME'",
             regles=(AU_MOINS_UN('SUBD_NIVEAU','SUBD_PAS_MINI'),),
             SUBD_COEF_PAS_1=SIMP(statut='f',typ='R',defaut=1.0,val_min=0.0,
                fr="Coefficient multiplicateur de la 1ère subdivision"),
             SUBD_PAS       =SIMP(statut='f',typ='I',defaut=4,val_min=2,
                fr="Nombre de subdivision d'un pas de temps"),
             SUBD_NIVEAU=SIMP(statut='f',typ='I',val_min=2,
                fr="Nombre maximum de niveau de subdivision d'un pas de temps"),
             SUBD_PAS_MINI=SIMP(statut='f',typ='R',val_min=0.0,
                fr="Pas de temps en dessous duquel on ne subdivise plus"),
           ),
           b_subd_extr=BLOC(condition = "SUBD_METHODE == 'EXTRAPOLE'",
             regles=(AU_MOINS_UN('SUBD_NIVEAU','SUBD_PAS_MINI'),),
             SUBD_OPTION    =SIMP(statut='f',typ='TXM',
                into =("IGNORE_PREMIERES","GARDE_DERNIERES",), 
                defaut="IGNORE_PREMIERES",
                fr="Technique d'extrapolation : les 1ere itérations sont ignorées ou les dernières sont gardées"),
             SUBD_ITER_IGNO =SIMP(statut='c',typ='I',defaut=3,val_min=0,
                fr="Les n premières itérations sont ignorées pour l'extrapolation"),
             SUBD_ITER_FIN  =SIMP(statut='c',typ='I',defaut=8,val_min=3,
                fr="Seules les n dernières itérations sont prises pour l'extrapolation"),
             SUBD_PAS       =SIMP(statut='c',typ='I',defaut=4,val_min=2,
                fr="Nombre de subdivision d'un pas de temps en cas divergence"),
             SUBD_NIVEAU=SIMP(statut='f',typ='I',val_min=2,
                fr="Nombre maximum de niveau de subdivision d'un pas de temps"),
             SUBD_PAS_MINI=SIMP(statut='f',typ='R',val_min=0.0,
                fr="Pas de temps en dessous duquel on ne subdivise plus"),
             SUBD_ITER_PLUS =SIMP(statut='c',typ='I',defaut=50,val_min=20,
                fr="% itération autorisée en plus"),
           ),
           # FIN DE BLOC POUR LA SUBDIVISION DES PAS DE TEMPS 
         ),
   NEWTON          =FACT(statut='d',
           PREDICTION      =SIMP(statut='f',typ='TXM',into=("TANGENTE","ELASTIQUE","EXTRAPOL") ),
           MATRICE         =SIMP(statut='f',typ='TXM',defaut="TANGENTE",into=("TANGENTE","ELASTIQUE") ),
           PAS_MINI_ELAS   =SIMP(statut='f',typ='R',defaut=0.0E+0),
           REAC_ITER       =SIMP(statut='f',typ='I',defaut=1),
           REAC_ITER_ELAS  =SIMP(statut='f',typ='I',defaut=0),
         ),
   RECH_LINEAIRE   =FACT(statut='f',                                          
     RESI_LINE_RELA  =SIMP(statut='f',typ='R',defaut= 1.0E-1 ),               
     ITER_LINE_MAXI  =SIMP(statut='f',typ='I',defaut= 3),                     
     ITER_LINE_CRIT  =SIMP(statut='f',typ='I',defaut= 20),                    
     PAS_MINI_CRIT   =SIMP(statut='f',typ='R',defaut=0.0E+0),                 
     RHO_MIN         =SIMP(statut='f',typ='R',defaut=1.0E-2),                 
     RHO_MAX         =SIMP(statut='f',typ='R',defaut=1.0E+1),                 
     RHO_EXCL        =SIMP(statut='f',typ='R',defaut=0.9E-2,val_min=0.),      
   ),                                                                         
   CONVERGENCE     =FACT(statut='d',
     regles=(PRESENT_ABSENT('RESI_REFE_RELA','RESI_GLOB_MAXI','RESI_GLOB_RELA'),),
     SIGM_REFE       =SIMP(statut='f',typ='R'),
     EPSI_REFE       =SIMP(statut='f',typ='R'),
     RESI_REFE_RELA  =SIMP(statut='f',typ='R'),
     RESI_GLOB_MAXI  =SIMP(statut='f',typ='R'),
     RESI_GLOB_RELA  =SIMP(statut='f',typ='R'),
     ITER_GLOB_MAXI  =SIMP(statut='f',typ='I',defaut=50),
     ITER_GLOB_ELAS  =SIMP(statut='f',typ='I',defaut=25),
     ARRET           =SIMP(statut='f',typ='TXM',defaut="OUI",into=("OUI","NON")),
   ),
   SUIVI_DDL      = FACT(statut='f',max=4,                                                                   
       NUME_SUIVI      =SIMP(statut='o',typ='I' ,min=1,max=4),                                               
       NOM_CHAM        =SIMP(statut='o',typ='TXM',validators=NoRepeat(),max=1,                               
                             into=("DEPL","SIEF_ELGA","VARI_ELGA",)),                                        
       NOM_CMP         =SIMP(statut='o',typ='TXM',max=1 ),                                                   
   ),                                                                                                        
   ARCHIVAGE       =FACT(statut='f',
     regles=(EXCLUS('PAS_ARCH','LIST_INST','INST'),
            EXCLUS('ARCH_ETAT_INIT','NUME_INIT'), ),  
     LIST_INST       =SIMP(statut='f',typ=(listr8_sdaster) ),                                                 
     INST            =SIMP(statut='f',typ='R',validators=NoRepeat(),max='**' ),
     PAS_ARCH        =SIMP(statut='f',typ='I' ),
     PRECISION       =SIMP(statut='f',typ='R',defaut= 1.0E-3),
     ARCH_ETAT_INIT  =SIMP(statut='f',typ='TXM',into=("OUI",)),
     NUME_INIT       =SIMP(statut='f',typ='I'),
     DETR_NUME_SUIV  =SIMP(statut='f',typ='TXM',into=("OUI",)),
     CHAM_EXCLU      =SIMP(statut='f',typ='TXM',validators=NoRepeat(),max='**',
            into=("DEPL","SIEF_ELGA","VARI_ELGA","LANL_ELGA")),
            ),       
   MODELISATION  =SIMP(statut='f',typ='TXM',defaut="3D",validators=NoRepeat(),max=1,
                       into=("3D","C_PLAN","D_PLAN",)),                                                       
   b_3D = BLOC(condition="MODELISATION ==  '3D'",
                       fr="Trajets de chargement en 3D",                    
          SIGM_IMPOSE=FACT(statut='f',
                 SIXX = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 SIYY = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 SIZZ = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 SIXY = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 SIXZ = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 SIYZ = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                            ),
          EPSI_IMPOSE=FACT(statut='f',
                 EPXX = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 EPYY = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 EPZZ = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 EPXY = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 EPXZ = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                 EPYZ = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                            ),
            ),
            
   b_2D = BLOC(condition="MODELISATION !=  '3D'",
                    fr="Trajets de chargement en 2D",
                    
         SIGM_IMPOSE=FACT(statut='f',
                SIXX = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                SIYY = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                SIXY = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                           ),
         EPSI_IMPOSE=FACT(statut='f',
                EPXX = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                EPYY = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                EPXY = SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule) ),
                           ),
             ),

   b_3Dini = BLOC(condition="MODELISATION ==  '3D'",
                      fr="Etat initial en 3D",                    
          SIGM_INIT=FACT(statut='f',
                 SIXX = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                 SIYY = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                 SIZZ = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                 SIXY = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                 SIXZ = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                 SIYZ = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                            ),
          EPSI_INIT=FACT(statut='f',
                 EPXX = SIMP(statut='o',typ='R',max=1),
                 EPYY = SIMP(statut='o',typ='R',max=1),
                 EPZZ = SIMP(statut='o',typ='R',max=1),
                 EPXY = SIMP(statut='o',typ='R',max=1),
                 EPXZ = SIMP(statut='o',typ='R',max=1),
                 EPYZ = SIMP(statut='o',typ='R',max=1),
                            ),
          VARI_INIT=FACT(statut='f',
                 VALE = SIMP(statut='o',typ='R',max='**'),
                            ),
            ),
            
   b_2Dini = BLOC(condition="MODELISATION !=  '3D'",
                    fr="Etat initial en 2D",
                    
         SIGM_INIT=FACT(statut='f',
                SIXX = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                SIYY = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                SIXY = SIMP(statut='f',typ='R',max=1,defaut=0.0E+0),
                           ),
         EPSI_INIT=FACT(statut='f',
                EPXX = SIMP(statut='o',typ='R',max=1),
                EPYY = SIMP(statut='o',typ='R',max=1),
                EPXY = SIMP(statut='o',typ='R',max=1),
                           ),
          VARI_INIT=FACT(statut='f',
                 VALE    = SIMP(statut='o',typ='R',max='**'),
                            ),
             ),
   INFO            =SIMP(statut='f',typ='I',defaut=1,into=(1,2) ),
)

