#& MODIF COMMANDE  DATE 09/09/2003   AUTEUR DURAND C.DURAND 
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
# (AT YOUR OPTION) ANY LATER VERSION.                                 
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
# ======================================================================
# RESPONSABLE G8BHHXD X.DESROCHES
def comb_cham_elem_prod(COMB_R=None,COMB_C=None,COMB_FOURIER=None,**args):

  if COMB_R != None:
    vale=COMB_R.get_child('CHAM_ELEM').get_valeur()
  elif COMB_C != None:
    vale=COMB_C.get_child('CHAM_ELEM').get_valeur()
  elif COMB_FOURIER != None:
    vale=COMB_FOURIER.get_child('CHAM_ELEM').get_valeur()
  else :
    raise AsException("type de concept resultat non prevu")

  if AsType(vale) == cham_elem_sief_r : return cham_elem_sief_r
  if AsType(vale) == cham_elem_flux_r : return cham_elem_flux_r
  if AsType(vale) == cham_elem_epsi_r : return cham_elem_epsi_r
  if AsType(vale) == cham_elem_ener_r : return cham_elem_ener_r
  if AsType(vale) == cham_elem_crit_r : return cham_elem_crit_r
  if AsType(vale) == cham_elem_dbel_r : return cham_elem_dbel_r
  if AsType(vale) == cham_elem_pres_r : return cham_elem_pres_r
  if AsType(vale) == cham_elem_sief_c : return cham_elem_sief_c
  raise AsException("type de concept resultat non prevu")

COMB_CHAM_ELEM=OPER(nom="COMB_CHAM_ELEM",op= 139,sd_prod=comb_cham_elem_prod,reentrant='f',
                    fr="Combinaison linéaire de champs par éléments",docu="U4.72.03-f",
            UIinfo={"groupes":("Résultats et champs",)},
      regles=(UN_PARMI('COMB_R','COMB_C','COMB_FOURIER'),
              PRESENT_PRESENT('COMB_FOURIER','ANGL'),),
      COMB_R          =FACT(statut='f',max='**',
        PARTIE          =SIMP(statut='f',typ='TXM',into=("REEL","IMAG") ),
        COEF_R          =SIMP(statut='o',typ='R'),
        CHAM_ELEM       =SIMP(statut='o',
                              typ=(cham_elem_sief_r,cham_elem_flux_r,cham_elem_epsi_r,
                                   cham_elem_ener_r,cham_elem_crit_r,cham_elem_dbel_r,
                                   cham_elem_pres_r,cham_elem_sief_c ) ),
      ),
      COMB_C          =FACT(statut='f',max='**',
        regles=(UN_PARMI('COEF_R','COEF_C', ),),
        COEF_R          =SIMP(statut='f',typ='R'),
        COEF_C          =SIMP(statut='f',typ='C'),
        CHAM_ELEM       =SIMP(statut='o',typ=(cham_elem_sief_r) ),
      ),
      COMB_FOURIER    =FACT(statut='f',max='**',
        COEF_R          =SIMP(statut='f',typ='R',defaut= 1.),
        NUME_MODE       =SIMP(statut='o',typ='I'),
        TYPE_MODE       =SIMP(statut='o',typ='TXM',into=("SYME","ANTI") ),
        CHAM_ELEM       =SIMP(statut='o',typ=(cham_elem_sief_r,cham_elem_flux_r,cham_elem_epsi_r ) ),
      ),
      ANGL            =SIMP(statut='f',typ='R' ),
)  ;

