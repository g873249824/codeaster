#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# person_in_charge: marina.bottoni at edf.fr


def macr_ecrevisse_prod(self,TABLE,TEMPER,DEBIT,**args):
    # On definit ici les concepts produits
    self.type_sdprod(TABLE,table_sdaster)
    self.type_sdprod(TEMPER,evol_ther)
    self.type_sdprod(DEBIT,table_sdaster)
    # concept retourne
    return evol_noli


MACR_ECREVISSE=MACRO(nom="MACR_ECREVISSE",
                     op=OPS('Macro.macr_ecrevisse_ops.macr_ecrevisse_ops'),
                     sd_prod=macr_ecrevisse_prod,
                     reentrant='f',
                     UIinfo={"groupes":("Résolution","Outils-métier",)},
                     fr="Procedure de couplage avec Ecrevisse",

       reuse  = SIMP(statut='f',typ='evol_noli'),
       regles = (EXCLUS('TEMPER','ETAT_INIT'),
                 UN_PARMI('LOGICIEL','VERSION'),),

#      CONCEPT SORTANT
#      ********************************************
         TABLE              =SIMP(statut='f',typ=CO),
         DEBIT              =SIMP(statut='f',typ=CO),
         TEMPER             =SIMP(statut='f',typ=CO),

#      ETAT_INITIAL
#      ********************************************
         ETAT_INIT       =FACT(statut='f',
             EVOL_NOLI       =SIMP(statut='o',typ=evol_noli),
             EVOL_THER       =SIMP(statut='o',typ=evol_ther),
             NUME_ORDRE      =SIMP(statut='o',typ='I'),
         ),


#      MODELES MECANIQUES
#      ********************************************
         MODELE_MECA        =SIMP(statut='o',typ=modele_sdaster),
         MODELE_THER        =SIMP(statut='o',typ=modele_sdaster),


#      DONNEES GEOMETRIQUES RELATIVES A LA FISSURE
#      *******************************************
         FISSURE            =FACT(statut='o',min=1,max='**',
           PREFIXE_FICHIER     =SIMP(statut='f',typ='TXM',validators=LongStr(1,8)),
           GROUP_MA            =SIMP(statut='o',typ=grma,validators=NoRepeat(),min=2,max=2,
                                     fr="Groupe(s) des noeuds definissant les levres de la fissure"),
           GROUP_NO_ORIG       =SIMP(statut='o',typ=grno,validators=NoRepeat(),min=2,max=2),
           GROUP_NO_EXTR       =SIMP(statut='o',typ=grno,validators=NoRepeat(),min=2,max=2),
           ZETA                =SIMP(statut='o',typ='R',fr="Coefficient de la perte de charge singuliere a l'entree [zeta]" ),
           RUGOSITE            =SIMP(statut='o',typ='R',fr="Rugosite absolu (metres) [eps]" ),
           TORTUOSITE          =SIMP(statut='f',typ='R',defaut=1.0, val_min=0., val_max=1.0,
                                       fr="Coefficient de tortuosite de la fissure" ),
           OUVERT_REMANENTE    =SIMP(statut='o',typ='R',val_min=0.,fr="Ouverture remanente"),
           SECTION             =SIMP(statut='o',typ='TXM',into=("ELLIPSE","RECTANGLE"),fr="Type de section [is]" ),
           b_section_ellipse   =BLOC(condition="SECTION=='ELLIPSE'",fr="Fissure a section elliptique",
             LISTE_COTES_BL      =SIMP(statut='f',typ='R',max='**',
                                       fr="Liste des cotes des points definissant le petit axe de la section",
                                       validators=NoRepeat() ),
             LISTE_VAL_BL        =SIMP(statut='o',typ='R',max='**',
                                       fr="Liste des valeurs des points definissant le petit axe de la section", ),
           ),
           b_section_rectangle =BLOC(condition="SECTION=='RECTANGLE'",fr="Fissure a section rectangulaire",
             LISTE_COTES_BL      =SIMP(statut='f',typ='R',max='**',
                                       fr="Liste des cotes des points definissant la largeur de la section",validators=NoRepeat()),
             LISTE_VAL_BL        =SIMP(statut='o',typ='R',max='**',
                                       fr="Liste des valeurs des points definissant la largeur de la section", ),
           ),
         ),


#      DONNEES RELATIVES A L"ECOULEMENT
#      ********************************
         ECOULEMENT         =FACT(statut='o',min=1,max=1,
                                  regles=(UN_PARMI('PRES_ENTREE','PRES_ENTREE_FO'),
                                          UN_PARMI('PRES_SORTIE','PRES_SORTIE_FO'),
                                          ),
           PRES_ENTREE         =SIMP(statut='f',typ='R',fr="Pression de stagnation a l'entree (Pa) [pe]" ),
           PRES_ENTREE_FO      =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                     fr="Evolution de la pression de stagnation a l'entree (Pa) [pe]" ),
           PRES_SORTIE         =SIMP(statut='f',typ='R',fr="Pression de stagnation a la sortie (Pa) [ps]" ),
           PRES_SORTIE_FO      =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                     fr="Evolution de la pression de stagnation a la sortie (Pa) [ps]" ),
           FLUIDE_ENTREE       =SIMP(statut='o',typ='I',into=(1,2,3,4,5,6),fr="Condition du fluide a l'entree [iflow]" ),
           b_condition_1       =BLOC(condition="FLUIDE_ENTREE==1",
                                     regles=(UN_PARMI('TEMP_ENTREE', 'TEMP_ENTREE_FO')),
                                     fr="Eau sous-refroidie ou saturee",
             TEMP_ENTREE         =SIMP(statut='f',typ='R',fr="Temperature a l'entree (degres C) [te]" ),
             TEMP_ENTREE_FO      =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                       fr="Evolution de la temperature a l'entree (degres C) [te]" ),
           ),
           b_condition_2       =BLOC(condition="FLUIDE_ENTREE==2",
                                     regles=(UN_PARMI('TITR_MASS', 'TITR_MASS_FO')),
                                     fr="Fluide diphasique",
             TITR_MASS           =SIMP(statut='f',typ='R',fr="Titre massique eau vap/eau tot a l'entree [xe]" ),
             TITR_MASS_FO        =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                       fr="Evolution du titre massique eau vap/eau tot a l'entree [xe]" ),
           ),
           b_condition_3       =BLOC(condition="FLUIDE_ENTREE==3",
                                     regles=(UN_PARMI('TEMP_ENTREE', 'TEMP_ENTREE_FO')),
                                     fr="Vapeur saturee ou surchauffee",
             TEMP_ENTREE         =SIMP(statut='f',typ='R',fr="Temperature a l'entree (degres C) [te]" ),
             TEMP_ENTREE_FO      =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                       fr="Evolution de la temperature a l'entree (degres C) [te]" ),
           ),
           b_condition_4       =BLOC(condition="FLUIDE_ENTREE==4",
                                     regles=(UN_PARMI('TEMP_ENTREE', 'TEMP_ENTREE_FO'),
                                             UN_PARMI('PRES_PART', 'PRES_PART_FO')),
                                     fr="Air + vapeur surchauffee",
             TEMP_ENTREE         =SIMP(statut='f',typ='R',fr="Temperature a l'entree (degres C) [te]" ),
             TEMP_ENTREE_FO      =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                       fr="Evolution de la temperature a l'entree (degres C) [te]" ),
             PRES_PART           =SIMP(statut='f',typ='R',fr="Pression partielle air en entree (Pa) [pae]" ),
             PRES_PART_FO        =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                       fr="Evolution de la pression partielle air en entree (Pa) [pae]" ),
           ),
           b_condition_5       =BLOC(condition="FLUIDE_ENTREE==5",
                                     regles=(UN_PARMI('TITR_MASS', 'TITR_MASS_FO'),
                                             UN_PARMI('PRES_PART', 'PRES_PART_FO')),
                                     fr="Air + vapeur saturee",
             TITR_MASS           =SIMP(statut='f',typ='R',fr="Titre massique eau vap/eau tot a l'entree [xe]" ),
             TITR_MASS_FO        =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                       fr="Evolution du titre massique eau vap/eau tot a l'entree [xe]" ),
             PRES_PART           =SIMP(statut='f',typ='R',fr="Pression partielle air en entree (Pa) [pae]" ),
             PRES_PART_FO        =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                       fr="Evolution de la pression partielle air en entree (Pa) [pae]" ),
           ),
           b_condition_6       =BLOC(condition="FLUIDE_ENTREE==6",
                                     regles=(UN_PARMI('TEMP_ENTREE', 'TEMP_ENTREE_FO')),
                                     fr="Air seul",
             TEMP_ENTREE         =SIMP(statut='f',typ='R',fr="Temperature a l'entree (degres C) [te]" ),
             TEMP_ENTREE_FO      =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule),
                                       fr="Evolution de la temperature a l'entree (degres C) [te]" ),
           ),
         ),

         LIST_INST =SIMP(statut='f',typ=(listr8_sdaster), fr="Liste des instants de calcul imposes" ),

#      CHOIX DES MODELES
#      *****************

         MODELE_ECRE        =FACT(statut='o',min=1,max=1,
           IVENAC              =SIMP(statut='f', typ='I', into=(0,1), defaut=0,
                                     fr="Calcul ECREVISSE avec prise en compte de la vena contracta"),
           ECOULEMENT          =SIMP(statut='o',typ='TXM',into=("SATURATION","GELE"),
                                     fr="Type de modele d'ecoulement diphasique [imod]" ),
           b_ecou_gele         =BLOC(condition="ECOULEMENT=='GELE'",fr="Modele d'ecoulement gele",
             PRESS_EBULLITION  =SIMP(statut='o',typ='R',fr="Pression d'ebullition [corrp*psat(t)]" ),
           ),
           FROTTEMENT          =SIMP(statut='o',typ='I',into=(-14,-13,-12,-11,-4,-3,-2,-1,0,1,2,3,4,11,12,13,14),fr="Correlation de frottement [ifrot]" ),
           b_frottement        =BLOC(condition="FROTTEMENT<0",fr="Modele d'ecoulement gele",
             REYNOLDS_LIM        =SIMP(statut='o',typ='R',fr="Coefficient de Reynolds limite [relim]" ),
             FROTTEMENT_LIM      =SIMP(statut='o',typ='R',fr="Coefficient de frottement impose [frtlim]" ),
           ),

           TRANSFERT_CHAL      =SIMP(statut='o',typ='I',into=(-12,-11,-2,-1,0,1,2,11,12),fr="Transfert de chaleur [ichal]" ),
           b_transchal         =BLOC(condition="TRANSFERT_CHAL<0", fr="Cas diphasique",
             XMINCH              =SIMP(statut='o',typ='R',fr="Titre massique gazeux min [xminch]"),
             XMAXCH              =SIMP(statut='o',typ='R',fr="Titre massique gazeux max [xmaxch]"),
           ),
         ),


#      CRITERE DE CONVERGENCE
#      **********************

         CONV_CRITERE       =FACT(statut='o',min=1,max=1,
           TEMP_REF            =SIMP(statut='o',typ='R',val_min=1.0E-5,fr="Temperature de reference pour le calcul du critere"),
           PRES_REF            =SIMP(statut='o',typ='R',val_min=1.0E-5,fr="Pression de reference pour le calcul du critere"),
           CRITERE             =SIMP(statut='o',typ='TXM',defaut="TEMP_PRESS",into=("TEMP_PRESS","EXPLICITE","TEMP","PRESS"),
                                     fr="La nature du critere pour la convergence"),
           b_critere_autre     =BLOC(condition="CRITERE=='TEMP_PRESS' or CRITERE=='TEMP' or CRITERE=='PRESS'",
                                     fr="Critere de convergence temp_press, temp, ou press",
             SUBD_NIVEAU         =SIMP(statut='f',typ='I',val_min=2,defaut=3,
                                       fr="Nombre maximum de niveau de subdivision d'un pas de temps"),
             SUBD_PAS_MINI       =SIMP(statut='f',typ='R',val_min=0.0, fr="Pas de temps en dessous duquel on ne subdivise plus"),
             NUME_ORDRE_MIN      =SIMP(statut='f',typ='I',val_min=-1,defaut=-1,
                                       fr="Numero d'ordre a partir duquel le critere est pris en compte"),
             PREC_CRIT           =SIMP(statut='f',typ='R',val_min=1.0E-2,defaut=1.0,
                                       fr="Valeur du critere pour l'erreur de convergence"),
           ),
         ),


#      DONNEES RELATIVES A LA CONVERGENCE NUMERIQUE
#      ********************************************

         CONVERGENCE_ECREVISSE =FACT(statut='f',min=1,max=1,
           KGTEST                 =SIMP(statut='f',typ='R',val_min=0.E+0,val_max=1.E+0,defaut= 0.5E+0,
                                        fr="Parametre de l'algorithme iteratif [kgtest]" ),
           ITER_GLOB_MAXI         =SIMP(statut='f',typ='I',defaut= 400,
                                        fr="Nombre maximum d'iterations de la methode de Newton [itnmax]" ),
           CRIT_CONV_DEBI         =SIMP(statut='f',typ='R',val_min=0.E+0,val_max=1.E+0,defaut= 1.E-5,
                                        fr="Critere de convergence en debit [precdb]" ),
         ),


#      GENERAL
#      *******

         COURBES            = SIMP(statut='f',typ='TXM',into=("INTERACTIF","POSTSCRIPT","AUCUNE"),defaut="AUCUNE",
                                  fr="Generation eventuelle des courbes" ),
         LOGICIEL           = SIMP(statut='f',typ='TXM',validators=LongStr(1,255),),
         VERSION            = SIMP(statut='f',typ='TXM',into = ("3.2.1",) ),
         ENTETE             = SIMP(statut='f',typ='TXM',max='**',defaut="Titre du calcul Ecrevisse" ),
         IMPRESSION         = SIMP(statut='f',typ='TXM',defaut='NON',into=( 'OUI','NON') ),
         INFO               = SIMP(statut='f',typ='I',defaut="1",into=(1,2) ),

#      DONNEES POUR STAT_NON_LINE ET THER_NON_LINE
#      *******************************************

         # copie de stat_non_line.capy des options des mots cles qui nous interessent

         # donnees communes

         CHAM_MATER         =SIMP(statut='o',typ=cham_mater),
         CARA_ELEM          =SIMP(statut='f',typ=cara_elem),

         # donnees specifiques a stat_non_line

         EXCIT_MECA         =FACT(statut='o',max='**',
           CHARGE              =SIMP(statut='o',typ=(char_meca,char_cine_meca)),
           FONC_MULT           =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule)),
           TYPE_CHARGE         =SIMP(statut='f',typ='TXM',defaut="FIXE_CSTE",
                                     into=("FIXE_CSTE","SUIV","DIDI")),
         ),

         CONTACT            = SIMP(statut='o',typ=char_contact),

         COMP_INCR          = C_COMP_INCR(),
         NEWTON             = FACT(statut='d',
           REAC_INCR           =SIMP(statut='f',typ='I',defaut= 1 ),
           PREDICTION          =SIMP(statut='f',typ='TXM',into=("DEPL_CALCULE","TANGENTE","ELASTIQUE","EXTRAPOL") ),
           MATRICE             =SIMP(statut='f',typ='TXM',defaut="TANGENTE",into=("TANGENTE","ELASTIQUE") ),
           PAS_MINI_ELAS       =SIMP(statut='f',typ='R',defaut=0.0E+0),
           REAC_ITER           =SIMP(statut='f',typ='I',defaut=0),
           REAC_ITER_ELAS      =SIMP(statut='f',typ='I',defaut=0),
           EVOL_NOLI           =SIMP(statut='f',typ=evol_noli),
         ),
         CONVERGENCE        = FACT(statut='d',regles=(PRESENT_ABSENT('RESI_REFE_RELA','RESI_GLOB_MAXI','RESI_GLOB_RELA'),),
           b_refe_rela         =BLOC(condition = "RESI_REFE_RELA != None",
                                     regles=(AU_MOINS_UN('SIGM_REFE','EPSI_REFE','FLUX_THER_REFE',
                                                         'FLUX_HYD1_REFE','FLUX_HYD2_REFE','VARI_REFE'),
                                            ),
             SIGM_REFE           =SIMP(statut='f',typ='R'),
             EPSI_REFE           =SIMP(statut='f',typ='R'),
             FLUX_THER_REFE      =SIMP(statut='f',typ='R'),
             FLUX_HYD1_REFE      =SIMP(statut='f',typ='R'),
             FLUX_HYD2_REFE      =SIMP(statut='f',typ='R'),
             VARI_REFE           =SIMP(statut='f',typ='R'),
           ),
           RESI_REFE_RELA   =SIMP(statut='f',typ='R'),
           RESI_GLOB_MAXI   =SIMP(statut='f',typ='R'),
           RESI_GLOB_RELA   =SIMP(statut='f',typ='R'),
           ITER_GLOB_MAXI   =SIMP(statut='f',typ='I',defaut=10),
           ITER_GLOB_ELAS   =SIMP(statut='f',typ='I',defaut=25),
           ARRET            =SIMP(statut='f',typ='TXM',defaut="OUI",into=("OUI","NON")),
         ),

         # donnees specifiques a ther_lineaire

         EXCIT_THER         =FACT(statut='o',max='**',
           CHARGE              =SIMP(statut='o',typ=(char_ther,char_cine_ther)),
           FONC_MULT           =SIMP(statut='f',typ=(fonction_sdaster,nappe_sdaster,formule)),
         ),
         PARM_THETA         =SIMP(statut='f',typ='R',defaut= 0.57),

)
