#& MODIF COMMANDE  DATE 22/04/2003   AUTEUR MCOURTOI M.COURTOIS 
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
# (AT YOUR OPTION) ANY LATER VERSION.                                 
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
# ======================================================================
def lire_champ_prod(TYPE_CHAM=None,**args):
  if TYPE_CHAM == "NOEU_DBEL_R" : return cham_no_dbel_r
  if TYPE_CHAM == "NOEU_DEPL_C" : return cham_no_depl_c
  if TYPE_CHAM == "NOEU_DEPL_F" : return cham_no_depl_f
  if TYPE_CHAM == "NOEU_DEPL_R" : return cham_no_depl_r
  if TYPE_CHAM == "NOEU_DURT_R" : return cham_no_durt_r
  if TYPE_CHAM == "NOEU_ENER_R" : return cham_no_ener_r
  if TYPE_CHAM == "NOEU_EPSI_R" : return cham_no_epsi_r
  if TYPE_CHAM == "NOEU_ERREUR" : return cham_no_erreur
  if TYPE_CHAM == "NOEU_FLUX_R" : return cham_no_flux_r
  if TYPE_CHAM == "NOEU_GEOM_R" : return cham_no_geom_r
  if TYPE_CHAM == "NOEU_G_DEPL_R" : return cham_no_g_depl_r
  if TYPE_CHAM == "NOEU_HYDR_R" : return cham_no_hydr_r
  if TYPE_CHAM == "NOEU_INST_R" : return cham_no_inst_r
  if TYPE_CHAM == "NOEU_INTE_R" : return cham_no_inte_r
  if TYPE_CHAM == "NOEU_META_R" : return cham_no_meta_r
  if TYPE_CHAM == "NOEU_NEUT_F" : return cham_no_neut_f
  if TYPE_CHAM == "NOEU_NEUT_R" : return cham_no_neut_r
  if TYPE_CHAM == "NOEU_PRES_R" : return cham_no_pres_r
  if TYPE_CHAM == "NOEU_SIEF_R" : return cham_no_sief_r
  if TYPE_CHAM == "NOEU_SOUR_R" : return cham_no_sour_r
  if TYPE_CHAM == "NOEU_TEMP_F" : return cham_no_temp_f
  if TYPE_CHAM == "NOEU_TEMP_R" : return cham_no_temp_r
  if TYPE_CHAM == "NOEU_VAR2_R" : return cham_no_var2_r
  if TYPE_CHAM == "NOEU_VNOR_C" : return cham_no_vnor_c
  if TYPE_CHAM == "ELEM_DBEL_R" : return cham_elem_dbel_r
  if TYPE_CHAM == "ELEM_DEPL_C" : return cham_elem_depl_c
  if TYPE_CHAM == "ELEM_DEPL_F" : return cham_elem_depl_f
  if TYPE_CHAM == "ELEM_DEPL_R" : return cham_elem_depl_r
  if TYPE_CHAM == "ELEM_DURT_R" : return cham_elem_durt_r
  if TYPE_CHAM == "ELEM_ENER_R" : return cham_elem_ener_r
  if TYPE_CHAM == "ELEM_EPSI_R" : return cham_elem_epsi_r
  if TYPE_CHAM == "ELEM_ERREUR" : return cham_elem_erreur
  if TYPE_CHAM == "ELEM_FLUX_R" : return cham_elem_flux_r
  if TYPE_CHAM == "ELEM_GEOM_R" : return cham_elem_geom_r
  if TYPE_CHAM == "ELEM_G_DEPL_R" : return cham_elem_g_depl
  if TYPE_CHAM == "ELEM_HYDR_R" : return cham_elem_hydr_r
  if TYPE_CHAM == "ELEM_INST_R" : return cham_elem_inst_r
  if TYPE_CHAM == "ELEM_INTE_R" : return cham_elem_inte_r
  if TYPE_CHAM == "ELEM_META_R" : return cham_elem_meta_r
  if TYPE_CHAM == "ELEM_NEUT_F" : return cham_elem_neut_f
  if TYPE_CHAM == "ELEM_NEUT_R" : return cham_elem_neut_r
  if TYPE_CHAM == "ELEM_PRES_R" : return cham_elem_pres_r
  if TYPE_CHAM == "ELEM_SIEF_R" : return cham_elem_sief_r
  if TYPE_CHAM == "ELEM_SOUR_R" : return cham_elem_sour_r
  if TYPE_CHAM == "ELEM_TEMP_F" : return cham_elem_temp_f
  if TYPE_CHAM == "ELEM_TEMP_R" : return cham_elem_temp_r
  if TYPE_CHAM == "ELEM_VARI_R" : return cham_elem_vari_r
  if TYPE_CHAM == "ELEM_VNOR_C" : return cham_elem_vnor_c
  if TYPE_CHAM == "ELNO_DBEL_R" : return cham_elem_dbel_r
  if TYPE_CHAM == "ELNO_DEPL_C" : return cham_elem_depl_c
  if TYPE_CHAM == "ELNO_DEPL_F" : return cham_elem_depl_f
  if TYPE_CHAM == "ELNO_DEPL_R" : return cham_elem_depl_r
  if TYPE_CHAM == "ELNO_DURT_R" : return cham_elem_durt_r
  if TYPE_CHAM == "ELNO_ENER_R" : return cham_elem_ener_r
  if TYPE_CHAM == "ELNO_EPSI_R" : return cham_elem_epsi_r
  if TYPE_CHAM == "ELNO_ERREUR" : return cham_elem_erreur
  if TYPE_CHAM == "ELNO_FLUX_R" : return cham_elem_flux_r
  if TYPE_CHAM == "ELNO_GEOM_R" : return cham_elem_geom_r
  if TYPE_CHAM == "ELNO_G_DEPL_R" : return cham_elem_g_depl
  if TYPE_CHAM == "ELNO_HYDR_R" : return cham_elem_hydr_r
  if TYPE_CHAM == "ELNO_INST_R" : return cham_elem_inst_r
  if TYPE_CHAM == "ELNO_INTE_R" : return cham_elem_inte_r
  if TYPE_CHAM == "ELNO_META_R" : return cham_elem_meta_r
  if TYPE_CHAM == "ELNO_NEUT_F" : return cham_elem_neut_f
  if TYPE_CHAM == "ELNO_NEUT_R" : return cham_elem_neut_r
  if TYPE_CHAM == "ELNO_PRES_R" : return cham_elem_pres_r
  if TYPE_CHAM == "ELNO_SIEF_R" : return cham_elem_sief_r
  if TYPE_CHAM == "ELNO_SOUR_R" : return cham_elem_sour_r
  if TYPE_CHAM == "ELNO_TEMP_F" : return cham_elem_temp_f
  if TYPE_CHAM == "ELNO_TEMP_R" : return cham_elem_temp_r
  if TYPE_CHAM == "ELNO_VARI_R" : return cham_elem_vari_r
  if TYPE_CHAM == "ELNO_VNOR_C" : return cham_elem_vnor_c
  if TYPE_CHAM == "ELGA_DBEL_R" : return cham_elem_dbel_r
  if TYPE_CHAM == "ELGA_DEPL_C" : return cham_elem_depl_c
  if TYPE_CHAM == "ELGA_DEPL_F" : return cham_elem_depl_f
  if TYPE_CHAM == "ELGA_DEPL_R" : return cham_elem_depl_r
  if TYPE_CHAM == "ELGA_DURT_R" : return cham_elem_durt_r
  if TYPE_CHAM == "ELGA_ENER_R" : return cham_elem_ener_r
  if TYPE_CHAM == "ELGA_EPSI_R" : return cham_elem_epsi_r
  if TYPE_CHAM == "ELGA_ERREUR" : return cham_elem_erreur
  if TYPE_CHAM == "ELGA_FLUX_R" : return cham_elem_flux_r
  if TYPE_CHAM == "ELGA_GEOM_R" : return cham_elem_geom_r
  if TYPE_CHAM == "ELGA_G_DEPL_R" : return cham_elem_g_depl
  if TYPE_CHAM == "ELGA_HYDR_R" : return cham_elem_hydr_r
  if TYPE_CHAM == "ELGA_INST_R" : return cham_elem_inst_r
  if TYPE_CHAM == "ELGA_INTE_R" : return cham_elem_inte_r
  if TYPE_CHAM == "ELGA_META_R" : return cham_elem_meta_r
  if TYPE_CHAM == "ELGA_NEUT_F" : return cham_elem_neut_f
  if TYPE_CHAM == "ELGA_NEUT_R" : return cham_elem_neut_r
  if TYPE_CHAM == "ELGA_PRES_R" : return cham_elem_pres_r
  if TYPE_CHAM == "ELGA_SIEF_R" : return cham_elem_sief_r
  if TYPE_CHAM == "ELGA_SOUR_R" : return cham_elem_sour_r
  if TYPE_CHAM == "ELGA_TEMP_F" : return cham_elem_temp_f
  if TYPE_CHAM == "ELGA_TEMP_R" : return cham_elem_temp_r
  if TYPE_CHAM == "ELGA_VARI_R" : return cham_elem_vari_r
  if TYPE_CHAM == "ELGA_VNOR_C" : return cham_elem_vnor_c
  if TYPE_CHAM == "NOEU_IRRA_R" : return cham_no_irra_r
  if TYPE_CHAM == "ELEM_IRRA_R" : return cham_elem_irra_r
  if TYPE_CHAM == "ELNO_IRRA_R" : return cham_elem_irra_r
  if TYPE_CHAM == "ELGA_IRRA_R" : return cham_elem_irra_r
  raise AsException("type de concept resultat non prevu")

LIRE_CHAMP=OPER(nom="LIRE_CHAMP",op= 192,sd_prod=lire_champ_prod,
                fr="Lire un champ dans un fichier et le stocker dans un concept.",
                docu="U7.02.02-b",reentrant='n',
         MAILLAGE        =SIMP(statut='o',typ=maillage,),
         FORMAT          =SIMP(statut='f',typ='TXM',defaut="MED",into=("MED",),),
         UNITE           =SIMP(statut='f',typ='I',defaut= 81,),  
         b_format =BLOC(condition = "FORMAT == 'MED'",
         regles=(UN_PARMI('NOM_CMP_IDEM','NOM_CMP'),
          PRESENT_PRESENT('NOM_CMP','NOM_CMP_MED' ),),
            NOM_MED      =SIMP(statut='o',typ='TXM', ),
            NOM_CMP_IDEM =SIMP(statut='f',typ='TXM',into=("OUI",), ),
            NOM_CMP      =SIMP(statut='f',typ='TXM',max='**',),
            NOM_CMP_MED  =SIMP(statut='f',typ='TXM',max='**',),
            NUME_ORDRE   =SIMP(statut='f',typ='I',max='**',),
            NUME_PT      =SIMP(statut='f',typ='I',max='**',),
            NOM_MAIL_MED = SIMP(statut='f',typ='TXM',),
                  ),
         TYPE_CHAM       =SIMP(statut='o',typ='TXM',
                       into=("NOEU_DBEL_R",  "ELEM_DBEL_R",  "ELNO_DBEL_R",  "ELGA_DBEL_R",
                             "NOEU_DEPL_C",  "ELEM_DEPL_C",  "ELNO_DEPL_C",  "ELGA_DEPL_C",
                             "NOEU_DEPL_F",  "ELEM_DEPL_F",  "ELNO_DEPL_F",  "ELGA_DEPL_F",
                             "NOEU_DEPL_R",  "ELEM_DEPL_R",  "ELNO_DEPL_R",  "ELGA_DEPL_R",
                             "NOEU_DURT_R",  "ELEM_DURT_R",  "ELNO_DURT_R",  "ELGA_DURT_R",
                             "NOEU_ENER_R",  "ELEM_ENER_R",  "ELNO_ENER_R",  "ELGA_ENER_R",
                             "NOEU_EPSI_R",  "ELEM_EPSI_R",  "ELNO_EPSI_R",  "ELGA_EPSI_R",
                             "NOEU_ERREUR",  "ELEM_ERREUR",  "ELNO_ERREUR",  "ELGA_ERREUR",
                             "NOEU_FLUX_R",  "ELEM_FLUX_R",  "ELNO_FLUX_R",  "ELGA_FLUX_R",
                             "NOEU_GEOM_R",  "ELEM_GEOM_R",  "ELNO_GEOM_R",  "ELGA_GEOM_R",
                             "NOEU_G_DEPL_R","ELEM_G_DEPL_R","ELNO_G_DEPL_R","ELGA_G_DEPL_R",
                             "NOEU_HYDR_R",  "ELEM_HYDR_R",  "ELNO_HYDR_R",  "ELGA_HYDR_R",
                             "NOEU_INST_R",  "ELEM_INST_R",  "ELNO_INST_R",  "ELGA_INST_R",
                             "NOEU_INTE_R",  "ELEM_INTE_R",  "ELNO_INTE_R",  "ELGA_INTE_R",
                             "NOEU_META_R",  "ELEM_META_R",  "ELNO_META_R",  "ELGA_META_R",
                             "NOEU_NEUT_F",  "ELEM_NEUT_F",  "ELNO_NEUT_F",  "ELGA_NEUT_F",
                             "NOEU_NEUT_R",  "ELEM_NEUT_R",  "ELNO_NEUT_R",  "ELGA_NEUT_R",
                             "NOEU_PRES_R",  "ELEM_PRES_R",  "ELNO_PRES_R",  "ELGA_PRES_R",
                             "NOEU_SIEF_R",  "ELEM_SIEF_R",  "ELNO_SIEF_R",  "ELGA_SIEF_R",
                             "NOEU_SOUR_R",  "ELEM_SOUR_R",  "ELNO_SOUR_R",  "ELGA_SOUR_R",
                             "NOEU_TEMP_F",  "ELEM_TEMP_F",  "ELNO_TEMP_F",  "ELGA_TEMP_F",
                             "NOEU_TEMP_R",  "ELEM_TEMP_R",  "ELNO_TEMP_R",  "ELGA_TEMP_R",
                             "NOEU_VAR2_R",  "ELEM_VARI_R",  "ELNO_VARI_R",  "ELGA_VARI_R",
                             "NOEU_VNOR_C",  "ELEM_VNOR_C",  "ELNO_VNOR_C",  "ELGA_VNOR_C",
                             "NOEU_IRRA_R",  "ELEM_IRRA_R",  "ELNO_IRRA_R",  "ELGA_IRRA_R",) ),
         b_modele =BLOC(condition = "TYPE_CHAM[0:2] == 'EL'",
            MODELE      =SIMP(statut='o',typ=modele, ),
                  ),
         INFO            =SIMP(statut='f',typ='I',defaut= 1,into=(1,2) ),
)  ;
