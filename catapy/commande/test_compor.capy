#& MODIF COMMANDE  DATE 01/02/2011   AUTEUR PROIX J-M.PROIX 
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                  
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# -*- coding: iso-8859-1 -*-
# RESPONSABLE PROIX J.M.PROIX

from Macro.test_compor_ops import test_compor_ops

#              MACRO "TEST_THERMOPLASTIQUE"
#           ----------------------------

TEST_COMPOR =MACRO(nom="TEST_COMPOR", op=test_compor_ops,sd_prod=table_sdaster,
                       docu="",reentrant='n',
                       fr="macro de test des comportements incrementaux dependant de la temperature",
         
         # OPTION         =SIMP(statut='f',typ='TXM',into=("THER","MECA"),defaut="THER"),
         OPTION         =SIMP(statut='f',typ='TXM',into=("THER",),defaut="THER"),

         COMP_INCR       =C_COMP_INCR(),
         NEWTON          =C_NEWTON(),
         CONVERGENCE     =C_CONVERGENCE(),
         
         b_ther          =BLOC(condition = "OPTION == 'THER'",
            regles=(EXCLUS('C_PRAG','D_SIGM_EPSI'),),
            MATER           =SIMP(statut='o',typ=mater_sdaster,max=1,fr="materiau dependant de la temperature"),
            ALPHA           =SIMP(statut='o',typ=fonction_sdaster,
                                  fr="coefficient de dilatation fonction de la temperature"),
            YOUNG           =SIMP(statut='o',typ=fonction_sdaster,
                                  fr="module d'Young fonction de la temperature"),
            LIST_MATER      =SIMP(statut='o',typ=mater_sdaster,max='**', 
                                          fr="liste des materiaux constants interpolés à chaque température"),
            TEMP_INIT       =SIMP(statut='o',typ='R', fr="temperature initiale et de reference"),
            TEMP_FIN        =SIMP(statut='o',typ='R', fr="temperature finale"),
            INST_FIN        =SIMP(statut='f',typ='R',defaut=1.,fr="instant final"),
            NB_VARI         =SIMP(statut='o',typ='I', fr="nombre de variables internes - 0 en elasticité"),
            VARI_TEST       =SIMP(statut='f',typ='TXM',max='**', 
                                  fr="liste de variables internes à tester - par defaut, toutes"),

#           special ecrouissage cinematique
            D_SIGM_EPSI     =SIMP(statut='f',typ=fonction_sdaster,
                                  fr="module tangent fonction de la temperature- VMIS_CINE_LINE"),
            C_PRAG          =SIMP(statut='f',typ=fonction_sdaster,
                                  fr="constante de Prager fonction de la temperature- VMIS_ECMI_*"),
         ),
         )
