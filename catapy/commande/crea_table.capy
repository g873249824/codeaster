#& MODIF COMMANDE  DATE 14/11/2005   AUTEUR MCOURTOI M.COURTOIS 
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2003  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                  
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
def dict_table_types():
   """Extraction des types de table
   """
   from types import ClassType
   # en attendant la résorption des 30 types de table !
   d_table = {}
   for k, v in globals().items():
      if type(v) is ClassType and issubclass(v, table_sdaster):
         d_table[k] = v
   # traduction de type
   d_table['table']          = d_table['table_sdaster']
   d_table['tabl_inte_spec'] = d_table['tabl_intsp']
   return d_table

def into_table_types():
   """Récupération de la liste des type de table.
   """
   return tuple([typ.upper() for typ in dict_table_types().keys()])

def crea_table_prod(TYPE_TABLE,**args):
   """Typage du concept résultat
   """
   d_table = dict_table_types()
   if TYPE_TABLE.lower() in d_table.keys():
      return d_table[TYPE_TABLE.lower()]
   raise AsException("type de concept resultat non prevu")

CREA_TABLE=OPER(nom="CREA_TABLE",op=  36,sd_prod=crea_table_prod,
                fr="Création d'une table à partir d'une fonction ou de deux listes",
                reentrant='n',UIinfo={"groupes":("Table",)},

           regles=(EXCLUS('FONCTION','LISTE')),

           TYPE_TABLE=SIMP(statut='f',typ='TXM',defaut="TABLE",
                           into=into_table_types(),),
           LISTE=FACT(statut='f',min=2,max='**',
                 fr="Creation d'une table a partir de listes",
                 regles=(UN_PARMI('LISTE_I','LISTE_R','LISTE_K')), 
                        PARA=SIMP(statut='o',typ='TXM'),
                        TYPE_K=SIMP(statut='f',typ='TXM',defaut='K8',
                                    into=('K8','K16','K24')),
                        NUME_LIGN=SIMP(statut='f',typ='I',max='**'),
                        LISTE_I=SIMP(statut='f',typ='I',max='**'),
                        LISTE_R=SIMP(statut='f',typ='R',max='**'),
                        LISTE_K=SIMP(statut='f',typ='TXM', max='**')),
           FONCTION=FACT(statut='f',min=1,max=1,
                    fr="Creation d'une table a partir d'une fonction",
                        FONCTION=SIMP(statut='o',typ=fonction_sdaster),
                        PARA=SIMP(statut='f',typ='TXM',min=2,max=2)),  
           TITRE=SIMP(statut='f',typ='TXM',max='**'),
)  ;



