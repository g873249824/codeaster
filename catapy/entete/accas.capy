# coding: utf-8
# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# person_in_charge: mathieu.courtois at edf.fr

import os
import os.path as osp
from math import sin, cos, tan, asin, acos, atan2, atan, sinh, cosh, tanh
from math import pi, exp, log, log10, sqrt

# translation of the docstrings of the commands and keywords is
# used within Eficas, that's why we are using PyQt i18n functions here
try:
    from PyQt4 import QtCore, QtGui
    app = QtGui.QApplication
    # define the tr function
    try:
        _encoding = app.UnicodeUTF8
        def tr(text):
            return app.translate("@default", text, None, _encoding)
    except AttributeError:
        def tr(text):
            return app.translate("@default", text, None)
    # install the translator
    translator = QtCore.QTranslator()
    # ask Eficas for the selected language
    try:
        from Extensions.localisation import get_locale
        locale = get_locale()
    except ImportError:
        locale = QtCore.QLocale.system().name()
    localedir = osp.normpath(osp.dirname(__file__))
    if translator.load("catapy_" + locale, localedir):
        app.installTranslator(translator)
except ImportError:
    try:
        # let gettext function in place
        tr = _
    except NameError:
        def tr(string):
            return string

import Accas
from Accas import *
from Accas import _F
import ops

try:
    import aster
    aster_exists = True
except ImportError:
    aster = None
    aster_exists = False

# Le catalogue est constitué par concaténation des fichiers .capy
# de catapy/{entete,commun,commande}.

# Tous les imports globaux devraient être faits ici dans accas.capy.
# Veillez à limiter les imports dans la définition des concepts (co_*.capy)
# au strict nécessaire et les faire sous les méthodes qui en ont
# expressément besoin.

JdC = JDC_CATA(code='ASTER',
               execmodul=None,
               regles=(UN_PARMI('DEBUT', 'POURSUITE'),
                       AU_MOINS_UN('FIN'),
                       A_CLASSER(('DEBUT', 'POURSUITE'), 'FIN')))

# Types géométriques
class no(GEOM):
    """
    Classe servant à définir le nom d'un noeud dans le fichier de commande
    En clair : un chaine de longueur 8.
    """
    pass

class grno(GEOM):
    """
    Classe servant à définir le nom d'un groupe de noeuds dans le fichier de commande
    En clair : un chaine de longueur 24.
    """
    def __convert__(cls,valeur):
        """
        Fonction de verification de la longueur de la chaine
        """
        if isinstance(valeur, (str,unicode)) and len(valeur.strip()) <= 24:
            return valeur.strip()
        raise ValueError(_(u'On attend une chaine de caractères (de longueur <= 24).'))
    __convert__ = classmethod(__convert__)

class ma(GEOM):
    """
    Classe servant à définir le nom d'une maille dans le fichier de commande
    En clair : un chaine de longueur 8.
    """
    pass

class grma(GEOM):
    """
    Classe servant à définir le nom d'un groupe de mailles dans le fichier de commande
    En clair : un chaine de longueur 24.
    """
    def __convert__(cls,valeur):
        """
        Fonction de verification de la longueur de la chaine
        """
        if isinstance(valeur, (str,unicode)) and len(valeur.strip()) <= 24:
            return valeur.strip()
        raise ValueError(_(u'On attend une chaine de caractères (de longueur <= 24).'))
    __convert__ = classmethod(__convert__)


# Ce type doit être associé à tous les mots-clés devant recevoir un numéro
# d'unité logique fortran. De base, il s'agit d'un simple entier.
def UnitType(filter=None):
    """Emulated type for *UNITE* keywords.
    
    Arguments:
        filter (str): Can be used to pass a filter or an expected filetype.
    """
    return "I"
