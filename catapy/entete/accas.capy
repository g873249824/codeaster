#& MODIF ENTETE  DATE 19/11/2007   AUTEUR COURTOIS M.COURTOIS 
# -*- coding: iso-8859-1 -*-
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

__version__ = "$Name:  $"
__Id__ = "$Id: cata_aster_v6.py,v 1.12 2001/01/16 15:55:05 iliade Exp $"

# faire que la division soit toujours réelle
from __future__ import division

import Accas
from Accas import *
from Accas import _F
import Numeric
from math import sin,cos,tan,asin,acos,atan2,atan,sinh,cosh,tanh,exp,log,log10
from math import sqrt,pi
import ops

try:
  import aster
except:
  pass

# -----------------------------------------------------------------------------
JdC = JDC_CATA(code='ASTER',
               execmodul=None,
               regles = (AU_MOINS_UN('DEBUT','POURSUITE'),
                         AU_MOINS_UN('FIN'),
                         A_CLASSER(('DEBUT','POURSUITE'),'FIN')))
# Type le plus general
class entier   (ASSD):
   def __init__(self,valeur=None,**args):
      ASSD.__init__(self,**args)
      self.valeur=valeur

   def __adapt__(self,validator):
      if validator.name == "list":
         #validateur liste,cardinalité
         return (self,)
      elif validator.name == "type":
         #validateur type
         return validator.adapt(self.valeur or 0)
      else:
         #validateur into et valid
         return self

class reel(ASSD):
   def __init__(self,valeur=None,**args):
      ASSD.__init__(self,**args)
      self.valeur=valeur

   def __call__(self):
      return self.valeur

   def __adapt__(self,validator):
      if validator.name == "list":
         #validateur liste,cardinalité
         return (self,)
      elif validator.name == "type":
         #validateur type
         return validator.adapt(self.valeur or 0.)
      else:
         #validateur into et valid
         return self

# -----------------------------------------------------------------------------
# Type geometriques
class no  (GEOM):pass
class grno(GEOM):pass
class ma  (GEOM):pass
class grma(GEOM):pass

# -----------------------------------------------------------------------------
from SD.co_cabl_precont     import cabl_precont
from SD.co_cara_elem        import cara_elem
from SD.co_cham_mater       import cham_mater
from SD.co_char_acou        import char_acou
from SD.co_char_cine_acou   import char_cine_acou
from SD.co_char_cine_meca   import char_cine_meca
from SD.co_char_cine_ther   import char_cine_ther
from SD.co_char_meca        import char_meca
from SD.co_char_ther        import char_ther
from SD.co_compor           import compor_sdaster
from SD.co_courbe           import courbe_sdaster
from SD.co_fiss_xfem        import fiss_xfem
from SD.co_fond_fiss        import fond_fiss
from SD.co_interf_dyna_clas import interf_dyna_clas
from SD.co_gfibre           import gfibre_sdaster
from SD.co_listis           import listis_sdaster
from SD.co_melasflu         import melasflu_sdaster
from SD.co_mode_cycl        import mode_cycl
from SD.co_nume_ddl_gene    import nume_ddl_gene
from SD.co_nume_ddl         import nume_ddl_sdaster
from SD.co_sd_feti          import sd_feti_sdaster
from SD.co_spectre          import spectre_sdaster
from SD.co_surface          import surface_sdaster
from SD.co_tran_gene        import tran_gene
from SD.co_type_flui_stru   import type_flui_stru

# -----------------------------------------------------------------------------
# modeles :
from SD.co_modele      import modele_sdaster
from SD.co_modele_gene import modele_gene

# -----------------------------------------------------------------------------
# materiau
from SD.co_mater import mater_sdaster

# -----------------------------------------------------------------------------
# macro-elements :
from SD.co_macr_elem_dyna import macr_elem_dyna
from SD.co_macr_elem_stat import macr_elem_stat

# -----------------------------------------------------------------------------
# liste :
from SD.co_listr8 import listr8_sdaster

# -----------------------------------------------------------------------------
# maillage :
from SD.co_maillage  import maillage_sdaster
from SD.co_squelette import squelette

# -----------------------------------------------------------------------------
# champs
from SD.co_champ     import cham_gd_sdaster
from SD.co_cham_no   import cham_no_sdaster
from SD.co_carte     import carte_sdaster
from SD.co_cham_elem import cham_elem

# -----------------------------------------------------------------------------
# resultat : (evol_sdaster,mode_stat,mode_meca)
from SD.co_resultat     import resultat_sdaster, resultat_jeveux
from SD.co_resultat_dyn import resultat_dyn
from SD.co_base_modale  import base_modale

# -----------------------------------------------------------------------------
class acou_harmo    (resultat_dyn):pass
class dyna_harmo    (resultat_dyn):pass
class dyna_trans    (resultat_dyn):pass
class harm_gene     (resultat_dyn):pass
class mode_acou     (resultat_dyn):pass
class mode_flamb    (resultat_dyn):pass
class mode_gene     (resultat_dyn):pass

# -----------------------------------------------------------------------------
class comb_fourier  (resultat_sdaster):pass
class fourier_elas  (resultat_sdaster):pass
class fourier_ther  (resultat_sdaster):pass
class mult_elas     (resultat_sdaster):pass
class theta_geom    (resultat_sdaster):pass

# -----------------------------------------------------------------------------
# resultat_sdaster/evol_sdaster :
class evol_sdaster(resultat_sdaster):pass
class evol_char(evol_sdaster):pass
class evol_elas(evol_sdaster):pass
class evol_noli(evol_sdaster):pass
class evol_ther(evol_sdaster):pass
class evol_varc(evol_sdaster):pass

# -----------------------------------------------------------------------------
# resultat_sdaster/mode_stat :
class mode_stat(resultat_dyn):pass
class mode_stat_depl(mode_stat):pass
class mode_stat_acce(mode_stat):pass
class mode_stat_forc(mode_stat):pass

# -----------------------------------------------------------------------------
# resultat_sdaster/mode_meca :
class mode_meca(resultat_dyn):pass
class mode_meca_c(mode_meca):pass

# -----------------------------------------------------------------------------
# fonctions / nappe / para_sensi
from SD.co_fonction import fonction_sdaster, para_sensi, fonction_c, nappe_sdaster

# -----------------------------------------------------------------------------
# matr_asse :
from SD.co_matr_asse      import matr_asse
from SD.co_matr_asse_gene import matr_asse_gene
from SD.co_matr_asse_gene import matr_asse_gene_r
from SD.co_matr_asse_gene import matr_asse_gene_c

from SD.co_matr_asse_gd import matr_asse_gd, \
                               matr_asse_depl_r, matr_asse_depl_c, \
                               matr_asse_pres_r, matr_asse_pres_c, \
                               matr_asse_temp_r, matr_asse_temp_c

# -----------------------------------------------------------------------------
# matr_elem :
from SD.co_matr_elem import matr_elem, \
                            matr_elem_depl_r, matr_elem_depl_c, \
                                              matr_elem_pres_c, \
                            matr_elem_temp_r

# -----------------------------------------------------------------------------
# table :
from SD.co_table import table_sdaster, table_jeveux
from SD.co_table_fonction import table_fonction

# -----------------------------------------------------------------------------
# vect_asse_gene :
from SD.co_vect_asse_gene import vect_asse_gene

# -----------------------------------------------------------------------------
# vect_elem :
from SD.co_vect_elem import vect_elem, \
                            vect_elem_depl_r, \
                            vect_elem_pres_r, vect_elem_pres_c, \
                            vect_elem_temp_r

