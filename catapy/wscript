# coding=utf-8

import os
import os.path as osp
from waflib import TaskGen, Task, Utils

def build(self):
    get_srcs = self.path.get_src().ant_glob
    env = self.all_envs[self.variant]

    # source order is important for catapy.
    # See changelog 11.0.17 to get information about the order

    sources = get_srcs('entete/accas.capy')
    sources += get_srcs('entete/co_*.capy')
    sources += get_srcs('entete/*.capy',
                        excl=['entete/accas.capy', 'entete/co_*.capy'])
    mfront_capy = self.path.get_bld().parent.find_or_declare('c_mfront_official.capy')
    sources.append(mfront_capy)
    sources += get_srcs('commun/*.capy')
    sources += get_srcs('commande/*.capy')

    cata = self.path.find_or_declare('cata.py')
    self(
        features = 'catapy py',
            name = 'catapy',
          target = cata,
          source = sources,
    install_path = osp.join(env.ASTERLIBDIR, 'Cata'),
    install_from = self.path.get_bld(),
    )

###############################################################################

# manage extension
@TaskGen.extension('.capy')
def capy(self, node):
    pass

@TaskGen.feature('catapy')
def make_cata(self):
    """Create the cata.py"""
    self.create_task('make_capy', src=self.source, tgt=self.target)
    self.process_py(self.target)

class make_capy(Task.Task):
    color   = 'PINK'
    ext_out = ['.py']

    def keyword(self):
        """Task label"""
        return 'Gathering'

    def __str__(self):
        """String to display to the user"""
        nbfiles = len(self.inputs)
        output = osp.basename(self.outputs[0].abspath())
        return '{0} capy files -> {1}'.format(nbfiles, output)

    def run(self):
        """Merge capy files to cata.py and install it."""
        # doing merge in python as it is multi-plateform
        target = self.outputs[0]
        with open(target.abspath(), 'w') as fid:
            for node in self.inputs:
                with open(node.abspath()) as subfid:
                    fid.write(subfid.read())
                    fid.write(os.linesep)
                    fid.flush()
        target.sig = Utils.h_file(target.abspath())
