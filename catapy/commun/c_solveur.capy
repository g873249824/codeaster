#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# person_in_charge: olivier.boiteau at edf.fr

def C_SOLVEUR( COMMAND, BASE=None ) :  #COMMUN#

# ----------------------------------------------------------------------------------------------------------------------------------
#
# VERIFICATIONS
#
# ----------------------------------------------------------------------------------------------------------------------------------

   assert COMMAND in ('CALC_ERREUR',
                      'CALC_FORC_AJOU',
                      'CALC_IFS_DNL',
                      'CALC_MATR_AJOU',
                      'CALC_PRECONT',
                      'CREA_ELEM_SSD',
                      'DEFI_BASE_MODALE',
                      'DYNA_LINE_HARM',
                      'DYNA_LINE_TRAN',
                      'DYNA_NON_LINE',
                      'DYNA_TRAN_MODAL',
                      'INFO_MODE',
                      'MACR_ASCOUF_CALC',
                      'MACR_ASPIC_CALC',
                      'MACRO_BASCULE_SCHEMA',
                      'MACRO_MATR_AJOU',
                      'MECA_STATIQUE',
                      'MODE_ITER_SIMULT',
                      'MODE_ITER_INV',
                      'MODE_STATIQUE',
                      'STAT_NON_LINE',
                      'THER_LINEAIRE',
                      'THER_NON_LINE',
                      'THER_NON_LINE_MO',
                      )

   if BASE != None:
      assert COMMAND == 'DYNA_LINE_HARM'
      assert BASE in ('GENE','PHYS')

# ----------------------------------------------------------------------------------------------------------------------------------
#
# CLASSIFICATION EN 3 CATEGORIES :
#  - solveurs directs uniquement
#  - solveurs pour le linéaire
#  - solveurs pour le non-linéaire
#
# GESTION DES EXCEPTIONS
#
# ----------------------------------------------------------------------------------------------------------------------------------

   _type   = None

#  Classification ('SD'/'LIN'/'NL')
   if COMMAND in ('CREA_ELEM_SSD',
                  'DEFI_BASE_MODALE',
                  'DYNA_LINE_HARM',
                  'DYNA_TRAN_MODAL',
                  'INFO_MODE',
                  'MODE_ITER_SIMULT',
                  'MODE_ITER_INV',
                  ):
      _type = 'SD'
   elif COMMAND in ('CALC_ERREUR',
                    'CALC_FORC_AJOU',
                    'CALC_MATR_AJOU',
                    'DYNA_LINE_TRAN',
                    'MACRO_MATR_AJOU',
                    'MECA_STATIQUE',
                    'MODE_STATIQUE',
                    'THER_LINEAIRE',
                    'THER_NON_LINE_MO',
                    ):
      _type = 'LIN'
   elif COMMAND in ('CALC_IFS_DNL',
                    'CALC_PRECONT',
                    'DYNA_NON_LINE',
                    'MACR_ASCOUF_CALC',
                    'MACR_ASPIC_CALC',
                    'MACRO_BASCULE_SCHEMA',
                    'STAT_NON_LINE',
                    'THER_NON_LINE',
                    ):
      _type = 'NL'
   else:
      assert False

# ----------------------------------------------------------------------------------------------------------------------------------

   _feti   = False
   _dist   = False

#  FETI et MATR_DISTRIBUEE ne fonctionnent que dans MECA_STATIQUE et MECA_NON_LINE
   if COMMAND in ('CALC_IFS_DNL',
                  'CALC_PRECONT',
                  'DYNA_NON_LINE',
                  'MACR_ASCOUF_CALC',
                  'MACR_ASPIC_CALC',
                  'MACRO_BASCULE_SCHEMA',
                  'MECA_STATIQUE',
                  'STAT_NON_LINE',
                  ):
      _feti = True
      _dist = True

# ----------------------------------------------------------------------------------------------------------------------------------

   _gene   = False
   _ldlt   = False

#  Avec des matrices généralisées, MULT_FRONT n'est pas permis, LDLT est donc par défaut
   if BASE == 'GENE':
      _gene = True
      _ldlt = True

#  LDLT est le solveur par défaut dans DYNA_TRAN_MODAL (systèmes linéaires petits)
   if COMMAND == 'DYNA_TRAN_MODAL':
      _ldlt = True

# ----------------------------------------------------------------------------------------------------------------------------------

   _syme   = False

#  Seuls les opérateurs non-linéaires produisent des matrices non-symétriques
   if _type == 'NL':
      _syme = True
   if COMMAND == 'THER_NON_LINE_MO':
      _syme = True

# ----------------------------------------------------------------------------------------------------------------------------------

   _singu  = True
   _rcmk   = True
   _resol  = True

#  Avec les solveurs modaux STOP_SINGULIER n'existe pas, de plus RCMK n'est pas disponible
   if COMMAND in ('INFO_MODE','MODE_ITER_INV','MODE_ITER_SIMULT'):
      _singu = False
      _rcmk  = False
#     Dans INFO_MODE on ne fait que factoriser
      if COMMAND == 'INFO_MODE':
         _resol = False

# ----------------------------------------------------------------------------------------------------------------------------------

   _singu_non = False

#  Dans DEFI_BASE_MODALE, NON est le défaut de STOP_SINGULIER
   if COMMAND == 'DEFI_BASE_MODALE':
      _singu_non = True

# ----------------------------------------------------------------------------------------------------------------------------------
#
# INITIALISATIONS
#
# ----------------------------------------------------------------------------------------------------------------------------------

#  Mot-clés simples
   _MotCleSimples={}

#  Solveurs
   _BlocMF={}
   _BlocLD={}
   _BlocMU={}
   _BlocGC={}
   _BlocPE={}
   _BlocFE={}

#  Préconditionneurs
   _BlocGC_INC={}
   _BlocPE_INC={}
   _BlocXX_SP={}
   _BlocPE_ML={}
   _BlocPE_BOOMER={}
   _BlocXX_Autres={}

# ----------------------------------------------------------------------------------------------------------------------------------
#
# MOT-CLES SIMPLES : METHODE
#                    SYME
#
# ----------------------------------------------------------------------------------------------------------------------------------

#  METHODE
   if (_ldlt):
      _defaut = "LDLT"
   else:
      _defaut = "MULT_FRONT"

   if _type == 'SD':
      _into = ("MULT_FRONT", "LDLT", "MUMPS", )
      if _gene:
         _into = ("LDLT", "MUMPS", )
   else:
      _into = ("MULT_FRONT", "LDLT", "MUMPS", "GCPC", "PETSC", )
      if _feti:
         _into = ("MULT_FRONT", "LDLT", "MUMPS", "GCPC", "PETSC", "FETI", )

   _MotCleSimples['METHODE'] = SIMP(statut='f', typ='TXM', defaut=_defaut, into=_into, )

# ----------------------------------------------------------------------------------------------------------------------------------

#  SYME
   if _syme:
      _MotCleSimples['SYME'] = SIMP(statut='f', typ='TXM', defaut="NON", into=("OUI", "NON", ), )

# ----------------------------------------------------------------------------------------------------------------------------------
#
# MULT_FRONT/LDLT/MUMPS/FETI (RENUM/NPREC/STOP_SINGULIER)
#
# ----------------------------------------------------------------------------------------------------------------------------------

#  RENUM
   _BlocMF['RENUM'] = SIMP(statut='f', typ='TXM', defaut="METIS", into=("MD", "MDA", "METIS", ), )
   _BlocFE['RENUM'] = SIMP(statut='f', typ='TXM', defaut="METIS", into=("MD", "MDA", "METIS", ), )

   if _rcmk:
      _into = ("RCMK", "SANS", )
      _defaut = "RCMK"
   else:
      _into = ("SANS",)
      _defaut = "SANS"

   _BlocLD['RENUM'] = SIMP(statut='f', typ='TXM', defaut=_defaut, into=_into, )

   _BlocMU['RENUM'] = SIMP(statut='f', typ='TXM', defaut="AUTO", into=("AMD", "AMF", "PORD", "METIS", "QAMD", "SCOTCH", "AUTO", ), )

# ----------------------------------------------------------------------------------------------------------------------------------

#  NPREC
   _BlocMF['NPREC'] = SIMP(statut='f', typ='I', defaut=8, )
   _BlocLD['NPREC'] = SIMP(statut='f', typ='I', defaut=8, )
   _BlocMU['NPREC'] = SIMP(statut='f', typ='I', defaut=8, )
   _BlocFE['NPREC'] = SIMP(statut='f', typ='I', defaut=8, )

# ----------------------------------------------------------------------------------------------------------------------------------

#  STOP_SINGULIER
   _into = ("OUI", "NON", )
   _defaut = "OUI"

   if _singu_non:
      _defaut = "NON"

   if _singu:
      _BlocMF['STOP_SINGULIER'] = SIMP(statut='f', typ='TXM', defaut=_defaut, into=_into, )
      _BlocLD['STOP_SINGULIER'] = SIMP(statut='f', typ='TXM', defaut=_defaut, into=_into, )
      _BlocMU['STOP_SINGULIER'] = SIMP(statut='f', typ='TXM', defaut=_defaut, into=_into, )
      _BlocFE['STOP_SINGULIER'] = SIMP(statut='f', typ='TXM', defaut=_defaut, into=_into, )

# ----------------------------------------------------------------------------------------------------------------------------------
#
# MUMPS (MOT-CLES RESTANT)
#
# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocMU['TYPE_RESOL'     ] = SIMP(statut='f', typ='TXM', defaut="AUTO", into=("NONSYM", "SYMGEN", "SYMDEF", "AUTO", ), )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocMU['PRETRAITEMENTS' ] = SIMP(statut='f', typ='TXM', defaut="AUTO", into=("SANS", "AUTO", ), )

# ----------------------------------------------------------------------------------------------------------------------------------

   if _resol:
      _BlocMU['POSTTRAITEMENTS'] = SIMP(statut='f', typ='TXM', defaut="AUTO", into=("SANS", "AUTO", "FORCE", ), )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocMU['ELIM_LAGR2'     ] = SIMP(statut='f', typ='TXM', defaut="OUI" , into=("OUI", "NON"), )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocMU['PCENT_PIVOT'    ] = SIMP(statut='f', typ='I'  , defaut=20, val_min=1, )

# ----------------------------------------------------------------------------------------------------------------------------------

   if _resol:
      if _type == 'LIN':
         _BlocMU['RESI_RELA'] = SIMP(statut='f', typ='R', defaut=1.0E-6, )
      else:
         _BlocMU['RESI_RELA'] = SIMP(statut='f', typ='R', defaut=-1.0, )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocMU['GESTION_MEMOIRE'] = SIMP(statut='f', typ='TXM', defaut="AUTO", into=("IN_CORE", "OUT_OF_CORE", "AUTO", "EVAL"), )

# ----------------------------------------------------------------------------------------------------------------------------------

   if _type == 'NL':
      _BlocMU['FILTRAGE_MATRICE'] = SIMP(statut='f', typ='R'  , defaut=-1.0, )
      _BlocMU['MIXER_PRECISION' ] = SIMP(statut='f', typ='TXM', defaut="NON", into=("OUI", "NON", ), )

# ----------------------------------------------------------------------------------------------------------------------------------

   if _dist:
      _BlocMU['MATR_DISTRIBUEE' ] = SIMP(statut='f', typ='TXM', defaut="NON", into=("OUI", "NON", ), )
      _BlocPE['MATR_DISTRIBUEE' ] = SIMP(statut='f', typ='TXM', defaut="NON", into=("OUI", "NON", ), )

# ----------------------------------------------------------------------------------------------------------------------------------
#
# GCPC/PETSC
#
# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocPE['ALGORITHME'] = SIMP(statut='f', typ='TXM', defaut="GMRES", into=("CG", "CR", "GMRES", "GCR", ), )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocGC['PRE_COND'] = SIMP(statut='f', typ='TXM', defaut="LDLT_INC", into=("LDLT_INC", "LDLT_SP", ), )
   _BlocPE['PRE_COND'] = SIMP(statut='f', typ='TXM', defaut="LDLT_SP" ,
                              into=("LDLT_INC", "LDLT_SP", "JACOBI", "SOR", "ML", "BOOMER", "SANS", ), )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocGC['RESI_RELA'] = SIMP(statut='f', typ='R', defaut= 1.E-6, )
   _BlocPE['RESI_RELA'] = SIMP(statut='f', typ='R', defaut= 1.E-6, )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocGC['NMAX_ITER'] = SIMP(statut='f', typ='I', defaut= 0, )
   _BlocPE['NMAX_ITER'] = SIMP(statut='f', typ='I', defaut= 0, )

# ----------------------------------------------------------------------------------------------------------------------------------
#  Mot-cle cache pour desactiver le critere en norme non preconditionnee dans PETSC

   if _type == 'NL':
      _BlocPE['RESI_RELA_PC'] = SIMP(statut='c', typ='R', defaut= -1.0, )
   else:
      _BlocPE['RESI_RELA_PC'] = SIMP(statut='c', typ='R', defaut=  0.0, )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocGC_INC['RENUM'] = SIMP(statut='f', typ='TXM', defaut="RCMK", into=("SANS","RCMK"), )
   _BlocPE_INC['RENUM'] = SIMP(statut='f', typ='TXM', defaut="RCMK", into=("SANS","RCMK"), )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocGC_INC['NIVE_REMPLISSAGE'] = SIMP(statut='f', typ='I', defaut= 0, )
   _BlocPE_INC['NIVE_REMPLISSAGE'] = SIMP(statut='f', typ='I', defaut= 0, )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocPE_INC['REMPLISSAGE'] = SIMP(statut='f', typ='R', defaut= 1.0, )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocXX_SP['RENUM'] = SIMP(statut='f', typ='TXM', defaut="SANS", into=("SANS",), )
   _BlocXX_SP['REAC_PRECOND'] = SIMP(statut='f', typ='I', defaut=30, )
   _BlocXX_SP['PCENT_PIVOT' ] = SIMP(statut='f', typ='I', defaut=20, val_min=1, )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocPE_ML['RENUM'] = SIMP(statut='f', typ='TXM', defaut="SANS", into=("SANS",), )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocPE_BOOMER['RENUM'] = SIMP(statut='f', typ='TXM', defaut="SANS", into=("SANS",), )

# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocXX_Autres['RENUM'] = SIMP(statut='f', typ='TXM', defaut="SANS", into=("SANS","RCMK", ), )

# ----------------------------------------------------------------------------------------------------------------------------------
#
# FETI (MOT-CLES RESTANT)
#
# ----------------------------------------------------------------------------------------------------------------------------------

   _BlocFE['PARTITION'      ] = SIMP(statut='o',typ=sd_feti_sdaster)
   _BlocFE['RESI_RELA'      ] = SIMP(statut='f',typ='R',defaut=1.E-6,val_min=0.)
   _BlocFE['NMAX_ITER'      ] = SIMP(statut='f',typ='I',defaut=0,val_min=0)
   _BlocFE['REAC_RESI'      ] = SIMP(statut='f',typ='I',defaut=0,val_min=0)
   _BlocFE['TYPE_REORTHO_DD'] = SIMP(statut='f',typ='TXM',defaut="GSM",into=("SANS","GS","GSM","IGSM") )
   _BlocFE['NB_REORTHO_DD'  ] = SIMP(statut='f',typ='I',defaut=0,val_min=0)
   _BlocFE['NB_REORTHO_INST'] = SIMP(statut='f',typ='I',defaut=0,val_min=0)
   _BlocFE['PRE_COND'       ] = SIMP(statut='f',typ='TXM',defaut="LUMPE",into=("LUMPE","SANS") )
   _BlocFE['SCALING'        ] = SIMP(statut='f',typ='TXM',defaut="MULT",into=("SANS","MULT") )
   _BlocFE['VERIF_SDFETI'   ] = SIMP(statut='f',typ='TXM',defaut="OUI",into=("OUI","NON") )
   _BlocFE['TEST_CONTINU'   ] = SIMP(statut='f',typ='R',defaut=1.E-8,val_min=0.)
   _BlocFE['INFO_FETI'      ] = SIMP(statut='f',typ='TXM',defaut='FFFFFFFFFFFFFFFFFFFFFFFF')
   _BlocFE['STOCKAGE_GI'    ] = SIMP(statut='f',typ='TXM',defaut="OUI",into=("OUI","NON","CAL") )
   _BlocFE['NB_SD_PROC0'    ] = SIMP(statut='f',typ='I',defaut=0,val_min=0)
   _BlocFE['ACCELERATION_SM'] = SIMP(statut='f',typ='TXM',defaut="OUI",into=("OUI","NON") )

# ----------------------------------------------------------------------------------------------------------------------------------
#
# PREPARATION DU MOT-CLE FACTEUR
#
# ----------------------------------------------------------------------------------------------------------------------------------

   mcfact = FACT(statut='d',
                 b_mult_front = BLOC(condition = "METHODE == 'MULT_FRONT' ",
                                     fr="Paramètres de la méthode multi frontale",
                                     **_BlocMF
                                     ),
                 b_ldlt       = BLOC(condition = "METHODE == 'LDLT' ",
                                     fr="Paramètres de la méthode LDLT",
                                     **_BlocLD
                                     ),
                 b_mumps      = BLOC(condition = "METHODE == 'MUMPS' ",
                                     fr="Paramètres de la méthode MUMPS",
                                     **_BlocMU
                                     ),
                 b_gcpc       = BLOC(condition = "METHODE == 'GCPC' ",
                                      fr="Paramètres de la méthode du gradient conjugué",
                                     b_ldltinc    = BLOC(condition = "PRE_COND == 'LDLT_INC' ",
                                                         fr="Paramètres de la factorisation incomplète",
                                                         **_BlocGC_INC
                                                         ),
                                     b_simple     = BLOC(condition = "PRE_COND == 'LDLT_SP' ",
                                                         fr="Paramètres de la factorisation simple précision",
                                                         **_BlocXX_SP
                                                         ),
                                     **_BlocGC
                                     ),
                 b_petsc      = BLOC(condition = "METHODE == 'PETSC' ",
                                     fr="Paramètres de la méthode PETSC",
                                     b_ldltinc    = BLOC(condition = "PRE_COND == 'LDLT_INC' ",
                                                         fr="Paramètres de la factorisation incomplète",
                                                         **_BlocPE_INC
                                                         ),
                                     b_simple     = BLOC(condition = "PRE_COND == 'LDLT_SP' ",
                                                         fr="Paramètres de la factorisation simple précision",
                                                         **_BlocXX_SP
                                                         ),
                                     b_ml         = BLOC(condition = "PRE_COND == 'ML' ",
                                                         fr="Paramètres du multigrille algébrique ML",
                                                         **_BlocPE_ML
                                                         ),
                                     b_boomer        = BLOC(condition = "PRE_COND == 'BOOMER' ",
                                                         fr="Paramètres du multigrille algébrique HYPRE",
                                                         **_BlocPE_BOOMER
                                                         ),
                                     b_autres     = BLOC(condition = "PRE_COND == 'JACOBI' or \
                                                                      PRE_COND == 'SOR'    or \
                                                                      PRE_COND == 'SANS'",
                                                         **_BlocXX_Autres
                                                         ),
                                     **_BlocPE
                                     ),
                 b_feti       = BLOC(condition = "METHODE == 'FETI' ",
                                     fr="Paramètres de la méthode FETI 1",
                                     **_BlocFE
                                     ),
                 **_MotCleSimples
                 )

   return mcfact
