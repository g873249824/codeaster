@Parser RungeKutta;
@Algorithm rk54;
@Behaviour polycristal;
@ModellingHypothesis Tridimensional;

@Author Jean-Michel Proix;
@Date   21/06/2013;
@Description{
  Homégénéisation BZ du modele DD_CFC
}

// Number of phases
@IntegerConstant Np  = 30;
// Number of sliding systems
@IntegerConstant Nss = 12;

@OrthotropicBehaviour;
@RequireStiffnessTensor;
@Epsilon 1.e-9 ;

@MaterialProperty real tauf;
@MaterialProperty real y;
@MaterialProperty real pn;
@MaterialProperty real gamma0;
@MaterialProperty real a;
@MaterialProperty real b;
@MaterialProperty real Mu;

@StateVariable StrainStensor    epsp;
@StateVariable strain           omega[Nss*Np];
@StateVariable StrainStensor    epsg[Np];
@AuxiliaryStateVariable real    pg;
omega.setErrorNormalisationFactor(1.e-7);

@Includes{
#include"TFEL/Math/power.hxx"
#include"TFEL/Material/PolyCristalsSlidingSystems.hxx"
#include"TFEL/Material/MetallicCFCSlidingSystems.hxx"
}

@Members{
  // Mono cristal  sliding system
  typedef MetallicCFCSlidingSystems<real> MCSlidingSystems;
  // Poly cristals sliding system
  typedef PolyCristalsSlidingSystems<Np,MCSlidingSystems,real> PCSlidingSystems;
}


//! fraction volumique
@LocalVariable real  fv[Np];

@Import"MonoCristal_DD_CFC_InteractionMatrix.mfront";

@InitLocalVariables<Append>{
  // fractions volumiques
  for(unsigned short i=0;i!=Np;++i){
    fv[i]=1.0/static_cast<real>(Np) ; 
  }
}

@ComputeStress{
  sig = D*eel;
}

@Derivative{
  using tfel::math::stdfunctions::power;
  static const real rhoref = 1.e6;
  static const real alpha  = 0.35;
  static const real beta   = 2.54e-7;
  static const real tmp1   = log(alpha);
  static const real tmp2   = log(alpha*beta*sqrt(rhoref));
  const PCSlidingSystems& gs =
    PCSlidingSystems::getPolyCristalsSlidingSystems("PolyCristal_Orientation.mfront");
  real ppomega[Nss];
  real Dp ;
  real h ;
  const int ng=Np;
  StressStensor sigg(real(0)) ;
  depsp=Stensor(real(0)) ;
  // boucle sur le nombre de phases (ou grains) 
  for(unsigned short k=0;k!=ng;++k){  
    // localisation BZ
    real seq=sigmaeq(sig);
    if (seq>0){
      real alph=1./(1.0+1.5*Mu*pg/seq) ;
      sigg=sig+Mu*alph*(epsp-epsg[k]);        
    }
    real C=1.0;
    real sum=0.0;
    for(unsigned short i=0;i!=Nss;++i){
      ppomega[i]=max(0.,omega[Nss*k+i]);
      sum+=ppomega[i];
    }
    if (alpha>0.){
      C=0.2+0.8*(tmp1+0.5*log(sum))/tmp2;
    }     
    depsg[k]=Stensor(real(0)) ;
    for(unsigned short i=0;i!=Nss;++i){
      real taufor2=0.0;
      for(unsigned short j=0;j!=Nss;++j){
	taufor2+=mh(i,j)*ppomega[j];
      }
      real taufor=Mu*C*sqrt(taufor2);
      // tenseurs mus de chaque grain / systeme dans le repere global
      const StrainStensor& mu_ki = gs.mus[k][i];
      real tau = mu_ki | sigg ;
      real terme=abs(tau)/(tauf+taufor);
      if(terme> 5.){
	      return false;
      }
      h=0.;
      Dp=0.;
      if (terme>1.){
         // pour gagner 30% de CPU
	      Dp  = gamma0*power<20>(terme)-gamma0;
         // si l'exposant n'est pas entier : 
         // Dp  = gamma0*pow(terme,pn)-gamma0;
	      real sgn=tau/abs(tau);
	      real Dg  = sgn*Dp;
	      depsg[k]+=Dg*mu_ki ;
	      real ha=0.0; //< forest
	      real hb=0.0;
	      real hc=0.0; //< copla
	      for(unsigned short j=0;j!=Nss;++j){
	          hb+=sqrt(mh(i,j)*ppomega[j]);
	          if (i/3!=j/3){
	            ha+=sqrt(mh(i,j))*ppomega[j];
	          } else {
	            hc+=sqrt(mh(i,j)*ppomega[j]);
	          }
	      }
	h=a*ha/hb+b*C*hc-y/beta*ppomega[i];
      }
      domega[Nss*k+i]=Dp*h;
    }
    depsp+=depsg[k]*fv[k] ;
  }
  deel = -depsp+deto;
}

@UpdateAuxiliaryStateVars{
  pg+=dt_*sqrt(depsp|depsp)/sqrt(1.5);
}



