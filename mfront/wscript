# coding=utf-8

import os
import os.path as osp
from glob import glob
import subprocess
import shutil
from functools import partial
import re
from distutils.version import LooseVersion

from waflib import Configure, Context, Build, TaskGen, Task, Utils, Errors, Logs

def options(self):
    group = self.add_option_group('MFront library options')
    group.add_option('--disable-mfront', dest='enable_mfront',
                    default=None, action='store_false',
                    help='disable the MFRONT support')
    group.add_option('--enable-mfront', dest='enable_mfront',
                    default=None, action='store_true',
                    help='force the MFRONT support')

def configure(self):
    opts = self.options
    try:
        self.check_mfront()
    except Errors.ConfigurationError:
        if opts.enable_mfront == True:
            raise
        self.define('_DISABLE_MFRONT', 1)
        self.undefine('HAVE_MFRONT')
    else:
        self.define('HAVE_MFRONT', 1)
        self.env.BUILD_MFRONT = True

INCLUDES = (
    'MonoCrystal_DD_CC_InteractionMatrix.mfront',
    'MonoCrystal_DD_CFC_InteractionMatrix.mfront',
    'MonoCrystal_DD_CC_SlidingSystems.mfront',
    'PolyCrystal_DD_CC_SlidingSystems.mfront',
    'PolyCrystal_Orientation.mfront',
    'PolyCrystal_Orientation_100grains.mfront',
    'Plasticity_Sy.mfront',
)

def build(self):
    env = self.all_envs[self.variant]
    if env.BUILD_MFRONT:
        # build mfront_request
        self(
            features = 'c cxx cxxprogram',
                name = 'mfront_request',
                 idx = 2,     # use a different target for source shared with bibcxx
              source = ['../bibcxx/mfront/MFrontBehaviour.cxx',
                        '../bibcxx/mfront/MFrontBehaviour.h',
                        'mfront_request.c'],
            includes = '../bibcxx/mfront',
              target = 'mfront_request',
                 env = env.derive(),
                 use = ('MFRONT', 'MFRONT_ONLY'),
        install_path = None,
        )

        get_srcs = self.path.get_src().ant_glob
        lmfront = get_srcs('**/*.mfront', excl=INCLUDES)
        lst = [i.name for i in lmfront]

        self(
            features = 'cxx cxxshlib',
                name = 'asterbehaviour',
              source = lmfront,
            includes = [osp.join(osp.splitext(i)[0], "include") for i in lst],
              target = env['_ASTERBEHAVIOUR'],
        install_path = env.ASTERLIBDIR,
                 env = env.derive(),
                 use = ('MFRONT', 'MFRONT_ONLY'),
        )

        self.add_group()
        self(
            features = 'mfront_mater',
                name = 'mfront_mater',
                 lst = lst,
                path = self.path,
              target = 'c_mfront_official.capy',
                 env = env.derive(),
                 use = 'asterbehaviour',
        )
    else:
        self(
            features = 'fake_mfront_mater',
                name = 'mfront_mater',
                path = self.path,
                 env = env.derive(),
              target = 'c_mfront_official.capy',
        )

###############################################################################
@Configure.conf
def check_mfront(self):
    opts = self.options
    if opts.enable_mfront == False:
        raise Errors.ConfigurationError('MFRONT disabled')

    self.find_program('mfront')
    self.find_program('tfel-config')
    self.check_cfg(path='tfel-config',
                   args='--cppflags --includes --oflags0 ' \
                        '--libs --material --utilities --system',
                   package='', uselib_store='MFRONT', mandatory=True)
    if self.get_define('_USE_64_BITS'):
        arch = 'ASTER_ARCH=64'
    else:
        arch = 'ASTER_ARCH=32'
    self.env.append_value('DEFINES_MFRONT', arch)
    # remove options usually used by MFront but in conflict with our code
    for flag in ('-fvisibility=hidden', '-fvisibility-inlines-hidden'):
        self.safe_remove('CFLAGS_MFRONT', flag)
        self.safe_remove('CXXFLAGS_MFRONT', flag)
        # these options are not relevant for C
        self.env.append_value('CXXFLAGS_MFRONT_ONLY', flag)
    self.check_mfront_version( (2, 0, 3) )
    self.check_mfront_libs()
    self.check_cxx11_abi()
    self.check_mfront_obsolete_source()

@Configure.conf
def check_mfront_version(self, minver=None):
    """Check if mfront is matching a given minimum version.
    minver should be a tuple, eg. to check for mfront >= 2.0 pass (2,0,0) as minver.
    """
    assert isinstance(minver, tuple)
    cmd = self.env.MFRONT + ['--version']
    res = self.cmd_and_log(cmd)
    mfrver = '0.0.0'
    regexp = re.compile('version *: *([0-9]+\.[0-9]+\..*) *', re.I | re.M)
    mat = regexp.search( res.strip() )
    if mat:
        mfrver = mat.group(1).strip()
    if minver is None:
        self.msg('Checking for mfront version', mfrver)
        return
    minver_str = '.'.join(map(str, minver))
    result = LooseVersion(mfrver) >= LooseVersion(minver_str)
    self.msg("Checking for mfront version >= %s" % minver_str, mfrver,
             result and 'GREEN' or 'YELLOW')
    if result:
        self.define('MFRONT_VERSION', mfrver)
    else:
        raise Errors.ConfigurationError('The Mfront version is too old, required >= %r' % minver_str)

@Configure.conf
def check_mfront_libs(self):
    _check = partial(self.check_cc, mandatory=True, uselib_store='MFRONT',
                     use='MFRONT')
    check_lib = lambda lib: _check(lib=lib)
    libs = ['AsterInterface', 'TFELSystem']
    map(check_lib, Utils.to_list(libs))

@Configure.conf
def check_cxx11_abi(self):
    import ctypes
    libname = "libTFELSystem.so"
    symbol = "getUMATElasticSymmetryType"
    lib = ctypes.cdll.LoadLibrary(libname)
    exists = getattr(lib, symbol, None) is not None
    # if a such symbol exists, MFront was not compiled with cxx11 ABI.
    use_cxx11_abi = int(not exists)
    reverse = int(exists)
    self.safe_remove('CXXFLAGS',
        '-D_GLIBCXX_USE_CXX11_ABI={0}'.format(reverse))
    self.env.append_value('CXXFLAGS',
        '-D_GLIBCXX_USE_CXX11_ABI={0}'.format(use_cxx11_abi))

def remove(path):
    """Remove a file or a directory"""
    try:
        shutil.rmtree(path)
    except OSError:
        os.remove(path)

@Configure.conf
def check_mfront_obsolete_source(self):
    src = self.path.get_src().abspath()
    # clean obsolete behaviours (from a previous build)
    bld, mfront = osp.split(self.path.get_bld().abspath())
    excl = ['libAsterMFrOfficial.so', 'libAsterMFrOfficialDebug.so',
            'include', 'mfront_request']
    for variant in ('debug', 'release'):
        build = osp.join(bld, variant, mfront)
        if osp.exists(build):
            cleaned = False
            for node in os.listdir(build):
                ignore = False
                for excl_i in excl:
                    if node.startswith(excl_i):
                        ignore = True
                if ignore:
                    continue
                if not osp.exists( osp.join(src, node + '.mfront') ):
                    Logs.warn("remove obsolete build: %s" % node)
                    remove( osp.join(build, node) )

@TaskGen.extension('.mfront')
def process_mfront(self, node):
    name = osp.splitext(node.name)[0]
    wrkdir = node.parent.find_or_declare(name)
    # print "DEBUG: node:", node, "wkrdir:", wrkdir.abspath()
    wrkdir.mkdir()
    files = [name, "aster" + name] + getAdditionalOutputs(node.abspath())
    outputs = [wrkdir.find_or_declare(osp.join("src", i + ".cxx")) for i in files]
    tsk = self.create_task('mfront2cxx', node, outputs)
    self.source.extend(tsk.outputs)

import re
RE_OUTPUT = re.compile('^//output *(.*?) *$', re.M)

def getAdditionalOutputs(filename):
    """Search additional outputs in a MFront file"""
    found = RE_OUTPUT.findall(open(filename, 'r').read())
    return found

class mfront2cxx(Task.Task):
    """Convert a MFront source file into C++"""
    color   = 'PINK'
    ext_out = ['.h', '.cxx']

    def run(self):
        """Call MFront to convert `.mfront` to C++"""
        name = osp.splitext(self.inputs[0].name)[0]
        mfrdir = self.inputs[0].parent
        wrknode = mfrdir.get_bld().find_or_declare(name)
        if len(name) > 16:
            msg = "The behaviour name is too long, max. 16 characters: " \
                  "'%s'" % name
            raise Errors.WafError(msg)
        wrkdir = wrknode.abspath()
        cmd = '%s --interface=aster --search-path=%s %s' % (
            self.env.MFRONT[0],
            mfrdir.get_src().abspath(),
            self.inputs[0].abspath()
        )
        # self.generator.bld.cmd_and_log(cmd, cwd=wrkdir, quiet=Context.STDOUT)
        self.exec_command(cmd, cwd=wrkdir)

@TaskGen.feature('mfront_mater')
def mater_capy(self):
    """Create the capy for MFront materials"""
    gen = self.bld.get_tgen_by_name('mfront_request')
    req = gen.link_task.outputs[0]
    link_task = self.bld.get_tgen_by_name('asterbehaviour').link_task
    target = self.bld.bldnode.make_node(self.target)
    tsk = self.create_task('mfront_capy', src=[req] + link_task.outputs, tgt=target)

class mfront_capy(Task.Task):
    color   = 'PINK'
    ext_out = ['.capy']

    def run(self):
        """Create a .capy file for the MFront behaviours"""
        req = self.inputs[0].abspath()
        # open libAsterMFrOfficial.so
        libpath = self.inputs[1].abspath()
        lst = self.generator.lst
        target = self.outputs[0]
        lines = [capy_header]
        for comport in lst:
            comport = osp.splitext(comport)[0]
            try:
                props = getMaterialProperties(req, libpath, comport)
            except ValueError:
                raise ValueError("Behaviour '%(nam)s': not found in library. "
                    "Please check that '%(nam)s.mfront' defines a behaviour "
                    "named '%(nam)s'." % { 'nam' : comport })
            lines.extend(_capy_comport(comport, props, "'R'", " " * 8))
            lines.extend(_capy_comport(comport + '_FO', props,
                                       "fonction_sdaster", " " * 8))
        lines.append(capy_footer)
        open(target.abspath(), 'w').write(os.linesep.join(lines))
        target.sig = Utils.h_file(target.abspath())

@TaskGen.feature('fake_mfront_mater')
def fake_mater_capy(self):
    """Create an 'empty' capy when MFront is not available"""
    target = self.bld.bldnode.make_node(self.target)
    tsk = self.create_task('fake_mfront_capy', src=[], tgt=target)

class fake_mfront_capy(Task.Task):
    color   = 'PINK'
    ext_out = ['.capy']

    def run(self):
        """Create a .capy file for the MFront behaviours"""
        target = self.outputs[0]
        lines = [capy_header, capy_footer]
        open(target.abspath(), 'w').write(os.linesep.join(lines))
        target.sig = Utils.h_file(target.abspath())

###############################################################################
def getMaterialProperties(binary, libpath, behav):
    """Return the list of material properties"""
    # TODO: add get_ld_paths output to LD_LIBRARY_PATH / or use Python bindings
    symb = 'aster%s' % behav.lower()
    try:
        out = subprocess.check_output([binary, "Tridimensional", libpath, symb])
    except subprocess.CalledProcessError, exc:
        msg = "%r exits with status %s" % (exc.cmd, exc.returncode)
        raise Errors.WafError(msg)
    return [p for p in out.split()]

def _capy_comport(comport, properties, typ, indent):
    """Return the lines for the catalog for `comport`"""
    assert typ in ("'R'", "fonction_sdaster"), 'unknown type: %s' % typ
    lines = ["'%s' : FACT(statut='f'," % comport]
    for i in properties:
        lines.append("    %s = SIMP(statut='o', typ=%s)," % (i, typ))
        if len(i) > 16:
            msg = "Behaviour  '%s': The material property '%s' exceeds " \
                  "16 characters." % (comport, i)
            raise Errors.WafError(msg)
    lines.append('),')
    return [indent + k for k in lines]

capy_header = """#
# Automatically-generated file. Do not edit!
#
# COPYRIGHT (C) 1991 - 2017  EDF R&D                  WWW.CODE-ASTER.ORG
#
def C_MFRONT_OFFICIAL():
    keywords = {
"""

capy_footer = """    }
    return keywords
"""
