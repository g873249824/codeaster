@Parser Implicit;
@Behaviour MetaAcierEPIL_PT;
@Algorithm NewtonRaphson_NumericalJacobian;


@Author Hendili Sofiane;
@Date 04/05/15;

@Theta 1. ;
@Epsilon 1.e-12;
@Parameter numerical_jacobian_epsilon = 1.e-11;


// --------- Material Property ----------------
@MaterialProperty stress young; 
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;  
nu.setGlossaryName("PoissonRatio");

@MaterialProperty real SYY[5];
@MaterialProperty real ETT[5];
@MaterialProperty real FK[4];
// meta* : parametre dependant de zalpha = somme des phases froides 
@MaterialProperty real metaF1;
@MaterialProperty real metaFDF[4];

@Includes{
#include"TFEL/Material/Lame.hxx"
}


@StateVariable strain p;

@AuxiliaryStateVariable strain p_i[5];
@AuxiliaryStateVariable real ksi;

// variables de commande aster
@ExternalStateVariable real PFERRITE,PPERLITE,PBAINITE,PMARTENS;

@LocalVariable stress lambda;
@LocalVariable stress mu;
@LocalVariable stress Fel;

@LocalVariable real Z[5],Zm[5], dZ[4], p_i_[5], rmoy;
@LocalVariable real Smoy, Hmoy, zalpha, GZPT;

@InitLocalVariables{
  using namespace tfel::material::lame;
  lambda = computeLambda(young,nu);
  mu     = computeMu(young,nu);
  // Calcul des phases a l'instant t+ (stockees dans Z[])
  Zm[0] = PFERRITE; Zm[1] = PPERLITE; Zm[2] = PBAINITE; Zm[3] = PMARTENS;
  dZ[0] = dPFERRITE;dZ[1] = dPPERLITE;dZ[2] = dPBAINITE;dZ[3] = dPMARTENS;
  zalpha = 0.;
  for(unsigned short i=0;i!=4;++i){ 
    Z[i] = Zm[i] + dZ[i];
    zalpha = zalpha + Z[i];
  }
  Z[4] = 1. - zalpha;
  // Calcul de Smoy et Hmoy
  Smoy = 0.;
  Hmoy = 0.;
  if (zalpha > 0.){
    for(unsigned short i=0;i!=4;++i){  
      Smoy = Smoy + Z[i]*SYY[i];
      Hmoy = Hmoy + Z[i]*ETT[i]*young/(young-ETT[i]); 
    }
    Smoy = Smoy/zalpha;
    Hmoy = Hmoy/zalpha;
  } else {
    Smoy = 0.;
    Hmoy = 0.;
  }
  Smoy = (1. - metaF1)*SYY[4] + metaF1*Smoy;
  Hmoy = (1. - metaF1)*ETT[4]*young/(young-ETT[4]) + metaF1*Hmoy;
  // Plasticite de transformation : calcul de GZPT
  GZPT = 0.;
  for(unsigned short i=0;i!=4;++i){  
    if (dZ[i] > 0){
      GZPT = GZPT + FK[i]*metaFDF[i]*(fabs(dZ[i]));
    }
  }
  // elastic prediction
  rmoy = Hmoy*p + Smoy;
  StressStensor sigel(lambda*trace(eel+deto)*Stensor::Id()+2*mu*(eel+deto));
  const real   seqel = sigmaeq(sigel) ;
  Fel   = seqel - ((1+3*mu*GZPT)*rmoy);
}

@ComputeStress{
  sig = lambda*trace(eel)*Stensor::Id()+2*mu*eel;
} 

@TangentOperator{
  using namespace tfel::material::lame;
  if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
    computeElasticStiffness<N,Type>::exe(Dt,lambda,mu);
  } else if (smt==CONSISTENTTANGENTOPERATOR){
    StiffnessTensor De;
    Stensor4 Je;
    computeElasticStiffness<N,Type>::exe(De,lambda,mu);
    getPartialJacobianInvert(Je);
    Dt = De*Je;
  } else {
    return false;
  }
}

@Integrator {
  const real eps = 1.e-10;
  Stensor sr = deviator(sig) ;
  if (Fel > 0) {
      // solution plastique
      // Les variables suivies de _ sont en t + theta * dt
      const strain p_  = p + theta*dp ;
      const stress Rp_ = Hmoy*p_ + Smoy;
      Stensor n(real(0));
      const stress   seq = sigmaeq(sig) ;
      if(seq>eps*young){
         n = 1.5*sr/seq;
      }
      feel += dp*n;
      fp   = (seq-Rp_)/young ;
  }
  feel += 1.5*sr*GZPT;
  feel -= deto;
}

@UpdateAuxiliaryStateVars{
  if ( Fel > 0) {
      for(unsigned short i=0;i!=5;++i){;
        if(Z[i] > 0.) {
          p_i[i] = p;
        } else {
          p_i[i] = 0.;
        }
      }
  }
  if (dp > 0) {
    ksi = 1.;
  } else {
    ksi = 0.;
  }
}

