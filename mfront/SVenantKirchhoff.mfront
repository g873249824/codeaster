@Parser DefaultFiniteStrainParser;
@Behaviour SVenantKirchhoff;
@Author T. Helfer;
@Date 19/10/2013;
@Description{
  "La loi de SaintVenantKirchhoffElasticity est une extension "
  "de la loi de Hooke au cas des grandes rotations. "
  "Elle ne peut être utilisée que pour des petites déformations."
}

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@LocalVariable stress lambda; //<! Premier coefficient de Lamé
@LocalVariable stress mu;     //<! Second  coefficient de Lamé

// Nous déclarons le second tenseur de Piola-Kirchhoff en tant que
// variable locale pour le réutiliser dans le calcul de l'opérateur
// tangent
@LocalVariable StressStensor s; //<! Second tenseur des contraintes de Piola-Kirchhoff

@Includes{
#include"TFEL/Material/Lame.hxx"
}

/*!
 * Nous décrivons ici l'intégration de la loi.
 */
@Integrator{
  using namespace tfel::material::lame;
  /*!
   * Nous commençons par calculer les coefficients de Lame \(\lambda\)
   * et \(\mu\)~:
   * \begin{aligned}
   *   \lambda  &= \\
   *   \mu      &= \\
   * \end{aligned}
   */
  lambda = computeLambda(young,nu);
  mu     = computeMu(young,nu);
  /*!
   * Nous calculons ensuite le tenseur de Green-Lagrange
   */
  const StrainStensor e = computeGreenLagrangeTensor(F1);
  // second Piola–Kirchhoff stress
  s = lambda*trace(e)*StrainStensor::Id()+2*mu*e;
  // conversion to Cauchy stress tensor
  sig = convertSecondPiolaKirchhoffStressToCauchyStress(s,F1);
}

/*!
 * Nous fournissons l'opérateur tangent le plus naturel pour cette
 * loi.
 */
@TangentOperator<DS_DEGL>{
  Dt = lambda*Stensor4::IxI()+2*mu*Stensor4::Id();
}

/*!
 * Nous fournissons un autre l'opérateur tangent, proche de celui
 * utilisé par le Code-Aster. Cet opérateur aurait pu être calculé
 * automatiquement par MFront, mais cela impliquait de recalculer le
 * second tenseur des contraintes de Piola-Kirchhoff à partir des
 * contraintes de Cauchy. Nous utilisons ici le fait que le second
 * tenseur de Piola-Kirchhoff est connu à la fin de l'intégration.
 */
@TangentOperator<DTAU_DF>{
  StiffnessTensor De = lambda*Stensor4::IxI()+2*mu*Stensor4::Id();
  t2tost2<N,stress> dS = 0.5*De*t2tost2<N,strain>::dCdF(F1);
  t2tost2<N,stress> dtau;
  computePushForwardDerivative(dtau,dS,s,F1);
  Dt = dtau;
}
