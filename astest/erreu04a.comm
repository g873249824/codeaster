# TITRE DETECTION DE SINGULARITE SIMPLE AVEC LES SOLVEURS LINEAIRES
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#       DIRECTS ET UNE COMMANDE ECLATEE
#
# person_in_charge: mathieu.courtois at edf.fr
#########################################################################
# VALIDATION DE LA DETECTION DE SINGULARITE SIMPLE (BLOCAGE ABSENT OU
# SURABONDANT) AVEC LES SOLVEURS LINEAIRES DIRECTS: MUMPS, LDLT ET MF.
# CAS SYMETRIQUE COMPLEXE AVEC UN OPERATEUR ECLATEE: FACTORISER
# ON TESTE LES MSGS SUIVANT:
#    1. MANQUE DE BLOCAGE: FACTOR_11 POUR LDLT/MF/MUMPS
#             + FACTOR_57 SI MUMPS ET NPREC<0
#    2. BLOCAGE SURABONDANTS: FACTOR_11 POUR LDLT/MF/MUMPS
#             + FACTOR_42 SI MUMPS ET NPREC<0
# VALIDATION DE LA DETECTION DE MATRICE NON SPD AVEC
# MUMPS+TYPE_RESOL='SYMDEF'
# AVEC MUMPS, VALIDATION DE LA VALEUR 'EVAL' DU MOT-CLE GESTION_MEMOIRE
#########################################################################

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET', VISU_EFICAS='NON'),
     DEBUG=_F(SDVERI='OUI'),
      ERREUR=_F(ERREUR_F='EXCEPTION',),
      PAR_LOT='NON',)

fmt_raison='-'*80+"""

   Exception interceptee
   Message : %s

"""+'-'*80+'\n'



MAIL=LIRE_MAILLAGE(FORMAT='MED', )
AIR=DEFI_MATERIAU( FLUIDE=_F( RHO = 1.3, CELE_C = 343.+0.j))
CHAMPMAT=AFFE_MATERIAU(  MAILLAGE=MAIL, AFFE=_F( TOUT = 'OUI',  MATER = AIR) )
GUIDE=AFFE_MODELE(  MAILLAGE=MAIL,
                 AFFE=_F( TOUT = 'OUI', MODELISATION = '3D', PHENOMENE = 'ACOUSTIQUE') )
CHARACOU=AFFE_CHAR_ACOU(MODELE=GUIDE, VITE_FACE=_F( GROUP_MA = 'ENTREE', VNOR = 0.014+2.j))
IMPEACOU=AFFE_CHAR_ACOU(MODELE=GUIDE,
                 IMPE_FACE=_F( GROUP_MA = 'SORTIE', IMPE = 445.9+3.j),)
CHDUAL=AFFE_CHAR_ACOU( MODELE=GUIDE,  PRES_IMPO=(_F( NOEUD = 'NO500', PRES = 1.+3.j),))
CHCINE=AFFE_CHAR_CINE( MODELE=GUIDE,  ACOU_IMPO=_F( NOEUD = 'NO500', PRES = 1.+3.j), )

# 0 : PRE-EVALUATION DES CONSOMMATIONS MEMOIRE AVEC GESTION_MEMOIRE='EVAL'
# POUR LE SOLVEUR LINEAIRE MUMPS
#----------------------------------------------------------------------
MEL11=CALC_MATR_ELEM(CHARGE=(IMPEACOU),INST=0.0,OPTION='RIGI_ACOU',MODELE=GUIDE,CHAM_MATER=CHAMPMAT,);
is_ok = 0
try :
  NUM130=NUME_DDL(MATR_RIGI=MEL11, );
  MATAS130=ASSE_MATRICE(NUME_DDL=NUM130, MATR_ELEM=MEL11, );
  FACTORISER( reuse=MATAS130,  MATR_ASSE=MATAS130,METHODE='MUMPS', GESTION_MEMOIRE='EVAL')
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_77":
      is_ok = 1
TAB130=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB130,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM130,MATAS130,TAB130),),)

# 1 : MANQUE DE BLOCAGE DETECTE VIA LE MECANISME NPREC/STOP_SINGULIER
#     TEST AVEC LDLT/MF/MUMPS. AVEC MUMPS ON TESTE AUSSI LE MECANISME NPREC<0
#----------------------------------------------------------------------
is_ok = 0
try :
  NUM11=NUME_DDL(MATR_RIGI=MEL11, );
  MATAS11=ASSE_MATRICE(NUME_DDL=NUM11, MATR_ELEM=MEL11, );
  FACTORISER( reuse=MATAS11,  MATR_ASSE=MATAS11,METHODE='LDLT', STOP_SINGULIER='OUI', NPREC=8 )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_10":
      is_ok = 1
TAB11=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB11,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM11,MATAS11,TAB11),),)

is_ok = 0
try :
  NUM12=NUME_DDL(MATR_RIGI=MEL11, );
  MATAS12=ASSE_MATRICE(NUME_DDL=NUM12, MATR_ELEM=MEL11, );
  FACTORISER( reuse=MATAS12,  MATR_ASSE=MATAS12,METHODE='LDLT', STOP_SINGULIER='OUI', NPREC=8  )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_10":
      is_ok = 1
TAB12=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB12,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM12,MATAS12,TAB12),),)

is_ok = 0
try :
  NUM130=NUME_DDL(MATR_RIGI=MEL11, );
  MATAS130=ASSE_MATRICE(NUME_DDL=NUM130, MATR_ELEM=MEL11, );
  FACTORISER( reuse=MATAS130,  MATR_ASSE=MATAS130,METHODE='MUMPS', STOP_SINGULIER='OUI', NPREC=8  )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_11":
      is_ok = 1
TAB130=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB130,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM130,MATAS130,TAB130),),)

# Verification provisoirement debranchee. Attente reponse equipe MUMPS
is_ok = 0
try :
  NUM131=NUME_DDL(MATR_RIGI=MEL11, );
  MATAS131=ASSE_MATRICE(NUME_DDL=NUM131, MATR_ELEM=MEL11, );
  VECTE131=CALC_VECT_ELEM(OPTION='CHAR_ACOU',CHAM_MATER=CHAMPMAT,CHARGE=(CHARACOU,IMPEACOU) )
  VECTA131=ASSE_VECTEUR(  VECT_ELEM=VECTE131,   NUME_DDL=NUM131 )
  FACTORISER( reuse=MATAS131,  MATR_ASSE=MATAS131,METHODE='MUMPS', STOP_SINGULIER='OUI', NPREC=-8, INFO=2 )

  VECTA131=RESOUDRE( reuse=VECTA131,  MATR=MATAS131, CHAM_NO=VECTA131,RESI_RELA=1.E-15,
  POSTTRAITEMENTS='AUTO',INFO=2)
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_57":
      is_ok = 1
TAB131=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB131,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM131,MATAS131,VECTE131,VECTA131,TAB131,MEL11),),)

# 2 : REDONDANCE DE BLOCAGES DETECTE VIA LE MECANISME NPREC/STOP_SINGULIER
#     TEST AVEC LDLT/MF/MUMPS. AVEC MUMPS ON TESTE AUSSI LE MECANISME NPREC<0
#----------------------------------------------------------------------

MEL21=CALC_MATR_ELEM(CHARGE=(IMPEACOU,CHDUAL),INST=0.0,OPTION='RIGI_ACOU',MODELE=GUIDE,CHAM_MATER=CHAMPMAT,);
is_ok = 0
try :
  NUM21=NUME_DDL(MATR_RIGI=MEL21, );
  MATAS21=ASSE_MATRICE(NUME_DDL=NUM21, MATR_ELEM=MEL21,CHAR_CINE=CHCINE  );
  FACTORISER( reuse=MATAS21,  MATR_ASSE=MATAS21,METHODE='LDLT', STOP_SINGULIER='OUI', NPREC=8 )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_11":
      is_ok = 1
TAB21=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB21,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM21,MATAS21,TAB21),),)

is_ok = 0
try :
  NUM22=NUME_DDL(MATR_RIGI=MEL21, );
  MATAS22=ASSE_MATRICE(NUME_DDL=NUM22, MATR_ELEM=MEL21,CHAR_CINE=CHCINE );
  FACTORISER( reuse=MATAS22,  MATR_ASSE=MATAS22,METHODE='LDLT', STOP_SINGULIER='OUI', NPREC=8  )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_11":
      is_ok = 1
TAB22=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB22,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM22,MATAS22,TAB22),),)

is_ok = 0
try :
  NUM230=NUME_DDL(MATR_RIGI=MEL21, );
  MATAS230=ASSE_MATRICE(NUME_DDL=NUM230, MATR_ELEM=MEL21,CHAR_CINE=CHCINE );
  FACTORISER( reuse=MATAS230,  MATR_ASSE=MATAS230,METHODE='MUMPS', STOP_SINGULIER='OUI', NPREC=8  )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_11":
      is_ok = 1
TAB230=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB230,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM230,MATAS230,TAB230),),)

is_ok = 0
try :
  NUM231=NUME_DDL(MATR_RIGI=MEL21, );
  MATAS231=ASSE_MATRICE(NUME_DDL=NUM231, MATR_ELEM=MEL21,CHAR_CINE=CHCINE );
  VECTE231=CALC_VECT_ELEM(OPTION='CHAR_ACOU',CHAM_MATER=CHAMPMAT,CHARGE=(CHARACOU,IMPEACOU,CHDUAL) )
  VECTA231=ASSE_VECTEUR(  VECT_ELEM=VECTE231,   NUME_DDL=NUM231 )
  VCIN231=CALC_CHAR_CINE(   NUME_DDL=NUM231,  CHAR_CINE=CHCINE)
  FACTORISER( reuse=MATAS231,  MATR_ASSE=MATAS231,METHODE='MUMPS', STOP_SINGULIER='OUI', NPREC=-8  )

  VECTA231=RESOUDRE( reuse=VECTA231,  MATR=MATAS231, CHAM_NO=VECTA231,RESI_RELA=1.E-6, CHAM_CINE=VCIN231)
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_42":
      is_ok = 1
TAB231=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB231,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM231,MATAS231,VECTE231,VECTA231,VCIN231,TAB231),),)

is_ok = 0
try :
  NUM232=NUME_DDL(MATR_RIGI=MEL21, );
  MATAS232=ASSE_MATRICE(NUME_DDL=NUM232, MATR_ELEM=MEL21,CHAR_CINE=CHCINE );
  VECTE232=CALC_VECT_ELEM(OPTION='CHAR_ACOU',CHAM_MATER=CHAMPMAT,CHARGE=(CHARACOU,IMPEACOU,CHDUAL) )
  VECTA232=ASSE_VECTEUR(  VECT_ELEM=VECTE232,   NUME_DDL=NUM232 )
  VCIN232=CALC_CHAR_CINE(   NUME_DDL=NUM232,  CHAR_CINE=CHCINE)
  FACTORISER( reuse=MATAS232,  MATR_ASSE=MATAS232,METHODE='MUMPS', TYPE_RESOL='SYMDEF')
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_80":
      is_ok = 1
TAB232=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB232,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(NUM232,MATAS232,VECTE232,VECTA232,VCIN232,TAB232,MEL21),),)
FIN()
