# -*- coding: utf-8 -*-
# person_in_charge: david.haboussa at edf.fr
# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'));


from numpy.linalg import norm
from numpy import *

# test de la version initiale de DD_CC en explicite
TEMP=300.
E=(236-0.0459*TEMP)*1.e9  # Pa
Nu=0.35
MU=E/2./(1.+Nu)

tau_f  = 20.e6    # Pa
tau_0  = 363.e6   # Pa
#rho_ini= 1.E11    # en m**-2
y_at   = 1.e-9    # m
N      = 20.
gamma0 = 1.E-3    # s**-1
GH      = 1.e11    # s**-1
b      = 2.48e-10 # m
DeltaG0= 0.84     # eV  #############=> a convertir en SI, mais pas grave car homogene a  k
epsi_1 = 1.e-5    # s**-1
D      = 10.e-9   # m
beta   = 0.2
d_lat  = 1.
K_f    = 30.
K_self = 100.
k      = 8.62E-5  # "Constante de Boltzmann, en eV/K"#############=> a convertir en S.I.
l_c = 500.*b*(TEMP/300.)**2
a_coli=0.7
a_ncol=0.1
a_self=0.1024
alpha_self=sqrt(a_self)

#RHO_TOT : densitÃ© globale sur tous les systemes de glissement (parametre utilisateur)
RHO_TOT=1.2E12    # en m**-2 pour comparaison avec ssnd110b
#RHO_0 : densitÃ© par systeme de glissement
RHO_0  = RHO_TOT/12    # en m**-2
#RHOREF : densitÃ© mobile par systeme de glissement, egale a RHO_0 en general
RHOREF = RHO_0    # en m**-2



ACIERDD=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=Nu,
                            ALPHA=0.),
                      MONO_DD_CC=_F(
                                    B       =b,
                                    GH       =GH,
                                    DELTAG0 =DeltaG0,
                                    TAU_0   =tau_0,
                                    TAU_F   =tau_f,
                                    GAMMA0  =gamma0,
                                    N       =N,
                                    RHO_MOB =RHOREF,
                                    D       =D,
                                    D_LAT   =d_lat,
                                    Y_AT    =y_at,
                                    K_F     =K_f,
                                    K_SELF  =K_self,
                                    K_BOLTZ =k,
                                    H1      =a_self,
                                    H2      =a_coli,
                                    H3      =a_ncol,
                                    H4      =a_ncol,
                                    H5      =a_ncol,
                                    H6      =a_ncol,
                                     ),
                    );
# DD_CC
COMPORDD=DEFI_COMPOR(MONOCRISTAL=_F(MATER=ACIERDD,
                                    ECOULEMENT='MONO_DD_CC',
                                    ELAS='ELAS',
                                    FAMI_SYST_GLIS='CUBIQUE1',
                                    ),);

LISTARCH=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=1.,
                                      NOMBRE=100,),
                                  ),
                      );

LINSTDD=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=1.,
                                      NOMBRE=1000,),
                                  ),
                      );

LIS2DD=DEFI_LIST_INST(INFO=1,
                        DEFI_LIST=_F(LIST_INST=LINSTDD),
                        ECHEC=_F(SUBD_NIVEAU=20,
                                 SUBD_PAS=10),
                        );

# vecteurs direction de chargement
l_orient=[[0.,0.,1.],[0.,1.,1.],[1.,1.,1.],[1.,5.,9.],[0.,1.,2.],[-1.,2.,5.]]
l_norm=[l_orient[i]/norm(l_orient[i],2) for i in range(0,len(l_orient))]

# parametres de chargement
# numero du vecteur de chargement

ori = 3
SIGMA0=100.e6

##chargement
S1=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][0]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S2=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][1]*l_norm[ori][1]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S3=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][2]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S4=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][1]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S5=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S6=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][1]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);


# densites de dislocation initiales : variables internes de 0 a 44
avari = zeros(45+12)
for i in range(12):
  avari[6+i*3]=RHO_0

lvari=list(avari)

TIMP=DEFI_FONCTION(
                      NOM_PARA='INST',  NOM_RESU='TEMP',
                       VALE=(  0. , TEMP, 1. , TEMP), PROL_DROITE='CONSTANT',
                        )

IMPDD300=SIMU_POINT_MAT(INFO=1,
                      MATER=ACIERDD,
                      COMPORTEMENT=(_F(RELATION='MONOCRISTAL',
                                    COMPOR=COMPORDD,
                                    ALGO_INTE='NEWTON',
                                    ITER_INTE_MAXI=100,
                                    TOUT='OUI',),),
                      INCREMENT=(_F(LIST_INST=LIS2DD,),),
                      NEWTON=(_F(PREDICTION='EXTRAPOLE',
                                 ),),
                      CONVERGENCE=(_F( ITER_GLOB_MAXI=100,),),
                      VARI_INIT=_F(VALE=lvari,
                                  ),
                      SIGM_IMPOSE=(
                                   _F(SIXX=S1,SIYY=S2,SIZZ=S3,SIXY=S4,SIXZ=S5,SIYZ=S6),
                                  ),
                      ARCHIVAGE=_F(LIST_INST=LISTARCH),
                      SUPPORT='POINT',
                      AFFE_VARC=_F(  NOM_VARC='TEMP',
                                     VALE_FONC=TIMP,
                                     VALE_REF=TEMP),
                       );

IMPR_TABLE(TABLE=IMPDD300)

gamma=[None]*13
rho=[None]*13
tau=[None]*13

system=['', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']

for i in range(1,13):


    gamma[i]=RECU_FONCTION(TABLE=IMPDD300,
                         PARA_X='INST',
                        PARA_Y='V'+str(8+3*(i-1)),
                        INTERPOL='LIN');

    rho[i]=RECU_FONCTION(TABLE=IMPDD300,
                         PARA_X='INST',
                        PARA_Y='V'+str(7+3*(i-1)),
                        INTERPOL='LIN');

    tau[i]=RECU_FONCTION(TABLE=IMPDD300,
                         PARA_X='INST',
                        PARA_Y='V'+str(42+i),
                        INTERPOL='LIN');



EVIXX=RECU_FONCTION(TABLE=IMPDD300,
                   PARA_X='INST',
                   PARA_Y='V1',
                   INTERPOL='LIN');

EVIZZ=RECU_FONCTION(TABLE=IMPDD300,
                   PARA_X='INST',
                   PARA_Y='V3',
                   INTERPOL='LIN');

EVIXY=RECU_FONCTION(TABLE=IMPDD300,
                   PARA_X='INST',
                   PARA_Y='V4',
                   INTERPOL='LIN');

EVIYZ=RECU_FONCTION(TABLE=IMPDD300,
                   PARA_X='INST',
                   PARA_Y='V6',
                   INTERPOL='LIN');


# tests explicite et implicite

# densites de dislocation

sys1=8
sys2=5

TEST_FONCTION(VALEUR=_F(VALE_CALC=1.021521447826E+11,

                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=rho_8,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=1.011387884925E+11,

                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=rho_5,
                        ),
              )

# tau_5
TEST_FONCTION(VALEUR=_F(VALE_CALC=-4.57848E7,
                        VALE_REFE=-4.5785E7,
                        REFERENCE='SOURCE_EXTERNE',
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=tau_5,
                        ),
              )
# tau_8
TEST_FONCTION(VALEUR=_F(VALE_CALC=4.96002E7,
                        VALE_REFE=4.96E7,
                        REFERENCE='SOURCE_EXTERNE',
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=tau_8,
                        ),
              )

# glissement plastiques

TEST_FONCTION(VALEUR=_F(VALE_CALC=2.117300729091E-05,

                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=gamma_8,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-1.109265891005E-05,

                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=gamma_5,
                        ),
              )

# deformation viscoplastique globale

TEST_FONCTION(VALEUR=_F(VALE_CALC=-1.328269182397E-05,

                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=EVIXX,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=1.321606985811E-05,

                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=EVIZZ,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=2.930908154869E-06,

                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=EVIXY,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=9.390143505536E-06,

                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=EVIYZ,
                        ),
              )

TEMP=50

#coef=1.e3 # Pa, m
coef=1.   # MPa, mm
E=(236-0.0459*TEMP)*1000.*coef*coef  # Pa
Nu=0.35
MU=E/2./(1.+Nu)
tau_f  = 0.                # Pa
tau_0  = 363.0*coef*coef   # Pa
y_at   = 2.e-6/coef        # m
N      = 50.
gamma0 = 1.E-6             # s**-1
GH     = 1.e11             # s**-1
b      = 2.48e-7/coef      # m
DeltaG0= 0.84              # eV
epsi_1 = 3.e-4             # s**-1
D      = 10.e-6/coef       # m
beta   = 0.2
d_lat  = 1000./coef
K_self = 100.
k      = 8.62E-5  # "Constante de Boltzmann, en eV/K"
K_self_sur_K_f=3.
denom= min( K_self_sur_K_f, 1.+ (K_self_sur_K_f -1.)*TEMP/300.)
K_f= K_self/denom
l_c = 500.*b*(TEMP/300.)**2
a_coli=0.7
a_ncol=0.1
a_self=0.1024
#rho_ini= 1.E5*coef*coef    # en m**-2
#rho_ini5= 1.E6*coef*coef    # en m**-2


#RHO_TOT : densitÃ© globale sur tous les systemes de glissement (parametre utilisateur)
RHO_TOT=1.2E6*coef*coef    # en m**-2 pour comparaison avec ssnd110b
#RHO_0 : densitÃ© par systeme de glissement
RHO_0  = RHO_TOT/12    # en m**-2
#RHOREF : densitÃ© mobile par systeme de glissement, egale a RHO_0 en general
RHOREF = RHO_0    # en m**-2


ACIERDDI=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=Nu,
                            ALPHA=0.),
                      MONO_DD_CC=_F(
                                    B       =b,
                                    GH       =GH,
                                    DELTAG0 =DeltaG0,
                                    TAU_0   =tau_0,
                                    TAU_F   =tau_f,
                                    GAMMA0  =gamma0,
                                    N       =N,
                                    RHO_MOB =RHOREF,
                                    D       =D,
                                    D_LAT   =d_lat,
                                    Y_AT    =y_at,
                                    K_F     =K_f,
                                    K_SELF  =K_self,
                                    K_BOLTZ =k,
                                    H1      =a_self,
                                    H2      =a_coli,
                                    H3      =a_ncol,
                                    H4      =a_ncol,
                                    H5      =a_ncol,
                                    H6      =a_ncol,
                                    DEPDT=epsi_1,
                                     ),
                    );
COMPODDI=DEFI_COMPOR(MONOCRISTAL=_F(MATER=ACIERDDI,
                                    ECOULEMENT='MONO_DD_CC',
                                    ELAS='ELAS',
                                    FAMI_SYST_GLIS='CUBIQUE1',
                                    ),);

# vecteurs direction de chargement
l_orient=[[0.,0.,1.],[0.,1.,1.],[1.,1.,1.],[-1.,4.,9.],[0.,1.,2.],[-1.,2.,5.]]
l_norm=[l_orient[i]/norm(l_orient[i],2) for i in range(0,len(l_orient))]

ori = 0

# parametres de chargement
# numero du vecteur de chargement

##chargement
EpsMax=0.27
viteps=3.e-4
tmax=EpsMax/viteps

   # def. imposee
SI1=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,tmax,EpsMax*l_norm[ori][0]*l_norm[ori][0]),
                    PROL_DROITE='LINEAIRE',
                    PROL_GAUCHE='LINEAIRE',);
SI2=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,tmax,EpsMax*l_norm[ori][1]*l_norm[ori][1]),
                    PROL_DROITE='LINEAIRE',
                    PROL_GAUCHE='LINEAIRE',);
SI3=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,tmax,EpsMax*l_norm[ori][2]*l_norm[ori][2]),
                    PROL_DROITE='LINEAIRE',
                    PROL_GAUCHE='LINEAIRE',);
SI4=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,tmax,EpsMax*l_norm[ori][0]*l_norm[ori][1]),
                    PROL_DROITE='LINEAIRE',
                    PROL_GAUCHE='LINEAIRE',);
SI5=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,tmax,EpsMax*l_norm[ori][0]*l_norm[ori][2]),
                    PROL_DROITE='LINEAIRE',
                    PROL_GAUCHE='LINEAIRE',);
SI6=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,tmax,EpsMax*l_norm[ori][1]*l_norm[ori][2]),
                    PROL_DROITE='LINEAIRE',
                    PROL_GAUCHE='LINEAIRE',);

# densites de dislocation initiales : variables internes de 0 a 44
avari = zeros(45+12)
for i in range(12):
  avari[6+i*3]=RHO_0
avari[6+4*3]=RHO_0*10.0

lvari=list(avari)


LISTARCI=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=tmax,
                                      NOMBRE=100,),
                                  ),
                      );

LINSTDDI=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=tmax,
                                      NOMBRE=1000,),
                                  ),
                      );

LIS2DDI=DEFI_LIST_INST(INFO=1,
                        DEFI_LIST=_F(LIST_INST=LINSTDDI),
                        ECHEC=_F(SUBD_NIVEAU=20,
                                 SUBD_PAS=10),
                        );

TIMPI=DEFI_FONCTION(
                      NOM_PARA='INST',  NOM_RESU='TEMP',
                       VALE=(  0. , TEMP, tmax , TEMP), PROL_DROITE='CONSTANT',
                        )

# Calcul des angles d'Euler correspondant a une orientation cristallographique donnee

h=-1
k=4
l=9

phi1=0
phi =arccos(l / sqrt( h*h + k*k + l*l) ) * 180. / pi
phi2=arctan2( h / sqrt( h*h + k*k ) , k / sqrt( h*h + k*k ) )* 180. / pi
angles=(phi1,phi,phi2)

IMPDD50=SIMU_POINT_MAT(MATER=ACIERDDI,
                      MASSIF=_F(ANGL_EULER=angles),
                      COMPORTEMENT=(_F(RELATION='MONOCRISTAL',
                                    COMPOR=COMPODDI,
                                    ALGO_INTE='NEWTON_PERT',
                                    ITER_INTE_MAXI=100,
                                    TOUT='OUI',),),
                      INCREMENT=(_F(LIST_INST=LIS2DDI,),),
                      NEWTON=(_F(#PREDICTION='EXTRAPOLE',
                                 REAC_ITER=1,
                                 ),),
                      VARI_INIT=_F(VALE=lvari,),
                      EPSI_IMPOSE=_F(EPZZ=SI3,),
                      ARCHIVAGE=_F(LIST_INST=LISTARCI),
                      SUPPORT='POINT',
                      AFFE_VARC=_F(  NOM_VARC='TEMP',
                                     VALE_FONC=TIMPI,
                                     VALE_REF=TEMP),
                       );


epsXX=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='EPXX',
                   INTERPOL='LIN');

epsYY=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='EPYY',
                   INTERPOL='LIN');

epsZZ=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='EPZZ',
                   INTERPOL='LIN');

epsXY=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='EPXY',
                   INTERPOL='LIN');

epsXZ=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='EPXZ',
                   INTERPOL='LIN');

epsYZ=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='EPYZ',
                   INTERPOL='LIN');


sigXX=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='SIXX',
                   INTERPOL='LIN');

sigYY=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='SIYY',
                   INTERPOL='LIN');

sigZZ=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='SIZZ',
                   INTERPOL='LIN');

sigXY=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='SIXY',
                   INTERPOL='LIN');

sigXZ=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='SIXZ',
                   INTERPOL='LIN');

sigYZ=RECU_FONCTION(TABLE=IMPDD50,
                   PARA_X='INST',
                   PARA_Y='SIYZ',
                   INTERPOL='LIN');


epsDIR=CALC_FONCTION(COMB=(_F(FONCTION = epsXX,
                              COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = epsYY,
                              COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = epsZZ,
                              COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = epsXY,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = epsXZ,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = epsYZ,
                              COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ),
                    );


sigDIR=CALC_FONCTION(COMB=(_F(FONCTION = sigXX,
                              COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = sigYY,
                              COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = sigZZ,
                              COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = sigXY,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = sigXZ,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = sigYZ,
                              COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ),
                    );

nom_cas='traction_cube-1_4_9_temp' + str(TEMP)

DEFI_FICHIER(UNITE = 28,
          FICHIER = 'REPE_OUT/sigdir_'+ nom_cas + '.dat');
IMPR_FONCTION(
         FORMAT='XMGRACE',
         PILOTE='',
         COURBE=(_F(FONC_X=epsDIR,
                     FONC_Y=sigDIR,
                     COULEUR= 0,
                     LEGENDE= 'SIGdir',),),
         UNITE=28,
         TITRE='SIGdir = f(Edir)');

DEFI_FICHIER(UNITE = 28,ACTION = 'LIBERER');


gammi=[None]*13
rhoi=[None]*13


DEFI_FICHIER(UNITE = 30,
             FICHIER = 'REPE_OUT/rho_eps_'+  nom_cas + '.dat');

DEFI_FICHIER(UNITE = 31,
             FICHIER = 'REPE_OUT/gamma_eps_'+ nom_cas + '.dat');

for i in range(1,13):


    gammi[i]=RECU_FONCTION(TABLE=IMPDD50,
                         PARA_X='INST',
                        PARA_Y='V'+str(8+3*(i-1)),
                        INTERPOL='LIN');

    rhoi[i]=RECU_FONCTION(TABLE=IMPDD50,
                         PARA_X='INST',
                        PARA_Y='V'+str(7+3*(i-1)),
                        INTERPOL='LIN');


    IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE='',
                LEGENDE_X='\\f{Symbol}e\\f{}\sll',
                LEGENDE_Y='\\f{Symbol}r',
                COURBE=(
                        _F(FONC_X=epsDIR,
                           FONC_Y=rhoi[i],
                           COULEUR = i,
                           MARQUEUR = 0,
                           LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
                UNITE=30,);

    IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE='',
                LEGENDE_X='\\f{Symbol}e\\f{}\sll',
                LEGENDE_Y='\\f{Symbol}g',
                COURBE=(
                        _F(FONC_X=epsDIR,
                           FONC_Y=gammi[i],
                           COULEUR= i,
                           MARQUEUR = 0,
                           LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
                UNITE=31,);

DEFI_FICHIER(UNITE = 30,
             ACTION = 'LIBERER');

DEFI_FICHIER(UNITE = 31,
             ACTION = 'LIBERER');



DEFI_FICHIER(UNITE = 28,
                FICHIER = 'REPE_OUT/rho_5_gamma5'+  nom_cas + '.dat');

IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F( FONC_X=gammi[5],
                        FONC_Y=rhoi[5],
                        COULEUR= 0,
                        LEGENDE= 'rho5=f(gamma5)',),
                        ),
            UNITE=28,
            TITRE='rho5=f(gamma5)');

DEFI_FICHIER(UNITE = 28,
             ACTION = 'LIBERER');


DEFI_FICHIER(UNITE = 28,
                FICHIER = 'REPE_OUT/gamma8_gamma5'+  nom_cas + '.dat');

IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F( FONC_X=gammi[5],
                        FONC_Y=gammi[8],
                        COULEUR= 0,
                        LEGENDE= 'gamma8=f(gamma5)',),
                        ),
            UNITE=28,
            TITRE='gamma8=f(gamma5)');

DEFI_FICHIER(UNITE = 28,
             ACTION = 'LIBERER');

# densites de dislocation

sys1=5


TEST_FONCTION(VALEUR=_F(VALE_CALC=3.944964449815E+06,
                        #
                        VALE_PARA=100.0,
                        NOM_PARA='INST',
                        FONCTION=rhoi_5,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=9.086726836580E+06,
                        #
                        VALE_PARA=500.0,
                        NOM_PARA='INST',
                        FONCTION=rhoi_5,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-0.05441691165723,
                        #
                        VALE_PARA=100.0,
                        NOM_PARA='INST',
                        FONCTION=gammi_5,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-0.28714372712474,

                        VALE_PARA=500.0,
                        NOM_PARA='INST',
                        FONCTION=gammi_5,
                        ),
              )

IMPR_TABLE(TABLE=IMPDD50)

FIN()
