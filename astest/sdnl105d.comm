# MODIF  DATE 10/10/2012   AUTEUR COURTOIS M.COURTOIS 
# TITRE CHOC DE 3 POUTRES ENTRE ELLES : SOUS-STRUCTURATION ELEMENTAIRE
# sdnl105d.para = tps_job 80 mem_job 256Mo ncpus 1 liste_test R
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# CAS_TEST__: SDNL105D
#
# MODELE PROBABILISTE NONPARAMETRIQUE DE TROIS POUTRES SOUS-STRUCTURES
# S'ENTRECHOQUANT ET AYANT DES NIVEAUX D'INCERTITUDES INHOMOGENES


DEBUT(CODE=_F(  NOM = 'SDNL105D', NIV_PUB_WEB ='INTERNET',VISU_EFICAS='NON') ,
PAR_LOT='NON',DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU

#
MAYA=LIRE_MAILLAGE( )

MAYA=DEFI_GROUP( reuse=MAYA,   MAILLAGE=MAYA,
  CREA_GROUP_MA=_F(  NOM = 'TOUT', TOUT = 'OUI'))

#
MATERIO1=DEFI_MATERIAU(  ELAS=_F( RHO = 1.E08,  NU = 0.3,  E = 1.E10))

MATERIO2=DEFI_MATERIAU(  ELAS=_F( RHO = 1.E08,  NU = 0.,   E = 1.E15))
#
CHMAT=AFFE_MATERIAU(  MAILLAGE=MAYA,AFFE=(
                              _F( GROUP_MA = 'SOUPLE', MATER = MATERIO1),
                              _F( GROUP_MA = 'RIGIDE', MATER = MATERIO2),
                              ))

#
BARRE=AFFE_MODELE(  MAILLAGE=MAYA,
                            AFFE=(_F( GROUP_MA='SOUPLE',
                                  MODELISATION = 'POU_D_E',
                                  PHENOMENE = 'MECANIQUE'),
                                  _F(GROUP_MA=('RESSO',),
                                  PHENOMENE='MECANIQUE',
                                  MODELISATION='DIS_TR',),
                                  _F( GROUP_MA='RIGIDE',
                                  MODELISATION = 'POU_D_E',
                                  PHENOMENE = 'MECANIQUE'),
                                  ),)

#
CARA=AFFE_CARA_ELEM(  MODELE=BARRE,
                           POUTRE=(_F(
                                    GROUP_MA = ('SOUPLE',),
                                    SECTION = 'CERCLE',
                                    CARA = ('R', 'EP',),  VALE = (0.1, 0.01,),),
                                    _F(
                                    GROUP_MA = ('RIGIDE',),
                                    SECTION = 'CERCLE',
                                    CARA = ('R', 'EP',),  VALE = (0.1, 0.01,),),
                                    ),
                           DISCRET=(
                                 _F(GROUP_MA='RESSO',
                                    CARA='K_TR_D_L',
                                    VALE=(1.0,1.0,1.0,1.0,1.0,1.0,),),
                                 _F(GROUP_MA='RESSO',
                                    CARA='M_TR_L',
                                    VALE=(0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
                                    0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
                                    0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
                                    0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,),),
                                    ),)

#
###
###### CHAQUE BARRE EST IDENTIQUE => UNE SEULE SOUS-STRUCTURE
###
#
GUIDAGE=AFFE_CHAR_MECA(    MODELE=BARRE,DDL_IMPO=(
                           _F( TOUT = 'OUI',
                                     DX = 0., DZ = 0., DRX = 0., DRY = 0.),
                           _F( GROUP_NO = ('L1','RESS'),  DY = 0., DRZ = 0.),
                           ))
#
CHARGE=AFFE_CHAR_MECA(    MODELE=BARRE,
                           DDL_IMPO=_F( GROUP_NO = 'L2',  DY = 0., DRZ = 0.))

#
CHARTRAN=AFFE_CHAR_MECA(        MODELE=BARRE,
                           FORCE_NODALE=_F( NOEUD = 'N8',  FY = 1000.))

#
K_ELEM=CALC_MATR_ELEM(      MODELE=BARRE,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='RIGI_MECA',
                               CHARGE=(GUIDAGE,  CHARGE,))

#
M_ELEM=CALC_MATR_ELEM(      MODELE=BARRE,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='MASS_MECA',
                               CHARGE=(GUIDAGE,  CHARGE,))

#
V_ELEM=CALC_VECT_ELEM( OPTION='CHAR_MECA',
                            CHARGE=CHARTRAN)

#
NUM=NUME_DDL(  MATR_RIGI=K_ELEM)

#
K_ASSE=ASSE_MATRICE(  MATR_ELEM=K_ELEM,
                           NUME_DDL=NUM)

#
M_ASSE=ASSE_MATRICE(  MATR_ELEM=M_ELEM,
                           NUME_DDL=NUM)

#
V_ASSE=ASSE_VECTEUR(  VECT_ELEM=V_ELEM,
                           NUME_DDL=NUM)

#
MODES=MODE_ITER_INV(     MATR_RIGI=K_ASSE,
                                 MATR_MASS=M_ASSE,
          CALC_FREQ=_F( NMAX_FREQ = 15, OPTION = 'AJUSTE', FREQ = (2., 40.,),
                     NMAX_ITER_AJUSTE = 100,PREC_AJUSTE=1.E-14),
          CALC_MODE=_F( NMAX_ITER = 100, PREC=1.E-14))



#
INTERF1=DEFI_INTERF_DYNA(   NUME_DDL=NUM,
                             INTERFACE=_F( NOM = 'LIAI1',
                                        TYPE = 'CRAIGB',
                                        MASQUE = ('DX', 'DZ', 'DRX', 'DRY',),
                                        GROUP_NO = 'L2')
                              )

#
BAMO1=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = INTERF1,
                                        MODE_MECA = MODES,
                                        NMAX_MODE = 10)
                              )

#
MACRO1M=MACR_ELEM_DYNA(  BASE_MODALE=BAMO1,
                                AMOR_REDUIT=(0.04,0.04,0.04,0.04,0.04,),
                                 )

#
INTERF2=DEFI_INTERF_DYNA(   NUME_DDL=NUM,INTERFACE=(
                             _F( NOM = 'LIAI2',
                                        TYPE = 'CRAIGB',
                                        MASQUE = ('DX', 'DZ', 'DRX', 'DRY',),
                                        GROUP_NO = 'L2'),
                             _F( NOM = 'LIAI3',
                                        TYPE = 'CRAIGB',
                                        MASQUE = ('DX', 'DZ', 'DRX', 'DRY',),
                                        GROUP_NO = 'L1'))
                             )
#
BAMO2=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = INTERF2,
                                        MODE_MECA = MODES,
                                        NMAX_MODE = 10)
                             )

MACRO2M=MACR_ELEM_DYNA(  BASE_MODALE=BAMO2,
                                AMOR_REDUIT=(0.04,0.04,0.04,0.04,0.04,),
                                )
#

INTERF3=DEFI_INTERF_DYNA(   NUME_DDL=NUM,
                             INTERFACE=_F( NOM = 'LIAI4',
                                        TYPE = 'CRAIGB',
                                        MASQUE = ('DX', 'DZ', 'DRX', 'DRY',),
                                        GROUP_NO = 'L1')
                              )

BAMO3=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = INTERF3,
                                        MODE_MECA = MODES,
                                        NMAX_MODE = 10)
                              )

MACRO3M=MACR_ELEM_DYNA(  BASE_MODALE=BAMO3,
                                AMOR_REDUIT=(0.04,0.04,0.04,0.04,0.04,),
                                )
#

IMPR_RESU(MODELE=BARRE,
          RESU=(_F(MAILLAGE=MAYA,
                   RESULTAT=BAMO2,),)
                   )
#
IMPR_RESU(FORMAT='MED',
          RESU=(_F(MAILLAGE=MAYA,
                   RESULTAT=BAMO2,),)
                   )

OBSTACLE=DEFI_OBSTACLE( TYPE='BI_PLAN_Y')

LIST_R=DEFI_LIST_REEL(       DEBUT=0.,
                           INTERVALLE=_F( JUSQU_A = 1.,
#                                       NOMBRE = 100))
                                       NOMBRE = 1000))

##############################################################################
#                                                                            #
# CALCUL PAR MONTE-CARLO DE LA MOYENNE ET DU "DOMAINE DE CONFIANCE" DE LA    #
# REPONSE HARMONIQUE                                                         #
#                                                                            #
##############################################################################

# PREPARATION POST-TRAITEMENT
grand_obs=['ACCE','VITE','DEPL']
n_obs=len(grand_obs)
SUP_=dict([(grand,0.) for grand in grand_obs])
INF_=dict([(grand,0.) for grand in grand_obs])
SUM1_=dict([(grand,0.) for grand in grand_obs])
SUM2_=dict([(grand,0.) for grand in grand_obs])

# COEFFICIENTS DE VARIATION DES MATRICES ALEATOIRES
DELTA_K1 = 0.1

DELTA_K2 = 0.2

DELTA_K3 = 0.1

ns=10

# 10 REALISATIONS DES PROCESSUS STOCHASTIQUES ( 10 TIRAGES)

for k in range(1,ns+1):

   MACRO1=GENE_MATR_ALEA( MATR_MOYEN=MACRO1M,
                           COEF_VAR_RIGI=DELTA_K1,
#                           COEF_VAR_MASS=DELTA_M1,
#                           COEF_VAR_AMOR=DELTA_D1,
                          )

#
   MACRO2=GENE_MATR_ALEA( MATR_MOYEN=MACRO2M,
                           COEF_VAR_RIGI=DELTA_K2,
#                           COEF_VAR_MASS=DELTA_M2,
#                           COEF_VAR_AMOR=DELTA_D2,
                          )

   MACRO3=GENE_MATR_ALEA( MATR_MOYEN=MACRO3M,
                           COEF_VAR_RIGI=DELTA_K3,
#                           COEF_VAR_MASS=DELTA_M3,
#                           COEF_VAR_AMOR=DELTA_D3,
                          )

#
###
###### MODELE GENERALISE :
###
#
   MODEGE=DEFI_MODELE_GENE( SOUS_STRUC=(_F( NOM = 'BARRE1',
                                         MACR_ELEM_DYNA = MACRO1,
                                         ANGL_NAUT = (0., 0., 0.,),
                                         TRANS=(0.,0.,0.),),
                             _F( NOM = 'BARRE2',
                                         MACR_ELEM_DYNA = MACRO2,
                                         ANGL_NAUT = (0., 0., 0.,),
                                         TRANS=(0.,0.2,0.),),
                             _F( NOM = 'BARRE3',
                                         MACR_ELEM_DYNA = MACRO3,
                                         ANGL_NAUT = (0., 0., 0.,),
                                         TRANS=(0.,0.4,0.),)),
                            LIAISON=(
                                _F( SOUS_STRUC_1 = 'BARRE1',
                                         SOUS_STRUC_2 = 'BARRE2',
                                         INTERFACE_1 = 'LIAI1',
                                         INTERFACE_2 = 'LIAI3'),
                                _F( SOUS_STRUC_1 = 'BARRE2',
                                         SOUS_STRUC_2 = 'BARRE3',
                                         INTERFACE_1 = 'LIAI2',
                                         INTERFACE_2 = 'LIAI4')))


#
   NUMEGE=NUME_DDL_GENE(  MODELE_GENE=MODEGE)

#
   K_GENE=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='RIGI_GENE')


#
   M_GENE=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='MASS_GENE')


#   A_GENE=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
#                                  OPTION='AMOR_GENE')

#
   F_GENE=ASSE_VECT_GENE(    NUME_DDL_GENE=NUMEGE,
                           CHAR_SOUS_STRUC=_F( SOUS_STRUC = 'BARRE1',
                                            VECT_ASSE = V_ASSE))

#
###
###### CALCUL MODAL :
###
#
   RESGEN=MODE_ITER_SIMULT(     MATR_RIGI=K_GENE,
                                 MATR_MASS=M_GENE,
                             CALC_FREQ=_F( NMAX_FREQ = 15))




   SQUEL=DEFI_SQUELETTE(  MODELE_GENE=MODEGE,SOUS_STRUC=(
                            _F( NOM = 'BARRE1',GROUP_MA='TOUT'),
                            _F( NOM = 'BARRE2',GROUP_MA='TOUT'),
                            _F( NOM = 'BARRE3',GROUP_MA='TOUT')))


   MODGLO=REST_SOUS_STRUC(   RESU_GENE=RESGEN,
                             SQUELETTE=SQUEL)


   MODSST=REST_SOUS_STRUC(   RESU_GENE=RESGEN,
                           SOUS_STRUC='BARRE1')


#
###
###### PROJECTIONS SUR BASE MODALE :
###
#
   NUMEMODE=NUME_DDL_GENE(       BASE=RESGEN,
                           STOCKAGE='DIAG')

#
   K_PROJ=PROJ_MATR_BASE(            BASE=RESGEN,
                             NUME_DDL_GENE=NUMEMODE,
                            MATR_ASSE_GENE=K_GENE)

#
   M_PROJ=PROJ_MATR_BASE(            BASE=RESGEN,
                             NUME_DDL_GENE=NUMEMODE,
                            MATR_ASSE_GENE=M_GENE)

#   A_PROJ=PROJ_MATR_BASE(            BASE=RESGEN,
#                             NUME_DDL_GENE=NUMEMODE,
#                            MATR_ASSE_GENE=A_GENE)

#
   F_PROJ=PROJ_VECT_BASE(            BASE=RESGEN,
                             NUME_DDL_GENE=NUMEMODE,
                            VECT_ASSE_GENE=F_GENE)

#
###
###### CALCULS TRANSITOIRES SUR BASE MODALE
###
#
   TRAN_GE1=DYNA_VIBRA(TYPE_CALCUL='TRAN',BASE_CALCUL='GENE',
                             SCHEMA_TEMPS=_F(SCHEMA='EULER',),
                             MATR_MASS=M_PROJ,
                             MATR_RIGI=K_PROJ,
#                             MATR_AMOR=A_PROJ,
                                EXCIT=_F( VECT_ASSE_GENE = F_PROJ,
                                       COEF_MULT = 1000.),
                             INCREMENT=_F(  INST_INIT = 0.,
                                          INST_FIN = 4.,
                                        PAS = 2.E-4),
                            ARCHIVAGE=_F( PAS_ARCH = 5),CHOC=(
                                 _F( INTITULE = 'CHOC1',
                                       SOUS_STRUC_1 = 'BARRE1',
                                       NOEUD_1 = 'N8',
                                       SOUS_STRUC_2 = 'BARRE2',
                                       GROUP_NO_2 = 'GROUP1',
                                       OBSTACLE = OBSTACLE,
                                       REPERE = 'GLOBAL',
                                       NORM_OBST = (1., 0., 0.,),
                                       DIST_1 = 0.0995,
                                       DIST_2 = 0.0995,
                                       RIGI_NOR = 1.E+8),
                                 _F( INTITULE = 'CHOC2',
                                       SOUS_STRUC_1 = 'BARRE2',
                                       GROUP_NO_1 = 'GROUP1',
                                       SOUS_STRUC_2 = 'BARRE3',
                                       NOEUD_2 = 'N8',
                                       OBSTACLE = OBSTACLE,
                                       REPERE = 'BARRE3',
                                       ORIG_OBST = (0.5, 0.1, 0.,),
                                       NORM_OBST = (1., 0., 0.,),
                                       DIST_1 = 0.0995,
                                       DIST_2 = 0.0995,
                                       RIGI_NOR = 1.E+8))
                            )





   TRAN1=REST_GENE_PHYS(   RESU_GENE=TRAN_GE1,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R,
                             INTERPOL='LIN',
                             MODE_MECA=MODGLO )

# CONSTRCTION DES ESTIMATIONS STATISTIQUES (SOMMES INTERMEDIAIRES NOTAMMENT)
   for grand in grand_obs :
      DYOBS=RECU_FONCTION(RESULTAT = TRAN1,
                          NOM_CHAM=grand,
                          NOM_CMP='DY',
                          NOEUD='NO8')


      RMS1=INFO_FONCTION( RMS=_F(  FONCTION = DYOBS))

      val_rms=RMS1['RMS',1]

      SUM1_[grand]=SUM1_[grand]+val_rms
      SUM2_[grand]=SUM2_[grand]+val_rms**2
      if val_rms>SUP_[grand]:
         SUP_[grand]=val_rms
      if k==1:
         INF_[grand]=val_rms
      if val_rms<INF_[grand]:
         INF_[grand]=val_rms

      DETRUIRE(CONCEPT=_F(NOM=(DYOBS,RMS1,)),INFO=1)

   DETRUIRE(CONCEPT=_F(NOM=(MACRO1,MACRO2,MACRO3,MODEGE,K_GENE,TRAN1,
                              M_GENE,F_GENE,NUMEGE,RESGEN,K_PROJ,M_PROJ,
                              F_PROJ,TRAN_GE1,NUMEMODE,SQUEL,MODGLO,MODSST)),INFO=1)

# CALCUL DES ESTIMATEURS FINAUX

MOY_=dict([(grand,0.) for grand in grand_obs])
VAR_=dict([(grand,0.) for grand in grand_obs])

for grand in grand_obs :
      MOY_[grand]=SUM1_[grand]/ns
      VAR_[grand]=(SUM2_[grand]-ns*MOY_[grand]**2)/(ns-1)

print 'Moyenne des valeurs RMS des accelerations = ', MOY_['ACCE']
print 'Max des valeurs RMS des vitesses = ', SUP_['VITE']

# EXEMPLE CREATION ET IMPRESSION TABLE AVEC RESULTATS STATISTIQUES

RMS=CREA_TABLE(LISTE=(
                            _F( LISTE_K=tuple(grand_obs),
                           PARA='NOM_CHAM'),
          _F(LISTE_R=tuple([y for x,y in SUP_.iteritems()]),
                            PARA='SUP'),
          _F(LISTE_R=tuple([y for x,y in INF_.iteritems()]),
                            PARA='INF'),
          _F(LISTE_R=tuple([y for x,y in MOY_.iteritems()]),
                            PARA='MOY'),
          _F(LISTE_R=tuple([y for x,y in VAR_.iteritems()]),
                            PARA='VAR'),),
                  );

IMPR_TABLE(TABLE=RMS)

#################################
#                               #
#     TESTS DE VALIDATION       #
#                               #
#################################
# PAS DE REFERENCE ANALYTIQUE OU BIBLIO => TESTS DE NON REGRESSION

# LES REFERENCES CI-DESSOUS NE SONT PAS CONVERGES STATISTIQUEMENT CAR LE NOMBRE
# ns DE SIMULATIONS EST TROP PETIT (AFIN DE NE PAS AUGMENTER LE TEMPS CPU NECESSAIRE
# POUR LE CAS TEST).
# CES RESULTATS NE SONT DONC VALABLES QUE POUR LA SUITE DE NOMBRES PSEUDO-ALEATOIRES
# UTILISEE (I.E. CELLE DE PYTHON v2.3).

TEST_TABLE(
           VALE_CALC=4.1245671733566001,
           TOLE_MACHINE=1.E-3,
           NOM_PARA='SUP',
           TABLE=RMS,
           FILTRE=_F(NOM_PARA='NOM_CHAM',
                     VALE_K='ACCE',),
           )

TEST_TABLE(
           VALE_CALC=3.4852445451528,
           TOLE_MACHINE=1.E-3,
           NOM_PARA='INF',
           TABLE=RMS,
           FILTRE=_F(NOM_PARA='NOM_CHAM',
                     VALE_K='ACCE',),
           )

TEST_TABLE(
           VALE_CALC=3.7318143788391001,
           TOLE_MACHINE=1.E-3,
           NOM_PARA='MOY',
           TABLE=RMS,
           FILTRE=_F(NOM_PARA='NOM_CHAM',
                     VALE_K='ACCE',),
           )

TEST_TABLE(
           VALE_CALC=0.043744293902475001,
           TOLE_MACHINE=1.E-3,
           NOM_PARA='VAR',
           TABLE=RMS,
           FILTRE=_F(NOM_PARA='NOM_CHAM',
                     VALE_K='ACCE',),
           )

TEST_TABLE(
           VALE_CALC=0.011881667275226999,
           TOLE_MACHINE=1.E-3,
           NOM_PARA='SUP',
           TABLE=RMS,
           FILTRE=_F(NOM_PARA='NOM_CHAM',
                     VALE_K='VITE',),
           )

TEST_TABLE(
           VALE_CALC=0.011469763652458,
           TOLE_MACHINE=1.E-3,
           NOM_PARA='MOY',
           TABLE=RMS,
           FILTRE=_F(NOM_PARA='NOM_CHAM',
                     VALE_K='VITE',),
           )

TEST_TABLE(
           VALE_CALC=0.088058769141797,
           TOLE_MACHINE=1.E-3,
           NOM_PARA='INF',
           TABLE=RMS,
           FILTRE=_F(NOM_PARA='NOM_CHAM',
                     VALE_K='DEPL',),
           )

TEST_TABLE(
           VALE_CALC=0.092781999953829006,
           TOLE_MACHINE=1.E-3,
           NOM_PARA='MOY',
           TABLE=RMS,
           FILTRE=_F(NOM_PARA='NOM_CHAM',
                     VALE_K='DEPL',),
           )

FIN();






