### This file is generated by SALOME automatically by dump python functionality

import sys
import salome

salome.salome_init()

sys.path.insert( 0, '/home/durand/thermique/tpna01b')

import iparameters
ipar = iparameters.IParameters(salome.myStudy.GetCommonParameters("Interface Applicative", 1))

#Set up visual properties:
ipar.setProperty("AP_ACTIVE_VIEW", "VTKViewer_0_0")
ipar.setProperty("AP_WORKSTACK_INFO", "(splitter orientation=0 sizes=1278 (views active='VTKViewer_0_0' 'VTKViewer_0_0' 'OCCViewer_0_0'))")
ipar.setProperty("AP_ACTIVE_MODULE", "Mesh")
ipar.setProperty("AP_SAVEPOINT_NAME", "GUI state: 2")
#Set up lists:
# fill list AP_VIEWERS_LIST
ipar.append("AP_VIEWERS_LIST", "VTKViewer_1")
ipar.append("AP_VIEWERS_LIST", "OCCViewer_2")
# fill list VTKViewer_1
ipar.append("VTKViewer_1", "VTK scene:2 - viewer:1")
ipar.append("VTKViewer_1", "6.265334332626e-01*-6.885352862021e-01*6.277512559783e-01*3.455000072718e-01*5.000000074506e-02*0.000000000000e+00*-1.060141571008e-01*6.202683326712e-01*7.771925076707e-01*4.587431682152e-01*1.000000000000e+00*1.000000000000e+00*1.000000000000e+00*0* Graduated Axis: * Name *1*X*1.00*0.00*0.00*0*0*0*0* Labels *1*3*2*1.00*0.00*0.00*0*0*0*0* Tick marks *1*5* Graduated Axis: * Name *1*Y*0.00*1.00*0.00*0*0*0*0* Labels *1*3*2*0.00*1.00*0.00*0*0*0*0* Tick marks *1*5* Graduated Axis: * Name *1*Z*0.00*0.00*1.00*0*0*0*0* Labels *1*3*2*0.00*0.00*1.00*0*0*0*0* Tick marks *1*5")
# fill list OCCViewer_2
ipar.append("OCCViewer_2", "OCC scene:6 - viewer:1")
ipar.append("OCCViewer_2", "2.498118124845e+03*2.960211973644e-01*5.348052532679e-02*1.665174216032e-01*-3.721909523010e-01*9.130968451500e-01*5.788803038892e+00*1.512453774922e-03*1.606119796634e-02*4.889755323529e-02*8.325692014490e+01*-1.860720320143e+02*4.565792075504e+02*1.000000000000e+00*1.000000000000e+00*1.000000000000e+00")
# fill list AP_MODULES_LIST
ipar.append("AP_MODULES_LIST", "Geometry")
ipar.append("AP_MODULES_LIST", "Mesh")


import tpna01b_GEOM
tpna01b_GEOM.RebuildData(salome.myStudy)
import tpna01b_SMESH
tpna01b_SMESH.RebuildData(salome.myStudy)

if salome.sg.hasDesktop():
	salome.sg.updateObjBrowser(1)
	iparameters.getSession().restoreVisualState(1)


### This file is generated by SALOME automatically by dump python functionality
### of GEOM component

import geompy
import math
import SALOMEDS

def RebuildData(theStudy):
	geompy.init_geom(theStudy)
	global Face, C, D, A, B, fext, fint, Y, OY, O, Wire_1
	O = geompy.MakeVertex(0, 0, 0)
	A = geompy.MakeVertex(0.3, 0, 0)
	B = geompy.MakeVertex(0.391, 0, 0)
	C = geompy.MakeVertex(0.391, 0.1, 0)
	D = geompy.MakeVertex(0.3, 0.1, 0)
	Wire_1 = geompy.MakeSketcher("Sketcher:F 0.3 0:TT 0.391 0:TT 0.391 0.1:TT 0.3 0.1:TT 0.3 0", [0, 0, 0, 0, 0, 1, 1, 0, 0])
	Face = geompy.MakeFaceWires([Wire_1], 1)
	listSubShapeIDs = geompy.SubShapeAllIDs(Face, geompy.ShapeType["VERTEX"])
	listSubShapeIDs = geompy.SubShapeAllIDs(Face, geompy.ShapeType["EDGE"])
	listSubShapeIDs = geompy.SubShapeAllIDs(Face, geompy.ShapeType["EDGE"])
	Y = geompy.MakeVertex(0, 10, 0)
	OY = geompy.MakeVector(O, Y)
	fext = geompy.CreateGroup(Face, geompy.ShapeType["EDGE"])
	geompy.UnionIDs(fext, [6])
	Face = geompy.GetMainShape(fext)
	Face = geompy.GetMainShape(fext)
	Face = geompy.GetMainShape(fext)
	Face = geompy.GetMainShape(fext)
	Face = geompy.GetMainShape(fext)
	Face = geompy.GetMainShape(fext)
	fint = geompy.CreateGroup(Face, geompy.ShapeType["EDGE"])
	geompy.UnionIDs(fint, [10])
	Face = geompy.GetMainShape(fint)
	Face = geompy.GetMainShape(fint)
	Face = geompy.GetMainShape(fint)
	Face = geompy.GetMainShape(fint)
	Face = geompy.GetMainShape(fint)
	Face = geompy.GetMainShape(fint)
	fint.SetColor(SALOMEDS.Color(0,0.666667,1))
	fext.SetColor(SALOMEDS.Color(0,0.666667,1))
	geompy.addToStudy( O, "O" )
	geompy.addToStudy( A, "A" )
	geompy.addToStudy( B, "B" )
	geompy.addToStudy( C, "C" )
	geompy.addToStudy( D, "D" )
	geompy.addToStudy( Wire_1, "Wire_1" )
	geompy.addToStudy( Face, "Face" )
	geompy.addToStudy( Y, "Y" )
	geompy.addToStudy( OY, "OY" )
	geompy.addToStudyInFather( Face, fext, "fext" )
	geompy.addToStudyInFather( Face, fint, "fint" )
	pass


### This file is generated by SALOME automatically by dump python functionality of SMESH component

import salome, SMESH
import smesh

## import GEOM dump file ## 
import string, os, sys, re
sys.path.insert( 0, os.path.dirname(__file__) )
exec("from "+re.sub("SMESH$","GEOM",__name__)+" import *")


def RebuildData(theStudy):
	aFilterManager = smesh.smesh.CreateFilterManager()
	smesh.smesh.SetCurrentStudy(theStudy)
	import StdMeshers
	pattern = smesh.GetPattern()
	Mesh_1 = smesh.Mesh(Face)
	Regular_1D = Mesh_1.Segment()
	Nb_Segments_1 = Regular_1D.NumberOfSegments(4)
	Nb_Segments_1.SetDistrType( 0 )
	Quadrangle_2D = Mesh_1.Quadrangle()
	fext_1 = Mesh_1.Group(fext)
	fint_1 = Mesh_1.Group(fint)
	isDone = Mesh_1.Compute()
	mesh_editor_0 = Mesh_1.GetMeshEditor()
	axis = SMESH.AxisStruct( 0, 0, 0, 0, 10, 0 )
	mesh_editor_0.RotationSweepMakeGroups( [ 20, 30, 27, 24, 21, 18, 31, 28, 25, 22, 19, 32, 17, 29, 26, 23 ], axis, -0.15708, 20, 1e-05 )

	fext.SetColor(SALOMEDS.Color(0,0.666667,1))
	fint.SetColor(SALOMEDS.Color(0,0.666667,1))
	## set object names  
	isGUIMode = 1
	if isGUIMode and salome.sg.hasDesktop():
		smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
		smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
		smesh.SetName(Nb_Segments_1, 'Nb. Segments_1')
		smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
		smesh.SetName(fext_1, 'fext')
		smesh.SetName(fint_1, 'fint')

		salome.sg.updateObjBrowser(0)

	pass
