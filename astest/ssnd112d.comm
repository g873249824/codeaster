# -*- coding: utf-8 -*-
# TITRE : GRANDES DEFORMATIONS SUR UN CUBE MONOCRISTALLIN LOI MONO_DD_CC
# ======================================================================
# COPYRIGHT (C) 1991 - 2015  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'));


from numpy.linalg import norm
import numpy as NP

TEMP=250.

E=(236-0.0459*TEMP)*1.e3  # MPa
Nu=0.35
MU=E/2./(1.+Nu)

tau_f  = 10.    # MPa
tau_0  = 363.   # MPa
rho_inip= 1.E6   # en mm**-2
rho_ini= 1.E5   # en mm**-2
y_at   = 1.e-6    # mm
N      = 20.
gamma0 = 1.E-5    # s**-1
GH      = 1.e11   # s**-1
b      = 2.48e-7 # mm
DeltaG0= 0.84     # eV
## epsi_1 = 1.e-5    # s**-1
D      = 10.e-6   # mm
d_lat  = 1.
K_f    = 30.
K_self = 100.
k      = 8.62E-5  # "Constante de Boltzmann, en eV/K"

l_c = 500.*b*(TEMP/300.)**2

a_coli=0.7
a_ncol=0.1
a_self=0.1024
alpha_self=sqrt(a_self)

rho_mob= rho_ini    # en mm**-2

ACIERDD=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=Nu,
                            ALPHA=0.),
                      MONO_DD_CC=_F(
                                    B       =b,
                                    GH       =GH,
                                    DELTAG0 =DeltaG0,
                                    TAU_0   =tau_0,
                                    TAU_F   =tau_f,
                                    GAMMA0  =gamma0,
                                    N       =N,
                                    RHO_MOB =rho_mob,
                                    D       =D,
                                    D_LAT   =d_lat,
                                    Y_AT    =y_at,
                                    K_F     =K_f,
                                    K_SELF  =K_self,
                                    K_BOLTZ =k,
                                    H1      =a_self,
                                    H2      =a_coli,
                                    H3      =a_ncol,
                                    H4      =a_ncol,
                                    H5      =a_ncol,
                                    H6      =a_ncol,
                                     ),
                    );


MAIL = LIRE_MAILLAGE();

MAIL = DEFI_GROUP(reuse = MAIL,
                  MAILLAGE = MAIL,
                  CREA_GROUP_MA=(_F(NOM='VOL' , TOUT='OUI', TYPE_MAILLE='3D',),
                                 ),
                                )

MAIL = MODI_MAILLAGE(reuse = MAIL,
                     MAILLAGE = MAIL,
                     ORIE_PEAU_3D=_F(GROUP_MA=('Z0','Z1',),),
                     );

TROISD = AFFE_MODELE(MAILLAGE = MAIL,
                     AFFE=(_F(TOUT='OUI',
                              PHENOMENE='MECANIQUE',
                              MODELISATION='3D',
                              ),
                           _F(GROUP_MA=('PX1',),
                              PHENOMENE='MECANIQUE',
                              MODELISATION='DIS_T',),
                           ),
                   );



TEMPE=CREA_CHAMP(OPERATION='AFFE', TYPE_CHAM='NOEU_TEMP_R',
               MAILLAGE=MAIL,
                   AFFE=_F(
               TOUT = 'OUI',
               NOM_CMP = 'TEMP',
               VALE= TEMP)
             )


MAT=AFFE_MATERIAU(MAILLAGE=MAIL,
                        AFFE_VARC=(_F(TOUT='OUI',
                                     CHAM_GD=TEMPE,
                                     NOM_VARC='TEMP',
                                     VALE_REF=TEMP),),
                  AFFE=_F(TOUT='OUI',
                          MATER=ACIERDD,),);

COMPORDD=DEFI_COMPOR(MONOCRISTAL=(_F(MATER=ACIERDD,
                                     ELAS='ELAS',
                                     ECOULEMENT='MONO_DD_CC',
                                     FAMI_SYST_GLIS='CUBIQUE1',
                                    ),
                                 ),
                     );

TRAC=AFFE_CHAR_MECA(MODELE=TROISD,
                    DDL_IMPO=(
                              _F(GROUP_NO='ORIG', DX=0.0,DY=0.,DZ=0.),
                              _F(GROUP_MA='Z0', DZ=0.0,),
                              _F(GROUP_MA='Z1', DZ=1.0, ),
                              ),
                    INFO=1,
                   );

epsmax=0.4

viteps=1.e-4

tmax=epsmax/viteps


COEF=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,tmax,epsmax),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',
                   );


LINSTDD=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=tmax,
                                      NOMBRE=200,),
                                  ),
                      );


LIS2DD =DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST =LINSTDD ),
                        ECHEC=(_F(ACTION        = 'DECOUPE',
                                 SUBD_METHODE  = 'MANUEL',
                                 SUBD_NIVEAU = 10,
                                 SUBD_PAS=10,
                                 SUBD_PAS_MINI=1e-6,),
                              _F(EVENEMENT = 'DIVE_RESI'),)
                        )

# densites de dislocation initiales (cf zzzz130a)
nb_syst = 12

nvarsup=0

mode='gdef'

if mode=='hpp'  : nvarsup=0
if mode=='gdef' : nvarsup=9+9
if mode=='rota' : nvarsup=16

# systeme principal  DD_CC : D1 (numero 5)
# systeme secondaire DD_CC : A6 (numero 8)
syst_prin=5
syst_seco=8

liste_var = tuple(['V' + str(i) for i in range(1, 6 + 3*nb_syst +  12+nvarsup + 3 + 1)])
liste_vale = 6*[0.0] + nb_syst*[rho_ini, 0.0, 0.0] + (12+nvarsup + 3) *[0.0]
liste_vale[6+3*(syst_prin-1)]=rho_inip

VAIN11= CREA_CHAMP(OPERATION = 'AFFE', TYPE_CHAM = 'ELGA_VARI_R', MODELE = TROISD,
                   AFFE=(_F(GROUP_MA = 'VOL', NOM_CMP = liste_var, VALE = liste_vale, ),
                         _F(GROUP_MA = 'PX1', NOM_CMP = 'V1', VALE = 0, ),
                         ),
                    );

NORME = FORMULE(VALE='sqrt(DX*DX+DY*DY+DZ*DZ)',
              NOM_PARA=('DX','DY','DZ',));

# Calcul des angles d'Euler correspondant a une orientation cristallographique donnee

h=-1
k=4
l=9

phi1=0
phi =NP.arccos(l / NP.sqrt( h*h + k*k + l*l) ) * 180. / NP.pi
phi2=NP.arctan2( h / NP.sqrt( h*h + k*k ) , k / NP.sqrt( h*h + k*k ) )* 180. / NP.pi

pena = 1.E4 # pour eviter un pivot nul en rotation
#pena = 1.E6 a pena=1 en change rien

ORIEN=AFFE_CARA_ELEM(MODELE=TROISD,
                     MASSIF=_F(GROUP_MA='VOL',ANGL_EULER=(phi1, phi, phi2),),
                     DISCRET=_F(GROUP_MA=('PX1',),
                                CARA='K_T_D_N',
                                VALE=(0.,pena,0.,),),
                     );


CoefRef = 1.

SOLNL=STAT_NON_LINE(
                   # ETAT_INIT=_F(EVOL_NOLI=SOLNL),reuse=SOLNL,
                    ETAT_INIT = _F(VARI=VAIN11,),
                    MODELE = TROISD,
                    CHAM_MATER = MAT,
                    CARA_ELEM = ORIEN,
                    EXCIT=(_F(CHARGE=TRAC,
                              FONC_MULT=COEF,),),
                    COMPORTEMENT=(_F(
                                  RELATION='MONOCRISTAL',
                                  COMPOR=COMPORDD,
                                  DEFORMATION='SIMO_MIEHE',
                                  ITER_INTE_MAXI=100,
                                  ALGO_INTE='NEWTON_PERT',
                                  ),
                               _F(RELATION='ELAS',
                                  GROUP_MA=('PX1'),),
                              ),
                     INCREMENT=(_F(LIST_INST=LIS2DD, INST_FIN=tmax),),

                     NEWTON=(_F(REAC_ITER=1,PREDICTION='EXTRAPOLE'),),

                     ARCHIVAGE=_F(LIST_INST=LINSTDD),

                     SUIVI_DDL=( _F(NOM_CMP    ='DZ',
                                   NOM_CHAM   ='DEPL',
                                   TOUT   ='OUI',
                                   EVAL_CHAM  ='MAX',),
                                _F(NOM_CMP    ='SIZZ',
                                   NOM_CHAM   ='SIEF_ELGA',
                                   TOUT='OUI',
                                   EVAL_ELGA  ='MAX',
                                   EVAL_CHAM  ='MAX',),
                                _F(NOM_CMP    ='V3',
                                   NOM_CHAM   ='VARI_ELGA',
                                   GROUP_MA='VOL',
                                   EVAL_ELGA  ='MAX',
                                   EVAL_CHAM  ='MAX',),
                                 ),
                    CONVERGENCE = _F(
                      SIGM_REFE      = tau_f,
                      RESI_REFE_RELA = 1.E-3,
                      ITER_GLOB_MAXI = 15,
                      EFFORT_REFE = CoefRef,
                      MOMENT_REFE = CoefRef,
                      ),
                    );


SOLNL=CALC_CHAMP(reuse=SOLNL,RESULTAT=SOLNL,DEFORMATION=('EPSG_ELGA'))



numpg=5

epsDIR=RECU_FONCTION(RESULTAT=SOLNL,
                   NOM_CHAM='EPSG_ELGA',
                   NOM_CMP='EPZZ',
                   MAILLE='CUBE',
                   POINT=numpg,
                   INTERPOL='LIN');

sigDIR=RECU_FONCTION(RESULTAT=SOLNL,
                   NOM_CHAM='SIEF_ELGA',
                   NOM_CMP='SIZZ',
                   MAILLE='CUBE',
                   POINT=numpg,
                   INTERPOL='LIN');

nom_cas='traction_cube-1_4_9_temp' + str(TEMP)

DEFI_FICHIER(UNITE = 28,
             FICHIER = 'REPE_OUT/epdir_'+ nom_cas + '.dat');

IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F(FONCTION=epsDIR,
                       COULEUR= 0,
                       LEGENDE= 'Edir',),),
            UNITE=28,
            TITRE='Edir = f(INST)');

DEFI_FICHIER(UNITE = 28,
             ACTION = 'LIBERER');


DEFI_FICHIER(UNITE = 28,
                FICHIER = 'REPE_OUT/sigdir_'+ nom_cas + '.dat');

IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F(FONC_X=epsDIR,
                        FONC_Y=sigDIR,
                        COULEUR= 0,
                        LEGENDE= 'SIGdir',),),
            UNITE=28,
            TITRE='SIGdir = f(Edir)');

DEFI_FICHIER(UNITE = 28,
             ACTION = 'LIBERER');



gamma=[None]*13
rho=[None]*13

system=['', 'B4', 'B2', 'B5', 'D4', 'D1', 'D6', 'A2', 'A6', 'A3', 'C5', 'C3', 'C1']

DEFI_FICHIER(UNITE = 30,
             FICHIER = 'REPE_OUT/rho_eps_'+  nom_cas + '.dat');

DEFI_FICHIER(UNITE = 31,
             FICHIER = 'REPE_OUT/gamma_eps_'+ nom_cas + '.dat');

for i in range(1,13):


    gamma[i]=RECU_FONCTION(RESULTAT=SOLNL,
                   NOM_CHAM='VARI_ELGA',
                   MAILLE='CUBE',
                   POINT=numpg,
                   NOM_CMP='V'+str(8+3*(i-1)),
                           INTERPOL='LIN');

    rho[i]=RECU_FONCTION(RESULTAT=SOLNL,
                   NOM_CHAM='VARI_ELGA',
                   MAILLE='CUBE',
                   POINT=numpg,
                   NOM_CMP='V'+str(7+3*(i-1)),
                   INTERPOL='LIN');

    IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            LEGENDE_X='\\f{Symbol}e\\f{}\sll',
            LEGENDE_Y='\\f{Symbol}r',
            COURBE=(
                    _F(FONC_X=epsDIR,
                       FONC_Y=rho[i],
                       COULEUR = i,
                       MARQUEUR = i,
                       FREQ_MARQUEUR = 10,
                       LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
            UNITE=30,);

    IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            LEGENDE_X='\\f{Symbol}e\\f{}\sll',
            LEGENDE_Y='\\f{Symbol}g',
            COURBE=(
                    _F(FONC_X=epsDIR,
                       FONC_Y=gamma[i],
                       COULEUR= i,
                       MARQUEUR = i,
                       FREQ_MARQUEUR = 10,
                       LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
            UNITE=31,);

DEFI_FICHIER(UNITE = 30,
             ACTION = 'LIBERER');

DEFI_FICHIER(UNITE = 31,
             ACTION = 'LIBERER');



DEFI_FICHIER(UNITE = 28,
                FICHIER = 'REPE_OUT/rho_5_gamma5'+  nom_cas + '.dat');

IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F( FONC_X=gamma[5],
                        FONC_Y=rho[5],
                        COULEUR= 0,
                        LEGENDE= 'rho5=f(gamma5)',),
                        ),
            UNITE=28,
            TITRE='rho5=f(gamma5)');

DEFI_FICHIER(UNITE = 28,
             ACTION = 'LIBERER');


DEFI_FICHIER(UNITE = 28,
                FICHIER = 'REPE_OUT/gamma8_gamma5'+  nom_cas + '.dat');

IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F( FONC_X=gamma[5],
                        FONC_Y=gamma[8],
                        COULEUR= 0,
                        LEGENDE= 'gamma8=f(gamma5)',),
                        ),
            UNITE=28,
            TITRE='gamma8=f(gamma5)');

DEFI_FICHIER(UNITE = 28,
             ACTION = 'LIBERER');



tdep=tmax
TEST_FONCTION(VALEUR=_F(VALE_CALC=0.48759673615812,
                        VALE_PARA=4000.0,
                        NOM_PARA='INST',
                        FONCTION=epsDIR,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=269.5572960744,
                        VALE_PARA=4000.0,
                        NOM_PARA='INST',
                        FONCTION=sigDIR,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=4.719313681672E+07,
                        VALE_PARA=4000.0,
                        NOM_PARA='INST',
                        FONCTION=rho_5,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-0.42996565009869,
                        VALE_PARA=4000.0,
                        NOM_PARA='INST',
                        FONCTION=gamma_5,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=3.847306569678E+07,
                        VALE_PARA=4000.0,
                        NOM_PARA='INST',
                        FONCTION=rho_8,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=0.26136480978897,
                        VALE_PARA=4000.0,
                        NOM_PARA='INST',
                        FONCTION=gamma_8,
                        ),
              )

FIN()
