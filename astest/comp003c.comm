# TITRE TEST BETON_BURGER_FP 3D UTILISANT SIMU_POINT_MAT
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU

# donnee materiau et fonction

#parametres elastiques
RYOUNG = 31000;
YOUNG=DEFI_FONCTION( NOM_PARA='TEMP',
                 PROL_DROITE='LINEAIRE',
                 PROL_GAUCHE='LINEAIRE',
                 VALE=(0.0, RYOUNG, 1.0, RYOUNG,)
               )

RNU = 0.2;
POISSON=DEFI_FONCTION( NOM_PARA='TEMP',
                  PROL_DROITE='LINEAIRE',
                  PROL_GAUCHE='LINEAIRE',
                  VALE=(0.0,RNU,1.0,RNU,));

ALPHA=DEFI_CONSTANTE(VALE=1.0E-6);

FONC1=DEFI_FONCTION( NOM_PARA='SECH',
                     PROL_DROITE='LINEAIRE',
                     PROL_GAUCHE='LINEAIRE',
                     VALE=(0.0, 0.0, 1.0, 1.0,)
                   )

#parametres viscosite

K_RS      = 2.E5;
ETA_RS    = 4.E10;
ETA_IS    = 1.E11;
K_RD      = 5.0E4;
ETA_RD    = 1.0E10;
ETA_ID    = 1.E11;
KAPPA     = 3.E-3;
QSR_K     = 0.;
TEMP_0_C  = 20.;


# def des materiaux
BETON = [None]*3
#unite en Pa
C_Pa = 1.e+6
YOUNG_Pa=DEFI_FONCTION( NOM_PARA='TEMP',
                 PROL_DROITE='LINEAIRE',
                 PROL_GAUCHE='LINEAIRE',
                 VALE=(0.0, 31000.*C_Pa, 1.0, 31000.*C_Pa,)
               )
K_RS_Pa = K_RS * C_Pa
ETA_RS_Pa = ETA_RS * C_Pa
ETA_IS_Pa = ETA_IS * C_Pa
K_RD_Pa = K_RD * C_Pa
ETA_RD_Pa = ETA_RD * C_Pa
ETA_ID_Pa = ETA_ID * C_Pa

BETON[0]=DEFI_MATERIAU(ELAS_FO     =_F(NU=POISSON,
                                    E=YOUNG_Pa,
                                    ALPHA=ALPHA,TEMP_DEF_ALPHA=0.,
                                    FONC_DESORP = FONC1),
              BETON_BURGER_FP =_F( K_RS      = K_RS_Pa,
                                   ETA_RS    = ETA_RS_Pa,
                                   ETA_IS    = ETA_IS_Pa,
                                   K_RD      = K_RD_Pa,
                                   ETA_RD    = ETA_RD_Pa,
                                   ETA_ID    = ETA_ID_Pa,
                                   KAPPA     = KAPPA,
                                   QSR_K     = QSR_K,
                                   TEMP_0_C  = TEMP_0_C,),
                                    );

#unite en MPa

BETON[1]=DEFI_MATERIAU(ELAS_FO     =_F(NU=POISSON,
                                    E=YOUNG,
                                    ALPHA=ALPHA,TEMP_DEF_ALPHA=0.,
                                    FONC_DESORP = FONC1),
              BETON_BURGER_FP =_F( K_RS      = K_RS,
                                   ETA_RS    = ETA_RS,
                                   ETA_IS    = ETA_IS,
                                   K_RD      = K_RD,
                                   ETA_RD    = ETA_RD,
                                   ETA_ID    = ETA_ID,
                                   KAPPA     = KAPPA,
                                   QSR_K     = QSR_K,
                                   TEMP_0_C  = TEMP_0_C,),
                                    );

compor='BETON_BURGER_FP'

##################################################################################
#Discretisation du calcul. nbequi = nombre de calculs "equivalents" : Pa, Rot
Ncal = 4
N_pas = 2*[5] + [5, 25]
nbequi=2
# les differents calculs effectues
label_cal=['_Pa_','_rot_'] + 2* ['_N']
#pointeur materiau
P_imat = [0] + [1] + (Ncal-2)*[1]

#parametres vitesse de sollicitation
vitesse = 1.e-2
t_0 = 5.e-2/(8.0*vitesse)
# calibrage des deformations maximum dans l'extension 93
calibrage = 1.0e-2;
CALIB_E=RYOUNG
CALIB_NU=RNU

# liste d'archivage
temps_ar=DEFI_LIST_REEL( VALE =[t_0*i for i in range(9)],)

# angles utilises pour la rotation
angle2=30.
angle0=0.
angles=[angle0,angle2] + (Ncal-2)*[angle0]

# les precisions sur chaque TEST_RESU
prec_ecart=[[1.E-10, 1.E-10, 1.E-10,  1.E-10],
            [1.E-10, 1.E-10, 5.E-9,   1.E-10],
            [1.E-10, 1.E-10, 1.E-10,  1.E-10]]
vale_calc=[
  [0.0E+00,             0.0E+00,             0.0E+00,             0.0E+00],
  [2.6372563740117E-14, 3.5832287690377E-15, 3.7287755594394E-09, 0.0E+00],
  [0.0E+00,             0.0E+00,             0.0E+00,             0.0E+00],
    ]


prec_tgt=2.e-2
prec_zero=[1.E-10, 0.01, 0.01]

# les quantites (invariants...) sur lequels portent les calculs d'erreur et les test_resu
ch_param2=['V1','VMIS','TRACE']
# coefficients pour ch_param2 pour calculer l'erreur sur le cas "Pa"
coef_para=[1.,C_Pa,C_Pa]

# utilitaires divers : calcul de l'erreur, renommage
INCLUDE(UNITE=91)

# definition de la temperature imposee
TIMP=DEFI_FONCTION(
                      NOM_PARA='INST',  NOM_RESU='TEMP',
                       VALE=(  0.E0,  20.,
                             10.E0*t_0, 20.,)
                        )

SECHIMP=DEFI_FONCTION(
                      NOM_PARA='INST',  NOM_RESU='SECH',
                       VALE=(  0.E0,  1.,
                             10.E0*t_0, 1.,)
                        )


###################################################################################
#  TEST 3D
##################################################################################

# les quantites extraites du calcul
ch_param=['V1','VMIS','TRACE','SIXX','SIYY','SIZZ','SIXY','SIXZ','SIYZ']

# resultats
RESU=[None]*Ncal
R_SI=[None]*len(ch_param)
TMP_S=[None]

# definition du chargement 3D
INCLUDE(UNITE=93)

#Boucle sur l'ensemble des calculs
for i in range(Ncal):
        N = N_pas[i]
        imat = P_imat[i]
        temps=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=(_F(JUSQU_A=t_0,NOMBRE=N,),
                                 _F(JUSQU_A=2.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=3.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=4.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=5.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=6.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=7.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=8.0*t_0,NOMBRE=N,),),);
#       DEFLIST =DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST = temps,),
#                          ECHEC=_F(SUBD_METHODE='UNIFORME',
#                                   SUBD_PAS=10,
#                                   SUBD_NIVEAU=2,),);
#       Resout le pb a deformation imposee
        RESU[i]=SIMU_POINT_MAT(
                   COMPORTEMENT=_F(RELATION=compor,
                                ITER_INTE_MAXI=100,
                                RESI_INTE_RELA=1.E-9),
                   ANGLE=angles[i],
                   SUPPORT='POINT',
                   AFFE_VARC=(
                   _F(  NOM_VARC='TEMP',
                        VALE_FONC=TIMP,
                        VALE_REF=20.0),
                   _F(  NOM_VARC='SECH',
                        VALE_FONC=SECHIMP,
                        VALE_REF=1.0),
                        ),
                   NEWTON=_F(MATRICE='TANGENTE',
                             REAC_ITER=1,),
                   CONVERGENCE=_F(ITER_GLOB_MAXI=50,),
                   MATER      = BETON[imat],
                   INCREMENT=_F(LIST_INST=temps),
#                  SUBD_METHODE='UNIFORME',SUBD_PAS=10,SUBD_NIVEAU=2,
                   EPSI_IMPOSE=_F(EPXX=eps_def[0], EPYY=eps_def[1], EPZZ=eps_def[2],
                                  EPXY=eps_def[3], EPXZ=eps_def[4], EPYZ=eps_def[5]),
                        );
        DETRUIRE(CONCEPT=_F(NOM=temps))
#       DETRUIRE(CONCEPT=_F(NOM=DEFLIST))
# On renomme les composantes en fonction de  l'ordre de discretisation
        R_SI=RENOMME(i,N_pas,label_cal,ch_param,RESU,R_SI)

# TEST_RESU sur les erreurs relatives
TEST_ECART(ch_param2,label_cal,N_pas,Ncal,nbequi,R_SI,prec_ecart,vale_calc,prec_zero,coef_para)

###############################################################################
# impressions
#for i in range(len(ch_param)):
#        IMPR_TABLE(TABLE=R_SI[i])

FIN();
#
