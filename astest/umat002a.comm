# person_in_charge: jean-michel.proix at edf.fr
# TITRE COMPORTEMENT UMAT 3D CHARGEMENT MULTIDIRECTIONNEL EN DEFORMATION CF COMP001x
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

from Contrib.veri_matr_tang import VERI_MATR_TANG

# Juste pour les besoins du cas-test.
# Il est preferable d'utiliser :
#       as_run --make_shared -o libumat.so src.f
# avant de lancer l'etude.
# On teste ici l'utilisation conjointe de deux bibliotheques (seul le nom de la routine change)
import os
from asrun.toolbox import make_shared

os.rename("fort.22", "fort.22.f")
os.rename("fort.23", "fort.23.f")
make_shared("libumat1.so", "fort.22.f")
make_shared("libumat2.so", "fort.23.f")


DEBUT(CODE=_F(NOM='UMAT002A',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),PAR_LOT='OUI',IMPR_MACRO='NON');

# donnee materiau et fonction


#parametres elastiques
YOUNG = 200000.0;
POISSON = 0.3;

#parametres loi ISOT_LINE
SY = 437.0;
pente = 2024.74690664;
# def des materiaux
ACIER = [None]*3
#unite en Pa
C_Pa = 1.e+6
#C_Pa = 1.
YOUNG_Pa = YOUNG * C_Pa
pente_Pa = pente * C_Pa
SY_Pa = SY * C_Pa;

E=YOUNG
NU=POISSON
LAMBDA=E*NU/(1+NU)/(1-2.*NU)
MU = E/2/(1.0+NU)
LAMBD_Pa=LAMBDA*C_Pa
MU_Pa = MU*C_Pa
LAMBB=LAMBDA/20.
LAMBB_Pa=LAMBB*C_Pa
MUB=MU/20.
MUB_Pa=MUB*C_Pa
NUB=0.

ACIER[0]=DEFI_MATERIAU(ELAS=_F(E=YOUNG_Pa,
                               NU=POISSON,
                               ALPHA=11.8e-6),
            UMAT=_F( C1 = LAMBD_Pa ,C2= MU_Pa , C3=LAMBB_Pa, C4= MUB_Pa, C5=NUB),
                    ECRO_LINE=_F(D_SIGM_EPSI=pente_Pa,
                                 SY=SY_Pa,),);
#unite en MPa
ACIER[1]=DEFI_MATERIAU(ELAS=_F(E=YOUNG,
                               NU=POISSON,
                               ALPHA=11.8e-6),
            UMAT=_F( C1 = LAMBDA ,C2= MU , C3=LAMBB, C4= MUB, C5=NUB, NB_VALE=5),
                    ECRO_LINE=_F(D_SIGM_EPSI=pente,
                                 SY=SY,),)

compor='UMAT'


#Discretisation du calcul
#Ncal = 10
Ncal = 7
N_pas = 4*[1] + [1, 5, 25, 125, 625, 3125]
N_cas = len(N_pas)

# les differents calculs effectues et les precisions sur chaque TEST_RESU
label_cal=['_Pa_','_Th_','_sym_','_rot_'] + 6* ['_N']
prec_ecart=4*[1.E-10] + [1.E-1] + (N_cas-5)*[1.E-2]
prec_tgt=1.e-8



# utilitaires divers
INCLUDE(UNITE=91)


##################################################################################
#  TEST 3D
##################################################################################

# definition du chargement 3D
INCLUDE(UNITE=93)

ch_param=['V1','VMIS','TRACE','SIXX','SIYY','SIZZ','SIXY','SIXZ','SIYZ']

#Discretisation du calcul

RESU=[None]*Ncal
R_SI=[None]*len(ch_param)
TMP_S=[None]

#pointeur materiau
P_imat = [0] + [1] + (N_cas-2)*[1]
#pointeur deformation
P_idef = 2*[0] + [1] + [2] + (N_cas-4)*[0]
#pointeur Option thermique
P_opt_ther = ["NON", "NON"] + (N_cas-2)*["NON"]
# conditions du calcul thermique
(inst_th, temp_th) = (3.0*t_0, 100.)

#Boucle sur l'ensemble des calculs
for i in range(Ncal):
        N = N_pas[i]
        imat = P_imat[i]
        idef = P_idef[i]
        eps_imp = V_EPS[idef]
        opt_ther = P_opt_ther[i]
        temps=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=(_F(JUSQU_A=t_0,NOMBRE=N,),
                                 _F(JUSQU_A=2.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=3.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=4.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=5.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=6.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=7.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=8.0*t_0,NOMBRE=N,),),);

#       Resout le pb a deformation imposee
        RESU[i]=SIMU_POINT_MAT(
                   COMP_INCR=_F(RELATION=compor,
                                NB_VARI=1,
                                LIBRAIRIE='libumat1.so',
                                NOM_ROUTINE='umat_'),
                   NEWTON=_F(MATRICE='TANGENTE',
                             REAC_ITER=1,),
                   CONVERGENCE=_F(ITER_GLOB_MAXI=10,),
                   MATER      = ACIER[imat],
                   ARCHIVAGE = _F(LIST_INST = temps_ar),
                   INCREMENT=_F(LIST_INST=temps,),
                 #  THER=_F(INST_IMP= inst_th, TEMP_IMP= temp_th, OPTION = opt_ther,),
                   EPSI_IMPOSE=_F(EPXX=eps_imp[0], EPYY=eps_imp[1], EPZZ=eps_imp[2],
                                  EPXY=eps_imp[3], EPXZ=eps_imp[4], EPYZ=eps_imp[5]),
                      INFO=2,  );

        #IMPR_TABLE(TABLE=RESU[i]);

# On renomme les composantes en fonction de  l'ordre de discretisation
        N = N_pas[i]
        chN=label_cal[i]+str(N)
        for ch in ch_param:
                j=ch_param.index(ch)
                chnew=ch+chN
                ##Extraction par type de variable
                if i==0 :
                        R_SI[j]=CALC_TABLE( TABLE=RESU[i],
                                     TITRE = ' ',
                                     ACTION=(
                                               _F(OPERATION='EXTR',
                                            NOM_PARA=('INST',ch,),),
                                              _F(OPERATION='RENOMME',
                                                NOM_PARA=(ch,chnew,),),
                                                                ),);
                else:
                        TMP_S=CALC_TABLE( TABLE=RESU[i],
                                     TITRE = ' ',
                                     ACTION=(
                                     #          _F(OPERATION='FILTRE',
                                     #       NOM_PARA='INST',
                                     #       VALE=[t_0*k for k in range(9)]),
                                      _F(OPERATION='EXTR',
                                            NOM_PARA=('INST',ch,),),
                                                _F(OPERATION='RENOMME',
                                                NOM_PARA=(ch,chnew,),),
                                                                ),);
                        R_SI[j]=CALC_TABLE( reuse=R_SI[j], TABLE=R_SI[j],
                                     TITRE = ' ',
                                        ACTION=( _F(OPERATION='COMB',
                                        TABLE=TMP_S,NOM_PARA='INST',),
                                                ),);
                        DETRUIRE ( CONCEPT = _F (NOM = TMP_S,),)
                #IMPR_TABLE(TABLE=R_SI[j]);
        DETRUIRE ( CONCEPT = _F (NOM = temps,),)

# TEST_RESU sur les erreurs relatives
# label_cal=['_Pa_','_Th_','_sym_','_rot_'] + 6* ['_N']
prec_ecart=4*[1.E-10] + [1.E-1] + (N_cas-5)*[1.E-2]

prec_zero=[1.E-10, 0.01, 0.01]

# les quantites (invariants...) sur lequels portent les calculs d'erreur et les test_resu
ch_param2=['V1','VMIS','TRACE']
TEST_ECART(ch_param2,label_cal,N_pas,Ncal,ch_param,R_SI,prec_ecart,prec_zero)


###############################################################################


# impressions

for i in range(len(ch_param)):
        IMPR_TABLE(TABLE=R_SI[i])




# TESTS DE NON REGRESSION DES QUANTITES SIGNIFICATIVES

TEST_TABLE(TABLE=R_SI[1],
           NOM_PARA='VMIS_Pa_1',
           VALE_CALC=1.6120022281101E+09,
           VALE_REFE=1.612E+09,
           FILTRE=_F(NOM_PARA='INST',VALE=6.0*t_0),
           REFERENCE='NON_DEFINI',);

TEST_TABLE(TABLE=R_SI[3],
           NOM_PARA='SIXX_Pa_1',
           VALE_CALC=-1.8475961538462E+09,
           VALE_REFE=-1.848E+09,
           FILTRE=_F(NOM_PARA='INST',VALE=6.0*t_0),
           REFERENCE='NON_DEFINI',);


# Test de la matrice tangente sur le calcul le plus fin

N = N_pas[Ncal-1]
Linst=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=(_F(JUSQU_A=t_0,NOMBRE=N,),
                                 _F(JUSQU_A=2.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=3.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=4.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=5.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=6.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=7.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=8.0*t_0,NOMBRE=N,),),);

RESU_TGT=SIMU_POINT_MAT(
                   COMP_INCR=_F(RELATION=compor,
                                TYPE_MATR_TANG='VERIFICATION',
                                NB_VARI=1,
                                VALE_PERT_RELA=1.E-5,
                                LIBRAIRIE='libumat2.so',
                                NOM_ROUTINE='second'),  # un '_' doit etre ajoute automatiquement
                   NEWTON=_F(MATRICE='TANGENTE',REAC_ITER=1,),
                   CONVERGENCE=_F(ITER_GLOB_MAXI=10,),
                   MATER      = ACIER[1],
                   INCREMENT=_F(LIST_INST=Linst,),
                   EPSI_IMPOSE=_F(EPXX=eps_imp[0], EPYY=eps_imp[1], EPZZ=eps_imp[2],
                                  EPXY=eps_imp[3], EPXZ=eps_imp[4], EPYZ=eps_imp[5]),
                      INFO=1,  );


DIFF_MAT=VERI_MATR_TANG()

TEST_TABLE(TABLE=DIFF_MAT,
           NOM_PARA='MAT_DIFF',
           TYPE_TEST='MAX',
           VALE_CALC=0.,
           VALE_REFE=0.,
           CRITERE='ABSOLU',
           PRECISION=prec_tgt,
           REFERENCE='ANALYTIQUE',);





#
IMPR_TABLE(TABLE=DIFF_MAT)
FIN();
