# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2018 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# double jonction en X, 3D, TETRA4 avec contact

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'));

MAILLAG=LIRE_MAILLAGE(FORMAT='MED',INFO=1);


# Re-orientation du maillage de peau
MAILLAG=MODI_MAILLAGE(reuse =MAILLAG,
                      MAILLAGE=MAILLAG,
                      ORIE_PEAU_3D=_F(GROUP_MA=('ENV')),
                      );

MAILLAG=DEFI_GROUP(reuse =MAILLAG,
                   MAILLAGE=MAILLAG,
                   CREA_GROUP_MA=(_F(NOM='FACE',
                                    OPTION='FACE_NORMALE',
                                    VECT_NORMALE=(0,0,1)),
                                  _F(NOM='SD1',
                                     OPTION='BANDE',
                                     POINT=(5,0,0),
                                     VECT_NORMALE=(1,0,0),
                                     DIST=0.1),
                                  _F(NOM='SD2',
                                    OPTION='FACE_NORMALE',
                                    VECT_NORMALE=(1,0,0)),
                                  _F(NOM='SD',
                                    INTERSEC=('SD1','SD2')),
                                  _F(NOM='SG1',
                                     OPTION='BANDE',
                                     POINT=(-5,0,0),
                                     VECT_NORMALE=(-1,0,0),
                                     DIST=0.1),
                                  _F(NOM='SG2',
                                    OPTION='FACE_NORMALE',
                                    VECT_NORMALE=(-1,0,0)),
                                  _F(NOM='SG',
                                    INTERSEC=('SG1','SG2')),
                                  _F(NOM='SH1',
                                     OPTION='BANDE',
                                     POINT=(0,5,0),
                                     VECT_NORMALE=(0,1,0),
                                     DIST=0.1),
                                  _F(NOM='SH2',
                                    OPTION='FACE_NORMALE',
                                    VECT_NORMALE=(0,1,0)),
                                  _F(NOM='SH',
                                    INTERSEC=('SH1','SH2')),
                                 _F(NOM='SB1',
                                     OPTION='BANDE',
                                     POINT=(0,-5,0),
                                     VECT_NORMALE=(0,-1,0),
                                     DIST=0.1),
                                  _F(NOM='SB2',
                                    OPTION='FACE_NORMALE',
                                    VECT_NORMALE=(0,-1,0)),
                                  _F(NOM='SB',
                                    INTERSEC=('SB1','SB2'))));

MODELEIN=AFFE_MODELE(MAILLAGE=MAILLAG,
                     AFFE=(_F(GROUP_MA=('VOLU','SH','SD'),
                              PHENOMENE='MECANIQUE',
                              MODELISATION='3D')));

LN1 = FORMULE(VALE='Y',
              NOM_PARA=['X', 'Y', 'Z'],)

FISS1=DEFI_FISS_XFEM(MAILLAGE=MAILLAG,
                    TYPE_DISCONTINUITE='INTERFACE',
                    DEFI_FISS=_F(FONC_LN=LN1),
                    INFO=1);

LN2 = FORMULE(VALE='X',
              NOM_PARA=['X', 'Y', 'Z'],)

FISS2=DEFI_FISS_XFEM(MAILLAGE=MAILLAG,
                    TYPE_DISCONTINUITE='INTERFACE',
                    DEFI_FISS=_F(FONC_LN=LN2),
                    JONCTION=_F(FISSURE=FISS1,POINT=(0,5,0)),
                    INFO=1);

FISS3=DEFI_FISS_XFEM(MAILLAGE=MAILLAG,
                    TYPE_DISCONTINUITE='INTERFACE',
                    DEFI_FISS=_F(FONC_LN=LN2),
                    JONCTION=_F(FISSURE=FISS1,POINT=(0,-5,0)),
                    INFO=1);

MODELEK=MODI_MODELE_XFEM(MODELE_IN=MODELEIN,
                         FISSURE=(FISS1,FISS2,FISS3),
                         CONTACT='STANDARD',
                         INFO=1);

CTXFEM = DEFI_CONTACT(MODELE         = MODELEK,
                      FORMULATION    = 'XFEM',
                      ITER_CONT_MAXI = 10,
                      REAC_GEOM = 'SANS',
                      #ELIM_ARETE='ELIM',
                      ZONE = (_F(
                                 INTEGRATION   = 'NOEUD',
                                 CONTACT_INIT  = 'OUI',
                                 GLISSIERE     = 'NON',
                                 FISS_MAIT     = FISS1,
                                 ALGO_CONT     = 'PENALISATION',COEF_PENA_CONT = 1e13,
                              ),
                              _F(
                                 INTEGRATION   = 'NOEUD',
                                 CONTACT_INIT  = 'OUI',
                                 GLISSIERE     = 'NON',
                                 FISS_MAIT     = FISS2,
                                 ALGO_CONT     = 'PENALISATION',COEF_PENA_CONT = 1e13,
                              ),
                             _F(
                                 INTEGRATION   = 'NOEUD',
                                 CONTACT_INIT  = 'OUI',
                                 GLISSIERE     = 'NON',
                                 FISS_MAIT     = FISS3,
                                 ALGO_CONT     = 'PENALISATION',COEF_PENA_CONT = 1e13,
                              ),
                            ),
                    );

E=100.0E6
nu=0.3
ACIER=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=nu,
                            RHO=7800.0));

CHAMPMAT=AFFE_MATERIAU(MAILLAGE=MAILLAG,
                       MODELE=MODELEK,
                       AFFE=_F(TOUT=('OUI'),
                                MATER=ACIER,
                                ));

VAR1=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.,0.,1.,1.));

def pression(x) :
   if x < 0 : return 1E6
   return 2E6

PRES_H = FORMULE(VALE='pression(X)',
                 pression=pression,
                 NOM_PARA='X',)
PRES_D = FORMULE(VALE='pression(Y)',
                 pression=pression,
                 NOM_PARA='Y',)

CH1=AFFE_CHAR_MECA_F(MODELE=MODELEK,
                   PRES_REP=(_F(GROUP_MA='SH',PRES = PRES_H),
                             _F(GROUP_MA='SD',PRES = PRES_D)));

CH2=AFFE_CHAR_MECA(MODELE=MODELEK,
                   DDL_IMPO=(_F(GROUP_MA='SB',DY = 0,H1Y = 0),
                             _F(GROUP_MA='SG',DX = 0,H1X = 0),
                             _F(GROUP_MA='FACE',DZ = 0)));

L_INST=DEFI_LIST_REEL(DEBUT=0.0,
                      INTERVALLE=_F(JUSQU_A=1,
                                    NOMBRE=1));

UTOT1=STAT_NON_LINE(MODELE=MODELEK,
                   CHAM_MATER=CHAMPMAT,
                   CONTACT=CTXFEM,
                   EXCIT=(_F(CHARGE=CH1),
                          _F(CHARGE=CH2)),
                   COMPORTEMENT=(_F(RELATION='ELAS',
                                 GROUP_MA='VOLU')),
                   NEWTON=_F(REAC_INCR=1,REAC_ITER=1),
                   INCREMENT=_F(LIST_INST=L_INST),
                   CONVERGENCE=(_F(ITER_GLOB_MAXI=10,
                                  RESI_GLOB_MAXI=1E-6)),
                   SOLVEUR=_F(METHODE='MUMPS',NPREC=-1),
                   ARCHIVAGE=_F(CHAM_EXCLU='VARI_ELGA'),
                   INFO=1);

#-----------------------------------------------------------
#             POST-TRAITEMENT POUR LA VISUALISATION
#-----------------------------------------------------------

MA_XFEM=POST_MAIL_XFEM(MODELE=MODELEK);

MOD_VISU=AFFE_MODELE(MAILLAGE=MA_XFEM,
                     AFFE=_F(GROUP_MA='VOLU',
                     PHENOMENE='MECANIQUE',
                     MODELISATION='3D'))

RES_XFEM=POST_CHAM_XFEM(MODELE_VISU   = MOD_VISU,
                        RESULTAT      = UTOT1)

#----------------------------------------------
#                   POST RELEVE
#----------------------------------------------

DEP=POST_RELEVE_T(ACTION=_F(INTITULE='DEPLE',
                                 GROUP_NO=('NFISSU'),
                                 RESULTAT=RES_XFEM,
                                 NOM_CHAM='DEPL',
                                 NUME_ORDRE = 1,
                                 TOUT_CMP='OUI',
                                 OPERATION='EXTRACTION'));
DEP = CALC_TABLE(TABLE = DEP,
                 reuse = DEP,
                 ACTION =_F(OPERATION = 'EXTR',
                            NOM_PARA=('NOEUD','INST','COOR_X','COOR_Y','COOR_Z','DX','DY','DZ')));

DEPP = CALC_TABLE(TABLE = DEP,
                     ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'NOEUD',
                                 CRIT_COMP = 'REGEXP',
                                 VALE_K    = 'NP')));

DEPPGX = CALC_TABLE(TABLE = DEPP,
                      ACTION =_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'GT',
                                 VALE      =  0.02));
DEPPLX = CALC_TABLE(TABLE = DEPP,
                      ACTION =_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -0.02));
DEPPGY = CALC_TABLE(TABLE = DEPP,
                      ACTION =_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'GT',
                                 VALE      =  0.02));
DEPPLY = CALC_TABLE(TABLE = DEPP,
                      ACTION =_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -0.02));

DEPM = CALC_TABLE(TABLE = DEP,
                     ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'NOEUD',
                                 CRIT_COMP = 'REGEXP',
                                 VALE_K    = 'NM')));
DEPMGX = CALC_TABLE(TABLE = DEPM,
                      ACTION =_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'GT',
                                 VALE      =  0.02));
DEPMLX = CALC_TABLE(TABLE = DEPM,
                      ACTION =_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -0.02));
DEPMGY = CALC_TABLE(TABLE = DEPM,
                      ACTION =_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'GT',
                                 VALE      =  0.02));
DEPMLY = CALC_TABLE(TABLE = DEPM,
                      ACTION =_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -0.02));

# Definition des zones

# ATTENTION : les formules suivantes supposent des pressions esprimees en MPa
#             => il faut utiliser un module d'Young exprime en MPa !

# conversion Pa -> MPa du module d'Young
EM = E*1.e-6

# zone 1 : [-5, 0[ x ]0, +5]
def ux1(x, y):
    return -(2. - nu)*x/EM - 5.*(2. - nu)/EM
def uy1(x, y):
    return -(1. - 2.*nu)*y/EM - 5.*(1. - nu)/EM
def uz1(z):
    return 3.*nu*z/EM

depl_x1 = FORMULE(VALE='DX-ux1(COOR_X, COOR_Y)',
                  ux1=ux1,
                  NOM_PARA=['DX', 'COOR_X', 'COOR_Y'],)
depl_y1 = FORMULE(VALE='DY-uy1(COOR_X, COOR_Y)',
                  uy1=uy1,
                  NOM_PARA=['DY', 'COOR_X', 'COOR_Y'],)
depl_z1 = FORMULE(VALE='DZ-uz1(COOR_Z)',
                  uz1=uz1,
                  NOM_PARA=['DZ', 'COOR_Z'],)

# zone 2 : [-5, 0[ x [-5, 0[
def ux2(x, y):
    return -(1. - nu)*x/EM - 5.*(1. - nu)/EM
def uy2(x, y):
    return -(1. - nu)*y/EM - 5.*(1. - nu)/EM
def uz2(z):
    return 2.*nu*z/EM

depl_x2 = FORMULE(VALE='DX-ux2(COOR_X, COOR_Y)',
                  ux2=ux2,
                  NOM_PARA=['DX', 'COOR_X', 'COOR_Y'],)
depl_y2 = FORMULE(VALE='DY-uy2(COOR_X, COOR_Y)',
                  uy2=uy2,
                  NOM_PARA=['DY', 'COOR_X', 'COOR_Y'],)
depl_z2 = FORMULE(VALE='DZ-uz2(COOR_Z)',
                  uz2=uz2,
                  NOM_PARA=['DZ', 'COOR_Z'],)

# zone 3 : ]0, +5] x ]0, +5]
def ux3(x, y):
    return -(2. - 2.*nu)*x/EM - 5.*(2. - nu)/EM
def uy3(x, y):
    return -(2. - 2.*nu)*y/EM - 5.*(2. - nu)/EM
def uz3(z):
    return 4.*nu*z/EM

depl_x3 = FORMULE(VALE='DX-ux3(COOR_X, COOR_Y)',
                  ux3=ux3,
                  NOM_PARA=['DX', 'COOR_X', 'COOR_Y'],)
depl_y3 = FORMULE(VALE='DY-uy3(COOR_X, COOR_Y)',
                  uy3=uy3,
                  NOM_PARA=['DY', 'COOR_X', 'COOR_Y'],)
depl_z3 = FORMULE(VALE='DZ-uz3(COOR_Z)',
                  uz3=uz3,
                  NOM_PARA=['DZ', 'COOR_Z'],)

# zone 4 : ]0, +5] x [-5, 0[
def ux4(x, y):
    return -(1. - 2.*nu)*x/EM - 5.*(1. - nu)/EM
def uy4(x, y):
    return -(2. - nu)*y/EM - 5.*(2. - nu)/EM
def uz4(z):
    return 3.*nu*z/EM

depl_x4 = FORMULE(VALE='DX-ux4(COOR_X, COOR_Y)',
                  ux4=ux4,
                  NOM_PARA=['DX', 'COOR_X', 'COOR_Y'],)
depl_y4 = FORMULE(VALE='DY-uy4(COOR_X, COOR_Y)',
                  uy4=uy4,
                  NOM_PARA=['DY', 'COOR_X', 'COOR_Y'],)
depl_z4 = FORMULE(VALE='DZ-uz4(COOR_Z)',
                  uz4=uz4,
                  NOM_PARA=['DZ', 'COOR_Z'],)

DEPZON=[None]*5
DEPZON[1] = CALC_TABLE(TABLE = DEPMGY,
                    ACTION =(_F(OPERATION = 'COMB',
                               TABLE=DEPPLX),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DZ-DZ',
                                 FORMULE = depl_z1),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DY-DY',
                                 FORMULE = depl_y1),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DX',
                                 FORMULE = depl_x1)));

DEPZON[3] = CALC_TABLE(TABLE = DEPPGX,
                    ACTION =(_F(OPERATION = 'COMB',
                               TABLE=DEPPGY),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DZ-DZ',
                                 FORMULE = depl_z3),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DY-DY',
                                 FORMULE = depl_y3),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DX',
                                 FORMULE = depl_x3)));

DEPZON[2] = CALC_TABLE(TABLE = DEPMLX,
                    ACTION =(_F(OPERATION = 'COMB',
                               TABLE=DEPMLY),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DZ-DZ',
                                 FORMULE = depl_z2),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DY-DY',
                                 FORMULE = depl_y2),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DX',
                                 FORMULE = depl_x2)));

DEPZON[4] = CALC_TABLE(TABLE = DEPPLY,
                    ACTION =(_F(OPERATION = 'COMB',
                               TABLE=DEPMGX),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DZ-DZ',
                                 FORMULE = depl_z4),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DY-DY',
                                 FORMULE = depl_y4),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DX',
                                 FORMULE = depl_x4)));

#------------------------------------------------------------------------
# POST-TRAITEMENT : CALCUL D'ERREURS EN TERME DE NORME EN ENERGIE ET
#                   DE NORME L2 DU DEPLACEMENT
#------------------------------------------------------------------------

# solution analytique :

#    - contraintes
def Sxx(X,Y):
    return -pression(Y)

def Syy(X,Y):
    return -pression(X)

SXX = FORMULE(VALE='Sxx(X,Y)',
              Sxx=Sxx,
              NOM_PARA=['X', 'Y'],)
SYY = FORMULE(VALE='Syy(X,Y)',
              Syy=Syy,
              NOM_PARA=['X', 'Y'],)



###    - deplacement

def ux(x, y):
    if x < 0 and y > 0:
        return ux1(x, y)
    if x < 0 and y < 0:
        return ux2(x, y)
    if x > 0 and y > 0:
        return ux3(x, y)
    if x > 0 and y < 0:
        return ux4(x, y)

def uy(x, y):
    if x < 0 and y > 0:
        return uy1(x, y)
    if x < 0 and y < 0:
        return uy2(x, y)
    if x > 0 and y > 0:
        return uy3(x, y)
    if x > 0 and y < 0:
        return uy4(x, y)

def uz(x, y, z):
    if x < 0 and y > 0:
        return uz1(z)
    if x < 0 and y < 0:
        return uz2(z)
    if x > 0 and y > 0:
        return uz3(z)
    if x > 0 and y < 0:
        return uz4(z)

UX = FORMULE(VALE='ux(X,Y)',
             ux=ux,
             NOM_PARA=['X', 'Y'],)
UY = FORMULE(VALE='uy(X,Y)',
             uy=uy,
             NOM_PARA=['X', 'Y'],)
UZ = FORMULE(VALE='uz(X,Y,Z)',
             uz=uz,
             NOM_PARA=['X', 'Y', 'Z'],)

# calcul de l'erreur en terme de norme en energie
Scal=CREA_CHAMP(OPERATION='EXTR',
                TYPE_CHAM='ELGA_SIEF_R',
                RESULTAT=UTOT1,
                NOM_CHAM='SIEF_ELGA',
                NUME_ORDRE=1)

tabNRJ=POST_ERREUR(OPTION='ENER_RELA',
                   CHAM_GD=Scal,
                   MODELE=MODELEK,
                   DEFORMATION='PETIT',
                   CHAM_MATER=CHAMPMAT,
                   GROUP_MA='VOLU',
                   SIXX=SXX,
                   SIYY=SYY
                  )

IMPR_TABLE(TABLE=tabNRJ)

# calcul de l'erreur en terme de norme L2 du deplacement
Ucal=CREA_CHAMP(OPERATION='EXTR',
                TYPE_CHAM='NOEU_DEPL_R',
                RESULTAT=UTOT1,
                NOM_CHAM='DEPL',
                NUME_ORDRE=1)

tabL2=POST_ERREUR(OPTION='DEPL_RELA',
                  CHAM_GD=Ucal,
                  MODELE=MODELEK,
                  GROUP_MA='VOLU',
                  DX=UX,
                  DY=UY,
                  DZ=UZ
                 )

IMPR_TABLE(TABLE=tabL2)

#----------------------------------------------
#                   TEST TABLE
#----------------------------------------------

preci = 0.08

VALE_CALC=[
 -0.0094381817264, 
  0.00595850941481,
 -0.0781995521688,
  0.00169760486948,
 -0.0137655505821,
 -0.00610715691239,
 -0.00155891496111,
  0.002316056986,
 -0.00313031189886,
  0.003043946495,
 -0.00766150507187,
 -0.00459440109525,
 -0.00923321204376,
  0.00230006422737,
 -0.00930340857955,
  0.00588882873548,
 -0.0143465208425 ,
 -0.00675629323075,
 -0.00379024593545,
  0.0016487711303,
 -0.00331499136581,
  0.00440977739489, 
 -0.0113658094534,
 -0.00786439473441,
]

for i in [1,2,3,4]: #Boucle sur les zones

  IMPR_TABLE(TABLE=DEPZON[i]);

  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DX-DX',
             TYPE_TEST='MIN',
             VALE_CALC=VALE_CALC[(i-1)*6+0], VALE_REFE=0.,
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE',);
  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DX-DX',
             TYPE_TEST='MAX',
             VALE_CALC=VALE_CALC[(i-1)*6+1], VALE_REFE=0.,
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE',);
  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DY-DY',
             TYPE_TEST='MIN',
             VALE_CALC=VALE_CALC[(i-1)*6+2], VALE_REFE=0,
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE',);
  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DY-DY',
             TYPE_TEST='MAX',
             VALE_CALC=VALE_CALC[(i-1)*6+3], VALE_REFE=0,
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE',);
  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DZ-DZ',
             TYPE_TEST='MIN',
             VALE_CALC=VALE_CALC[(i-1)*6+4], VALE_REFE=0,
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE');
  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DZ-DZ',
             TYPE_TEST='MAX',
             VALE_CALC=VALE_CALC[(i-1)*6+5], VALE_REFE=0,
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE');


TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=1825000.0,
           VALE_REFE=1825000.0,
           NOM_PARA='REFERENCE',
           FILTRE=_F(NOM_PARA='GROUP_MA',
                     VALE_K='TOTAL'),
           TABLE=tabNRJ,
           );

TEST_TABLE(CRITERE='ABSOLU',
           VALE_CALC=0.135028653641,
           NOM_PARA='ERREUR RELATIVE',
           FILTRE=_F(NOM_PARA='GROUP_MA',
                     VALE_K='TOTAL'),
           TABLE=tabNRJ,
           );

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=0.993065762126,
           VALE_REFE=0.993487124560085,
           NOM_PARA='REFERENCE',
           FILTRE=_F(NOM_PARA='GROUP_MA',
                     VALE_K='TOTAL'),
           TABLE=tabL2,
           );

TEST_TABLE(CRITERE='ABSOLU',
           VALE_CALC=0.0951289869531,
           NOM_PARA='ERREUR RELATIVE',
           FILTRE=_F(NOM_PARA='GROUP_MA',
                     VALE_K='TOTAL'),
           TABLE=tabL2,
           );

FIN();
