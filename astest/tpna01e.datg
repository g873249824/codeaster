### This file is generated by SALOME automatically by dump python functionality
### of GEOM component

import geompy
import math

def RebuildData(theStudy):
	geompy.init_geom(theStudy)
	global Vector_1, B, C, FACE_EXT, FACE_INT, Z, A, Wire_1, Face_1, O, D
	O = geompy.MakeVertex(0, 0, 0)
	Z = geompy.MakeVertex(0, 0, 10)
	A = geompy.MakeVertex(0.3, 0, 0)
	B = geompy.MakeVertex(0.391, 0, 0)
	C = geompy.MakeVertex(0.391, 0.1, 0)
	D = geompy.MakeVertex(0.3, 0.1, 0)
	Vector_1 = geompy.MakeVector(O, Z)
	geomObj_1 = geompy.MakeMarker(0, 0, 0, 1, 0, -0, -0, 1, 0)
	Wire_1 = geompy.MakeSketcher("Sketcher:F 0.3 0:TT 0.391 0:TT 0.391 0.1:TT 0.3 0.1:TT 0.3 0", [0, 0, 0, 0, 0, 1, 1, 0, -0])
	listSubShapeIDs = geompy.SubShapeAllIDs(Wire_1, geompy.ShapeType["EDGE"])
	listSubShapeIDs = geompy.SubShapeAllIDs(Wire_1, geompy.ShapeType["EDGE"])
	Face_1 = geompy.MakeFaceWires([Wire_1], 1)
	listSubShapeIDs = geompy.SubShapeAllIDs(Face_1, geompy.ShapeType["EDGE"])
	listSubShapeIDs = geompy.SubShapeAllIDs(Face_1, geompy.ShapeType["EDGE"])
	FACE_INT = geompy.CreateGroup(Face_1, geompy.ShapeType["EDGE"])
	geompy.UnionIDs(FACE_INT, [10])
	Face_1 = geompy.GetMainShape(FACE_INT)
	FACE_EXT = geompy.CreateGroup(Face_1, geompy.ShapeType["EDGE"])
	geompy.UnionIDs(FACE_EXT, [6])
	Face_1 = geompy.GetMainShape(FACE_EXT)
	geompy.addToStudy( O, "O" )
	geompy.addToStudy( Z, "Z" )
	geompy.addToStudy( A, "A" )
	geompy.addToStudy( B, "B" )
	geompy.addToStudy( C, "C" )
	geompy.addToStudy( D, "D" )
	geompy.addToStudy( Vector_1, "Vector_1" )
	geompy.addToStudy( Wire_1, "Wire_1" )
	geompy.addToStudy( Face_1, "Face_1" )
	geompy.addToStudyInFather( Face_1, FACE_INT, "FACE_INT" )
	geompy.addToStudyInFather( Face_1, FACE_EXT, "FACE_EXT" )
	pass
### This file is generated by SALOME automatically by dump python functionality of SMESH component

import salome, SMESH
import smesh

## import GEOM dump file ## 
import string, os, sys, re
sys.path.insert( 0, os.path.dirname(__file__) )
exec("from "+re.sub("SMESH$","GEOM",__name__)+" import *")


def RebuildData(theStudy):
	aFilterManager = smesh.smesh.CreateFilterManager()
	smesh.smesh.SetCurrentStudy(theStudy)
	import StdMeshers
	pattern = smesh.GetPattern()
	Mesh_1 = smesh.Mesh(Face_1)
	Regular_1D = Mesh_1.Segment()
	Automatic_length_1 = Regular_1D.AutomaticLength(0.3)
	Quadrangle_2D = Mesh_1.Quadrangle()
	isDone = Mesh_1.Compute()
	Mesh_1.ConvertToQuadratic( 0 )
	FACE_INT_1 = Mesh_1.Group(FACE_INT)
	FACE_EXT_1 = Mesh_1.Group(FACE_EXT)
	Mesh_1.ExportMED( '/home/durand/ASTER/thermique/tpna01a/tpna01a.mail.med', 0, SMESH.MED_V2_2 )
	Mesh_1.ExportMED( '/home/durand/ASTER/thermique/tpna01a/tpna01a.mail.med', 0, SMESH.MED_V2_2 )
	Mesh_1.ExportMED( '/home/durand/ASTER/thermique/tpna01a/tpna01a.mail.med', 0, SMESH.MED_V2_2 )
	Mesh_1.ExportMED( '/home/durand/ASTER/thermique/tpna01a/tpna01a.mail.med', 0, SMESH.MED_V2_2 )
	Mesh_1.ConvertFromQuadratic()
	Mesh_1.ExportMED( '/home/durand/ASTER/thermique/tpna01a/tpna01a.mail.med', 0, SMESH.MED_V2_2 )

	## set object names  
	isGUIMode = 1
	if isGUIMode and salome.sg.hasDesktop():
		smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
		smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
		smesh.SetName(Automatic_length_1, 'Automatic length_1')
		smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
		smesh.SetName(FACE_INT_1, 'FACE_INT')
		smesh.SetName(FACE_EXT_1, 'FACE_EXT')

		salome.sg.updateObjBrowser(0)

	pass
