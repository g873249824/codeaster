try:
  # Import du module de calcul symbolique Sympy
  import sympy
  sympy_available = True
  # cet import inutile est du au plantage sur la machine clpaster
  import numpy
except ImportError:
  sympy_available = False


if sympy_available:

  from Utilitai import TensorModule
  from Utilitai import HookeTensor

  X,Y,Z = sympy.symbols('X Y Z');


#================================================================================================
# Choix de la solution analytique
#================================================================================================
  X3= 0.5

  Ux = -0.2*Y*Y*Y*(X-X3)
  Uy = -0.05*(X-X3)*(X-X3)*(1+Y)-0.01*Y
  U=TensorModule.Tensor([Ux,Uy,0]);


#================================================================================================
# Gradient de deformation et normale a la frontiere de contact
#================================================================================================

  NormaleDroite =TensorModule.Tensor([ 1. , 0. , 0.]);
  NormaleGauche =TensorModule.Tensor([-1. , 0. , 0.]);
  NormaleHaut   =TensorModule.Tensor([ 0. , 1. , 0.]);
  NormaleBas    =TensorModule.Tensor([ 0. ,-1. , 0.]);

  TenseurIdentite = TensorModule.Tensor([[1.,0.,0],[0.,1.,0],[0.,0.,1.]])

  GradientDeformation   = TensorModule.grad(U)+ TenseurIdentite
  GradientDeformation_T = GradientDeformation.transpose()
  Ftm1                  = GradientDeformation_T.inverse()

  Ftm1_N             = Ftm1.produitSimpleContracte(NormaleBas)
  ModuleCarre_Ftm1_N = Ftm1_N.produitSimpleContracte(Ftm1_N)
  Module_Ftm1_N      = ModuleCarre_Ftm1_N.sqrt()
  NormaleContact     = Ftm1_N / Module_Ftm1_N

#================================================================================================
# Tenseur de Green-Lagrange
#================================================================================================

  Tenseur_Green__Lagrange =0.5*(GradientDeformation.transpose().produitSimpleContracte(GradientDeformation) - TenseurIdentite)


#================================================================================================
# Deuxieme Tenseur de Piola-Kirchhoff (Force sur configuration non deformee par unite de surface non deformee)
#================================================================================================

  C_Iso=HookeTensor.HookeIsotropic(E,NU);

  Piola_Kirchhoff_II = C_Iso.produitDoubleContracte(Tenseur_Green__Lagrange);


#================================================================================================
# Premier Tenseur de Piola-Kirchhoff  (Force en configuration deformee par unite de surface non deformee)
#================================================================================================

  Piola_Kirchhoff_I = GradientDeformation .produitSimpleContracte(Piola_Kirchhoff_II)


#================================================================================================
# Divergence du Premier Tenseur de Piola-Kirchhoff == terme source
#================================================================================================

  Fvol = -TensorModule.div(Piola_Kirchhoff_I);



#================================================================================================
# Assignation des conditions limites
#================================================================================================
#conditions de Neumann
  Fsurf_Droite = Piola_Kirchhoff_I.produitSimpleContracte(NormaleDroite);
  Fsurf_Gauche = Piola_Kirchhoff_I.produitSimpleContracte(NormaleGauche);
  Fsurf_Haut   = Piola_Kirchhoff_I.produitSimpleContracte(NormaleHaut);
  Fsurf_Bas    = Piola_Kirchhoff_I.produitSimpleContracte(NormaleBas);

# Valeurs du  Sigma sur la face de Contact
  Fsurf_BAS_nn  =  Fsurf_Bas.produitSimpleContracte(NormaleContact);
  Fsurf_BAS_t   =  Fsurf_Bas - Fsurf_BAS_nn*NormaleContact;


#================================================================================================
# Transformation des formules pour utilisation dans Aster
#================================================================================================

  FUx=FORMULE(VALE=str(U[0]), NOM_PARA=('X','Y') );
  FUy=FORMULE(VALE=str(U[1]), NOM_PARA=('X','Y') );

  FsurfXD=FORMULE(VALE=str(Fsurf_Droite[0]), NOM_PARA=('X','Y') );
  FsurfYD=FORMULE(VALE=str(Fsurf_Droite[1]), NOM_PARA=('X','Y') );

  FsurfXG=FORMULE(VALE=str(Fsurf_Gauche[0]), NOM_PARA=('X','Y') );
  FsurfYG=FORMULE(VALE=str(Fsurf_Gauche[1]), NOM_PARA=('X','Y') );

  FsurfXH=FORMULE(VALE=str(Fsurf_Haut[0]), NOM_PARA=('X','Y') );
  FsurfYH=FORMULE(VALE=str(Fsurf_Haut[1]), NOM_PARA=('X','Y') );

  FsurfTX=FORMULE(VALE=str(Fsurf_BAS_t[0]), NOM_PARA=('X','Y') );
  FsurfTY=FORMULE(VALE=str(Fsurf_BAS_t[1]), NOM_PARA=('X','Y') );

  FvolX=FORMULE(VALE=str(Fvol[0]), NOM_PARA=('X','Y') );
  FvolY=FORMULE(VALE=str(Fvol[1]), NOM_PARA=('X','Y') );

# Si importation de sympy impossible
else:

#================================================================================================
# Definition des formules Aster
#================================================================================================
  
  FUx = FORMULE(VALE='-0.2*Y**3*(X - 0.5)', NOM_PARA=('X', 'Y'),)
  FUy = FORMULE(VALE='-0.01*Y + (-0.05*X + 0.025)*(X - 0.5)*(Y + 1)', NOM_PARA=('X', 'Y'),)


  FsXD='-0.6*Y**2*(X - 0.5)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))) + 1.0*(-0.2*Y**3 + 1.0)*(0.5*(-0.2*Y**3 + 1.0)**2 + 0.5*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))**2 - 0.5)'
  FsYD='1.0*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))) + 1.0*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))*(0.5*(-0.2*Y**3 + 1.0)**2 + 0.5*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))**2 - 0.5)'

  FsurfXD = FORMULE(VALE=FsXD, NOM_PARA=('X', 'Y'),)
  FsurfYD = FORMULE(VALE=FsYD, NOM_PARA=('X', 'Y'),)


  FsXG='0.6*Y**2*(X - 0.5)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))) - 1.0*(-0.2*Y**3 + 1.0)*(0.5*(-0.2*Y**3 + 1.0)**2 + 0.5*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))**2 - 0.5)'
  FsYG='-1.0*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))) - 1.0*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))*(0.5*(-0.2*Y**3 + 1.0)**2 + 0.5*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))**2 - 0.5)'

  FsurfXG = FORMULE(VALE=FsXG, NOM_PARA=('X', 'Y'),)
  FsurfYG = FORMULE(VALE=FsYG, NOM_PARA=('X', 'Y'),)

  FsXH='-0.6*Y**2*(X - 0.5)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) + 1.0*(-0.2*Y**3 + 1.0)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)))'
  FsYH='1.0*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) + 1.0*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)))'

  
  FsurfXH = FORMULE(VALE= FsXH, NOM_PARA=('X', 'Y'),)
  FsurfYH = FORMULE(VALE= FsYH, NOM_PARA=('X', 'Y'),)


  FsTX='0.6*Y**2*(X - 0.5)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) - 1.0*(-0.2*Y**3 + 1.0)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))) + 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))*(1.0*(-0.2*Y**3 + 1.0)**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2 + 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2)**(-0.5)*(-1.0*(-0.2*Y**3 + 1.0)*(1.0*(-0.2*Y**3 + 1.0)**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2 + 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2)**(-0.5)*(-1.0*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) - 1.0*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))))/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99)) - 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))*(1.0*(-0.2*Y**3 + 1.0)**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2 + 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2)**(-0.5)*(0.6*Y**2*(X - 0.5)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) - 1.0*(-0.2*Y**3 + 1.0)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))))/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99)))/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))'
  FsTY='1.0*(-0.2*Y**3 + 1.0)*(1.0*(-0.2*Y**3 + 1.0)**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2 + 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2)**(-0.5)*(-1.0*(-0.2*Y**3 + 1.0)*(1.0*(-0.2*Y**3 + 1.0)**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2 + 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2)**(-0.5)*(-1.0*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) - 1.0*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))))/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99)) - 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))*(1.0*(-0.2*Y**3 + 1.0)**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2 + 1.0*(-1.0*(-0.05*X + 0.025)*(Y + 1) + 0.05*(X - 0.5)*(Y + 1))**2/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99))**2)**(-0.5)*(0.6*Y**2*(X - 0.5)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) - 1.0*(-0.2*Y**3 + 1.0)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))))/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99)))/(0.6*Y**2*(X - 0.5)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + (-0.2*Y**3 + 1.0)*(1.0*(-0.05*X + 0.025)*(X - 0.5) + 0.99)) - 1.0*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) - 1.0*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)))'

  FsurfTX = FORMULE(VALE=FsTX, NOM_PARA=('X', 'Y'),)
  FsurfTY = FORMULE(VALE=FsTY, NOM_PARA=('X', 'Y'),)


  FvX='0.432*Y**5*(X - 0.5)**3 + 0.6*Y**2*(X - 0.5)*(-0.3*Y**2*(-0.2*Y**3 + 1.0) + 0.5*(-0.1*X + 0.05)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + 0.5*(-0.1*Y - 0.1)*((-0.05*X + 0.025)*(X - 0.5) + 0.99)) + 1.2*Y**2*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))) + 1.2*Y*(X - 0.5)*(0.18*Y**4*(X - 0.5)**2 + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)**2 - 0.5) - 0.5*(-0.2*Y - 0.2)*(-0.2*Y**3 + 1.0)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) - (-0.2*Y**3 + 1.0)*(0.18*Y**4*(X - 0.5) - 0.6*Y*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*(-0.1*X + 0.05)*((-0.05*X + 0.025)*(X - 0.5) + 0.99))'
  FvY='-0.72*Y**3*(X - 0.5)**2*((-0.05*X + 0.025)*(X - 0.5) + 0.99) - 2*(-0.1*X + 0.05)*(-0.3*Y**2*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*((-0.05*X + 0.025)*(X - 0.5) + 0.99)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))) - 0.5*(-0.2*Y - 0.2)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))**2 - (-0.1*Y - 0.1)*(0.5*(-0.2*Y**3 + 1.0)**2 + 0.5*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))**2 - 0.5) - ((-0.05*X + 0.025)*(X - 0.5) + 0.99)*(-0.3*Y**2*(-0.2*Y**3 + 1.0) + 0.5*(-0.1*X + 0.05)*((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1)) + 0.5*(-0.1*Y - 0.1)*((-0.05*X + 0.025)*(X - 0.5) + 0.99)) - ((-0.05*X + 0.025)*(Y + 1) - 0.05*(X - 0.5)*(Y + 1))*(0.18*Y**4*(X - 0.5) - 0.6*Y*(X - 0.5)*(-0.2*Y**3 + 1.0) + 0.5*(-0.1*X + 0.05)*((-0.05*X + 0.025)*(X - 0.5) + 0.99))'

  FvolX = FORMULE(VALE=FvX, NOM_PARA=('X', 'Y'),)
  FvolY = FORMULE(VALE=FvY, NOM_PARA=('X', 'Y'),)
