# -*- coding: utf-8 -*-
# SALOME 4.1.4

import math
import salome
salome.salome_init()
from salome.geom import geomBuilder
import GEOM
geompy = geomBuilder.New(salome.myStudy)
import SMESH
from salome.smesh import smeshBuilder
smesh = smeshBuilder.New(salome.myStudy)


#############Chemin pour l'export du maillage resultat############
ExportPATH="/home/PHIMECA/maillages/"
##################################################################

#===================================================
#                  PARAMETRES
#                  ----------
#===================================================

tol3d = 1.e-6;

#  dimensions
#----------------
Rext    = 0.2  ;
Ep      = 0.02 ;
Rint    = Rext - Ep;
Rm      = Rext - (Ep/2.) ;
RC      = 0.6  ;
LG      = 3.0  ;

#  Vecteurs utiles
#------------------
vx = geompy.MakeVectorDXDYDZ(100., 0., 0.)
vy = geompy.MakeVectorDXDYDZ(0., 100., 0.)
vz = geompy.MakeVectorDXDYDZ(0., 0., 100.)

# axe de rotation pour generer le coude
p1_tmp = geompy.MakeVertex(RC,LG,0.)
p2_tmp = geompy.MakeVertex(RC,LG,10.)
v_rot = geompy.MakeVector(p1_tmp, p2_tmp)
# axe du cylindre haut
m4 = geompy.MakeVertex(0,LG+RC,0);
m5 = geompy.MakeVertex(LG,LG+RC,0);
axe = geompy.MakeLineTwoPnt(m4, m5)

#===================================================
#                  GEOMETRIE
#                  ---------
#===================================================

#  Face de base du 3D
#---------------------------
P1 = geompy.MakeVertex(   Rext,   0,    0);
P2 = geompy.MakeVertex(      0,   0, Rext);
P3 = geompy.MakeVertex(-1*Rext,   0,    0);
P4 = geompy.MakeVertex(      0,   0,    0);

P5 = geompy.MakeVertex(   Rint,   0,    0);
P6 = geompy.MakeVertex(      0,   0, Rint);
P7 = geompy.MakeVertex(-1*Rint,   0,    0);

m1 = geompy.MakeVertex(   0,  LG,   Rm);

arc1 = geompy.MakeArc(P1, P2, P3)
arc2 = geompy.MakeArc(P5, P6, P7)

edge1 = geompy.MakeLineTwoPnt(P1, P5)
edge2 = geompy.MakeLineTwoPnt(P7, P3)


wirebase = geompy.MakeWire([arc1, edge1, arc2, edge2])
facebase = geompy.MakeFace(wirebase, 1)

#  Extrusion du 3D
#---------------------------
V1 = geompy.MakePrismVecH(facebase, vy, LG)

#  Revolution du 3D
#---------------------------
face_tmp = geompy.GetFaceNearPoint(V1, m1)
revolution = geompy.MakeRevolution(face_tmp, v_rot, -math.pi/2)



#  Extrusion du 3D
#---------------------------
m2 = geompy.MakeRotation(m1, v_rot, -math.pi/2)
face_tmp = geompy.GetFaceNearPoint(revolution, m2)
V2 = geompy.MakePrismVecH(face_tmp, vx, LG)


#  Collage des faces du 3D
#---------------------------
compbloc1 = geompy.MakeCompound([V1,revolution,V2])
OXY = geompy.MakePlaneLCS(None, 2000, 1)
compbloc2 = geompy.MakeMirrorByPlane(compbloc1,OXY)
compbloc = geompy.MakeCompound([compbloc1,compbloc2])

GeoCoude = geompy.MakeGlueFaces(compbloc,tol3d)


# Affichage dans l'arbre
#---------------------------
id_GeoCoude = geompy.addToStudy(GeoCoude,"GeoCoude")


#---------------------------
# Création des groupes
#---------------------------

EFOND = geompy.CreateGroup(GeoCoude, geompy.ShapeType["FACE"])
m3 = geompy.MakeVertex(   LG+RC,  LG+RC ,   Rm);
f1_efond = geompy.GetFaceNearPoint(GeoCoude, m3)
m3b = geompy.MakeMirrorByPlane(m3,OXY)
f2_efond = geompy.GetFaceNearPoint(GeoCoude, m3b)
geompy.UnionList(EFOND,[f1_efond,f2_efond])
geompy.addToStudyInFather(GeoCoude,EFOND,"EFOND")

m3c = geompy.MakeVertex (LG+RC,  LG+RC , 0);
P_EFOND = geompy.GetVertexNearPoint(GeoCoude, m3c)
geompy.addToStudyInFather(GeoCoude,P_EFOND,"P_EFOND")

#-----------------------------------------------------------------
BASE = geompy.CreateGroup(GeoCoude, geompy.ShapeType["FACE"])
f1_base = geompy.GetSame(GeoCoude,facebase)
facebaseb= geompy.MakeMirrorByPlane(facebase,OXY)
f2_base = geompy.GetSame(GeoCoude,facebaseb)
geompy.UnionList(BASE,[f1_base,f2_base])
geompy.addToStudyInFather(GeoCoude,BASE,"BASE")

TUYAU = geompy.CreateGroup(GeoCoude, geompy.ShapeType["SOLID"])
vol = geompy.SubShapeAll(GeoCoude, geompy.ShapeType["SOLID"])
geompy.UnionList(TUYAU,vol)
geompy.addToStudyInFather( GeoCoude, TUYAU, "TUYAU" )

HypEpaisseur = geompy.GetSame(GeoCoude,edge1)
geompy.addToStudyInFather(GeoCoude,HypEpaisseur,"HypEpaisseur")

HypCirconference = geompy.GetSame(GeoCoude,arc1)
geompy.addToStudyInFather(GeoCoude,HypCirconference,"HypCirconference")


#===================================================
#                  MAILLAGE
#                  --------
#===================================================
#

maillageCoude = smesh.Mesh(GeoCoude, "MeshCoude")

# Algorithmes et hypotheses globales
# ----------------------------------

# 1D
numberOfSegments = 15
algo = maillageCoude.Segment()
algo.NumberOfSegments(numberOfSegments)
algo.QuadraticMesh()

# 2D
maillageCoude.Quadrangle()

# 3D
maillageCoude.Hexahedron()

# Algorithmes et hypotheses locales
# ----------------------------------

# 1D
nbSegEp = 2

algo1 = maillageCoude.Segment(HypEpaisseur)
algo1.NumberOfSegments(nbSegEp)
algo1.Propagation()

# 1D
nbSegCirconf = 10

algo2 = maillageCoude.Segment(HypCirconference)
algo2.NumberOfSegments(nbSegCirconf)
algo2.Propagation()

# Calcul
# ------
maillageCoude.Compute()


# Création des groupes du maillage
#---------------------------------
maillageCoude.Group(EFOND, "EFOND" )
maillageCoude.Group(BASE, "BASE" )
maillageCoude.Group(TUYAU, "TUYAU" )
maillageCoude.Group(P_EFOND, "P_EFOND")


########Export du maillage au format MMED########
maillageCoude.ExportMED( r''+ExportPATH+'forma02b.mmed'+'', 0, SMESH.MED_V2_2 , 1 )


# Mise à jour de l'arbre
#---------------------------
# Si on a une interface graphique...
if salome.sg.hasDesktop():
   gg = salome.ImportComponentGUI("GEOM")
   gg.createAndDisplayFitAllGO(id_GeoCoude)
   salome.sg.updateObjBrowser(1)
