# TITRE FISSURE PLANE SEMI-INFINIE
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# sslp114b.para=tps_job 120 mem_job 512Mo mem_aster 50 ncpus 1 liste_test S

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'),PAR_LOT='OUI');

import math;

#facteurs intensite de contrainte
KI=1.;
KII=0.;
#

#ANGLE INCLINAISON :: -135 (degres) < alpha0 < 135 (degres)
#Pour un tour complet voir conditions limites
alpha0=0.
alpha=alpha0*math.pi/180.

# LONGUEUR DE LA FISSURE
A = 0.5/max(abs(math.cos(alpha)),abs(math.sin(alpha)));

# DEFINITION DU MATERIAU
E   = 1.E5;
nu  = 0.;
ACIER=DEFI_MATERIAU(ELAS=_F(E=E,NU=nu),);

MAILLAGE=LIRE_MAILLAGE(FORMAT='MED',VERI_MAIL=_F(VERIF='OUI'));

#TEST_MA ne doit pas etre coupe par la fissure
#On prend le coin oppose
if (alpha0>=0)&(alpha0<=90) :
    Px=1.
    Py=1.
elif (alpha0<0)&(alpha0>=-90) :
    Px=1.
    Py=0.
elif alpha0<-90 :
    Px=0.
    Py=0.
elif alpha0>90 :
    Px=0.
    Py=1.

MAILLAGE=DEFI_GROUP( reuse =MAILLAGE,
                     MAILLAGE=MAILLAGE,
                     CREA_GROUP_MA=(_F(NOM='TEST_MA',OPTION='SPHERE',POINT=(Px,Py),RAYON=0.5),),
#                    INFO=2,
                   );

MODELEIN=AFFE_MODELE(MAILLAGE=MAILLAGE,
                     AFFE= _F(GROUP_MA=('SURF','LIG1','LIG2','LIG3','LIG4','TEST_MA'),
                              PHENOMENE='MECANIQUE',
                              MODELISATION='D_PLAN'
                             ),
#                    INFO=2,
                     );

#Pour utiliser sereinement la TAN :
#Diviser quand TAN tend vers l'infini, multiplier quand TAN tend vers 0 !
if abs(alpha)<45*math.pi/180. :
   PFONDX=-1.5
   PFONDY=0.5-2*math.tan(alpha)
else :
   if alpha<0 :
      PFONDX=0.5+2/math.tan(alpha)
      PFONDY=2.5
   if alpha>0 :
      PFONDX=0.5-2/math.tan(alpha)
      PFONDY=-1.5

FISS=DEFI_FISS_XFEM(MAILLAGE=MAILLAGE,
                    DEFI_FISS=_F(
                                 FORM_FISS  = 'SEGMENT',
                                 PFON_ORIG  = (0.5 , 0.5,0.),
                                 PFON_EXTR  = ( PFONDX, PFONDY,0.),
                                 ),
                    TYPE_ENRI_FOND='GEOMETRIQUE',
                    RAYON_ENRI=0.2*A,
#                   TYPE_ENRI_FOND='TOPOLOGIQUE',
                   );

MODELK=MODI_MODELE_XFEM(MODELE_IN=MODELEIN,FISSURE=FISS);

CHMA=AFFE_MATERIAU(MAILLAGE=MAILLAGE,
                   MODELE=MODELK,
                   AFFE=_F(TOUT = 'OUI',MATER=ACIER),
                   );

MAILLAGE=MODI_MAILLAGE(reuse =MAILLAGE, MAILLAGE=MAILLAGE,
                       ORIE_PEAU_2D=(_F(GROUP_MA=('LIG1','LIG2','LIG3','LIG4'),),),
                       INFO=2,
                       );

def r(X,Y) :
    return ((X-0.5)**2+(Y-0.5)**2)**0.5

def theta(X,Y) :
    global alpha
    if X==0.5 :
        if Y==0.5 :
                theta0=0
        else :
                theta0=math.atan2((Y-0.5),(X-0.5))
    else :
        theta0=math.atan2((Y-0.5),(X-0.5))
#la rotation de la fissure propage une discontinuite angulaire!!!
    if abs(alpha)>0 :
       if alpha<0 :
          if theta0>(math.pi+alpha) :
              return theta0-alpha-2*math.pi
          else :
              return theta0-alpha
       else :
          if theta0<(-math.pi+alpha) :
              return theta0-alpha+2*math.pi
          else :
              return theta0-alpha
    else :
       return theta0

def cos1(X,Y) :
    return math.cos(theta(X,Y))

def sin1(X,Y) :
    return math.sin(theta(X,Y))

def cos12(X,Y) :
    return math.cos(theta(X,Y)/2)

def sin12(X,Y) :
    return math.sin(theta(X,Y)/2)

#CHAMP DE DEPLACEMANT ANALYTIQUE ::
def Ux(X,Y) :
    global KI,E,nu
    return KI*(1+nu)/E*((r(X,Y)/(2*math.pi))**0.5)*cos12(X,Y)*(3-4*nu-cos1(X,Y))

def Uy(X,Y) :
    global KI,E,nu
    return KI*(1+nu)/E*((r(X,Y)/(2*math.pi))**0.5)*sin12(X,Y)*(3-4*nu-cos1(X,Y))

#Rotation du champ de DEPL
def Vx(X,Y) :
    global alpha
    return Ux(X,Y)*math.cos(alpha)-Uy(X,Y)*math.sin(alpha)

def Vy(X,Y) :
    global alpha
    return Ux(X,Y)*math.sin(alpha)+Uy(X,Y)*math.cos(alpha)

U1=FORMULE(NOM_PARA=('X','Y',),VALE='Vx(X,Y)');

U2=FORMULE(NOM_PARA=('X','Y',),VALE='Vy(X,Y)');

#TENSEUR DES CONTTRAINTES ANALYTIQUE ::
PI=math.pi
expo = [None]*2
A1 = [None]*2
A2 = [None]*2
expo[0]=1
expo[1]=3
A1[0]=KI*(1+nu)/(E*(2*PI)**0.5)*(4-4*nu)
A1[1]=-KI*(1+nu)/(E*(2*PI)**0.5)*2
A2[0]=KI*(1+nu)/(E*(2*PI)**0.5)*(2-4*nu)
A2[1]=KI*(1+nu)/(E*(2*PI)**0.5)*2


def SIGMA(X,Y,IND) :
    global   PI,A1,A2,expo,E,nu,alpha
    rxy=r(X,Y)
    EPSREF = [None]*3
    SIGMAREF = [None]*3
    EPSREF[0]=0.
    EPSREF[1]=0.
    EPSREF[2]=0.
    for I in range(2) :
        EPSREF[0]=EPSREF[0]+A1[I]*(cos12(X,Y)**(expo[I]-1))/(2*rxy**0.5)*(cos12(X,Y)*cos1(X,Y)+expo[I]*sin12(X,Y)*sin1(X,Y))

    for I in range(2) :
        EPSREF[1]=EPSREF[1]+A2[I]*(sin12(X,Y)**(expo[I]-1))/(2*rxy**0.5)*(sin12(X,Y)*sin1(X,Y)+expo[I]*cos12(X,Y)*cos1(X,Y))

    for I in range(2) :
        EPSREF[2]=EPSREF[2]+A1[I]*(cos12(X,Y)**(expo[I]-1))/(2*rxy**0.5)*(cos12(X,Y)*sin1(X,Y)-expo[I]*sin12(X,Y)*cos1(X,Y))+A2[I]*(sin12(X,Y)**(expo[I]-1))/(2*rxy**0.5)*(sin12(X,Y)*cos1(X,Y)-expo[I]*cos12(X,Y)*sin1(X,Y))

    EPSREF[2]=0.5*EPSREF[2]

    for I in range(2) :
         SIGMAREF[I]=E/(1+nu)*(EPSREF[I]+nu/(1-2*nu)*(EPSREF[0]+EPSREF[1]))

    SIGMAREF[2]=E/(1+nu)*EPSREF[2]

#COPIE DE SIGMAREF :: WARNING :: TMP=SIGMAREF UTILISE UN POINTEUR ET NE COPIE PAS LES DONNEES ==> CARTON MEMOIRE DRAMATIQUE
    TMP=[None]*3
    for I in range(3) :
        TMP[I]=SIGMAREF[I]

#Rotation du tenseur
    cosa = math.cos(alpha)
    sina = math.sin(alpha)
    cos2a= math.cos(2*alpha)
    sin2a= math.sin(2*alpha)
    SIGMAREF[0]=(cosa**2)*TMP[0]-sin2a*TMP[2]+(sina**2)*TMP[1]
    SIGMAREF[1]=(sina**2)*TMP[0]+sin2a*TMP[2]+(cosa**2)*TMP[1]
    SIGMAREF[2]=-0.5*sin2a*(-TMP[0]+TMP[1])+cos2a*TMP[2]

    return SIGMAREF[IND]

#Calcul des densites de force suivant les normales ex,ey,-ex,-ey
FXX=FORMULE(NOM_PARA=('X','Y',),VALE='SIGMA(X,Y,0)');
FXY=FORMULE(NOM_PARA=('X','Y',),VALE='SIGMA(X,Y,2)');

FYX=FORMULE(NOM_PARA=('X','Y',),VALE='SIGMA(X,Y,2)');
FYY=FORMULE(NOM_PARA=('X','Y',),VALE='SIGMA(X,Y,1)');

FXXF=FORMULE(NOM_PARA=('X','Y',),VALE='-SIGMA(X,Y,0)');
FXYF=FORMULE(NOM_PARA=('X','Y',),VALE='-SIGMA(X,Y,2)');

FYXF=FORMULE(NOM_PARA=('X','Y',),VALE='-SIGMA(X,Y,2)');
FYYF=FORMULE(NOM_PARA=('X','Y',),VALE='-SIGMA(X,Y,1)');

#Conditions limites: Diriclet + Neumann
#Neumann => fissure
#Dirichlet => modes rigides

#Combinaison 1 : Dirichletx3+Neumannx1 : A eviter si |alpha| > 45
CH2=AFFE_CHAR_MECA_F(MODELE=MODELK,
                     DDL_IMPO=_F(GROUP_MA=('LIG1','LIG2','LIG3'),DX=U1,DY=U2,),
                     FORCE_CONTOUR=(_F(GROUP_MA=('LIG4'),FX=FXXF,FY=FXYF),),
                     );

COND=AFFE_CHAR_MECA(MODELE=MODELK,
                    DDL_IMPO=_F(TOUT='OUI',E3X=0.,E3Y=0.,E4X=0.,E4Y=0.));

#Combinaison 2 : Dirichletx1+Neumannx3
CH2B=AFFE_CHAR_MECA_F(MODELE=MODELK,
                     DDL_IMPO=_F(GROUP_MA=('LIG2'),DX=U1,DY=U2,),
                     FORCE_CONTOUR=(
                                    _F(GROUP_MA=('LIG3'),FX=FYX,FY=FYY),
                                    _F(GROUP_MA=('LIG4'),FX=FXXF,FY=FXYF),
                                    _F(GROUP_MA=('LIG1'),FX=FYXF,FY=FYYF),
                                   ),
                     );

UTOT=MECA_STATIQUE(MODELE=MODELK,
                   CHAM_MATER=CHMA,
                   EXCIT=(
                          _F(CHARGE=CH2),
                          _F(CHARGE=COND),
                         ),
                   SOLVEUR=_F(RENUM='METIS',
                              METHODE='MUMPS',
                              #NPREC=14,
                              #RESI_RELA=1.E-2,
                              #RESI_RELA=-1,
                              #PCENT_PIVOT=100,
                             ),
                   INFO=2,
                  );

CH_G=CALC_G(RESULTAT=UTOT,
            OPTION='CALC_K_G',
            THETA=_F(FISSURE=FISS,
                     R_INF=0.1*A,
                     R_SUP=0.3*A,),
            INFO=2);

CH_G2=CALC_G(RESULTAT=UTOT,
            OPTION='CALC_K_G',
            THETA=_F(FISSURE=FISS,),
            INFO=2);

MA_XFEM=POST_MAIL_XFEM(MODELE=MODELK);

MOD_VISU=AFFE_MODELE(MAILLAGE=MA_XFEM,
                     AFFE=_F(GROUP_MA='SURF',
                     PHENOMENE='MECANIQUE',
                     MODELISATION='D_PLAN',
                     ),)

RES_XFEM=POST_CHAM_XFEM(MODELE_VISU  = MOD_VISU,
                        RESULTAT = UTOT,INFO=2,)

RES_XFEM=CALC_CHAMP(reuse=RES_XFEM,
                    RESULTAT=RES_XFEM,
                    CRITERES=('SIEQ_ELGA','SIEQ_ELNO'),);

RES_XFEM=CALC_CHAMP(reuse =RES_XFEM,
                 RESULTAT=RES_XFEM,
                 CRITERES='SIEQ_NOEU');

IMPR_RESU(FORMAT='GMSH',RESU=(_F(RESULTAT=RES_XFEM,
                                 NOM_CHAM=('DEPL'),
                                 TYPE_CHAM='VECT_2D',
                                 NOM_CMP=('DX','DY',),),
                                 ),);

#CHAMP DEPL :: calcul ERREUR SUR TEST_NO
DEPL = CREA_CHAMP (OPERATION='EXTR',
                   NOM_CHAM = 'DEPL',
                   TYPE_CHAM = 'NOEU_DEPL_R',
                   RESULTAT = UTOT,
                  );

CH_AFFE=CREA_CHAMP(OPERATION='AFFE',
                 TYPE_CHAM='NOEU_NEUT_F',
                 MAILLAGE=MAILLAGE,
                 AFFE=(_F( TOUT='OUI', NOM_CMP = 'X1', VALE_F = U1),
                       _F( TOUT='OUI', NOM_CMP = 'X2', VALE_F = U2),
                      )
                );

CH_GEO=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='NOEU_GEOM_R',
                NOM_CHAM='GEOMETRIE', MAILLAGE=MAILLAGE, INFO=1);

CH_EVAL=CREA_CHAMP(OPERATION='EVAL',
                 TYPE_CHAM='NOEU_NEUT_R',
                 CHAM_F=CH_AFFE,
                 CHAM_PARA=CH_GEO);

Uana=CREA_CHAMP(OPERATION='ASSE',
                TYPE_CHAM='NOEU_DEPL_R',
                MAILLAGE=MAILLAGE,
#               INFO=2,
                ASSE=(_F(TOUT='OUI',
                         CHAM_GD = CH_EVAL,
                         NOM_CMP = 'X1',
                         NOM_CMP_RESU = 'DX',),
                      _F(TOUT='OUI',
                         CHAM_GD = CH_EVAL,
                         NOM_CMP = 'X2',
                         NOM_CMP_RESU = 'DY',)
                      ),
                );

DIFF=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R',MODELE=MODELEIN,

#               INFO=2,
                ASSE=(_F(TOUT='OUI', CHAM_GD=DEPL,CUMUL='OUI', COEF_R=+1., NOM_CMP='DX', NOM_CMP_RESU='DX',),
                      _F(TOUT='OUI', CHAM_GD=Uana, CUMUL='OUI', COEF_R=-1., NOM_CMP='DX', NOM_CMP_RESU='DX',),
                      _F(TOUT='OUI', CHAM_GD=DEPL,CUMUL='OUI', COEF_R=+1., NOM_CMP='DY', NOM_CMP_RESU='DY',),
                      _F(TOUT='OUI', CHAM_GD=Uana, CUMUL='OUI', COEF_R=-1., NOM_CMP='DY', NOM_CMP_RESU='DY',),
                      ),
                );

tab_du=POST_ELEM(NORME=(_F(TYPE_NORM='L2', GROUP_MA='TEST_MA',CHAM_GD=DIFF, MODELE=MODELEIN),),INFO=2);

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-3,
           VALE_CALC=0.999581551323,
           VALE_REFE=1.0,
           NOM_PARA='K1',
           LEGENDE='alpha=0.0',
           TABLE=CH_G,)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-3,
           VALE_CALC=-1.25655781506E-05,
           VALE_REFE=0.0,
           NOM_PARA='K2',
           LEGENDE='alpha=0.0',
           TABLE=CH_G,)

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-3,
           VALE_CALC=9.9916224215E-06,
           VALE_REFE=1.0000000000000001E-05,
           NOM_PARA='G',
           LEGENDE='alpha=0.0',
           TABLE=CH_G,)

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-3,
           VALE_CALC=0.999579471778,
           VALE_REFE=1.0,
           NOM_PARA='K1',
           LEGENDE='alpha=0.0',
           TABLE=CH_G2,)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-3,
           VALE_CALC=-1.07292252734E-05,
           VALE_REFE=0.0,
           NOM_PARA='K2',
           LEGENDE='alpha=0.0',
           TABLE=CH_G2,)

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-3,
           VALE_CALC=9.99160908688E-06,
           VALE_REFE=1.0000000000000001E-05,
           NOM_PARA='G',
           LEGENDE='alpha=0.0',
           TABLE=CH_G2,)

#TOLERANCE RELATIVE A LA NORME DU CHAMP DE DEPLACEMENT!
NormeL2_U=7.72403392144e-06
TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=7.7240339214399998E-09,
           VALE_CALC=2.35672613371E-10,
           VALE_REFE=0.0,
           NOM_PARA='VALE_NORM',
           LEGENDE='ERREUR DEPL NORME_L2',
           TABLE=tab_du,)

TEST_TABLE(CRITERE='ABSOLU',
           VALE_CALC=2.35672613371E-10,
           NOM_PARA='VALE_NORM',
           LEGENDE='ERREUR DEPL NORME_L2',
           TABLE=tab_du,
           )

FIN();
