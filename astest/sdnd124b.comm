#
# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#
# --------------------------------------------------------------------------------------------------
#
#                   DISCRET COMPORTEMENT ECROUISSAGE TRACTION
#
#   Validation du comportement avec DYNA_VIBRA Schéma RK54
#
#
# --------------------------------------------------------------------------------------------------
import numpy as NU

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON',),)

MAIL=LIRE_MAILLAGE()
#
# Modèle
Modele=AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(
        _F(GROUP_MA=('MASSE','GM0203'), PHENOMENE='MECANIQUE', MODELISATION='DIS_T',),
        _F(MAILLE=('PT01'), PHENOMENE='MECANIQUE', MODELISATION='DIS_T',),
    ),
)

U01   = 2.00
Sy    = 200.0
Su    = Sy + 250.0
Kp    = 4.0*Sy/U01
Puiss = 1.50
Masse = 200.0

def FctRp(p):
    return Sy + Kp*p/pow(1.0+pow(Kp*p/(Su-Sy),Puiss),1.0/Puiss)

Lt_p  = NU.arange(0.0,U01*20.0,0.01)
Lt_rp = map( FctRp , Lt_p )
Lt_p += Sy/Kp
Lt_p = list(Lt_p)
Lt_p.insert(0, 0.0)
Lt_rp.insert(0, 0.0)

fctsy = DEFI_FONCTION(NOM_PARA='DX',
    ABSCISSE = Lt_p,
    ORDONNEE = Lt_rp,
)

# Caractéristiques : Ressorts / Masse
caraElem=AFFE_CARA_ELEM(
    MODELE=Modele,
    DISCRET=(
        _F( REPERE='LOCAL',CARA='M_T_D_N', MAILLE='PT01', VALE=( 0.0, ), ),
        _F( REPERE='LOCAL',CARA='K_T_D_N', MAILLE='PT01', VALE=( Kp,0.0,0.0,), ),

        _F( REPERE='LOCAL',CARA='M_T_D_N', GROUP_MA='MASSE', VALE=( Masse ), ),
        _F( REPERE='LOCAL',CARA='K_T_D_N', GROUP_MA='MASSE', VALE=( 0.0,0.0,0.0,), ),

        _F( REPERE='LOCAL',CARA='M_T_D_L', GROUP_MA='GM0203', VALE=( 0.0,), ),
        _F( REPERE='LOCAL',CARA='K_T_D_L', GROUP_MA='GM0203', VALE=( Kp, 400.0, 400.0,), ),
    ),
)
#
# condition aux limites en déplacement
Blocage=AFFE_CHAR_MECA(
   MODELE=Modele,
   DDL_IMPO= (
        _F(NOEUD='N01', DX=0.0, DY=0.0, DZ=0.0,),
        _F(NOEUD='N02',         DY=0.0, DZ=0.0,),
        _F(NOEUD='N03', DX=0.0, DY=0.0, DZ=0.0,),
    ),
)
#
Frequence = 0.50
Pulsation = 2.0*pi*Frequence
Amplitude = U01*3.0
#
Tsignal = 4.0/Frequence
LinstF = DEFI_LIST_REEL(
    DEBUT=0.,
    INTERVALLE=_F(JUSQU_A = 4.0*Tsignal, PAS = 0.5/Frequence/80.0),
)
#
DEPL  = FORMULE(NOM_PARA='INST',VALE='Amplitude*sin(Pulsation*INST)/(Pulsation**2)')
#
DEPLI = CALC_FONC_INTERP(NOM_RESU='DEPL',
    FONCTION=DEPL, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_GAUCHE='CONSTANT', PROL_DROITE='CONSTANT',
)
#
VITEI=CALC_FONCTION(DERIVE=_F(FONCTION=DEPLI,), PROL_GAUCHE='CONSTANT', PROL_DROITE='CONSTANT')
ACCEI=CALC_FONCTION(DERIVE=_F(FONCTION=VITEI,), PROL_GAUCHE='CONSTANT', PROL_DROITE='CONSTANT')
#
ASSEMBLAGE(
    MODELE=Modele, CARA_ELEM=caraElem, CHARGE=Blocage,
    NUME_DDL=CO('NumeDDL'),
    MATR_ASSE=(
        _F(MATRICE=CO('Rigidite'), OPTION='RIGI_MECA',),
        _F(MATRICE=CO('Masse'),    OPTION='MASS_MECA',),
    ),
)
#
# Mode de la structure
ModeStr=CALC_MODES(
    MATR_RIGI=Rigidite, OPTION='BANDE',
    CALC_FREQ=_F( FREQ=(0.0,3.0,), ),
    MATR_MASS=Masse,
)
#
# calcul des modes statiques aux points d'ancrage et des chargements sismiques
ModeSta=MODE_STATIQUE(
    MATR_RIGI=Rigidite,
    MATR_MASS=Masse,
    MODE_STAT=_F(GROUP_NO=('GPT01','GPT03'),AVEC_CMP='DX',),
)
#
DeplSis1=CALC_CHAR_SEISME(
    MATR_MASS=Masse,
    MODE_STAT=ModeSta, NOEUD='N01',
    DIRECTION=(1.0, 0.0, 0.0),
)
#
DeplSis3=CALC_CHAR_SEISME(
    MATR_MASS=Masse,
    MODE_STAT=ModeSta, NOEUD='N03',
    DIRECTION=(1.0, 0.0, 0.0),
)

# projection des matrices et vecteurs sur la base modale
PROJ_BASE(
    BASE=ModeStr,
    STOCKAGE='DIAG',
    MATR_ASSE_GENE=(
        _F(MATRICE = CO("MasseGen"), MATR_ASSE = Masse),
        _F(MATRICE = CO("RigidGen"), MATR_ASSE = Rigidite),
    ),
    VECT_ASSE_GENE=(
        _F(VECTEUR = CO("Depl1Gen"), VECT_ASSE = DeplSis1),
        _F(VECTEUR = CO("Depl3Gen"), VECT_ASSE = DeplSis3),
    ),
)
#
# --------------------------------------------------------------------------------------------------
#
Resultat=DYNA_VIBRA(
    TYPE_CALCUL='TRAN', BASE_CALCUL='GENE',
    MATR_MASS=MasseGen, MATR_RIGI=RigidGen,
    SCHEMA_TEMPS=_F(SCHEMA='RUNGE_KUTTA_54',TOLERANCE=1.0E-7),
    INCREMENT=_F(PAS=0.5/Frequence/40.0, INST_INIT=0.0, INST_FIN=4.0*Tsignal),
    MODE_STAT=ModeSta,
    EXCIT=(
        _F(VECT_ASSE_GENE=Depl1Gen, ACCE=ACCEI, VITE=VITEI, DEPL=DEPLI),
        _F(VECT_ASSE_GENE=Depl3Gen, ACCE=ACCEI, VITE=VITEI, DEPL=DEPLI),
    ),
    DIS_ECRO_TRAC=_F(NOEUD_1='N01', NOEUD_2='N02',FX= fctsy ,),
    IMPRESSION=_F(UNITE_DIS_ECRO_TRAC =38),
)

TABVARI1 = LIRE_TABLE(UNITE=38)


# dans unite=25 : INST FORCE DEPLVISC DEPL PUISS
Forc =LIRE_FONCTION(UNITE=38, NOM_PARA='INST', NOM_RESU='Forc',
    INDIC_PARA=[1,1], INDIC_RESU=[1,2])
Depl =LIRE_FONCTION(UNITE=38, NOM_PARA='INST', NOM_RESU='Depl',
    INDIC_PARA=[1,1], INDIC_RESU=[1,3])
Puiss=LIRE_FONCTION(UNITE=38, NOM_PARA='INST', NOM_RESU='Puiss',
    INDIC_PARA=[1,1], INDIC_RESU=[1,4])

#NUME_ORDRE
#       INST               FORCE              U                  PUISS
#       INST               Force              Ux                 Puiss
ResuIntgr = {
  51: ( 1.2750000000e+00,  4.0514894798e+02,  1.7698257727e+00,  2.7736499231e+02, ),
 101: ( 2.5250000000e+00, -4.3584584746e+02, -2.0647457796e+00,  1.0140956362e+03, ),
 145: ( 3.6250000000e+00,  4.3921743018e+02,  7.7222798608e-01,  1.2982852020e+03, ),
 181: ( 4.5250000000e+00, -9.1517869526e+01, -5.5460371803e-01,  1.2982880767e+03, ),
 215: ( 5.3750000000e+00,  3.5606065994e+02,  5.6434260564e-01,  1.2982880767e+03, ),
 256: ( 6.4000000000e+00, -4.3979663909e+02, -1.5724584569e+00,  1.3629654339e+03, ),
 301: ( 7.5250000000e+00,  4.4218453636e+02,  1.4184292106e+00,  1.7096345513e+03, ),
 342: ( 8.5500000000e+00, -4.4221217527e+02, -8.0345047549e-01,  1.7144548218e+03, ),
 380: ( 9.5000000000e+00,  2.2752558203e+02,  8.7087877798e-01,  1.7144615167e+03, ),
 418: ( 1.0450000000e+01, -4.0783181773e+02, -7.1751472141e-01,  1.7144615167e+03, ),
 458: ( 1.1450000000e+01,  4.1833665733e+02,  1.3479064662e+00,  1.7144615167e+03, ),
 501: ( 1.2525000000e+01, -4.4304091849e+02, -1.1860039454e+00,  1.8828697637e+03, ),
 541: ( 1.3525000000e+01,  4.0986343649e+02,  9.4625260557e-01,  1.8828716850e+03, ),
 580: ( 1.4500000000e+01, -3.2997441963e+02, -9.0334203471e-01,  1.8828716850e+03, ),
 619: ( 1.5475000000e+01,  3.8962560459e+02,  8.9565802583e-01,  1.8828716850e+03, ),
 659: ( 1.6475000000e+01, -4.2729911340e+02, -1.1466537692e+00,  1.8828716850e+03, ),
 700: ( 1.7500000000e+01,  4.4325666418e+02,  1.1421035643e+00,  1.9326673282e+03, ),
 741: ( 1.8525000000e+01, -4.2314597979e+02, -1.0239023388e+00,  1.9326676415e+03, ),
 780: ( 1.9500000000e+01,  3.6609776208e+02,  9.4920701588e-01,  1.9326676415e+03, ),
 820: ( 2.0500000000e+01, -3.7879651773e+02, -9.1302868365e-01,  1.9326676415e+03, ),
 859: ( 2.1475000000e+01,  4.0795130776e+02,  1.0538408801e+00,  1.9326676415e+03, ),
 900: ( 2.2500000000e+01, -4.4331858840e+02, -1.1071188427e+00,  1.9472008256e+03, ),
 941: ( 2.3525000000e+01,  4.3377501330e+02,  1.0856147283e+00,  1.9472010177e+03, ),
 981: ( 2.4525000000e+01, -3.9592010424e+02, -9.8862306556e-01,  1.9472010177e+03, ),
1020: ( 2.5500000000e+01,  3.7185745032e+02,  9.3082082084e-01,  1.9472010177e+03, ),
1099: ( 2.7475000000e+01,  4.3090549548e+02,  1.0784409337e+00,  1.9472010177e+03, ),
1140: ( 2.8500000000e+01, -4.4332341320e+02, -1.1099055100e+00,  1.9484308660e+03, ),
1181: ( 2.9525000000e+01,  4.1639039299e+02,  1.0393789703e+00,  1.9484308815e+03, ),
1220: ( 3.0500000000e+01, -3.7903620354e+02, -9.4918752099e-01,  1.9484308815e+03, ),
1260: ( 3.1500000000e+01,  3.7762832948e+02,  9.4247381156e-01,  1.9484308815e+03, ),
}

ResuCalc = {
  51: ( 1.2750000000e+00,  4.0489100706e+02,  1.7697479301e+00,  2.7759031130e+02, ),
 101: ( 2.5250000000e+00, -4.3563009735e+02, -2.0649881900e+00,  1.0149040580e+03, ),
 145: ( 3.6250000000e+00,  4.3922649489e+02,  7.7236400969e-01,  1.2994780568e+03, ),
 181: ( 4.5250000000e+00, -9.1623792568e+01, -5.5458472770e-01,  1.2995557917e+03, ),
 215: ( 5.3750000000e+00,  3.5569302900e+02,  5.6370732622e-01,  1.2995557917e+03, ),
 256: ( 6.4000000000e+00, -4.3981331876e+02, -1.5722611651e+00,  1.3642553506e+03, ),
 301: ( 7.5250000000e+00,  4.4218607928e+02,  1.4188087487e+00,  1.7112528924e+03, ),
 342: ( 8.5500000000e+00, -4.4221760418e+02, -8.0400777195e-01,  1.7169741810e+03, ),
 380: ( 9.5000000000e+00,  2.2773044470e+02,  8.7035053741e-01,  1.7172005140e+03, ),
 418: ( 1.0450000000e+01, -4.0766235607e+02, -7.1813146453e-01,  1.7172005140e+03, ),
 458: ( 1.1450000000e+01,  4.1848228568e+02,  1.3472301399e+00,  1.7172005140e+03, ),
 501: ( 1.2525000000e+01, -4.4298095792e+02, -1.1868334064e+00,  1.8855857826e+03, ),
 541: ( 1.3525000000e+01,  4.1017925906e+02,  9.4606713601e-01,  1.8855857826e+03, ),
 580: ( 1.4500000000e+01, -3.2986555239e+02, -9.0404489260e-01,  1.8855857826e+03, ),
 619: ( 1.5475000000e+01,  3.8958744631e+02,  8.9458760414e-01,  1.8855857826e+03, ),
 659: ( 1.6475000000e+01, -4.2701585686e+02, -1.1469206538e+00,  1.8855857826e+03, ),
 700: ( 1.7500000000e+01,  4.4327079630e+02,  1.1417656580e+00,  1.9356496724e+03, ),
 741: ( 1.8525000000e+01, -4.2336947409e+02, -1.0246787092e+00,  1.9357189595e+03, ),
 780: ( 1.9500000000e+01,  3.6630778404e+02,  9.4951443611e-01,  1.9357189595e+03, ),
 820: ( 2.0500000000e+01, -3.7876178528e+02, -9.1315948720e-01,  1.9357189595e+03, ),
 859: ( 2.1475000000e+01,  4.0768401908e+02,  1.0529550238e+00,  1.9357189595e+03, ),
 900: ( 2.2500000000e+01, -4.4326123675e+02, -1.1070810961e+00,  1.9502029066e+03, ),
 941: ( 2.3525000000e+01,  4.3397919818e+02,  1.0860199913e+00,  1.9502029066e+03, ),
 981: ( 2.4525000000e+01, -3.9628761826e+02, -9.8964704982e-01,  1.9502029066e+03, ),
1020: ( 2.5500000000e+01,  3.7184824743e+02,  9.3069261438e-01,  1.9502029066e+03, ),
1099: ( 2.7475000000e+01,  4.3063021396e+02,  1.0776475308e+00,  1.9502029066e+03, ),
1140: ( 2.8500000000e+01, -4.4333685422e+02, -1.1104674446e+00,  1.9516203802e+03, ),
1181: ( 2.9525000000e+01,  4.1683830966e+02,  1.0398874700e+00,  1.9516571749e+03, ),
1220: ( 3.0500000000e+01, -3.7923530407e+02, -9.5029656426e-01,  1.9516571749e+03, ),
1260: ( 3.1500000000e+01,  3.7753977182e+02,  9.4164112546e-01,  1.9516571749e+03, ),
}

for nume_ordre in ResuIntgr.keys():
    TEST_FONCTION(
        VALEUR= (
            _F(FONCTION=Forc,  NOM_PARA='INST', VALE_PARA=ResuIntgr[nume_ordre][0],
               VALE_CALC=ResuCalc[nume_ordre][1],
               REFERENCE='AUTRE_ASTER', VALE_REFE=ResuIntgr[nume_ordre][1], PRECISION=1.0E-02,),
            _F(FONCTION=Depl,  NOM_PARA='INST', VALE_PARA=ResuIntgr[nume_ordre][0],
               VALE_CALC=ResuCalc[nume_ordre][2],
               REFERENCE='AUTRE_ASTER', VALE_REFE=ResuIntgr[nume_ordre][2], PRECISION=1.0E-02,),
            _F(FONCTION=Puiss, NOM_PARA='INST', VALE_PARA=ResuIntgr[nume_ordre][0],
               VALE_CALC=ResuCalc[nume_ordre][3],
               REFERENCE='AUTRE_ASTER', VALE_REFE=ResuIntgr[nume_ordre][3], PRECISION=1.0E-02,),
        ),
    )

FIN()
