#  -*- coding: iso-8859-1 -*-
# TITRE FORMATION DE BASE A L'UTILISATION D'ASTER - TP DYNAMIQUE
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# -*- coding: iso-8859-1 -*-
#
#        TUYAUTERIE COMPORTANT UN COUDE
#     MODELISATION PAR DES ELEMENTS POUTRES
#     -------------------------------------

DEBUT(CODE=_F(NOM='FORMA02D',
NIV_PUB_WEB='INTERNET',),DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU

# 1 - MISE EN DONNEES : LECTURE DU MAILLAGE

MAIL=LIRE_MAILLAGE(FORMAT='MED',);

#
# DEFINITION DES ELEMENTS FINIS UTILISES

MODELE=AFFE_MODELE(MAILLAGE=MAIL,
                   AFFE=(_F(GROUP_MA=('TUY1','TUY2',),
                            PHENOMENE='MECANIQUE',
                            MODELISATION='POU_D_T',),
                         _F(GROUP_MA='COUDE',
                            PHENOMENE='MECANIQUE',
                            MODELISATION='POU_C_T',),),);

#
# DEFINITION DU MATERIAU UTILISE

ACIER=DEFI_MATERIAU(ELAS=_F(E=2.04E11,
                            NU=0.3,
                            RHO=7800.0,),);

CHMAT=AFFE_MATERIAU(MAILLAGE=MAIL,
                    AFFE=_F(GROUP_MA='TUYAU',
                            MATER=ACIER,),);

#
# CARACTERISTIQUES DES POUTRES

CARA_POU=AFFE_CARA_ELEM(MODELE=MODELE,
                        POUTRE=_F(GROUP_MA='TUYAU',
                                  SECTION='CERCLE',
                                  CARA=('R','EP',),
                                  VALE=(0.2,0.02,),),
                        DEFI_ARC=_F(GROUP_MA='COUDE',
                                    CENTRE=(0.6,3.0,0.0,),
                                    RAYON=0.6,),);

#
# DEFINITION DES CONDITIONS AUX LIMITES
#   AU POINT A : ENCASTREMENT

BLOQUAGE=AFFE_CHAR_MECA(MODELE=MODELE,
                        DDL_IMPO=_F(GROUP_NO='BASE',
                                    DX=0.0,
                                    DY=0.0,
                                    DZ=0.0,
                                    DRX=0.0,
                                    DRY=0.0,
                                    DRZ=0.0,),);

# 2 - CALCUL DES CINQ PREMIERS MODES PROPRES
#
# CALCUL DES MATRICES ASSEMBLEES K ET M

ASSEMBLAGE(MODELE=MODELE,
                CHAM_MATER=CHMAT,
                CARA_ELEM=CARA_POU,
                CHARGE=BLOQUAGE,
                NUME_DDL=CO('NUMEDDL'),
                MATR_ASSE=(_F(MATRICE=CO('RIGIDITE'),
                              OPTION='RIGI_MECA',),
                           _F(MATRICE=CO('MASSE'),
                              OPTION='MASS_MECA',),),
                VECT_ASSE=(_F(VECTEUR=CO("F_0"),OPTION='CHAR_MECA')),
                );

#

MODES=MODE_ITER_SIMULT(MATR_RIGI=RIGIDITE,
                       MATR_MASS=MASSE,
                       CALC_FREQ=_F(OPTION='PLUS_PETITE',
                                    NMAX_FREQ=5,),);

#
# ECRITURE DES MODES AU FORMAT MED

IMPR_RESU(FORMAT='MED',
          RESU=_F(MAILLAGE=MAIL,
                  RESULTAT=MODES,
                  NOM_CHAM='DEPL',),);

# 3 - ANALYSE TRANSITOIRE :
# FORCE APPLIQUEE AU POINT B
CHARGT=AFFE_CHAR_MECA(MODELE=MODELE,
                      FORCE_NODALE=_F(GROUP_NO='EFOND',
                                      FY=1.E7,),);

ASSEMBLAGE(     MODELE=MODELE,
                CARA_ELEM=CARA_POU,
                CHARGE=BLOQUAGE,
                NUME_DDL=NUMEDDL,
                VECT_ASSE=(_F(VECTEUR=CO("FY"),OPTION='CHAR_MECA',CHARGE=CHARGT),),
                );
#
#
# PROJECTION DES MATRICES M ET K SUR LA BASE MODALE

PROJ_BASE(BASE=MODES,
                MATR_ASSE_GENE=(_F(MATRICE=CO('MASS_GEN'),
                                   MATR_ASSE=MASSE,),
                                _F(MATRICE=CO('RIGI_GEN'),
                                   MATR_ASSE=RIGIDITE,),),
                VECT_ASSE_GENE=_F(VECTEUR=CO('VGEN_FY'),
                                  VECT_ASSE=FY,),);

#
OMEGA = 121.0;


#
# DEFINITION DE LA FONCTION D'EVOLUTION DE FY

EVOL_FY = FORMULE(VALE='cos(OMEGA*INST)',
                  NOM_PARA='INST',);

#

L_INTERP=DEFI_LIST_REEL(DEBUT=0.0,
                        INTERVALLE=_F(JUSQU_A=2.0,
                                      PAS=1.E-4,),);

EVINT_FY=CALC_FONC_INTERP(FONCTION=EVOL_FY,
                          LIST_PARA=L_INTERP,
                          NOM_RESU='EVOL_FY',
                          NOM_PARA='INST',);

#

LISTER=DEFI_LIST_REEL(DEBUT=0.0,
                      INTERVALLE=_F(JUSQU_A=2.0,
                                    NOMBRE=1001,),);

#
#
#-----------------------------------------------------------------------

TRANGEN1=DYNA_TRAN_MODAL(MATR_MASS=MASS_GEN,
                         MATR_RIGI=RIGI_GEN,
                         AMOR_MODAL=_F(AMOR_REDUIT=0.05),
                         INCREMENT=_F(PAS=1.E-4,
                                      INST_INIT=0.0,
                                      INST_FIN=2.0,),
                         SCHEMA_TEMPS=_F(SCHEMA='EULER'),
                         EXCIT=_F(VECT_ASSE_GENE=VGEN_FY,
                                  FONC_MULT=EVINT_FY,),);

#
# RECUPERATION DES DEPLACEMENTS ET VITESSES CALCULES EN B, C, D
# --------------------------------------------------------------

DY_B=RECU_FONCTION(RESU_GENE=TRANGEN1,
                   LIST_INST=LISTER,
                   INTERP_NUME='LIN',
                   NOM_CHAM='DEPL',
                   NOM_CMP='DY',
                   GROUP_NO='EFOND',
                   INTERPOL='LIN',);

# IMPRESSION DES DEPLACEMENTS TRANSITOIRES

IMPR_FONCTION(FORMAT='XMGRACE',
              COURBE=_F(FONCTION=DY_B,
                        LEGENDE='DY_B',
                        FREQ_MARQUEUR=0,),
              TITRE='DEPLACEMENT DU TUYAU EN B',);

#
#
# VALEURS MIN ET MAX DES CONTRAINTES DUES AUX EFFORTS GENERALISES

DYNATRAN=REST_GENE_PHYS(RESU_GENE=TRANGEN1,
                        LIST_INST=LISTER,
                        INTERPOL='LIN',
                        TOUT_CHAM='OUI',);

#
# CALCUL DES CONTRAINTES DUES AUX EFFORTS GENERALISES

DYNATRA=CALC_CHAMP(MODELE=MODELE,
                   CHAM_MATER=CHMAT,
                   CARA_ELEM=CARA_POU,
                   RESULTAT=DYNATRAN,
                   CONTRAINTE=('SIPO_ELNO','SIPO_NOEU',),);

# INSTANT DES MAX :

EXTR_T=CREA_CHAMP(TYPE_CHAM='ELNO_SIEF_R',
                  OPERATION='EXTR',
                  RESULTAT=DYNATRA,
                  NOM_CHAM='SIPO_ELNO',
                  TYPE_MAXI='MAXI',
                  TYPE_RESU='INST',
                  LIST_INST=LISTER,
                  PRECISION=1.0E-6,);

# VALEUR DES MAX :

EXTR_V=CREA_CHAMP(TYPE_CHAM='ELNO_SIEF_R',
                  OPERATION='EXTR',
                  RESULTAT=DYNATRA,
                  NOM_CHAM='SIPO_ELNO',
                  TYPE_MAXI='MAXI',
                  TYPE_RESU='VALE',
                  LIST_INST=LISTER,
                  PRECISION=1.0E-6,);

IMPR_RESU(MODELE=MODELE,
          FORMAT='RESULTAT',
          RESU=(_F(CHAM_GD=EXTR_T,),
                _F(CHAM_GD=EXTR_V,),),);

# INSTANT DES MIN :

EXTR_TMI=CREA_CHAMP(TYPE_CHAM='ELNO_SIEF_R',
                    OPERATION='EXTR',
                    RESULTAT=DYNATRA,
                    NOM_CHAM='SIPO_ELNO',
                    TYPE_MAXI='MINI',
                    TYPE_RESU='INST',
                    LIST_INST=LISTER,
                    PRECISION=1.0E-6,);

# VALEUR DES MAX :

EXTR_VMI=CREA_CHAMP(TYPE_CHAM='ELNO_SIEF_R',
                    OPERATION='EXTR',
                    RESULTAT=DYNATRA,
                    NOM_CHAM='SIPO_ELNO',
                    TYPE_MAXI='MINI',
                    TYPE_RESU='VALE',
                    LIST_INST=LISTER,
                    PRECISION=1.0E-6,);

IMPR_RESU(MODELE=MODELE,
          FORMAT='RESULTAT',
          RESU=(_F(CHAM_GD=EXTR_TMI,),
                _F(CHAM_GD=EXTR_VMI,),),);

# TEST_RESU UNIQUEMENT POUR FAIRE TEST

TEST_RESU(RESU=(_F(GROUP_NO='BASE',
                   INST=2.0,
                   REFERENCE='NON_DEFINI',
                   RESULTAT=DYNATRA,
                   NOM_CHAM='SIPO_NOEU',
                   NOM_CMP='SN',
                   VALE_CALC=-4.85217817E+08,
                   VALE_REFE=-4.85382550E8,
                   TOLE_MACHINE=(0.05,1e-06,),
                   PRECISION=0.05,
                   ),
                _F(GROUP_NO='BASE',
                   INST=2.0,
                   REFERENCE='NON_DEFINI',
                   RESULTAT=DYNATRA,
                   NOM_CHAM='SIPO_NOEU',
                   NOM_CMP='SVY',
                   VALE_CALC= 2.25450723E+09,
                   VALE_REFE=2.265297630E9,
                   TOLE_MACHINE=(0.05,1e-06,),
                   PRECISION=0.05,
                   ),
                _F(GROUP_NO='BASE',
                   INST=2.0,
                   RESULTAT=DYNATRA,
                   NOM_CHAM='SIPO_NOEU',
                   NOM_CMP='SMFZ',
                   VALE_CALC=-2.5787879930E10,
                   TOLE_MACHINE=(0.001,1e-06,),
                   ),
                ),
          )

FIN();
