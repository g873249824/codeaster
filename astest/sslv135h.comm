# person_in_charge: van-xuan.tran at edf.fr
#
# TITRE FATIGUE, AMPLITUDE VARIABLE, TEST DU CRITERE PLAN CRITIQUE
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#
#----------------------------------------------------------------------
#    Cas test sslv135h : cube 3D
#                        Essai de chargement cyclique bi-axial
#                        critere en formule du type plan critique
#----------------------------------------------------------------------
#        Unites : Newton , Millimetre , Seconde (N,MM,S,->Mpa)
#----------------------------------------------------------------------
#
#               y       a
#               I<------------->                     a = 10 mm
#                     Face1                                    2
#                   (dessus)                         S = 100 mm
#               P1              P2
#               o--------------o
#              /I             /I
#        P5   / I        P6  / I
#            o--+-----------o  I
#            I  I   Face5   I  I  Face4
#  Face3     I  I (derri.)  I  I (cote d.)
# (cote g.)  I  I           I  I
#            I  I  P3       I  I P4
#            I  o-----------I--o      - x
#            I /            I /
#         P7 I/          P8 I/
#            o--------------o
#
#          /       Face2
#         z      (dessous)
#
#
#    CHARGEMENT     FX(T) <=> +      FY(T) <=> x
#
#            I
#            I                 x
#            I
#   1.0E+4 N I     +        x     x
#            I  +     +        3s     4s
#           -I-----I-----I-----I-----I-----> T
#            I    1s    2s  +     +
#            I  x     x        +
#            I
#  -2.0E+4 N I     x
#            I
#
#
# L'AMPLITUDE DE FX(T) = 2.0E+4 N, SA VALEUR MOYENNE = 0.0
# L'AMPLITUDE DE FY(T) = 4.0E+4 N, SA VALEUR MOYENNE = 0.0
# A L'INSTANT 0S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
# A L'INSTANT 1S, FX(T) = 1.0E+4 N  ET  FY(T) = -2.0E+4 N
# A L'INSTANT 2S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
# A L'INSTANT 3S, FX(T) = -1.0E+4 N  ET  FY(T) = 2.0E+4 N
# A L'INSTANT 4S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
#
#----------------------------------------------------------------------
#
# DANS CE CAS TEST NOUS TESTONS LE CRITERE EN FORMULE AUX POINTS DE GAUSS
# ET AUX NOEUDS
#----------------------------------------------------------------------
#
#
#
DEBUT(CODE=_F(NOM='sslv135h',NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'),
               IGNORE_ALARM=('PREPOST4_27')),
               
CUBE = LIRE_MAILLAGE(FORMAT='MED', )

CUBE=DEFI_GROUP(reuse = CUBE,
                ALARME='OUI',
                CREA_GROUP_NO=(_F(GROUP_MA='FACE1',
                                  CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE2',
                                  CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE3',
                                  CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE4',
                                CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE5',
                                  CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE6',
                                  CRIT_NOEUD='TOUS')),
                MAILLAGE=CUBE,
               );

CUBE=DEFI_GROUP(reuse = CUBE,
                ALARME='OUI',
                CREA_GROUP_MA=(_F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE1',
                                  NOM='FACE1_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE2',
                                  NOM='FACE2_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE3',
                                  NOM='FACE3_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE4',
                                  NOM='FACE4_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE5',
                                  NOM='FACE5_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE6',
                                  NOM='FACE6_3D')),
                MAILLAGE=CUBE,
               );

WHOL=DEFI_FONCTION(       NOM_PARA='SIGM',
                            INTERPOL='LOG',
                          PROL_DROITE='LINEAIRE',
                         PROL_GAUCHE='LINEAIRE',
                         VALE=(  138.,    1000000.,
                                 152.,     500000.,
                                 165.,     200000.,
                                 180.,     100000.,
                                 200.,      50000.,
                                 250.,      20000.,
                                 295.,      12000.,
                                 305.,      10000.,
                                 340.,       5000.,
                                 430.,       2000.,
                                 540.,       1000.,
                                 690.,        500.,
                                 930.,        200.,
                                1210.,        100.,
                                1590.,         50.,
                                2210.,         20.,
                                2900.,         10.,  )  )

#               _____________________________
#              I                             I
#              I     AMPLITUDE CONSTANTE     I
#              I_____________________________I
#

COEF   = DEFI_FONCTION ( NOM_PARA    ='INST',
                          PROL_DROITE  ='LINEAIRE',
                          PROL_GAUCHE ='LINEAIRE',
                          VALE        =( 0.,    0.,
                                         1.,  100.,
                                         2.,    0.,
                                         3., -100.,
                                         4.,    0.,
                                         5.,  100.,
                                         6.,    0.,
                                        )
                       )

ACIER   = DEFI_MATERIAU   ( ELAS           =_F( E         = 200000.,
                                                NU        = .3,
                                                ALPHA     = 0. ),
                            ECRO_LINE=_F( SY=  150, D_SIGM_EPSI = 50000),
                            FATIGUE        =_F( WOHLER    = WHOL, ),

                          )

LINST = DEFI_LIST_REEL   ( DEBUT      =  0.,
                           INTERVALLE =_F (JUSQU_A= 5, NOMBRE = 20  )
                                         );

TROISD   = AFFE_MODELE    ( MAILLAGE   =    CUBE,
                            AFFE       =_F ( PHENOMENE    = 'MECANIQUE',
                                             MODELISATION = '3D',
                                             TOUT         = 'OUI'    ))

MAT   = AFFE_MATERIAU    ( MAILLAGE    =   CUBE,
                           AFFE        =_F ( TOUT       = 'OUI',
                                             MATER      = ACIER,
                                             ))

# CHARGEMENT SELON LES 2 AXES X ET Y
# ----------------------------------

TR_CS  = AFFE_CHAR_MECA (
           MODELE       =  TROISD,
           FACE_IMPO    =(_F( GROUP_MA= 'FACE3' ,DX=0.),
                          _F( GROUP_MA= 'FACE2' ,DY=0.) ),
           DDL_IMPO     =(_F( GROUP_NO= 'P3' , DZ=0.) ),
           FORCE_FACE   =(_F( GROUP_MA= 'FACE4', FX=2.),
#                          _F( GROUP_MA= 'FACE1', FY=-2.)
                          )
                         );

# CALCUL AVEC STAT_NON_LINE
# -------------------------

SOL_NL = STAT_NON_LINE ( TITRE      =
                'TEST TRACTION-COMPRESSION ALTERNEE - PLAN CRITIQUE',
                        MODELE     =   TROISD,
                        CHAM_MATER =   MAT,
                        EXCIT      =_F ( CHARGE       = TR_CS,
                                         FONC_MULT    = COEF,
                                         TYPE_CHARGE  = 'FIXE_CSTE'),
                       COMPORTEMENT =_F ( RELATION     = 'VMIS_CINE_LINE',
                                        DEFORMATION  = 'PETIT',
                                        TOUT         = 'OUI'    ),
                       INCREMENT  =_F ( LIST_INST    = LINST, ),
                       NEWTON     =_F(  MATRICE = 'TANGENTE',
                                        REAC_ITER = 1),
                       CONVERGENCE=_F(  RESI_REFE_RELA=1.,
                                        SIGM_REFE     =4.8E-3,
                             #   RESI_GLOB_RELA = 1.E-8,
                                        ITER_GLOB_MAXI = 50),

                       SOLVEUR=_F(METHODE = 'MULT_FRONT'),
                                                         )

SOL_NL = CALC_CHAMP(reuse=SOL_NL,
                    RESULTAT=SOL_NL,
                    CONTRAINTE=('SIGM_ELNO',),
                    DEFORMATION=('EPSI_ELGA','EPSI_ELNO','EPSP_ELGA','EPSP_ELNO',),);

SOL_NL = CALC_CHAMP(reuse=SOL_NL,
                    RESULTAT=SOL_NL,
                    GROUP_MA=('FACE1_3D','FACE2_3D','FACE3_3D'),
                    CONTRAINTE='SIGM_NOEU',
                    DEFORMATION=('EPSI_NOEU','EPSP_NOEU'),);

TABSIGM=POST_RELEVE_T(ACTION=_F(INTITULE='SIGMA_XX',
                                NOEUD = 'N1',
                                RESULTAT=SOL_NL,
                                TOUT_ORDRE='OUI',
                                TOUT_CMP='OUI',
                                NOM_CHAM = 'SIGM_NOEU',
                                OPERATION='EXTRACTION',),);
IMPR_TABLE(TABLE=TABSIGM);

TABEPS=POST_RELEVE_T(ACTION=_F(INTITULE='EPS_XX',
                                NOEUD = 'N1',
                                RESULTAT=SOL_NL,
                                TOUT_ORDRE='OUI',
                                TOUT_CMP='OUI',
                                NOM_CHAM='EPSI_NOEU' ,
                                OPERATION='EXTRACTION',),);
IMPR_TABLE(TABLE=TABEPS);

TABEPSP=POST_RELEVE_T(ACTION=_F(INTITULE='EPSP_XX',
                                NOEUD = 'N1',
                                RESULTAT=SOL_NL,
                                TOUT_ORDRE='OUI',
                                TOUT_CMP='OUI',
                                NOM_CHAM='EPSP_NOEU' ,
                                OPERATION='EXTRACTION',),);
IMPR_TABLE(TABLE=TABEPSP);
# PROPRIETES MATERIAUX
WHOL_F =   FORMULE(
           NOM_PARA=('NBRUP'),
           VALE=''' 4098.3*(NBRUP**(-0.2693)) '''
           )
MANCO1=   FORMULE(
           NOM_PARA=('NBRUP'),
           VALE=''' 0.01*(NBRUP**(-0.1619)) '''
           ) 

NBPR = 12
CRIT = [None]*NBPR
FATN = [None]*NBPR
FATM = [None]*NBPR
NPAR = [None]*NBPR


NPAR = ['DTAUCR', 'DGAMCR', 'DSINCR', 'DEPNCR','MTAUCR', 'MGAMCR', 'MSINCR', 'MEPNCR','DGAMPC', 'DEPNPC', 'MGAMPC', 'MEPNPC' ]
NCRI = ['''DTAUCR''', '''DGAMCR''', '''DSINCR''', '''DEPNCR''','''MTAUCR''', '''MGAMCR''', '''MSINCR''', '''MEPNCR''','''DGAMPC''', '''DEPNPC''', '''MGAMPC''', '''MEPNPC''' ]
FVIE = [WHOL_F, MANCO1, WHOL_F, MANCO1, WHOL_F, MANCO1, WHOL_F, MANCO1, MANCO1, MANCO1, MANCO1, MANCO1 ]
NPRS = ['SIGEQ1','ENDO1','NBRUP1','VNM1X', 'VNM1Y', 'VNM1Z' ]

RESU = [100, 1.028E-6, 9.73E5, (0.707, -0.707), 0.707, 0, 
        2.425E-3, 1.583E-4, 6.3163E3, (0.707, -0.707), 0.707, 0, 
        200, 1.348E-5, 7.418E4, (-1,1), 0.0174, 0,
        1.75E-3, 2.11E-5, 4.74E4,(-1, 1), 0.0174, 0,

        100, 1.028E-6, 9.73E5, (0.707, -0.707), 0.707,  0, 
        2.425E-3, 1.583E-4, 6.3163E3, (0.707, -0.707), 0.707, 0, 
        200, 1.348E-5, 7.418E4, (-1,1), 0.0174, 0,
        1.75E-3, 2.11E-5, 4.74E4, (-1,1), 0.0174, 0,

        1.125E-3, 1.3782E-6, 7.256E5, (0.707, -0.707), 0.707, 0, 
        0.75E-3, 1.126E-7, 8.88E6, (-1,1), 0.0174, 0,
        1.125E-3, 1.3782E-6, 7.256E5, (0.707, -0.707), 0.707, 0, 
        0.75E-3, 1.126E-7, 8.88E6, (-1,1), 0.0174, 0
        ]
        
#CALCULE
RESC = [100, 1.0277056600669E-06, 9.73041E+05, (0.70710678118655, -0.70710678118655), 0.70710678118655,0,
         2.425E-3, 1.5833553719608E-04, 6316.0,  (0.70710678118655, -0.70710678118655), 0.70710678118655,0,
         199.93923112351, 1.3464884811041E-05, 74267.0 , (0.99984806626684, -0.99984806626684), 0.017431132564039, 0,
         1.7492631773725E-03, 2.1056179833038E-05, 47492.0 ,(0.99984806626684, -0.99984806626684), 0.017431132564039 , 0,

         100, 1.0277056600669E-06, 9.73041E+05, (0.70710678118655, -0.70710678118655), 0.70710678118655,0,
         2.425E-3, 1.5833553719608E-04, 6316.0,  (0.70710678118655, -0.70710678118655), 0.70710678118655,0,
         199.93923112351, 1.3464884811041E-05, 74267.0 , (0.99984806626684, -0.99984806626684), 0.017431132564039, 0,
         1.7492631773725E-03, 2.1056179833038E-05, 47492.0 , (0.99984806626684, -0.99984806626684), 0.017431132564039 , 0,

         1.125E-3, 1.3781582480363E-06 , 7.25606E+05, (0.70710678118655, -0.70710678118655), 0.70710678118655,0,
         7.4965817506973E-04, 1.1231085934024E-07 , 8.903859E+06, (0.99984806626684, -0.99984806626684), 0.017431132564039, 0,
         1.125E-3, 1.3781582480363E-06, 7.25606E+05, (0.70710678118655, -0.70710678118655), 0.70710678118655,0,
         7.4965817506973E-04, 1.1231085934024E-07 , 8.903859E+06, (0.99984806626684, -0.99984806626684), 0.017431132564039, 0,
        ]

#######################
# TEST CRITERE FORMULE 
#########################################NOEUD
for i in range(NBPR) :
    CRIT[i] = FORMULE(
           NOM_PARA=(NPAR[i]),
           VALE = NCRI[i]
           )

    FATN[i]=CALC_FATIGUE( TYPE_CALCUL   = 'FATIGUE_MULTI',
                           OPTION        = 'DOMA_NOEUD',
                           TYPE_CHARGE   = 'PERIODIQUE',
                           RESULTAT      = SOL_NL,
                           CHAM_MATER    = MAT,
                           GROUP_MA      = ('FACE1', 'FACE2', 'FACE3'),
                           MAILLAGE      = CUBE,
                           FORMULE_GRDEQ   = CRIT[i],
                           FORMULE_CRITIQUE = CRIT[i],
                           COURBE_GRD_VIE  = 'FORM_VIE',
                           CRITERE='FORMULE_CRITERE',
                           FORMULE_VIE = FVIE[i],
                           INST_INIT_CYCL = 1.0,
                           INST_CRIT = 'RELATIF',
                         )



    for j in range(6) :     
        crit2 = 'RELATIF' if RESU[j + 6*i] != 0. else 'ABSOLU'
        TEST_RESU(CHAM_NO=_F(NOEUD='N1',
                     REFERENCE='ANALYTIQUE',
                     NOM_CMP=NPRS[j],
                     CHAM_GD=FATN[i],
                     VALE_REFE=RESU[j+ 6*i],
                     VALE_CALC=RESC[j+ 6*i],
                     CRITERE=crit2,
                     PRECISION=0.004
                     ), 
          )

# TEST CRITERE FORMULE AVEC 'DOMA_ELGA',
#########################################NOEUD
    FATM[i]=CALC_FATIGUE( TYPE_CALCUL   = 'FATIGUE_MULTI',
                         OPTION        = 'DOMA_ELGA',
                         TYPE_CHARGE   = 'PERIODIQUE',
                         MAILLAGE      = CUBE,
                         GROUP_MA      = ('CUBE'),
                         RESULTAT      = SOL_NL,
                         CHAM_MATER    = MAT,
                         FORMULE_GRDEQ   = CRIT[i],
                         FORMULE_CRITIQUE = CRIT[i],
                         CRITERE='FORMULE_CRITERE',
                         FORMULE_VIE = FVIE[i],
                         COURBE_GRD_VIE  = 'FORM_VIE',
                         INST_INIT_CYCL = 1.0,
                         INST_CRIT = 'ABSOLU',
                         PRECISION = 1.E-4
                       )

    for j in range(6) :     
        crit2 = 'RELATIF' if RESU[j + 6*i] != 0. else 'ABSOLU'                  
        TEST_RESU(CHAM_ELEM=(_F(REFERENCE='ANALYTIQUE',
                        POINT=3,
                        NOM_CMP=NPRS[j],
                        PRECISION=0.004,
                        MAILLE='M60',
                        CHAM_GD=FATM[i],
                        VALE_REFE=RESU[j+ 6*i],
                        VALE_CALC=RESC[j+ 6*i],
                        CRITERE=crit2,
                        ),),) 

FIN( )
