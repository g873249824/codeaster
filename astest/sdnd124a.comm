# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2018 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
#
# --------------------------------------------------------------------------------------------------
#
#                   DISCRET COMPORTEMENT ECROUISSAGE TRACTION
#
#   Validation du comportement avec DYNA_NON_LINE
#
#
# --------------------------------------------------------------------------------------------------
import numpy as NU

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',),)

MAIL=LIRE_MAILLAGE(FORMAT="ASTER",)
#
# Modèle
Modele=AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(
        _F(GROUP_MA=('MASSE','GM0203','GM0102'), PHENOMENE='MECANIQUE', MODELISATION='DIS_T',),
    ),
)

U01   = 2.00
Sy    = 200.0
Su    = Sy + 250.0
Kp    = 4.0*Sy/U01
Puiss = 1.50
Masse = 200.0

def FctRp(p):
    return Sy + Kp*p/pow(1.0+pow(Kp*p/(Su-Sy),Puiss),1.0/Puiss)

Lt_p  = NU.arange(0.0,U01*8.0,0.01)
Lt_rp = list(map( FctRp , Lt_p ))
Lt_p += Sy/Kp
Lt_p = list(Lt_p)
Lt_p.insert(0, 0.0)
Lt_rp.insert(0, 0.0)

fctsy = DEFI_FONCTION(NOM_PARA='DX',
    ABSCISSE = Lt_p,
    ORDONNEE = Lt_rp,
)

# Définition des matériaux
Fusib01  = DEFI_MATERIAU( DIS_ECRO_TRAC=_F(FX= fctsy ), )

CHMAT=AFFE_MATERIAU(
    MAILLAGE=MAIL,
    AFFE=(
      _F(GROUP_MA='GM0102',  MATER=Fusib01,),
   ),
)

# Caractéristiques : Ressorts / Masse
caraElem=AFFE_CARA_ELEM(
    MODELE=Modele,
    DISCRET=(
        _F( REPERE='LOCAL',CARA='M_T_D_L', GROUP_MA='GM0102', VALE=(0.0,), ),
        _F( REPERE='LOCAL',CARA='K_T_D_L', GROUP_MA='GM0102', VALE=(Kp, 0.0, 0.0,), ),
        _F( REPERE='LOCAL',CARA='M_T_D_N', GROUP_MA='MASSE',  VALE=(Masse ), ),
        _F( REPERE='LOCAL',CARA='K_T_D_N', GROUP_MA='MASSE',  VALE=(0.0,0.0,0.0,), ),
        _F( REPERE='LOCAL',CARA='M_T_D_L', GROUP_MA='GM0203', VALE=(0.0,), ),
        _F( REPERE='LOCAL',CARA='K_T_D_L', GROUP_MA='GM0203', VALE=(Kp, 400.0, 400.0,), ),
    ),
)
#
# condition aux limites en déplacement
Blocage=AFFE_CHAR_MECA(
   MODELE=Modele,
   DDL_IMPO= (
        _F(NOEUD='N01', DY=0.0, DZ=0.0,),
        _F(NOEUD='N02', DY=0.0, DZ=0.0,),
        _F(NOEUD='N03', DY=0.0, DZ=0.0,),
    ),
)
#
Frequence = 0.50
Pulsation = 2.0*pi*Frequence
Amplitude = U01*3.0
#
Tsignal = 4.0/Frequence
LinstF = DEFI_LIST_REEL(
    DEBUT=0.,
    INTERVALLE=_F(JUSQU_A = 4.0*Tsignal, PAS = 0.5/Frequence/80.0),
)
Linst  = DEFI_LIST_REEL(
    DEBUT=0.,
    INTERVALLE=(
        _F(JUSQU_A = 4.0*Tsignal, PAS = 0.5/Frequence/40.0),
    )
)
#
DEPL = FORMULE(VALE='Amplitude*sin(Pulsation*INST)/(Pulsation**2)',
               Amplitude=Amplitude,
               Pulsation=Pulsation,
               NOM_PARA='INST',)
#
DEPLI = CALC_FONC_INTERP(NOM_RESU='DEPL',
    FONCTION=DEPL, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
#
CONDLIM =AFFE_CHAR_MECA_F(MODELE=Modele,
    DDL_IMPO = (
        _F(NOEUD='N01', DX=DEPLI,),
        _F(NOEUD='N03', DX=DEPLI,),
    ),
)
#
DEPL0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',OPERATION='AFFE',MODELE=Modele,
    AFFE=_F(NOM_CMP=('DX','DY','DZ'), TOUT='OUI',
            VALE=(0.0, 0.0, 0.0,),),
)
VITE0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',OPERATION='AFFE',MODELE=Modele,
    AFFE=_F(NOM_CMP=('DX','DY','DZ'), TOUT='OUI',
            VALE=(Amplitude/Pulsation, 0.0, 0.0,),),
)
ACCE0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',OPERATION='AFFE',MODELE=Modele,
    AFFE=_F(NOM_CMP=('DX','DY','DZ'), TOUT='OUI',
            VALE=(0.0, 0.0, 0.0,),),
)
#
LLinst =DEFI_LIST_INST(
    DEFI_LIST=_F(LIST_INST=Linst ),
)
# --------------------------------------------------------------------------------------------------
#
RESU=DYNA_NON_LINE(
    MODELE     = Modele,
    CHAM_MATER = CHMAT,
    CARA_ELEM  = caraElem,
    EXCIT=(
        _F(CHARGE=CONDLIM),
        _F(CHARGE=Blocage),
    ),
    ETAT_INIT=_F(DEPL=DEPL0,VITE=VITE0,ACCE=ACCE0),
    COMPORTEMENT=(
        _F(RELATION='ELAS',     TOUT='OUI',),
        _F(RELATION='DIS_ECRO_TRAC', GROUP_MA='GM0102',),
    ),
    SCHEMA_TEMPS=_F(SCHEMA='NEWMARK', FORMULATION='DEPLACEMENT',),
    INCREMENT=_F(LIST_INST=LLinst,),
    CONVERGENCE=_F(ITER_GLOB_MAXI=30, RESI_REFE_RELA=1.0E-06, EFFORT_REFE=1.0,),
    NEWTON=_F(REAC_INCR=1,REAC_ITER=1, MATRICE='TANGENTE'),
)
# --------------------------------------------------------------------------------------------------
#   Résultat sur Fusib01
TABVARI1 = CREA_TABLE(
    RESU=_F(RESULTAT=RESU,
        GROUP_MA='GM0102',NOM_CHAM='VARI_ELGA',TOUT_CMP='OUI',
    ),
)
TABVARI1 = CALC_TABLE(reuse=TABVARI1,
    TABLE=TABVARI1,
    ACTION=(
        _F(OPERATION='FILTRE',NOM_PARA='POINT',CRIT_COMP='EQ',VALE=2),
        _F(OPERATION='EXTR',NOM_PARA=('NUME_ORDRE','INST','V1','V4','V7','V9','V8',),)
    ),
)

"""
IMPR_RESU(FORMAT='RESULTAT', RESU=_F(RESULTAT=RESU,),)

IMPR_TABLE(UNITE=38, TABLE=TABVARI1, FORMAT_R='E17.10')
Lordre =[  51, 101, 145, 181, 215, 256, 301, 342, 380, 418, 458, 501, 541, 580, 619, 659, 700,
          741, 780, 820, 859, 900, 941, 981,1020,1059,1099,1140,1181,1220,1260 ]
IMPR_TABLE(UNITE=38, TABLE=TABVARI1, FORMAT_R='E17.10',
           FILTRE=_F(NOM_PARA='NUME_ORDRE',CRIT_COMP='EQ',VALE_I=Lordre,CRITERE='ABSOLU'))
"""

#NUME_ORDRE
#       INST               V1                 V4                 V7                 V9                V8
#       INST               Force              Ux                 Puiss              Up                p
ResuIntgr = {
  51: ( 1.2750000000e+00,  4.0518740236e+02,  1.7698015276e+00,  2.7734834978e+02,  7.5683302170e-01,  7.5683302170e-01,),
 101: ( 2.5250000000e+00, -4.3582912726e+02, -2.0648757759e+00,  1.0140662250e+03, -9.7530295769e-01,  2.4889690011e+00,),
 145: ( 3.6250000000e+00,  4.3921107599e+02,  7.7218942654e-01,  1.2983031315e+03, -3.2583826342e-01,  3.1384336954e+00,),
 181: ( 4.5250000000e+00, -9.1478381784e+01, -5.5453421789e-01,  1.2983031315e+03, -3.2583826342e-01,  3.1384336954e+00,),
 215: ( 5.3750000000e+00,  3.5606416545e+02,  5.6432215021e-01,  1.2983031315e+03, -3.2583826342e-01,  3.1384336954e+00,),
 256: ( 6.4000000000e+00, -4.3979316667e+02, -1.5725469233e+00,  1.3630098041e+03, -4.7306400660e-01,  3.2856594385e+00,),
 301: ( 7.5250000000e+00,  4.4217637172e+02,  1.4184536073e+00,  1.7097266231e+03,  3.1301267802e-01,  4.0717361232e+00,),
 342: ( 8.5500000000e+00, -4.4220270597e+02, -8.0338570155e-01,  1.7145427812e+03,  3.0212106338e-01,  4.0826277378e+00,),
 380: ( 9.5000000000e+00,  2.2749841532e+02,  8.7086710166e-01,  1.7145427812e+03,  3.0212106338e-01,  4.0826277378e+00,),
 418: ( 1.0450000000e+01, -4.0784744847e+02, -7.1749755780e-01,  1.7145427812e+03,  3.0212106338e-01,  4.0826277378e+00,),
 458: ( 1.1450000000e+01,  4.1834388837e+02,  1.3479807843e+00,  1.7145427812e+03,  3.0212106338e-01,  4.0826277378e+00,),
 501: ( 1.2525000000e+01, -4.4303839862e+02, -1.1860129583e+00,  1.8829817237e+03, -7.8416961755e-02,  4.4631657629e+00,),
 541: ( 1.3525000000e+01,  4.0984820595e+02,  9.4620355313e-01,  1.8829817237e+03, -7.8416961755e-02,  4.4631657629e+00,),
 580: ( 1.4500000000e+01, -3.2995693895e+02, -9.0330930913e-01,  1.8829817237e+03, -7.8416961755e-02,  4.4631657629e+00,),
 619: ( 1.5475000000e+01,  3.8963392034e+02,  8.9566783909e-01,  1.8829817237e+03, -7.8416961755e-02,  4.4631657629e+00,),
 659: ( 1.6475000000e+01, -4.2731664080e+02, -1.1467085638e+00,  1.8829817237e+03, -7.8416961755e-02,  4.4631657629e+00,),
 700: ( 1.7500000000e+01,  4.4325707678e+02,  1.1421263296e+00,  1.9327919033e+03,  3.3983637684e-02,  4.5755663624e+00,),
 741: ( 1.8525000000e+01, -4.2313655725e+02, -1.0238577554e+00,  1.9327919033e+03,  3.3983637684e-02,  4.5755663624e+00,),
 780: ( 1.9500000000e+01,  3.6607681470e+02,  9.4917567444e-01,  1.9327919033e+03,  3.3983637684e-02,  4.5755663624e+00,),
 820: ( 2.0500000000e+01, -3.7880104186e+02, -9.1301896697e-01,  1.9327919033e+03,  3.3983637684e-02,  4.5755663624e+00,),
 859: ( 2.1475000000e+01,  4.0796445912e+02,  1.0538947855e+00,  1.9327919033e+03,  3.3983637684e-02,  4.5755663624e+00,),
 900: ( 2.2500000000e+01, -4.4331880345e+02, -1.1071432058e+00,  1.9473449759e+03,  1.1538028197e-03,  4.6083961972e+00,),
 941: ( 2.3525000000e+01,  4.3376974297e+02,  1.0855781603e+00,  1.9473449759e+03,  1.1538028197e-03,  4.6083961972e+00,),
 981: ( 2.4525000000e+01, -3.9590140110e+02, -9.8859969994e-01,  1.9473449759e+03,  1.1538028197e-03,  4.6083961972e+00,),
1020: ( 2.5500000000e+01,  3.7186114905e+02,  9.3080667545e-01,  1.9473449759e+03,  1.1538028197e-03,  4.6083961972e+00,),
1059: ( 2.6475000000e+01, -3.9223923687e+02, -9.7944428935e-01,  1.9473449759e+03,  1.1538028197e-03,  4.6083961972e+00,),
1099: ( 2.7475000000e+01,  4.3092147714e+02,  1.0784574957e+00,  1.9473449759e+03,  1.1538028197e-03,  4.6083961972e+00,),
1140: ( 2.8500000000e+01, -4.4332400707e+02, -1.1099092344e+00,  1.9485654485e+03, -1.5992167593e-03,  4.6111492168e+00,),
1181: ( 2.9525000000e+01,  4.1637863975e+02,  1.0393473826e+00,  1.9485654485e+03, -1.5992167593e-03,  4.6111492168e+00,),
1220: ( 3.0500000000e+01, -3.7902427448e+02, -9.4915990295e-01,  1.9485654485e+03, -1.5992167593e-03,  4.6111492168e+00,),
1260: ( 3.1500000000e+01,  3.7763177185e+02,  9.4248021287e-01,  1.9485654485e+03, -1.5992167593e-03,  4.6111492168e+00,),
}

Lpara = [('V1',1),('V4',2),('V7',3),('V9',4),('V8',5),]
for nume_ordre in list(ResuIntgr.keys()):
    for para,indx in Lpara:
        TEST_TABLE(TABLE=TABVARI1,
            FILTRE=_F(NOM_PARA='NUME_ORDRE', CRIT_COMP='EQ', VALE_I= nume_ordre),
            NOM_PARA=para, VALE_CALC=ResuIntgr[nume_ordre][indx],
            VALE_REFE=ResuIntgr[nume_ordre][indx], REFERENCE='SOURCE_EXTERNE', PRECISION=1.0E-06,
        )


FIN()
