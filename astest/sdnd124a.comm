#
# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#
# --------------------------------------------------------------------------------------------------
#
#                   DISCRET COMPORTEMENT ECROUISSAGE TRACTION
#
#   Validation du comportement avec DYNA_NON_LINE
#
#
# --------------------------------------------------------------------------------------------------
import numpy as NU

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON',),)

MAIL=LIRE_MAILLAGE()
#
# Modèle
Modele=AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(
        _F(GROUP_MA=('MASSE','GM0203','GM0102'), PHENOMENE='MECANIQUE', MODELISATION='DIS_T',),
    ),
)

U01   = 2.00
Sy    = 200.0
Su    = Sy + 250.0
Kp    = 4.0*Sy/U01
Puiss = 1.50
Masse = 200.0

def FctRp(p):
    return Sy + Kp*p/pow(1.0+pow(Kp*p/(Su-Sy),Puiss),1.0/Puiss)

Lt_p  = NU.arange(0.0,U01*8.0,0.01)
Lt_rp = map( FctRp , Lt_p )
Lt_p += Sy/Kp
Lt_p = list(Lt_p)
Lt_p.insert(0, 0.0)
Lt_rp.insert(0, 0.0)

fctsy = DEFI_FONCTION(NOM_PARA='DX',
    ABSCISSE = Lt_p,
    ORDONNEE = Lt_rp,
)

# Définition des matériaux
Fusib01  = DEFI_MATERIAU( DIS_ECRO_TRAC=_F(FX= fctsy ), )

CHMAT=AFFE_MATERIAU(
    MAILLAGE=MAIL,
    AFFE=(
      _F(GROUP_MA='GM0102',  MATER=Fusib01,),
   ),
)

# Caractéristiques : Ressorts / Masse
caraElem=AFFE_CARA_ELEM(
    MODELE=Modele,
    DISCRET=(
        _F( REPERE='LOCAL',CARA='M_T_D_L', GROUP_MA='GM0102', VALE=(0.0,), ),
        _F( REPERE='LOCAL',CARA='K_T_D_L', GROUP_MA='GM0102', VALE=(Kp, 0.0, 0.0,), ),
        _F( REPERE='LOCAL',CARA='M_T_D_N', GROUP_MA='MASSE',  VALE=(Masse ), ),
        _F( REPERE='LOCAL',CARA='K_T_D_N', GROUP_MA='MASSE',  VALE=(0.0,0.0,0.0,), ),
        _F( REPERE='LOCAL',CARA='M_T_D_L', GROUP_MA='GM0203', VALE=(0.0,), ),
        _F( REPERE='LOCAL',CARA='K_T_D_L', GROUP_MA='GM0203', VALE=(Kp, 400.0, 400.0,), ),
    ),
)
#
# condition aux limites en déplacement
Blocage=AFFE_CHAR_MECA(
   MODELE=Modele,
   DDL_IMPO= (
        _F(NOEUD='N01', DY=0.0, DZ=0.0,),
        _F(NOEUD='N02', DY=0.0, DZ=0.0,),
        _F(NOEUD='N03', DY=0.0, DZ=0.0,),
    ),
)
#
Frequence = 0.50
Pulsation = 2.0*pi*Frequence
Amplitude = U01*3.0
#
Tsignal = 4.0/Frequence
LinstF = DEFI_LIST_REEL(
    DEBUT=0.,
    INTERVALLE=_F(JUSQU_A = 4.0*Tsignal, PAS = 0.5/Frequence/80.0),
)
Linst  = DEFI_LIST_REEL(
    DEBUT=0.,
    INTERVALLE=(
        _F(JUSQU_A = 4.0*Tsignal, PAS = 0.5/Frequence/40.0),
    )
)
#
DEPL  = FORMULE(NOM_PARA='INST',VALE='Amplitude*sin(Pulsation*INST)/(Pulsation**2)')
#
DEPLI = CALC_FONC_INTERP(NOM_RESU='DEPL',
    FONCTION=DEPL, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
#
CONDLIM =AFFE_CHAR_MECA_F(MODELE=Modele,
    DDL_IMPO = (
        _F(NOEUD='N01', DX=DEPLI,),
        _F(NOEUD='N03', DX=DEPLI,),
    ),
)
#
DEPL0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',OPERATION='AFFE',MODELE=Modele,
    AFFE=_F(NOM_CMP=('DX','DY','DZ'), TOUT='OUI',
            VALE=(0.0, 0.0, 0.0,),),
)
VITE0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',OPERATION='AFFE',MODELE=Modele,
    AFFE=_F(NOM_CMP=('DX','DY','DZ'), TOUT='OUI',
            VALE=(Amplitude/Pulsation, 0.0, 0.0,),),
)
ACCE0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',OPERATION='AFFE',MODELE=Modele,
    AFFE=_F(NOM_CMP=('DX','DY','DZ'), TOUT='OUI',
            VALE=(0.0, 0.0, 0.0,),),
)
#
LLinst =DEFI_LIST_INST(
    DEFI_LIST=_F(LIST_INST=Linst ),
)
# --------------------------------------------------------------------------------------------------
#
RESU=DYNA_NON_LINE(
    MODELE     = Modele,
    CHAM_MATER = CHMAT,
    CARA_ELEM  = caraElem,
    EXCIT=(
        _F(CHARGE=CONDLIM),
        _F(CHARGE=Blocage),
    ),
    ETAT_INIT=_F(DEPL=DEPL0,VITE=VITE0,ACCE=ACCE0),
    COMPORTEMENT=(
        _F(RELATION='ELAS',     TOUT='OUI',),
        _F(RELATION='DIS_ECRO_TRAC', GROUP_MA='GM0102',),
    ),
    SCHEMA_TEMPS=_F(SCHEMA='NEWMARK', FORMULATION='DEPLACEMENT',),
    INCREMENT=_F(LIST_INST=LLinst,),
    CONVERGENCE=_F(ITER_GLOB_MAXI=30, RESI_REFE_RELA=1.0E-06, EFFORT_REFE=1.0,),
    NEWTON=_F(REAC_INCR=1,REAC_ITER=1, MATRICE='TANGENTE'),
)

# IMPR_RESU(FORMAT='RESULTAT', RESU=_F(RESULTAT=RESU,),)
# --------------------------------------------------------------------------------------------------
#   Résultat sur Fusib01
TABVARI1 = CREA_TABLE(
    RESU=_F(RESULTAT=RESU,
        GROUP_MA='GM0102',NOM_CHAM='VARI_ELGA',TOUT_CMP='OUI',
    ),
)
TABVARI1 = CALC_TABLE(reuse=TABVARI1,
    TABLE=TABVARI1,
    ACTION=(
        _F(OPERATION='FILTRE',NOM_PARA='POINT',CRIT_COMP='EQ',VALE=2),
        _F(OPERATION='EXTR',NOM_PARA=('NUME_ORDRE','INST','V1','V2','V3','V4','V5',),)
    ),
)

# IMPR_TABLE(UNITE=38, TABLE=TABVARI1, FORMAT_R='E17.10')

#NUME_ORDRE
#       INST               V1                 V2                 V3                 V4                V5
#       INST               Force              Ux                 Puiss              Up                p
ResuIntgr = {
  51: ( 1.2750000000e+00,  4.0514894798e+02,  1.7698257727e+00,  2.7736499231e+02,  7.5695340277e-01,  1.2698161435e+00,),
 101: ( 2.5250000000e+00, -4.3584584746e+02, -2.0647457796e+00,  1.0140956362e+03, -9.7513116093e-01,  3.0786594428e+00,),
 145: ( 3.6250000000e+00,  4.3921743018e+02,  7.7222798608e-01,  1.2982852020e+03, -3.2581558936e-01,  3.7364568396e+00,),
 181: ( 4.5250000000e+00, -9.1517869526e+01, -5.5460371803e-01,  1.2982880767e+03, -3.2580904421e-01,  3.7364634526e+00,),
 215: ( 5.3750000000e+00,  3.5606065994e+02,  5.6434260564e-01,  1.2982880767e+03, -3.2580904421e-01,  3.7364634526e+00,),
 256: ( 6.4000000000e+00, -4.3979663909e+02, -1.5724584569e+00,  1.3629654339e+03, -4.7296685916e-01,  3.8850759597e+00,),
 301: ( 7.5250000000e+00,  4.4218453636e+02,  1.4184292106e+00,  1.7096345513e+03,  3.1296786967e-01,  4.6769873193e+00,),
 342: ( 8.5500000000e+00, -4.4221217527e+02, -8.0345047549e-01,  1.7144548218e+03,  3.0207996269e-01,  4.6879539618e+00,),
 380: ( 9.5000000000e+00,  2.2752558203e+02,  8.7087877798e-01,  1.7144615167e+03,  3.0206482292e-01,  4.6879691930e+00,),
 418: ( 1.0450000000e+01, -4.0783181773e+02, -7.1751472141e-01,  1.7144615167e+03,  3.0206482292e-01,  4.6879691930e+00,),
 458: ( 1.1450000000e+01,  4.1833665733e+02,  1.3479064662e+00,  1.7144615167e+03,  3.0206482292e-01,  4.6879691930e+00,),
 501: ( 1.2525000000e+01, -4.4304091849e+02, -1.1860039454e+00,  1.8828697637e+03, -7.8401649199e-02,  5.0705246344e+00,),
 541: ( 1.3525000000e+01,  4.0986343649e+02,  9.4625260557e-01,  1.8828716850e+03, -7.8405985645e-02,  5.0705289924e+00,),
 580: ( 1.4500000000e+01, -3.2997441963e+02, -9.0334203471e-01,  1.8828716850e+03, -7.8405985645e-02,  5.0705289924e+00,),
 619: ( 1.5475000000e+01,  3.8962560459e+02,  8.9565802583e-01,  1.8828716850e+03, -7.8405985645e-02,  5.0705289924e+00,),
 659: ( 1.6475000000e+01, -4.2729911340e+02, -1.1466537692e+00,  1.8828716850e+03, -7.8405985645e-02,  5.0705289924e+00,),
 700: ( 1.7500000000e+01,  4.4325666418e+02,  1.1421035643e+00,  1.9326673282e+03,  3.3961903801e-02,  5.1834433727e+00,),
 741: ( 1.8525000000e+01, -4.2314597979e+02, -1.0239023388e+00,  1.9326676415e+03,  3.3962610675e-02,  5.1834440829e+00,),
 780: ( 1.9500000000e+01,  3.6609776208e+02,  9.4920701588e-01,  1.9326676415e+03,  3.3962610675e-02,  5.1834440829e+00,),
 820: ( 2.0500000000e+01, -3.7879651773e+02, -9.1302868365e-01,  1.9326676415e+03,  3.3962610675e-02,  5.1834440829e+00,),
 859: ( 2.1475000000e+01,  4.0795130776e+02,  1.0538408801e+00,  1.9326676415e+03,  3.3962610675e-02,  5.1834440829e+00,),
 900: ( 2.2500000000e+01, -4.4331858840e+02, -1.1071188427e+00,  1.9472008256e+03,  1.1776282778e-03,  5.2163831897e+00,),
 941: ( 2.3525000000e+01,  4.3377501330e+02,  1.0856147283e+00,  1.9472010177e+03,  1.1771950365e-03,  5.2163836249e+00,),
 981: ( 2.4525000000e+01, -3.9592010424e+02, -9.8862306556e-01,  1.9472010177e+03,  1.1771950365e-03,  5.2163836249e+00,),
1020: ( 2.5500000000e+01,  3.7185745032e+02,  9.3082082084e-01,  1.9472010177e+03,  1.1771950365e-03,  5.2163836249e+00,),
1059: ( 2.6475000000e+01, -3.9223061522e+02, -9.7939934302e-01,  1.9472010177e+03,  1.1771950365e-03,  5.2163836249e+00,),
1099: ( 2.7475000000e+01,  4.3090549548e+02,  1.0784409337e+00,  1.9472010177e+03,  1.1771950365e-03,  5.2163836249e+00,),
1140: ( 2.8500000000e+01, -4.4332341320e+02, -1.1099055100e+00,  1.9484308660e+03, -1.5969770510e-03,  5.2191707478e+00,),
1181: ( 2.9525000000e+01,  4.1639039299e+02,  1.0393789703e+00,  1.9484308815e+03, -1.5970121438e-03,  5.2191707831e+00,),
1220: ( 3.0500000000e+01, -3.7903620354e+02, -9.4918752099e-01,  1.9484308815e+03, -1.5970121438e-03,  5.2191707831e+00,),
1260: ( 3.1500000000e+01,  3.7762832948e+02,  9.4247381156e-01,  1.9484308815e+03, -1.5970121438e-03,  5.2191707831e+00,),
}

Lpara = [('V1',1),('V2',2),('V3',3),('V4',4),('V5',5),]
for nume_ordre in ResuIntgr.keys():
    for para,indx in Lpara:
        TEST_TABLE(TABLE=TABVARI1,
            FILTRE=_F(NOM_PARA='NUME_ORDRE', CRIT_COMP='EQ', VALE_I= nume_ordre),
            NOM_PARA=para, VALE_CALC=ResuIntgr[nume_ordre][indx],
            VALE_REFE=ResuIntgr[nume_ordre][indx], REFERENCE='SOURCE_EXTERNE', PRECISION=1.0E-06,
        )


FIN()
