# TITRE VALIDATION INFORMATIQUE DU PARALLELISME DES CALCULS ELEMENTAIRES ET ASSEMBLAGES
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NOM='ZZZZ307A', NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
      MESURE_TEMPS=_F(NIVE_DETAIL=2), MEMOIRE=_F(TAILLE_GROUP_ELEM=7),
      DEBUG=_F(SDVERI='OUI'))
#===========================================================================================
# Ce test valide le parallelisme des calculs elementaires et des assemblages.
# Il teste TOUTES les combinaisons de :
#   * PARTITION/PARALLELISME='CENTRALISE'/'GROUP_ELEM'/'MAIL_CONTIGU'/'MAIL_DISPERSE'
#   * MATR_DISTRIBUE='OUI'/'NON'
#   * ELIM_LAGR2='OUI'/'NON'
#   * conditions cinematiques : dualisees / eliminees / "a cheval" sur plusieurs processeurs
# Le BUT de ce test est de tourner en version parallele MPI (sur 4 procs par exemple).
# Ce test valide la programmation MPI mais ne prouve rien sur les performances.
#===========================================================================================

PRE_GIBI()
MA=LIRE_MAILLAGE()


for partit in ('CENTRALISE','MAIL_DISPERSE','MAIL_CONTIGU','GROUP_ELEM') :
    MO=AFFE_MODELE(  MAILLAGE=MA,
                      PARTITION=_F(PARALLELISME=partit),
                      AFFE=_F(  TOUT = 'OUI', PHENOMENE = 'MECANIQUE', MODELISATION = 'DKT') )

    CARELEM=AFFE_CARA_ELEM(  MODELE=MO, COQUE=_F(  GROUP_MA = 'CARRE', EPAIS = 1.) )
    MAT=DEFI_MATERIAU( ELAS=_F(  E = 1.0,  NU = 0.3) )
    CHMAT=AFFE_MATERIAU(  MAILLAGE=MA,  AFFE=_F(  TOUT = 'OUI',  MATER = MAT) )
    CL2=AFFE_CHAR_MECA(  MODELE=MO, FORCE_NODALE=_F(GROUP_NO='C', FX=3.5))

    for typ_CL in ('dualise','elimine','transverse') :
        if typ_CL=="dualise" :
           CL1=AFFE_CHAR_MECA(  MODELE=MO,
                        DDL_IMPO=(_F(  GROUP_MA = 'CARRE', DZ = 0., DRX = 0., DRY = 0., DRZ = 0.),
                                  _F(  GROUP_MA = 'BORD1', DX = 0., DY = 0.),
                                  _F(  GROUP_NO = 'C', DX = 2., DY = 1.)))
        elif typ_CL=="elimine":
           CL1=AFFE_CHAR_CINE(  MODELE=MO,
                        MECA_IMPO=(_F(  GROUP_MA = 'CARRE', DZ = 0., DRX = 0., DRY = 0., DRZ = 0.),
                                   _F(  GROUP_MA = 'BORD1', DX = 0., DY = 0.),
                                   _F(  GROUP_NO = 'C', DX = 2., DY = 1.)))
        elif typ_CL=="transverse":
           CL1=AFFE_CHAR_MECA(  MODELE=MO,
                        DDL_IMPO=( _F(  GROUP_MA = 'CARRE', DRX = 0., DRY = 0., DRZ = 0.),
                                   _F(  GROUP_MA = 'BORD1', DX = 0., DY = 0.),
                                   _F(  GROUP_NO = 'C', DX = 2., DY = 1., DZ=3.)),
                        LIAISON_UNIF= _F(GROUP_MA='CARRE', DDL='DZ'),
                        )

        for matr_distrib in ('OUI','NON') :
           for elim_lagr2 in ('OUI','NON') :
              RESU1=MECA_STATIQUE(  MODELE=MO,  CHAM_MATER=CHMAT, CARA_ELEM =CARELEM,
                                    SOLVEUR=_F(METHODE='MUMPS',MATR_DISTRIBUEE=matr_distrib,
   ELIM_LAGR2=elim_lagr2),
                                    EXCIT=(_F(  CHARGE = CL1), _F(  CHARGE = CL2))  )
              #IMPR_RESU(RESU=_F(RESULTAT=RESU1))

              TEST_RESU(RESU=( _F( RESULTAT = RESU1, NOM_CHAM = 'DEPL', REFERENCE = 'ANALYTIQUE',
                       CRITERE = 'ABSOLU',PRECISION = 1.E-10, NUME_ORDRE = 1, GROUP_NO = 'C', NOM_CMP='DX',
                       VALE_CALC = 2.0, VALE_REFE=2.0, )))

              if typ_CL=="dualise" :
                  TEST_RESU(OBJET=_F(NOM='RESU1   .001.000000.VALE',
                             VALE_CALC=47.492727537032, ))
              elif typ_CL=="elimine":
                  TEST_RESU(OBJET=_F(NOM='RESU1   .001.000000.VALE',
                             VALE_CALC=43.992727537032, ))
              elif typ_CL=="transverse":
                  TEST_RESU(OBJET=_F(NOM='RESU1   .001.000000.VALE',
                             VALE_CALC=194.49272753703, ))

              DETRUIRE(CONCEPT=_F(NOM=(RESU1)))
        DETRUIRE(CONCEPT=_F(NOM=(CL1)))
    DETRUIRE(CONCEPT=_F(NOM=(MO,MAT,CARELEM,CHMAT,CL2)))

FIN()
