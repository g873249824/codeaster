# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
      MESURE_TEMPS=_F(NIVE_DETAIL=2), MEMOIRE=_F(TAILLE_GROUP_ELEM=7),
      DEBUG=_F(SDVERI='OUI'))
#===========================================================================================
# Ce test valide le parallelisme des calculs elementaires et des assemblages.
# Il teste TOUTES les combinaisons de :
#   * DISTRIBUTION/METHODE=  /'CENTRALISE'/'MAIL_CONTIGU'/'MAIL_DISPERSE'
#                            /'GROUP_ELEM'/'SOUS_DOMAINE'/'SOUS_DOM.OLD'/
#   * MATR_DISTRIBUE='OUI'/'NON'
#   * ELIM_LAGR='LAGR2'/'NON'
#   * conditions cinematiques : dualisees / eliminees / "a cheval" sur plusieurs processeurs
# Le BUT de ce test est de tourner en version parallele MPI (sur 4 procs par exemple).
# Ce test valide la programmation MPI mais ne prouve rien sur les performances.
#===========================================================================================

PRE_GIBI()
MA=LIRE_MAILLAGE()
MAT=DEFI_MATERIAU( ELAS=_F(  E = 1.0,  NU = 0.3) )
CHMAT=AFFE_MATERIAU(  MAILLAGE=MA,  AFFE=_F(  TOUT = 'OUI',  MATER = MAT) )


lparallel= ('CENTRALISE', 'MAIL_DISPERSE', 'MAIL_CONTIGU', 'SOUS_DOM.OLD', 'GROUP_ELEM', 'SOUS_DOMAINE')

for nopartit in lparallel :
    MO=AFFE_MODELE(  MAILLAGE=MA,
                      AFFE=_F(  TOUT = 'OUI', PHENOMENE = 'MECANIQUE', MODELISATION = 'DKT'),
                      DISTRIBUTION=_F(METHODE=nopartit),)

    CARELEM=AFFE_CARA_ELEM(  MODELE=MO, COQUE=_F(  GROUP_MA = 'CARRE', EPAIS = 1.) )
    CL2=AFFE_CHAR_MECA(  MODELE=MO, FORCE_NODALE=_F(GROUP_NO='C', FX=3.5))

    for typ_CL in ('dualise','elimine','transverse') :
        if typ_CL=="dualise" :
           CL1=AFFE_CHAR_MECA(  MODELE=MO,
                        DDL_IMPO=(_F(  GROUP_MA = 'CARRE', DZ = 0., DRX = 0., DRY = 0., DRZ = 0.),
                                  _F(  GROUP_MA = 'BORD1', DX = 0., DY = 0.),
                                  _F(  GROUP_NO = 'C', DX = 2., DY = 1.)))
        elif typ_CL=="elimine":
           CL1=AFFE_CHAR_CINE(  MODELE=MO,
                        MECA_IMPO=(_F(  GROUP_MA = 'CARRE', DZ = 0., DRX = 0., DRY = 0., DRZ = 0.),
                                   _F(  GROUP_MA = 'BORD1', DX = 0., DY = 0.),
                                   _F(  GROUP_NO = 'C', DX = 2., DY = 1.)))
        elif typ_CL=="transverse":
           CL1=AFFE_CHAR_MECA(  MODELE=MO,
                        DDL_IMPO=( _F(  GROUP_MA = 'CARRE', DRX = 0., DRY = 0., DRZ = 0.),
                                   _F(  GROUP_MA = 'BORD1', DX = 0., DY = 0.),
                                   _F(  GROUP_NO = 'C', DX = 2., DY = 1., DZ=3.)),
                        LIAISON_UNIF= _F(GROUP_MA='CARRE', DDL='DZ'),
                        )

        for matr_distrib in ('NON','OUI') :
           for elim_lagr in ('NON','LAGR2') :
              RESU1=MECA_STATIQUE(  MODELE=MO,  CHAM_MATER=CHMAT, CARA_ELEM =CARELEM,
                                    SOLVEUR=_F(METHODE='MUMPS',MATR_DISTRIBUEE=matr_distrib,
                                    ELIM_LAGR=elim_lagr ),
                                    EXCIT=(_F(  CHARGE = CL1), _F(  CHARGE = CL2))  )

              TEST_RESU(RESU=( _F( RESULTAT = RESU1, NOM_CHAM = 'DEPL', REFERENCE = 'ANALYTIQUE',
                       CRITERE = 'ABSOLU',PRECISION = 1.E-10, NUME_ORDRE = 1, GROUP_NO = 'C', NOM_CMP='DX',
                       VALE_CALC = 2.0, VALE_REFE=2.0, )))

              if typ_CL=="dualise" :
                  TEST_RESU(OBJET=_F(NOM='RESU1   .001.000000.VALE',
                             VALE_CALC=115.957868591, ))
                  TEST_RESU(OBJET=_F(NOM='RESU1   .012.000000.CELV',
                             VALE_CALC=926.59471201, ))
              elif typ_CL=="elimine":
                  TEST_RESU(OBJET=_F(NOM='RESU1   .001.000000.VALE',
                             VALE_CALC=112.457868591, ))
              elif typ_CL=="transverse":
                  TEST_RESU(OBJET=_F(NOM='RESU1   .001.000000.VALE',
                             VALE_CALC=478.957868591, ))

              DETRUIRE(CONCEPT=_F(NOM=(RESU1)),INFO=1)
        DETRUIRE(CONCEPT=_F(NOM=(CL1)),INFO=1)
    DETRUIRE(CONCEPT=_F(NOM=(MO, CARELEM, CL2)),INFO=1)



# Pour tester la possibilite de modifier la partition pendant un post-traitement :
#--------------------------------------------------------------------------------------
for nopartit in lparallel :
    MO=AFFE_MODELE(  MAILLAGE=MA,
                      AFFE=_F(  TOUT = 'OUI', PHENOMENE = 'MECANIQUE', MODELISATION = 'DKT'),
                      DISTRIBUTION=_F(METHODE=nopartit),)

    CARELEM=AFFE_CARA_ELEM(  MODELE=MO, COQUE=_F(  GROUP_MA = 'CARRE', EPAIS = 1.) )
    CL2=AFFE_CHAR_MECA(  MODELE=MO, FORCE_NODALE=_F(GROUP_NO='C', FX=3.5))
    CL1=AFFE_CHAR_MECA(  MODELE=MO,
                        DDL_IMPO=( _F(  GROUP_MA = 'CARRE', DRX = 0., DRY = 0., DRZ = 0.),
                                   _F(  GROUP_MA = 'BORD1', DX = 0., DY = 0.),
                                   _F(  GROUP_NO = 'C', DX = 2., DY = 1., DZ=3.)),
                        LIAISON_UNIF= _F(GROUP_MA='CARRE', DDL='DZ'),
                        )

    RESU1=MECA_STATIQUE(  MODELE=MO,  CHAM_MATER=CHMAT, CARA_ELEM =CARELEM,
                          SOLVEUR=_F(METHODE='MUMPS',MATR_DISTRIBUEE='OUI',
                          ELIM_LAGR='LAGR2' ),
                          EXCIT=(_F(  CHARGE = CL1), _F(  CHARGE = CL2))  )

    for nopartit2 in lparallel :
        MODI_MODELE(  reuse=MO, MODELE=MO, DISTRIBUTION=_F(METHODE=nopartit2),)
        RESU2=CALC_CHAMP(RESULTAT = RESU1, DEFORMATION = ('EPSI_ELGA',),)
        TEST_RESU(OBJET=_F(NOM='RESU2   .009.000000.CELV', VALE_CALC=577.172255332, ))
        DETRUIRE(CONCEPT=_F(NOM=(RESU2)),INFO=1)

#   -- on remet la partition en etat pour la boucle principale :
    MODI_MODELE(  reuse=MO, MODELE=MO, DISTRIBUTION=_F(METHODE=nopartit),)

    DETRUIRE(CONCEPT=_F(NOM=(MO, CARELEM, CL2, CL1, RESU1)),INFO=1)

FIN()
