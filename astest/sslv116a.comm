# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2019 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'), DEBUG=_F(SDVERI='OUI'))

# MODELISATION A : Mod√©lisation 3D FEM

# parametre utile
#------------------

# rayon de la fissure
a = 2

#-----------------------------------------------------------------------------------------------------------------------------
#                                TRAVAIL SUR LE MAILLAGE, MODELE
#-----------------------------------------------------------------------------------------------------------------------------

MA=LIRE_MAILLAGE(FORMAT='MED')

MA=DEFI_GROUP(reuse =MA,
              MAILLAGE=MA,
              CREA_GROUP_NO=_F(OPTION='NOEUD_ORDO',
                               NOM='NFF3',
                               GROUP_MA='LFF1',
                               GROUP_NO_ORIG='NFF1',
                               GROUP_NO_EXTR='NFF2',),);

MA=DEFI_GROUP(reuse =MA,
              MAILLAGE=MA,
              CREA_GROUP_MA=_F(NOM='EXTERIEUR',
                               UNION=('FACE_INF','FACE_LAD','FACE_LAG','FACE_SUP',),
                               ),
               )
MA=DEFI_GROUP(reuse =MA,
              MAILLAGE=MA,
              CREA_GROUP_NO=_F(NOM='EXTE1',
                               GROUP_MA=('EXTERIEUR',),
                               ),
               )
MA=DEFI_GROUP(reuse =MA,
              MAILLAGE=MA,
              CREA_GROUP_NO=_F(NOM='FACE_AV',
                               GROUP_MA=('FACE_AV',),
                               ),
               )
MA=DEFI_GROUP(reuse =MA,
              MAILLAGE=MA,
              CREA_GROUP_NO=_F(NOM='EXTERIEUR',
                               UNION=('EXTE1','FACE_AR'),
                               ),
               )
MA=DEFI_GROUP(reuse =MA,
              MAILLAGE=MA,
              CREA_GROUP_NO=(_F(NOM='LEVINF1',
                               DIFFE=('LEVINF','LEVSUP'),
                               ),
                             _F(NOM='LEVSUP1',
                               DIFFE=('LEVSUP','LEVINF'),
                               ),
                             _F(NOM='FACE_AV1',
                               DIFFE=('FACE_AV','LEVSUP','LEVINF','EXTE1'),
                               ),
                            ),
               )
# Barsoum
MA=MODI_MAILLAGE(reuse=MA,
                 MAILLAGE=MA,
                 MODI_MAILLE=_F(OPTION='NOEUD_QUART',
                                GROUP_NO_FOND='NFF3'))

MA=MODI_MAILLAGE(reuse =MA,
                 MAILLAGE=MA,
                 ORIE_PEAU_3D=_F(GROUP_MA=('FACE_AV','FACE_SUP','FACE_INF','FACE_LAD','FACE_LAG',),),);

MO=AFFE_MODELE(MAILLAGE=MA,
               AFFE=_F(TOUT='OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='3D',),);

#-----------------------------------------------------------------------------------------------------------------------------
#                                CREATION DES CHAMPS THERMIQUES
#-----------------------------------------------------------------------------------------------------------------------------

#Temperature variable spatialement pour ouvrir la fissure
TEMPVARX=DEFI_FONCTION(NOM_PARA='Z',VALE=(-10,250,
                                           -1,130,
                                           2,80,
                                           10,250),);

CHP_TEMP=CREA_CHAMP( OPERATION='AFFE', TYPE_CHAM='NOEU_TEMP_F',
                     MAILLAGE=MA,
                     AFFE=_F(TOUT = 'OUI',
                     NOM_CMP = 'TEMP',
                     VALE_F = TEMPVARX))

#Temperature constante initiale avant refroidissement
CTE250=DEFI_FONCTION(NOM_PARA='Z',
                     VALE=(-10,250,
                            10,250),);

CHTEMP0=CREA_CHAMP( OPERATION='AFFE',
                    TYPE_CHAM='NOEU_TEMP_F',
                    MAILLAGE=MA,
                    AFFE=_F(TOUT = 'OUI',
                            NOM_CMP = 'TEMP',
                            VALE_F = CTE250))

#Calcul thermique
LIST1=DEFI_LIST_REEL(DEBUT=0,
                     INTERVALLE=_F(JUSQU_A=2,NOMBRE=2,),);

RESUTHER=CREA_RESU(OPERATION='AFFE',
                   TYPE_RESU='EVOL_THER',
                   NOM_CHAM='TEMP',
                   AFFE=(_F(INST = -1,
                            CHAM_GD = CHTEMP0),
                         _F(LIST_INST = LIST1,
                            CHAM_GD = CHP_TEMP),)
                   )
#-----------------------------------------------------------------------------------------------------------------------------
#                                CHAMP MATERIAU
#-----------------------------------------------------------------------------------------------------------------------------


#Materiau, avec temperature comme variable de commande
E=2.E11
nu = 0.3
alpha=1E-5
MAT=DEFI_MATERIAU(ELAS=_F(E=E,
                          NU=nu,
                          ALPHA=alpha,),)

CHMAT=AFFE_MATERIAU(MAILLAGE=MA,
                    AFFE=_F(TOUT='OUI',
                            MATER=MAT,),
                     AFFE_VARC=_F(TOUT='OUI',
                                  NOM_VARC='TEMP',
                                  EVOL = RESUTHER,
                                  VALE_REF=250,),);

#-----------------------------------------------------------------------------------------------------------------------------
#                                CHARGEMENTS POSSIBLES
#-----------------------------------------------------------------------------------------------------------------------------

#Fissure fermee
BLOCFISS=AFFE_CHAR_MECA(MODELE=MO,
                        LIAISON_GROUP=(_F(GROUP_NO_1='LEVINF1',
                                          GROUP_NO_2='LEVSUP1',
                                          DDL_1='DX',
                                          COEF_MULT_1=1,
                                          DDL_2='DX',
                                          COEF_MULT_2=-1,
                                          COEF_IMPO=0,),
                                       _F(GROUP_NO_1='LEVINF1',
                                          GROUP_NO_2='LEVSUP1',
                                          DDL_1='DY',
                                          COEF_MULT_1=1,
                                          DDL_2='DY',
                                          COEF_MULT_2=-1,
                                          COEF_IMPO=0,),
                                       _F(GROUP_NO_1='LEVINF1',
                                          GROUP_NO_2='LEVSUP1',
                                          DDL_1='DZ',
                                          COEF_MULT_1=1,
                                          DDL_2='DZ',
                                          COEF_MULT_2=-1,
                                          COEF_IMPO=0,),
                                         ),);

# Symetrie
SYME=AFFE_CHAR_MECA(MODELE=MO,
                      DDL_IMPO=_F(GROUP_NO='FACE_AV1',
                                   DY=0.,),);

#ENCASTREMENT
ENCAS=AFFE_CHAR_MECA(MODELE=MO,
                     DDL_IMPO=_F(GROUP_NO='EXTERIEUR',
                                  DX=0,
                                  DY=0,
                                  DZ=0,),
                     )                      
#-----------------------------------------------------------------------------------------------------------------------------
#                               RESOLUTION DU PROBLEME THERMO-MECANIQUE A FISSURE FERMEE
#                                RESUMECA, POUR CREATION CONTRAINTE INITIALE
#-----------------------------------------------------------------------------------------------------------------------------

INSTMECA=DEFI_LIST_REEL(DEBUT=-1,
                        INTERVALLE=(_F(JUSQU_A=0,PAS=1,),
                                    _F(JUSQU_A=1,PAS=1,),),);

RESUMECA=STAT_NON_LINE(MODELE=MO,
                       CHAM_MATER=CHMAT,
                       EXCIT=(_F(CHARGE=ENCAS,),
                              _F(CHARGE=BLOCFISS,),
                              _F(CHARGE=SYME),),
                       NEWTON=_F(REAC_ITER=0),
                       COMPORTEMENT=_F(RELATION='ELAS',),
                       INCREMENT=_F(LIST_INST=INSTMECA,),);

RESUMECA=CALC_CHAMP(reuse=RESUMECA,
                    RESULTAT=RESUMECA,
                    CONTRAINTE=('SIEF_ELNO','SIEF_NOEU',),
                    DEFORMATION=('EPSI_ELGA','EPSP_ELNO',),
                    );

##Extraction des contraintes au noeuds et points de Gauss
SIEFELGA=CREA_CHAMP(TYPE_CHAM='ELGA_SIEF_R',
                    OPERATION='EXTR',
                    RESULTAT=RESUMECA,
                    NOM_CHAM='SIEF_ELGA',
                    INST=1,);

SIEFELNO=CREA_CHAMP(TYPE_CHAM='ELNO_SIEF_R',
                    OPERATION='EXTR',
                    RESULTAT=RESUMECA,
                    NOM_CHAM='SIEF_ELNO',
                    INST=1,);
                    
SIEFNOEU=CREA_CHAMP(TYPE_CHAM='NOEU_SIEF_R',
                    OPERATION='EXTR',
                    RESULTAT=RESUMECA,
                    NOM_CHAM='SIEF_NOEU',
                    INST=1,);



#-----------------------------------------------------------------------------------------------------------------------------
#                               RESOLUTION DU PROBLEME THERMO-MECANIQUE A FISSURE OUVERTE
#                                RESOUVFI, POUR VALEUR DE REFERENCE
#-----------------------------------------------------------------------------------------------------------------------------
RESOUVFI=STAT_NON_LINE(MODELE=MO,
                       CHAM_MATER=CHMAT,
                       EXCIT=(_F(CHARGE=ENCAS,),
                              _F(CHARGE=SYME,),
                             ),
                       NEWTON=_F(REAC_ITER=0),
                       COMPORTEMENT=_F(RELATION='ELAS',),
                       INCREMENT=_F(LIST_INST=INSTMECA,),);

RESOUVFI=CALC_CHAMP(reuse=RESOUVFI,
                    RESULTAT=RESOUVFI,
                    CONTRAINTE=('SIEF_ELNO',),
                    DEFORMATION=('EPSI_ELGA','EPSP_ELNO',),
                    )




#-----------------------------------------------------------------------------------------------------------------------------
#                               RESOLUTION DU PROBLEME THERMO-MECANIQUE A FISSURE FERMEE
#                                RESVERI, POUR VERIFIER QUE LA CONTRAINTE EST AUTO-EQUILIBREE
#-----------------------------------------------------------------------------------------------------------------------------

## Definition de la liste d'instants
LIST3=DEFI_LIST_REEL(DEBUT=2,
                     INTERVALLE=_F(JUSQU_A=3,PAS=1,),);

## Affectation du materiau mecanique (sans chargement thermique)
MATMECA=AFFE_MATERIAU(MAILLAGE=MA,
                      AFFE=_F(TOUT='OUI',MATER=MAT,),);

## Resolution ouverture de la fissure en presence d'un champ de contrainte residuelle
RESVERI=STAT_NON_LINE(MODELE=MO,
                      CHAM_MATER=MATMECA,
                      EXCIT=(_F(CHARGE=ENCAS,),
                             _F(CHARGE=SYME,),
                             _F(CHARGE=BLOCFISS),
                            ),
                      NEWTON=_F(REAC_ITER=0),
                      COMPORTEMENT=_F(RELATION='ELAS',),
                      ETAT_INIT=_F(SIGM=SIEFELGA,),
#                      CONVERGENCE=_F(RESI_GLOB_MAXI=1.E-10),
                      INCREMENT=_F(LIST_INST=LIST3),);

SIEFVERI=CREA_CHAMP(TYPE_CHAM='ELGA_SIEF_R',
                    OPERATION='EXTR',
                    RESULTAT=RESVERI,
                    NOM_CHAM='SIEF_ELGA',
                    INST=3,);

DIFSIEF=CREA_CHAMP(OPERATION='ASSE',
                   MODELE=MO,
                   TYPE_CHAM='ELGA_SIEF_R',
                   ASSE=(_F(CHAM_GD=SIEFELGA, TOUT='OUI',CUMUL='OUI',COEF_R=1.),
                         _F(CHAM_GD=SIEFVERI, TOUT='OUI',CUMUL='OUI',COEF_R=-1.),
                         ),
                   )

MOYDIF=POST_ELEM(CHAM_GD=DIFSIEF,
                  MODELE=MO,
                  CHAM_MATER=MATMECA,
                  INTEGRALE=(_F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIXX',),
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIYY',),
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIZZ',),                              
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIXY',), 
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIXZ',),
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIYZ',), 
                             ),
                  )

MOYENNE=POST_ELEM(CHAM_GD=SIEFVERI,
                  MODELE=MO,
                  CHAM_MATER=MATMECA,
                  INTEGRALE=(_F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIXX',),
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIYY',),
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIZZ',),                              
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIXY',), 
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIXZ',),
                             _F(TOUT='OUI',
                                TYPE_MAILLE='3D',
                                NOM_CHAM='SIEF_ELGA',
                                NOM_CMP='SIYZ',), 
                             ),
                  )

IMPR_TABLE(TABLE=MOYENNE, UNITE=19)
IMPR_TABLE(TABLE=MOYDIF, UNITE=19)                  
                  
IMPR_RESU(FORMAT='MED',
          UNITE=80,
          RESU=_F(RESULTAT=RESVERI),
          )

#-----------------------------------------------------------------------------------------------------------------------------
#                               RESOLUTION DU PROBLEME MECANIQUE A FISSURE OUVERTE ET ETAT_INIT
#                                RESUINI, POUR CONTROLE DES VALEURS
#-----------------------------------------------------------------------------------------------------------------------------



## Resolution ouverture de la fissure en presence d'un champ de contrainte residuelle
RESUINI=STAT_NON_LINE(MODELE=MO,
                      CHAM_MATER=MATMECA,
                      EXCIT=(_F(CHARGE=ENCAS,),
                             _F(CHARGE=SYME,),
                            ),
                      NEWTON=_F(REAC_ITER=0),
                      COMPORTEMENT=_F(RELATION='ELAS',),
                      ETAT_INIT=_F(SIGM=SIEFELGA,),
                      INCREMENT=_F(LIST_INST=LIST3),);

## Calcul postraitement
RESUINI=CALC_CHAMP(reuse=RESUINI,
                   RESULTAT=RESUINI,
                   DEFORMATION=('EPSI_ELGA','EPSP_ELNO',),
                   VARI_INTERNE=('VARI_ELNO',),
                 );

IMPR_RESU(FORMAT='MED',
          UNITE=81,
          RESU=_F(RESULTAT=RESUINI),
          )

#-----------------------------------------------------------------------------------------------------------------------------
#                                 POST-TRAITEMENTS
#-----------------------------------------------------------------------------------------------------------------------------

# on va d√©finir les tables suivantes EI = avec Etat Initial

#                   R√©f√©rence    |     EI_ELGA     EI_ELNO         EI_NOEU
# CALC_G :         GREF (1,2,3)  | GINIPG (1,2,3) GINIEL (1,2,3) GININO (1,2,3)
# CALC_K_G :       GKREF(1,2,3)  | GKINIPG(1,2,3) GKINIEL(1,2,3) GKININO(1,2,3)

# POST_K1_K2_K3 :  KREF          |                KINI

#Definition du fond de fissure
FISS=DEFI_FOND_FISS(MAILLAGE=MA,
                    FOND_FISS=_F(GROUP_MA='LFF1'),
                    LEVRE_SUP=_F(GROUP_MA='LEVSUP'),
                    LEVRE_INF=_F(GROUP_MA='LEVINF'),
                    SYME='NON')

# 1 prisme + 6 hexas selon le rayon du tore
# h_ -> taille de maille selon le rayon du tore
h_pris = 0.04
h_hexa = 0.06

# couronne n¬∞1 : 2h-4h
RINF1 = h_pris + h_hexa
RSUP1 = h_pris + 3*h_hexa

# couronne n¬∞2 : 4h-6h
RINF2 = h_pris + 3*h_hexa
RSUP2 = h_pris + 5*h_hexa

# couronne n¬∞2 : 2h-6h
RINF3 = h_pris + h_hexa
RSUP3 = h_pris + 5*h_hexa

#CALCULS DE REFERENCE, A PARTIR DE RESOUVFI
# Methode G-theta
GREF1=CALC_G(OPTION='CALC_G',
            RESULTAT=RESOUVFI,
            INST=1.,
            THETA=_F(FOND_FISS=FISS,
                     R_INF=RINF1,
                     R_SUP=RSUP1),
          )

GREF2=CALC_G(OPTION='CALC_G',
            RESULTAT=RESOUVFI,
            INST=1.,
            THETA=_F(FOND_FISS=FISS,
                     R_INF=RINF2,
                     R_SUP=RSUP2),
          )

GREF3=CALC_G(OPTION='CALC_G',
            RESULTAT=RESOUVFI,
            INST=1.,
            THETA=_F(FOND_FISS=FISS,
                     R_INF=RINF3,
                     R_SUP=RSUP3),
          )

GKREF1=CALC_G(OPTION='CALC_K_G',
              RESULTAT=RESOUVFI,
              INST=1.,
              THETA=_F(FOND_FISS=FISS,
                       R_INF=RINF1,
                       R_SUP=RSUP1),
             )

GKREF2=CALC_G(OPTION='CALC_K_G',
              RESULTAT=RESOUVFI,
              INST=1.,
              THETA=_F(FOND_FISS=FISS,
                       R_INF=RINF2,
                       R_SUP=RSUP2),
             )

GKREF3=CALC_G(OPTION='CALC_K_G',
              RESULTAT=RESOUVFI,
              INST=1.,
              THETA=_F(FOND_FISS=FISS,
                       R_INF=RINF3,
                       R_SUP=RSUP3),
             )



# Extrapolation des sauts de deplacements
KREF=POST_K1_K2_K3(RESULTAT=RESOUVFI,
                   INST=1,
                   FOND_FISS=FISS)
                   
#CALCULS AVEC ETAT INITIAL, A PARTIR DE RESUINI
# a partir d'un champ de contraintes initiales de type ELGA
GINIPG1=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELGA,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF1,
                        R_SUP=RSUP1),
                        )

GINIPG2=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELGA,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF2,
                        R_SUP=RSUP2),
                        )         

GINIPG3=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELGA,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF3,
                        R_SUP=RSUP3),
                        )

# a partir d'un champ de contraintes initiales de type ELNO
GINIEL1=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELNO,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF1,
                        R_SUP=RSUP1),
                        )

GINIEL2=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELNO,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF2,
                        R_SUP=RSUP2),
                        )        
          
GINIEL3=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELNO,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF3,
                        R_SUP=RSUP3),
                        )

# a partir d'un champ de contraintes initiales de type NOEU
GININO1=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFNOEU,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF1,
                        R_SUP=RSUP1),
                        )

GININO2=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFNOEU,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF2,
                        R_SUP=RSUP2),
                        )        
          
GININO3=CALC_G(OPTION='CALC_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFNOEU,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF3,
                        R_SUP=RSUP3),
                        )


# avec CALC_K_G
GKINIPG1=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELGA,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF1,
                        R_SUP=RSUP1),
                        )

GKINIPG2=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELGA,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF2,
                        R_SUP=RSUP2),
                        )         

GKINIPG3=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELGA,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF3,
                        R_SUP=RSUP3),
                        )

GKINIEL1=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELNO,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF1,
                        R_SUP=RSUP1),
                        )

GKINIEL2=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELNO,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF2,
                        R_SUP=RSUP2),
                        )        
          
GKINIEL3=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFELNO,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF3,
                        R_SUP=RSUP3),
                        )

GKININO1=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFNOEU,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF1,
                        R_SUP=RSUP1),
                        )

GKININO2=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFNOEU,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF2,
                        R_SUP=RSUP2),
                        )        
          
GKININO3=CALC_G(OPTION='CALC_K_G',
               RESULTAT=RESUINI,
               INST=3.,
               ETAT_INIT=_F(SIGM=SIEFNOEU,), 
               THETA=_F(FOND_FISS=FISS,
                        R_INF=RINF3,
                        R_SUP=RSUP3),
                        )
          
# Extrapolation des sauts de deplacements
KINI=POST_K1_K2_K3(FOND_FISS=FISS,
                   RESULTAT=RESUINI,
                   INST=3.)                

#-----------------------------------------------------------------------------------------------------------------------------
#                                 CONFRONTATION DES RESULTATS SOUS FORME DE COURBE
#-----------------------------------------------------------------------------------------------------------------------------

# formule pour le calcul de l'angle en degre
ANGLE = FORMULE(VALE='ABSC_CURV/a * 180./pi',
                a=a,
                NOM_PARA='ABSC_CURV',)

# ajout de la colonne 'angle'
GREF1=CALC_TABLE(TABLE=GREF1,reuse=GREF1,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GREF2=CALC_TABLE(TABLE=GREF2,reuse=GREF2,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GREF3=CALC_TABLE(TABLE=GREF3,reuse=GREF3,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
                 
GKREF1=CALC_TABLE(TABLE=GKREF1,reuse=GKREF1,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GKREF2=CALC_TABLE(TABLE=GKREF2,reuse=GKREF2,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GKREF3=CALC_TABLE(TABLE=GKREF3,reuse=GKREF3,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))

GINIPG1=CALC_TABLE(TABLE=GINIPG1,reuse=GINIPG1,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GINIPG2=CALC_TABLE(TABLE=GINIPG2,reuse=GINIPG2,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GINIPG3=CALC_TABLE(TABLE=GINIPG3,reuse=GINIPG3,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))

GKINIPG1=CALC_TABLE(TABLE=GKINIPG1,reuse=GKINIPG1,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GKINIPG2=CALC_TABLE(TABLE=GKINIPG2,reuse=GKINIPG2,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GKINIPG3=CALC_TABLE(TABLE=GKINIPG3,reuse=GKINIPG3,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))

GINIEL1=CALC_TABLE(TABLE=GINIEL1,reuse=GINIEL1,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GINIEL2=CALC_TABLE(TABLE=GINIEL2,reuse=GINIEL2,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GINIEL3=CALC_TABLE(TABLE=GINIEL3,reuse=GINIEL3,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
               
GKINIEL1=CALC_TABLE(TABLE=GKINIEL1,reuse=GKINIEL1,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GKINIEL2=CALC_TABLE(TABLE=GKINIEL2,reuse=GKINIEL2,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GKINIEL3=CALC_TABLE(TABLE=GKINIEL3,reuse=GKINIEL3,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))

GININO1=CALC_TABLE(TABLE=GININO1,reuse=GININO1,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GININO2=CALC_TABLE(TABLE=GININO2,reuse=GININO2,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GININO3=CALC_TABLE(TABLE=GININO3,reuse=GININO3,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))

GKININO1=CALC_TABLE(TABLE=GKININO1,reuse=GKININO1,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GKININO2=CALC_TABLE(TABLE=GKININO2,reuse=GKININO2,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
GKININO3=CALC_TABLE(TABLE=GKININO3,reuse=GKININO3,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
                                        
KREF=CALC_TABLE(TABLE=KREF,reuse=KREF,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
              
KINI=CALC_TABLE(TABLE=KINI,reuse=KINI,ACTION=_F(OPERATION='OPER',FORMULE=ANGLE,NOM_PARA='ANGLE'))
              
# impression de chaque table
IMPR_TABLE(TABLE=GREF1,  UNITE=9)
IMPR_TABLE(TABLE=GREF2,  UNITE=9)
IMPR_TABLE(TABLE=GREF3,  UNITE=9)
IMPR_TABLE(TABLE=GKREF1, UNITE=9)
IMPR_TABLE(TABLE=GKREF2, UNITE=9)
IMPR_TABLE(TABLE=GKREF3, UNITE=9)

IMPR_TABLE(TABLE=GINIPG1, UNITE=9)
IMPR_TABLE(TABLE=GINIPG2, UNITE=9)
IMPR_TABLE(TABLE=GINIPG3, UNITE=9)
IMPR_TABLE(TABLE=GKINIPG1,UNITE=9)
IMPR_TABLE(TABLE=GKINIPG2,UNITE=9)
IMPR_TABLE(TABLE=GKINIPG3,UNITE=9)

IMPR_TABLE(TABLE=GINIEL1, UNITE=9)
IMPR_TABLE(TABLE=GINIEL2, UNITE=9)
IMPR_TABLE(TABLE=GINIEL3, UNITE=9)
IMPR_TABLE(TABLE=GKINIEL1,UNITE=9)
IMPR_TABLE(TABLE=GKINIEL2,UNITE=9)
IMPR_TABLE(TABLE=GKINIEL3,UNITE=9)

IMPR_TABLE(TABLE=GININO1, UNITE=9)
IMPR_TABLE(TABLE=GININO2, UNITE=9)
IMPR_TABLE(TABLE=GININO3, UNITE=9)
IMPR_TABLE(TABLE=GKININO1,UNITE=9)
IMPR_TABLE(TABLE=GKININO2,UNITE=9)
IMPR_TABLE(TABLE=GKININO3,UNITE=9)

IMPR_TABLE(TABLE=KREF, UNITE=9)
IMPR_TABLE(TABLE=KINI, UNITE=9)


#-----------------------------------------------------------------------------------------------------------------------------
#                                 TRACE DES COURBES
#-----------------------------------------------------------------------------------------------------------------------------

# courbes de G, pour la couronne n¬∞1
C_GREF1=RECU_FONCTION(TABLE=GREF1,
                      PARA_X='ANGLE',
                      PARA_Y='G',)

CGINIPG1=RECU_FONCTION(TABLE=GINIPG1,
                       PARA_X='ANGLE',
                       PARA_Y='G',)

C_KREF=RECU_FONCTION(TABLE=KREF,
                     PARA_X='ANGLE',
                     PARA_Y='G',)

GKINIPG=RECU_FONCTION(TABLE=GKINIPG1,
                      PARA_X='ANGLE',
                      PARA_Y='G',)

IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=30,
              COURBE=(_F(FONCTION=C_GREF1,
                         LEGENDE='G CALC_G reference',
                         STYLE=1,
                         MARQUEUR=0,
                         COULEUR=1),
                      _F(FONCTION=CGINIPG1,
                         LEGENDE='G CALC_G etat intial PG',
                         STYLE=1,
                         MARQUEUR=0,
                         COULEUR=2),
                      _F(FONCTION=GKINIPG,
                         LEGENDE='G CALC_K_G etat intial PG',
                         STYLE=3,
                         MARQUEUR=0,
                         COULEUR=2),
                       ),
              TITRE='Taux de restitution d energie',
              BORNE_X=(0.0,180,),
              BORNE_Y=(0.0,2E6,),

              LEGENDE_X='angle (degre)',
              LEGENDE_Y=r'G (J.m\S-2\N)',);


# courbe de K1, pour la couronne n¬∞1

C_GKREF1=RECU_FONCTION(TABLE=GKREF1,
                       PARA_X='ANGLE',
                       PARA_Y='K1',)

C1KREF=RECU_FONCTION(TABLE=KREF,
                       PARA_X='ANGLE',
                       PARA_Y='K1',)

C1KINI=RECU_FONCTION(TABLE=KINI,
                      PARA_X='ANGLE',
                      PARA_Y='K1',)

CKINIPG1=RECU_FONCTION(TABLE=GKINIPG1,
                      PARA_X='ANGLE',
                      PARA_Y='K1',)

IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=31,
              COURBE=(
                      _F(FONCTION=C_GKREF1,
                         LEGENDE='K1 CALC_K_G reference',
                         MARQUEUR=0,
                         COULEUR=1),
                      _F(FONCTION=C1KREF,
                         LEGENDE='K1 POST_K1_K2_K3 reference',
                         MARQUEUR=8,
                         COULEUR=1),
                      _F(FONCTION=CKINIPG1,
                         LEGENDE='K1 CALC_K_G',
                         MARQUEUR=0,
                         COULEUR=3),
                      _F(FONCTION=C1KINI,
                         LEGENDE='K1 POST_K1_K2_K3',
                         MARQUEUR=9,
                         COULEUR=2),
                       ),
              TITRE='K1',
              BORNE_X=(0.0,180,),
              BORNE_Y=(0.0,7E8,),

              LEGENDE_X='angle (degre)',
              LEGENDE_Y=r'KI (Pa.m\S-1/2\N)',)

# ---------------------------------------------------------------------
#                VERIFICATIONS DES VALEURS
# ---------------------------------------------------------------------

# G de CALC_G 
# -----------

# valeurs de r√©f√©rence (thermique)
Gref1=1923020.50827
Gref2=1922612.72586
Gref3=1922816.61714

# G de CALC_G Reference pour les 3 couronnes
TEST_TABLE(TABLE=GREF1,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           VALE_CALC=Gref1, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=GREF2,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.03e-2,
           VALE_REFE=Gref1,
           VALE_CALC=Gref2, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=GREF3,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref1,
           VALE_CALC=Gref3, # pour la non-r√©gression
           )


# G de CALC_G Etat Initial avec Contrainte aux Points de Gauss, pour les 3 couronnes    
TEST_TABLE(TABLE=GINIPG1,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.02e-2,
           VALE_REFE=Gref1,
           VALE_CALC=1923369.87866, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=GINIPG2,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref2,
           VALE_CALC=1923362.00723, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=GINIPG3,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref3,
           VALE_CALC=1923365.94297, # pour la non-r√©gression
           )          

# G de CALC_G Etat Initial avec Contrainte aux Noeuds par √©l√©ment, pour les 3 couronnes                     
TEST_TABLE(TABLE=GINIEL1,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.02e-2,
           VALE_REFE=Gref1,
           VALE_CALC=1923369.87866, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=GINIEL2,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref2,
           VALE_CALC=1923362.00723, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=GINIEL3,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref3,
           VALE_CALC=1923365.94297, # pour la non-r√©gression
           )         

# G de CALC_G Etat Initial avec Contrainte aux Noeuds, pour les 3 couronnes                     
TEST_TABLE(TABLE=GININO1,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.02e-2,
           VALE_REFE=Gref1,
           VALE_CALC=1923339.06307, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=GININO2,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.06e-2,
           VALE_REFE=Gref2,
           VALE_CALC=1923601.95943, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=GININO3,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.05e-2,
           VALE_REFE=Gref3,
           VALE_CALC=1923470.51132, # pour la non-r√©gression
           )  



# G de CALC_K_G 
# -------------

# on utilise les memes valeurs de r√©f√©rence


# G de CALC_K_G Reference pour les 3 couronnes           
TEST_TABLE(TABLE=GKREF1,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.02e-2,
           VALE_REFE=Gref1,
           VALE_CALC=1923020.50827 , # pour la non-r√©gression
           )  

TEST_TABLE(TABLE=GKREF2,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.03e-2,
           VALE_REFE=Gref2,
           VALE_CALC=1922612.72586 , # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKREF3,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref3,
           VALE_CALC= 1922816.61714, # pour la non-r√©gression
           ) 

# G de CALC_K_G Etat Initial avec Contrainte aux Points de Gauss, pour les 3 couronnes
TEST_TABLE(TABLE=GKINIPG1,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.02e-2,
           VALE_REFE=Gref1,
           VALE_CALC=1923395.99936, # pour la non-r√©gression
           )  

TEST_TABLE(TABLE=GKINIPG2,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.05e-2,
           VALE_REFE=Gref2,
           VALE_CALC=1923435.22455, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKINIPG3,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref3,
           VALE_CALC=1923415.61198, # pour la non-r√©gression
           ) 


# G de CALC_K_G Etat Initial avec Contrainte aux Noeuds par √©l√©ment, pour les 3 couronnes
TEST_TABLE(TABLE=GKINIEL1,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.02e-2,
           VALE_REFE=Gref1,
           VALE_CALC=1923395.99936, # pour la non-r√©gression
           )  

TEST_TABLE(TABLE=GKINIEL2,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.05e-2,
           VALE_REFE=Gref2,
           VALE_CALC=1923435.22455, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKINIEL3,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref3,
           VALE_CALC=1923415.61198, # pour la non-r√©gression
           ) 

# G de CALC_K_G Etat Initial avec Contrainte aux Noeuds, pour les 3 couronnes
TEST_TABLE(TABLE=GKININO1,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.02e-2,
           VALE_REFE=Gref1,
           VALE_CALC=1923130.30252, # pour la non-r√©gression
           )  

TEST_TABLE(TABLE=GKININO2,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref2,
           VALE_CALC=1923293.91284, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKININO3,
           NOM_PARA='G',
           TYPE_TEST='MAX',
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.04e-2,
           VALE_REFE=Gref3,
           VALE_CALC=1923212.10775, # pour la non-r√©gression
           )


# K de CALC_K_G 
# -------------

# K1 : valeurs de r√©f√©rence (thermique)
Kref1=663460384.573532
Kref2=673917231.8458568
Kref3=668688808.0629863

TEST_TABLE(TABLE=GKREF1,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           VALE_CALC=Kref1, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKREF2,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=2.e-2,
           VALE_REFE=Kref1,
           VALE_CALC=Kref2, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKREF3,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=1.e-2,
           VALE_REFE=Kref1,
           VALE_CALC=Kref3, # pour la non-r√©gression
           ) 


TEST_TABLE(TABLE=GKINIPG1,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kref1,
           VALE_CALC=663522635.905865, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKINIPG2,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kref2,
           VALE_CALC=673964476.183042, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKINIPG3,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kref3,
           VALE_CALC=668743555.8988272, # pour la non-r√©gression
           )        


TEST_TABLE(TABLE=GKINIEL1,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kref1,
           VALE_CALC=663522635.905865, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKINIEL2,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kref2,
           VALE_CALC=673964476.183042, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKINIEL3,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kref3,
           VALE_CALC=668743555.8988272, # pour la non-r√©gression
           ) 


TEST_TABLE(TABLE=GKININO1,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.011e-2,
           VALE_REFE=Kref1,
           VALE_CALC=663526759.363054, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKININO2,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kref2,
           VALE_CALC=673983060.8835199, # pour la non-r√©gression
           ) 

TEST_TABLE(TABLE=GKININO3,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kref3,
           VALE_CALC=668754909.977671, # pour la non-r√©gression
           ) 


# K de POST_K1_K2_K3 
# ------------------

# K1 : valeurs de r√©f√©rence pour POST_K1_K2_K3 (thermique)
Kpk1=621498251.587

TEST_TABLE(TABLE=KREF,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           VALE_CALC=Kpk1, # pour la non-r√©gression
           )

TEST_TABLE(TABLE=KINI,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA='ANGLE',
                     VALE=89.8555,),
           CRITERE='RELATIF',
           REFERENCE='AUTRE_ASTER',
           PRECISION=0.01e-2,
           VALE_REFE=Kpk1,
           VALE_CALC=621498251.587, # pour la non-r√©gression
           ) 



FIN()
