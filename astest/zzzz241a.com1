# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
import numpy as NP

POURSUITE(CODE='OUI', PAR_LOT='NON')

REF=FRF_REF.convert('complex');
H1=FRF_H1_i.convert('complex');
H2=FRF_H2_i.convert('complex');
IMP=IMP_H1_i.convert('complex');
EFF=APS_EFF.convert('complex');

n_ref=NP.log10(NP.absolute(REF.vale_y));
n_H1=NP.log10(NP.absolute(H1.vale_y));
n_H2=NP.log10(NP.absolute(H2.vale_y));
n_IMP=NP.log10(NP.absolute(IMP.vale_y));



n_ref_H1=NP.subtract(n_ref,n_H1);
n_ref_H2=NP.subtract(n_ref,n_H2);
n_ref_IM=NP.subtract(n_ref,n_IMP);

d_ref_H1=NP.sum(NP.divide(n_ref_H1,(n_ref)))/len(n_ref)*100;
d_ref_H2=NP.sum(NP.divide(n_ref_H2,(n_ref)))/len(n_ref)*100;
d_ref_IM=NP.sum(NP.divide(n_ref_IM,(n_ref)))/len(n_ref)*100;

#-- On estime la variance de l'effort a partir de l'autospectre. 
#-- Elle doit valoir 1/3, ce qui correspond a la variance du bruit uniforme
#-- sur l'intervalle[-1 1] 
#-- sur l'intervalle [a,b], on a var=(b-a)^2/12
#-- le facteur 2 est la puisqu'on ne conserve que la moitie de l'autospectre

d_ref_AP = (1/3. - 2.*NP.sum(NP.absolute(EFF.vale_y)))*100.


RES_REF=DEFI_FONCTION(NOM_PARA='INST',
                      VALE=(1., d_ref_H1, 2., d_ref_H2, 3., d_ref_IM , 4., d_ref_AP,),
                      PROL_DROITE='CONSTANT',
                      PROL_GAUCHE='CONSTANT'
                     )

TEST_FONCTION(VALEUR=(_F(VALE_CALC=-0.303544998689,
                         VALE_REFE=0.0,
                         CRITERE='ABSOLU',
                         VALE_PARA=1.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.0,
                         FONCTION=RES_REF,),
                      _F(VALE_CALC=0.815347267536,
                         VALE_REFE=0.0,
                         CRITERE='ABSOLU',
                         VALE_PARA=2.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.0,
                         FONCTION=RES_REF,),
                      _F(VALE_CALC=0.45249908743,
                         VALE_REFE=0.0,
                         CRITERE='ABSOLU',
                         VALE_PARA=3.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.0,
                         FONCTION=RES_REF,),
                      _F(VALE_CALC=-0.35779479933,
                         VALE_REFE=0.0,
                         CRITERE='ABSOLU',
                         VALE_PARA=4.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.0,
                         FONCTION=RES_REF,),
                      ),
              )

FIN();
