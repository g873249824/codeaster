# TITRE CYLINDRE AVEC CABLES DE PRECONTRAINTE SOUS PRESSION INTERNE EN DYNAMIQUE TRANSITOIRE
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
DEBUT(CODE=_F( NIV_PUB_WEB='INTERNET'),ERREUR=_F(ERREUR_F='EXCEPTION',),
IGNORE_ALARM=('CALCULEL3_47','ELEMENTS4_80'),DEBUG=_F(SDVERI='OUI',HIST_ETAPE='OUI'),IMPR_MACRO='OUI')

#------------------------------------------------------------------------
# Divers parametres
#------------------------------------------------------------------------
P_Gravite  = 9.81
Pres_Int = 100e6
Larg_ancr = 0.5
Long_ancr = 1.5
Nb_cab_hori = 20
Nb_cab_vert = 20
ECYL=0.5
EANCR=0.1
EANCR_OP=Long_ancr
recul_ancrage = 0.008

#------------------------------------------------------------------------
# B Beton
#------------------------------------------------------------------------
B_E     = 4.E10     # Module de Young
B_Nu    = 0.20      # Coef. de Poisson
B_Rho   = 2500.     # Masse volumique
# Liste des groupes a prendre en compte comme du beton
l_beton = ['CYL','ANCR','ANCR_OP']

#------------------------------------------------------------------------
# Acier cables de precontrainte
#------------------------------------------------------------------------
A_E           = 1.93E11     # Module de Young
A_Nu          = 0.0         # Coef. de Poisson
A_Rho         = 7850.       # Masse volumique
A_F_PRG       = 1.94E11     # Contrainte fprg

d_tension = {
       'CH' : 3.75E6,
       'CV' : 3.75E6,
            }

d_aire = {
       'CH' : 0.00555,
       'CV' : 0.00555,
         }

#------------------------------------------------------------------------
# Lecture du maillage
#------------------------------------------------------------------------
MAIL=LIRE_MAILLAGE(FORMAT='MED', UNITE=20);

l_cable=[]
for i in range(1,Nb_cab_hori+1):
    l_cable.append('CH_%02i'%i)
for i in range(1,Nb_cab_vert+1):
    l_cable.append('CV_%02i'%i)


MAIL=MODI_MAILLAGE(reuse =MAIL,
                       MAILLAGE=MAIL,
                       ORIE_PEAU_3D=_F(GROUP_MA='CYL',),
                       ORIE_LIGNE=(_F(GROUP_MA=l_cable,),
                                  ),
                       );



MODELE=AFFE_MODELE(
                 MAILLAGE=MAIL,
                 AFFE=(
                       _F( GROUP_MA = l_beton,
                            PHENOMENE = 'MECANIQUE',
                            MODELISATION = 'Q4GG'),
                       _F( GROUP_MA = l_cable,
                            PHENOMENE = 'MECANIQUE',
                            MODELISATION = 'CABLE_GAINE'),
                       )
                   )

#------------------------------------------------------------------------
# Defnition des materiaux et affectation des materiaux
#------------------------------------------------------------------------
# Beton
#------------------------------------------------------------------------
d_beton = {}
d_elas = {'RHO':B_Rho,}
d_elas['E'] = B_E
d_elas['NU'] = B_Nu
d_beton['ELAS'] = _F(**d_elas)

MATBETON=DEFI_MATERIAU( BPEL_BETON=_F(),
                       **d_beton
                      )

d_affe_materiau = {}
d_affe_materiau['AFFE'] = []

d_affe_materiau['AFFE'].append(_F(GROUP_MA = l_beton, MATER = MATBETON,),)

# Acier
#------------------------------------------------------------------------
d_acier = {}
d_elas = {'RHO':A_Rho,}
d_elas['E'] = A_E
d_elas['NU'] = A_Nu
d_acier['ELAS'] = _F(**d_elas)

MATACIER=DEFI_MATERIAU(
                        CABLE_GAINE_FROT=_F(TYPE='FROTTANT',
                                            PENA_LAGR=1.e7,
                                            FROT_COURB=3.e-2,
                                            FROT_LINE=1.e-2),
                        BPEL_ACIER=_F(  F_PRG = 1.77E+9,
                                        FROT_COURB=3.e-2,
                                        FROT_LINE=1.e-2),

                       **d_acier
                      )

d_affe_materiau['AFFE'].append(_F(GROUP_MA = l_cable, MATER = MATACIER,),)

CHMATER=AFFE_MATERIAU(MAILLAGE=MAIL,
                       **d_affe_materiau)

#------------------------------------------------------------------------
d_cara_elem = {}
l_cara = []


for nom in l_cable:
        prefix = nom.split('_')[0]
        l_cara.append(_F(GROUP_MA = nom,
                         SECTION='GENERALE',
                         CARA='A',
                         VALE=(d_aire[prefix],)),)

d_cara_elem['BARRE'] = l_cara

if len(d_cara_elem):
  CARAELE=AFFE_CARA_ELEM(MODELE=MODELE,
                     COQUE=(_F( GROUP_MA = 'CYL',
                               EPAIS = ECYL,
                               COQUE_NCOU=1,
                               VECTEUR=(0.,0.,1.),),
                              _F( GROUP_MA = 'ANCR',
                               EPAIS = EANCR,
                               COQUE_NCOU=1,
                               VECTEUR=(0.,0.,1.),),
                              _F( GROUP_MA = 'ANCR_OP',
                               EPAIS = EANCR_OP,
                               COQUE_NCOU=1,
                               VECTEUR=(0.,0.,1.),),
                           ),
                      **d_cara_elem
                     )

#------------------------------------------------------------------------
# Conditions aux limites et chargement
#------------------------------------------------------------------------
l_excit_encast = []

d_affe_char_meca = {}
d_affe_char_meca['DDL_IMPO'] = _F(DX=0., DY=0., DZ=0., DRX=0., DRY=0., DRZ=0., GROUP_NO = 'ENCAST')

CHARBLOQ=AFFE_CHAR_MECA(MODELE=MODELE,
                        **d_affe_char_meca)

l_excit_encast.append(_F(CHARGE=CHARBLOQ))

CHARPRES = AFFE_CHAR_MECA(MODELE = MODELE,
                          PRES_REP = _F(GROUP_MA='CYL', PRES=Pres_Int,),)

#------------------------------------------------------------------------
# Definition des cables
#------------------------------------------------------------------------
l_group_cable = ['CV','CH']
d_defi_cable = {}

for prefix in l_group_cable :
    d_defi_cable[prefix]=[]

l_group_modele = []
for nom_cable in l_cable:
  l_group_modele.append(nom_cable)

for group_ma in l_cable:
    group_ma_prefix = group_ma.split('_')[0]
    nom_group_ma = group_ma.strip()
    nom_noeud_debut = nom_group_ma + '_A'
    nom_noeud_fin = nom_group_ma + '_B'
    defi_cable = _F(GROUP_MA = nom_group_ma,
                        GROUP_NO_ANCRAGE = (nom_noeud_debut,nom_noeud_fin),
                   )
    d_defi_cable[group_ma_prefix].append(defi_cable)

l_tor = {}
l_cable_bp = []
l_cable_bp_cine = []
i = -1

for prefix in l_group_cable:
    i+=1
    l_tor[i] = DEFI_CABLE_BP(MODELE       = MODELE,
                             CHAM_MATER     = CHMATER,
                             CARA_ELEM      = CARAELE,
                             ADHERENT = 'NON',
                             GROUP_MA_BETON = ('CYL','ANCR_OP',),
                             #TYPE_ANCRAGE   = ('ACTIF','ACTIF'),
                             TYPE_ANCRAGE   = ('ACTIF','PASSIF'),
                             TENSION_INIT   = d_tension[prefix],
                             #RECUL_ANCRAGE  = recul_ancrage,
                             RECUL_ANCRAGE  = 0,
                             DEFI_CABLE     = d_defi_cable[prefix],
                             )

    l_cable_bp.append(l_tor[i])
    l_cable_bp_cine.append(_F(CABLE_BP=l_tor[i],
                              SIGM_BPEL='NON',
                              RELA_CINE='OUI',))


TA_HORI = RECU_TABLE(CO=l_tor[1], NOM_TABLE='CABLE_BP')
#IMPR_TABLE(UNITE=38,TABLE= TA_HORI, NOM_PARA=('NOEUD_CABLE','ABSC_CURV','TENSION',), FILTRE=_F(NOM_PARA='NOM_CABLE',VALE_K='CH_10')
#)
TA_HORI = CALC_TABLE(reuse = TA_HORI, TABLE = TA_HORI,
                     ACTION=(_F(OPERATION='RENOMME',
                               NOM_PARA=('NOEUD_CABLE','NOEUD')
                               ),
                             _F(OPERATION='FILTRE',
                               NOM_PARA='NOM_CABLE',
                               VALE_K='CH_10'
                               ),
                            )
                     )


TA_VERT = RECU_TABLE(CO=l_tor[0], NOM_TABLE='CABLE_BP')
#IMPR_TABLE(UNITE=39,TABLE= TA_VERT, NOM_PARA=('NOEUD_CABLE','ABSC_CURV','TENSION','NOM_CABLE'), FILTRE=_F(NOM_PARA='NOM_CABLE',VALE_K='CV_10')
#)
TA_VERT = CALC_TABLE(reuse = TA_VERT, TABLE = TA_VERT,
                     ACTION=(_F(OPERATION='RENOMME',
                                NOM_PARA=('NOEUD_CABLE','NOEUD'),
                                ),
                             _F(OPERATION='FILTRE',
                               NOM_PARA='NOM_CABLE',
                               VALE_K='CV_10'
                               ),
                            ),
                    )

CINE_CAB = AFFE_CHAR_MECA(MODELE=MODELE,
                          RELA_CINE_BP=l_cable_bp_cine,
                         )

#------------------------------------------------------------------------
# Calculs
#------------------------------------------------------------------------

# Chargement 1 : precontrainte de tous les cables
#------------------------------------------------------------------------
LINST = DEFI_LIST_REEL (DEBUT = 0.0,
                        INTERVALLE =(_F(JUSQU_A= 1.0, PAS= 1.0,),),
                       );

RES1 =  CALC_PRECONT(MODELE=MODELE,
                     CHAM_MATER=CHMATER,
                     CARA_ELEM=CARAELE,
                     COMPORTEMENT=(_F( RELATION = 'ELAS',DEFORMATION = 'GROT_GDEP',
                                    GROUP_MA=l_beton,),
                                _F( RELATION = 'KIT_CG',
                                    RELATION_KIT=('ELAS','CABLE_GAINE_FROT',),
                                    DEFORMATION = 'PETIT_REAC',
                                    GROUP_MA =l_cable,),),
                     CONVERGENCE=_F( #RESI_GLOB_MAXI=1.E-3,
                                     #RESI_GLOB_RELA=1e-6,
                                     ITER_GLOB_MAXI=50,
                                     RESI_REFE_RELA = 1.E-4,
                                     FORC_REFE = (1.E5,1.E5,),
                                     SIGM_REFE = 1.E4,
                                     DEPL_REFE = 1.E-1
                                     ),
                     EXCIT=l_excit_encast,
                     CABLE_BP   = tuple(l_cable_bp),
                     INCREMENT=_F(LIST_INST = LINST,
                                   ),
                     SOLVEUR=_F(METHODE='MUMPS',
                                  PCENT_PIVOT=200,),
                        );

RES1=CALC_CHAMP(reuse =RES1,
                   RESULTAT=RES1,
                   CONTRAINTE  =('SIEF_ELNO','SIEF_NOEU',),
                   );

DIFF = FORMULE(VALE='abs((TENSION-N)/TENSION)',
               NOM_PARA=('TENSION','N',),);


PT_HORI = CREA_TABLE(RESU=_F(RESULTAT = RES1, NOM_CHAM = 'SIEF_NOEU', GROUP_MA = ('CH_10',), NOM_CMP = 'N',INST = 1.0))
TA_CO_HO = CALC_TABLE(TABLE=TA_HORI, ACTION =_F(OPERATION = 'COMB',TABLE = PT_HORI, NOM_PARA='NOEUD'),
                  )

TA_CO_HO = CALC_TABLE(reuse = TA_CO_HO, TABLE=TA_CO_HO, ACTION =_F(OPERATION = 'OPER',FORMULE= DIFF , NOM_PARA='DIFF'),
                  )
IMPR_TABLE(TABLE = TA_CO_HO,NOM_PARA=('NOEUD','ABSC_CURV','TENSION','INST','N','DIFF'))
#IMPR_TABLE(UNITE = 45, TABLE = PT_HORI,NOM_PARA=('INST','NOEUD','N'))

PT_VERT = CREA_TABLE(RESU=_F(RESULTAT = RES1, NOM_CHAM = 'SIEF_NOEU', GROUP_MA = ('CV_10',), NOM_CMP = 'N',INST = 1.0))
TA_CO_VE = CALC_TABLE(TABLE=TA_VERT, ACTION =_F(OPERATION = 'COMB',TABLE = PT_VERT, NOM_PARA='NOEUD'),
                  )
TA_CO_VE = CALC_TABLE(reuse = TA_CO_VE, TABLE=TA_CO_VE, ACTION =_F(OPERATION = 'OPER',FORMULE= DIFF , NOM_PARA='DIFF'),
)
IMPR_TABLE(TABLE = TA_CO_VE,NOM_PARA=('NOEUD','ABSC_CURV','TENSION','INST','N','DIFF'))
#IMPR_TABLE(UNITE = 46, TABLE = PT_VERT,NOM_PARA=('INST','NOEUD','N'))

TEST_TABLE(TABLE=TA_CO_HO,
           NOM_PARA='DIFF',
           TYPE_TEST='MAX',
           REFERENCE = 'ANALYTIQUE',
           CRITERE = 'ABSOLU',
           VALE_REFE = 0.,
           VALE_CALC = 2.0855390887538E-03,
           PRECISION = 5E-3,
           )

TEST_TABLE(TABLE=TA_CO_VE,
           NOM_PARA='DIFF',
           TYPE_TEST='MAX',
           REFERENCE = 'ANALYTIQUE',
           CRITERE = 'ABSOLU',
           VALE_REFE = 0.,
           VALE_CALC = 8.4931500844371E-06,
           PRECISION = 5E-3,
           )

FIN();
