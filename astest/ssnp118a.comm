# MODIF  DATE 16/05/2002   AUTEUR DURAND C.DURAND 
# TITRE FISSURATION PLANE
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2002  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR   
# (AT YOUR OPTION) ANY LATER VERSION.                                 
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT 
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF          
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU    
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                            
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE   
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,       
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.      
#                                                                       
#                                                                       
# ======================================================================


DEBUT(CODE=_F( NOM = 'SSNP118A',NIV_PUB_WEB='INTERNET'), PAR_LOT='NON')



MA=LIRE_MAILLAGE(VERI_MAIL=_F(VERIF='NON'), )


MO=AFFE_MODELE(
              
                MAILLAGE=MA,
                VERIF='MAILLE',
                  
                AFFE= (
                _F( 
                        MAILLE = ('CUBE','DROITE'),
                        PHENOMENE = 'MECANIQUE',
                        MODELISATION = 'D_PLAN'
                     ),
                 _F(
                   MAILLE = 'CUBEDEG',
                   PHENOMENE = 'MECANIQUE',
                   MODELISATION = 'PLAN_FISSURE'
                   )
                 )
              )

ACIER=DEFI_MATERIAU(
              
     ELAS=_F( 
              E =  0.5,
              NU = 0.0),
     RUPT_FRAG = _F(
                     GC = 1,
                     SIGM_C = 1,
                     SAUT_C = 1.E-3
                    )
            )


CM=AFFE_MATERIAU(
              
               MAILLAGE=MA,
               AFFE=_F( 
                       TOUT = 'OUI',
                       MATER = ACIER),
              )



LIAISON=AFFE_CHAR_MECA(
  MODELE=MO,
  FACE_IMPO= (
    _F(MAILLE='GAUCHE2', DX=0, DY=0),
    )
  )

TRACTION=AFFE_CHAR_MECA(
  MODELE=MO,
  FACE_IMPO= (
    _F(MAILLE='DROITE', DX=2.167302, DY=1.251293),
    )
  )


L_INST=DEFI_LIST_REEL(
              
                     DEBUT   = -1.,
     INTERVALLE=(
      _F( JUSQU_A = 0,       NOMBRE = 1 ),
      _F( JUSQU_A = 0.0001,  NOMBRE = 1 ),
      _F( JUSQU_A = 4.0,     NOMBRE = 40 ),
      )
     )

L_INST2=DEFI_LIST_REEL(
              
                     DEBUT   = 0.0001,
     INTERVALLE=(
      _F( JUSQU_A = 4.0,     NOMBRE = 40 ),
      )
     )

                   

FCT = DEFI_FONCTION(
  NOM_PARA = 'INST',
  VALE     = (-1, 0, 0, 1.E-8),
  PROL_DROITE = 'LINEAIRE'
  )
  
  
U=STAT_NON_LINE( 
  MODELE     = MO,
  CHAM_MATER = CM,
  EXCIT      = (
    _F(CHARGE = LIAISON , ),
    _F(CHARGE = TRACTION, FONC_MULT = FCT),
  ),
  COMP_INCR  = (
          _F(RELATION = 'BARENBLATT',
             MAILLE = 'CUBEDEG', ),
          _F(RELATION = 'ELAS',
             MAILLE = 'CUBE',),
          ),               
  INCREMENT  = _F(LIST_INST = L_INST, INST_FIN = 0.),
  CONVERGENCE= _F(ITER_GLOB_MAXI = 20),
  NEWTON     = _F(MATRICE = 'TANGENTE', REAC_ITER=1),
  )
  
U=STAT_NON_LINE(reuse = U,
  ETAT_INIT  = _F(EVOL_NOLI = U), 
  MODELE     = MO,
  CHAM_MATER = CM,
  EXCIT      = (
    _F(CHARGE = LIAISON , ),
    _F(CHARGE = TRACTION, TYPE_CHARGE = 'FIXE_PILO'),
  ),
  PILOTAGE   = _F(
    TYPE = 'PRED_ELAS',
    MAILLE = 'CUBEDEG',
    COEF_MULT = 1,
    ETA_PILO_MAX = 1
    ),
  COMP_INCR  = (
          _F(RELATION = 'BARENBLATT',
             MAILLE = 'CUBEDEG', ),
          _F(RELATION = 'ELAS',
             MAILLE = 'CUBE',),
          ),               
  INCREMENT  = _F(LIST_INST = L_INST),
  CONVERGENCE= _F(ITER_GLOB_MAXI = 5),
  NEWTON     = _F(MATRICE = 'TANGENTE', REAC_ITER=1),
  RECH_LINEAIRE = _F(ITER_LINE_MAXI = 0),
  ARCHIVAGE  = _F(LIST_INST = L_INST2)
  )

  
# RECUPERATION DU DERNIER INSTANT  
ind = 1
while 1:
  try :
    tfin = U['INST',ind]
    ind = ind + 1
  except :
    break
    
  
    
TEST_RESU (
  RESU = (
    _F(
      REFERENCE = 'ANALYTIQUE',
      RESULTAT  = U,
      NOM_CHAM  = 'SIEF_ELGA',
      NOM_CMP   = 'SIXX',
      VALE      = 0.075,
      MAILLE    = 'CUBE',
      POINT     = 1,
      INST      = tfin
      ),
    )
  )
  
FIN()
