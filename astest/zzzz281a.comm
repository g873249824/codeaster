# TITRE FONCTIONNALITES PYTHON ET FORTRAN : COMPILATION DES CATALOGUES D'ELEMENTS ET CREATION DE LA BASE JEVEUX elem.1
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#
# person_in_charge: j-pierre.lefebvre at edf.fr
# CAS_TEST ZZZZ281A
import os
import os.path as osp
from glob import glob

from asrun.profil import AsterProfil
from asrun.config import AsterConfig

from Lecture_Cata_Ele.make_surch_offi import main
from Lecture_Cata_Ele.lecture import lire_cata

aster_root = os.environ.get('ASTER_ROOT')

fprof = glob('*.export')[0]
prof = AsterProfil(fprof)

rep_vers = osp.join(aster_root, prof.get_version_path())

conf = AsterConfig('config.txt')
catalo = osp.join(rep_vers, conf['BINPICKLED'][0])

os.remove('elem.1')
assert not osp.exists('elem.1')

with open('UNIGEST', 'w') as unigest:
    # concatenation des fichiers unigest :
    #-------------------------------------
    for nomf in [funig['path'] for funig in prof.Get('D', 'unig')]:
        unigest.write(unig.read())

lcata = prof.Get('D', 'cata')
if lcata:
    with open('CATASUR', 'w') as catasur:
        # concatenation des fichiers catalo :
        for nomf in [funig['path'] for funig in lcata]:
            if not os.path.isdir(nomf) :
                # cas d'un fichier
                cata=open(nomf,'r')
                texte=cata.read()
                catasur.write(texte)
                cata.close()
            else:
                # cas d'un repertoire
                lisfic=glob(osp.join(nomf,"*.cata"))
                for nomfic in lisfic :
                    cata= open(nomfic,'r')
                    texte=cata.read()
                    catasur.write(texte)
                    cata.close()

main('CATASUR', 'UNIGEST', catalo, 'fort.4')

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET', VISU_EFICAS='NON',),
      CATALOGUE = _F( FICHIER = 'CATAELEM', UNITE = 4),
      PAR_LOT='NON',DEBUG=_F(SDVERI='OUI'))

MAJ_CATA(ELEMENT=_F())

is_ok = int( osp.exists('elem.1') )
TAB1=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                       _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB1,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

FIN()
