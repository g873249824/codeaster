# MODIF  DATE 22/02/2011   AUTEUR LEFEBVRE J-P.LEFEBVRE 
# TITRE FONCTIONNALITES PYTHON ET FORTRAN : COMPILATION DES CATALOGUES D'ELEMENTS ET CREATION DE LA BASE JEVEUX elem.1
# zzzz281a.para = tps_job 120 mem_job 256Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
#
# RESPONSABLE LEFEBVRE J-P.LEFEBVRE
# CAS_TEST ZZZZ281A
import sys
import os
import os.path as osp
from glob import glob

from asrun.profil import ASTER_PROFIL
from asrun.config import ASTER_CONFIG
from Lecture_Cata_Ele.make_surch_offi import main
from Lecture_Cata_Ele.lecture import lire_cata

aster_root = os.environ.get('ASTER_ROOT')

fprof = glob('*.export')[0]
prof = ASTER_PROFIL(fprof)
 
rep_vers = osp.join(aster_root, prof.get_version_path())

conf = ASTER_CONFIG('config.txt')
catalo = osp.join(rep_vers, conf['BINPICKLED'][0])

os.remove('elem.1')
assert not osp.exists('elem.1')

unigest=open('UNIGEST','w')
#
# concatenation des fichiers unigest :
#-------------------------------------
for i in range(len(prof.Get('D','unig'))):
    nomf=prof.Get('D','unig')[i]['path']
    unig=open(nomf,'r')
    texte=unig.read()
    unigest.write(texte)
    unig.close()
    
unigest.close()  

if len(prof.Get('D','cata')) > 0 :
    catasur=open('CATASUR','w')
#
#   concatenation des fichiers catalo :
#   ----------------------------------
    for i in range(len(prof.Get('D','cata'))):
        nomf=prof.Get('D','cata')[i]['path']
        if not os.path.isdir(nomf) : 
#           cas d'un fichier :
#           -----------------
            cata=open(nomf,'r') 
            texte=cata.read()
            catasur.write(texte)
            cata.close()
        else:
#           cas d'un repertoire :
#           --------------------
            lisfic=glob(osp.join(nomf,"*.cata"))
            for nomfic in lisfic :
                cata= open(nomfic,'r')
                texte=cata.read()
                catasur.write(texte)
                cata.close()

    catasur.close()


prev = os.getcwd()
main('./make_ele', 'CATASUR', 'UNIGEST', catalo, 'fort.4')
os.chdir(prev)

DEBUT(CODE=_F(NOM='ZZZZ281A', NIV_PUB_WEB='INTERNET', VISU_EFICAS='NON',),
      CATALOGUE = _F( FICHIER = 'CATAELEM', UNITE = 4),
      PAR_LOT='NON')

MAJ_CATA(ELEMENT=_F())

is_ok = int( osp.exists('elem.1') )
TAB1=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                       _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(TABLE=TAB1,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
                     NOM_PARA='BOOLEEN',
                     VALE_I=1,
                     REFERENCE='ANALYTIQUE',)

FIN()

