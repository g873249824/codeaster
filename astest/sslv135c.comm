# person_in_charge: sarah.plessis at edf.fr
#
# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#
#----------------------------------------------------------------------
#    Cas test sslv135c : cube 3D
#                        Essai de chargement cyclique :
#                                                + traction-compression
#                                                + cisaillement
#----------------------------------------------------------------------
#        Unites : Newton , Millimetre , Seconde (N,MM,S,->Mpa)
#----------------------------------------------------------------------
#
#               y       a
#               I<------------->                     a = 10 mm
#                     Face1                                    2
#                   (dessus)                         S = 100 mm
#               P1              P2
#               o--------------o
#              /I             /I
#        P5   / I        P6  / I
#            o--+-----------o  I
#            I  I   Face5   I  I  Face4
#  Face3     I  I (derri.)  I  I (cote d.)
# (cote g.)  I  I           I  I
#            I  I  P3       I  I P4
#            I  o-----------I--o      - x
#            I /            I /
#         P7 I/          P8 I/
#            o--------------o
#
#          /       Face2
#         z      (dessous)
#
#
#    CHARGEMENT   (Traction-compression)  FX(T) <=> +
#
#            I
#            I
#   1.0E+2 N I   +   +                   +
#            I
#            I
#           -I---I---I---I---+---+---I---I---+---> T
#            I  1s  2s  3s  4s  5s  6s  7s  8s
#            I
#  -1.0E+2 N I           +           +
#            I
#            I
#
#
#    CHARGEMENT   (Cisaillement)  FY(T) <=> x
#
#            I
#            I
#   1.0E+2 N I       x
#            I
#            I
#           -I---x---I---x---x---I---x---I---x---> T
#            I  1s  2s  3s  4s  5s  6s  7s  8s
#            I
#  -1.0E+2 N I                   x       x
#            I
#            I
#
#
#    CHARGEMENT   (Cisaillement)  FZ(T) <=> *
#
#            I
#            I
#   1.0E+2 N I                   *       *
#            I
#            I
#           -I---*---I---*---*---I---*---I---*---> T
#            I  1s  2s  3s  4s  5s  6s  7s  8s
#            I
#  -1.0E+2 N I       *
#            I
#            I
#
#--------------------------------------------------------------
#
DEBUT (CODE=_F(NIV_PUB_WEB='INTERNET'),
IGNORE_ALARM=('PREPOST4_27'),
DEBUG=_F(SDVERI='OUI'))

CUBE = LIRE_MAILLAGE(FORMAT='MED', )


CUBE=DEFI_GROUP(reuse = CUBE,
                ALARME='OUI',
                CREA_GROUP_NO=(_F(GROUP_MA='FACE1',
                                  CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE2',
                                  CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE3',
                                  CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE4',
                                CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE5',
                                  CRIT_NOEUD='TOUS'),
                               _F(GROUP_MA='FACE6',
                                  CRIT_NOEUD='TOUS')),
                MAILLAGE=CUBE,
               );

CUBE=DEFI_GROUP(reuse = CUBE,
                ALARME='OUI',
                CREA_GROUP_MA=(_F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE1',
                                  NOM='FACE1_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE2',
                                  NOM='FACE2_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE3',
                                  NOM='FACE3_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE4',
                                  NOM='FACE4_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE5',
                                  NOM='FACE5_3D'),
                               _F(OPTION='APPUI',
                                  TYPE_APPUI='AU_MOINS_UN',
                                  GROUP_NO='FACE6',
                                  NOM='FACE6_3D')),
                MAILLAGE=CUBE,
               );

WHOL=DEFI_FONCTION(       NOM_PARA='SIGM',
                            INTERPOL='LOG',
                          PROL_DROITE='LINEAIRE',
                         PROL_GAUCHE='LINEAIRE',
                         VALE=(  138.,    1000000.,
                                 152.,     500000.,
                                 165.,     200000.,
                                 180.,     100000.,
                                 200.,      50000.,
                                 250.,      20000.,
                                 295.,      12000.,
                                 305.,      10000.,
                                 340.,       5000.,
                                 430.,       2000.,
                                 540.,       1000.,
                                 690.,        500.,
                                 930.,        200.,
                                1210.,        100.,
                                1590.,         50.,
                                2210.,         20.,
                                2900.,         10.,  )  )

#               _____________________________
#              I                             I
#              I     AMPLITUDE CONSTANTE     I
#              I_____________________________I
#



COEFCS   = DEFI_FONCTION ( NOM_PARA    ='INST',
                          PROL_DROITE  ='LINEAIRE',
                          PROL_GAUCHE ='LINEAIRE',
                          VALE        =( 0.,    0.,
                                         1.,    0.,
                                         2.,  100.,
                                         3.,    0.,
                                         4.,    0.,
                                         5., -100.,
                                         6.,    0.,
                                         7., -100.,
                                         8.,    0.,
                                        )
                       )

COEFTR   = DEFI_FONCTION ( NOM_PARA    ='INST',
                          PROL_DROITE  ='LINEAIRE',
                          PROL_GAUCHE ='LINEAIRE',
                          VALE        =( 0.,    0.,
                                         1.,  100.,
                                         2.,  100.,
                                         3., -100.,
                                         4.,    0.,
                                         5.,    0.,
                                         6., -100.,
                                         7.,  100.,
                                         8.,    0.,
                                        )
                       )

ACIER1  = DEFI_MATERIAU   ( ELAS           =_F( E         = 200000.,
                                                NU        = .3,
                                                ALPHA     = 0. ),
                            FATIGUE        =_F( WOHLER    = WHOL, ),
                            CISA_PLAN_CRIT =_F( CRITERE = 'MATAKE_MODI_AC',
                                                COEF_FLEX_TORS = 1.5,
                                                MATAKE_A  = 1.0,
                                                MATAKE_B  = 2.0, )
                          )

ACIER2  = DEFI_MATERIAU   ( ELAS           =_F( E        = 200000.,
                                                NU       = .3,
                                                ALPHA    = 0. ),
                            FATIGUE        =_F( WOHLER   = WHOL, ),
                            CISA_PLAN_CRIT =_F( CRITERE = 'DANG_VAN_MODI_AV',
                                                D_VAN_A = 1.0,
                                                D_VAN_B = 2.0,
                                                COEF_CISA_TRAC = 1.5 )
                          )

LINST = DEFI_LIST_REEL   ( DEBUT      =  0.,
                           INTERVALLE =_F (JUSQU_A= 8.0, NOMBRE = 8  )
                                         );

TROISD   = AFFE_MODELE    ( MAILLAGE   =    CUBE,
                            AFFE       =_F ( PHENOMENE    = 'MECANIQUE',
                                             MODELISATION = '3D',
                                             TOUT         = 'OUI'    ))

MAT = [None]*2
MAT[0]  = AFFE_MATERIAU    ( MAILLAGE    =   CUBE,
                           AFFE        =_F ( TOUT       = 'OUI',
                                             MATER      = ACIER1,
                                             ))

MAT[1]  = AFFE_MATERIAU    ( MAILLAGE    =   CUBE,
                           AFFE        =_F ( TOUT       = 'OUI',
                                             MATER      = ACIER2,
                                             ))

# CHARGEMENT SELON LES 2 AXES Y ET Z
# ----------------------------------



CL  = AFFE_CHAR_MECA (
           MODELE       =  TROISD,
           FACE_IMPO    = ( _F( GROUP_MA= 'FACE3' ,DX=0.),
                            _F( GROUP_MA= 'FACE3' ,DY=0.),
                            _F( GROUP_MA= 'FACE2' ,DZ=0.),
                          ),
                     );


TR  = AFFE_CHAR_MECA (
           MODELE       = TROISD,
           FORCE_FACE   = _F( GROUP_MA= 'FACE4', FX=1.0)
                     );

CS  = AFFE_CHAR_MECA (
           MODELE       = TROISD,
           FORCE_FACE   = (
                           _F( GROUP_MA= 'FACE4', FY= 1.0),
                           _F( GROUP_MA= 'FACE1', FZ=-1.0),
                          )
                     );

# CALCUL AVEC STAT_NON_LINE
# -------------------------

SOL_NL = STAT_NON_LINE ( TITRE      =
                'TEST TRACTION-COMPRESSION ET CISAILLEMENT - PLAN CRITIQUE',
                        MODELE     =   TROISD,
                        CHAM_MATER =   MAT[0],
                        EXCIT      =(_F ( CHARGE       = CL,
                                          TYPE_CHARGE  = 'FIXE_CSTE'),
                                     _F ( CHARGE       = CS,
                                          FONC_MULT    = COEFCS,
                                          TYPE_CHARGE  = 'FIXE_CSTE'),
                                     _F ( CHARGE       = TR,
                                          FONC_MULT    = COEFTR,
                                          TYPE_CHARGE  = 'FIXE_CSTE') ),
                        COMPORTEMENT  =_F ( RELATION     = 'ELAS',
                                         DEFORMATION  = 'PETIT',
                                         TOUT         = 'OUI'    ),
                        INCREMENT  =_F ( LIST_INST    = LINST, ),
                        NEWTON     =_F ( MATRICE      = 'ELASTIQUE',
                                         REAC_INCR    = 0 ))



SOL_NL = CALC_CHAMP(reuse=SOL_NL,
                    RESULTAT=SOL_NL,
                    CONTRAINTE= ('SIGM_ELNO',),
                    DEFORMATION=('EPSI_ELGA','EPSI_ELNO'),);

SOL_NL = CALC_CHAMP(reuse=SOL_NL,
                    RESULTAT=SOL_NL,
                    GROUP_MA=('FACE1_3D', 'FACE2_3D', 'FACE3_3D','CUBE'),
                    CONTRAINTE='SIGM_NOEU',
                    DEFORMATION='EPSI_NOEU',);

# TEST DES RESULTATS OBTENUS AUX POINTS DE GAUSS AVEC STAT_NON_LINE
# -----------------------------------------------------------------

TEST_RESU(RESU=(_F(INST=3.0,
                   POINT=3,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIEF_ELGA',
                   NOM_CMP='SIXX',
                   VALE_CALC=-100.72570279442,
                   MAILLE='M60',
                   ),
                _F(INST=3.0,
                   POINT=3,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIEF_ELGA',
                   NOM_CMP='SIYY',
                   VALE_CALC=-2.3247858778407,
                   MAILLE='M60',
                   ),
                _F(INST=3.0,
                   POINT=3,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIEF_ELGA',
                   NOM_CMP='SIZZ',
                   VALE_CALC=0.48792126490475002,
                   MAILLE='M60',
                   ),
                _F(INST=3.0,
                   POINT=3,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIEF_ELGA',
                   NOM_CMP='SIXY',
                   VALE_CALC=0.14924626672131,
                   MAILLE='M60',
                   ),
                _F(INST=3.0,
                   POINT=3,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIEF_ELGA',
                   NOM_CMP='SIXZ',
                   VALE_CALC=0.11611547113553999,
                   MAILLE='M60',
                   ),
                _F(INST=3.0,
                   POINT=3,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIEF_ELGA',
                   NOM_CMP='SIYZ',
                   VALE_CALC=1.7830891178616,
                   MAILLE='M60',
                   ),
                ),
          )

# TEST DES RESULTATS OBTENUS AUX NOEUDS AVEC STAT_NON_LINE
# --------------------------------------------------------

TEST_RESU(RESU=(_F(INST=1.0,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIGM_NOEU',
                   NOEUD='N214',
                   NOM_CMP='SIXX',
                   VALE_CALC=100.35527116332,
                   ),
                _F(INST=1.0,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIGM_NOEU',
                   NOEUD='N214',
                   NOM_CMP='SIYY',
                   VALE_CALC=-4.1832534869028004,
                   ),
                _F(INST=1.0,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIGM_NOEU',
                   NOEUD='N214',
                   NOM_CMP='SIZZ',
                   VALE_CALC=28.851605298589,
                   ),
                _F(INST=3.0,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIGM_NOEU',
                   NOEUD='N214',
                   NOM_CMP='SIXX',
                   VALE_CALC=-100.35527116332,
                   ),
                _F(INST=3.0,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIGM_NOEU',
                   NOEUD='N214',
                   NOM_CMP='SIYY',
                   VALE_CALC=4.1832534869010001,
                   ),
                _F(INST=3.0,
                   RESULTAT=SOL_NL,
                   NOM_CHAM='SIGM_NOEU',
                   NOEUD='N214',
                   NOM_CMP='SIZZ',
                   VALE_CALC=-28.851605298589998,
                   ),
                ),
          )

####TEST DES CRITERES
CRIT = [None]*4

CRIT[0] = 'MATAKE_MODI_AC'

### POUR CALCULER 'NORMOY','EPNMAX', 'EPNMOY', IL NOUS FAUT AJOUTER DANS LA LISTE
### DES PARATMETRES MEME SI ON N4UTISE PAS DANS LA FORMULE
#POUR RETROUVER 'MATAKE_MODI_AC'
CRIT[1] =   FORMULE(
           NOM_PARA=('DTAUMA','NORMAX','NORMOY','EPNMAX', 'EPNMOY'),
           VALE=''' 1.5*( DTAUMA + max(0,NORMAX) ) '''
           )

CRIT[2] =  'DANG_VAN_MODI_AV'

#POUR RETROUVER 'DANG_VAN_MODI_AV'
CRIT[3] =   FORMULE(
           NOM_PARA=('TAUPR_1','TAUPR_2','PHYDR_1','PHYDR_2'),
           VALE=''' 1.5*( abs(TAUPR_1-TAUPR_2)/2.0 + max(0,PHYDR_1, PHYDR_2) ) '''
           )

# POUR AMPLITUDE CONSTANTE
NPAR = ['DTAUM1','VNM1X', 'VNM1Y', 'VNM1Z','SINMAX1', 'SINMOY1','EPNMAX1', 'EPNMOY1',
         'SIGEQ1','NBRUP1','ENDO1',

        'DTAUM2','VNM2X', 'VNM2Y', 'VNM2Z','SINMAX2', 'SINMOY2','EPNMAX2', 'EPNMOY2',
         'SIGEQ2','NBRUP2','ENDO2',
         ]

CTEST = ['RELATIF', 'RELATIF', 'RELATIF','ABSOLU', 'RELATIF','RELATIF','ABSOLU',
         'RELATIF','RELATIF', 'RELATIF', 'RELATIF',

         'RELATIF', 'RELATIF', 'RELATIF','ABSOLU', 'RELATIF','RELATIF', 'RELATIF',
         'RELATIF','RELATIF', 'RELATIF', 'RELATIF',
         ]

###ATTENTION, ON TESTE SUR DIFFERENTES POINTS
PO = [ 3,3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,3, 7, 7 ]

#RESULTAT AU NOUED
RESU1 = [1.3301710340281E+02, 6.9724586156165E-02, 9.9695561948126E-01, -3.4899496702501E-02,
         2.3572263291963E+01, -2.2206246584495E+00, 0, -3.6273728322300E-05, 2.3488405004216E+02,
         2.5838000000000E+04, 3.8703052983311E-05,

         133.02022068351, -0.99116343795529 ,0.069138062261375, 0.11320321376791,
         126.88813125424, 15.86101640678, 6.5005550881352E-04 , 8.125693860169E-05,
         389.86252790662, 33236.0, 3.0088178229408E-05
          ]

#RESULTAT AU MAILLE
RESU2  =[ 115.58441055223, 0.38933966210247, 0.83783531681782, 0.38268343236509,
          75.746337040908, -6.7193822827149, 0.,-4.2841435488233E-05, 286.9961213897,
         13063.0, 7.6550840649499E-05,

         115.40664143561, -0.92433783571776, 0.37342165946579, 0.078459095727845,
         114.89053816203, 6.7967476016341,3.6504123433286E-04, 4.5013408760035E-05,345.44576939647,
         4699.0, 2.1279233434283E-04
         ]
# CALCUL DE LA FATIGUE SUR L'ENSEMBLE DE LA STRUCTURE AUX POINTS DE GAUSS
# -----------------------------------------------------------------------
#### CRITERE PAR NOM

FAMNL1=CALC_FATIGUE( TYPE_CALCUL   = 'FATIGUE_MULTI',
                      OPTION        = 'DOMA_ELGA',
                      TYPE_CHARGE   = 'PERIODIQUE',
                      MAILLAGE      = CUBE,
                      GROUP_MA      = ('CUBE'),
                      RESULTAT      = SOL_NL,
                      CHAM_MATER    = MAT[0],
                      COEF_PREECROU = 1.0,
                      CRITERE       = CRIT[0],
                      METHODE       = 'CERCLE_EXACT',
                      INST_INIT_CYCL = 1.0,
                      INST_CRIT = 'RELATIF',
                    )

for j in range(22):
   TEST_RESU(CHAM_ELEM=( _F( CHAM_GD = FAMNL1,
                          NOM_CMP = NPAR[j],
                          MAILLE = 'M60',
                          POINT = PO[j],
                          CRITERE = CTEST[j],
                          VALE_CALC= RESU1[j], ),
                )
          )

###CRITERE EN FORMULE
FAMNL2=CALC_FATIGUE( TYPE_CALCUL   = 'FATIGUE_MULTI',
                      OPTION        = 'DOMA_ELGA',
                      TYPE_CHARGE   = 'PERIODIQUE',
                      MAILLAGE      = CUBE,
                      GROUP_MA      = ('CUBE'),
                      RESULTAT      = SOL_NL,
                      CHAM_MATER    = MAT[0],
                      COEF_PREECROU = 1.0,
                      CRITERE       = 'FORMULE_CRITERE',
                      FORMULE_GRDEQ   = CRIT[1],
                      COURBE_GRD_VIE  = 'WOHLER',
                    )

for j in range(22):
   TEST_RESU(CHAM_ELEM=( _F( CHAM_GD = FAMNL2,
                          NOM_CMP = NPAR[j],
                          MAILLE = 'M60',
                          POINT = PO[j],
                          CRITERE = CTEST[j],
                          VALE_CALC = RESU1[j] ),

                )
          )

# CALCUL DE LA FATIGUE SUR LES FACE 1, 2 ET 3 DE LA STRUCTURE AUX NOEUDS
# ----------------------------------------------------------------------
#### CRITERE PAR NOM
FANNL1=CALC_FATIGUE( TYPE_CALCUL   = 'FATIGUE_MULTI',
                       OPTION        = 'DOMA_NOEUD',
                       TYPE_CHARGE   = 'PERIODIQUE',
                       RESULTAT      = SOL_NL,
                       CHAM_MATER    = MAT[0],
                       COEF_PREECROU = 1.0,
#                       GROUP_MA      = ('FACE1', 'FACE2', 'FACE3'),
                       GROUP_MA      = ('CUBE'),
                       MAILLAGE      = CUBE,
                       CRITERE       = CRIT[0],
                       METHODE       = 'CERCLE_EXACT'
                     )

for j in range(22):
   TEST_RESU(CHAM_NO=( _F( CHAM_GD = FANNL1,
                        NOM_CMP = NPAR[j],
                        NOEUD = 'N214',
                        CRITERE = CTEST[j],
                        VALE_CALC = RESU2[j] ),
                        ), )
###CRITERE EN FORMULE
FANNL2=CALC_FATIGUE( TYPE_CALCUL   = 'FATIGUE_MULTI',
                       OPTION        = 'DOMA_NOEUD',
                       TYPE_CHARGE   = 'PERIODIQUE',
                       RESULTAT      = SOL_NL,
                       CHAM_MATER    = MAT[0],
                       COEF_PREECROU = 1.0,
#                       GROUP_MA      = ('FACE1', 'FACE2', 'FACE3'),
                       GROUP_MA      = ('CUBE'),
                       MAILLAGE      = CUBE,
                       CRITERE       = 'FORMULE_CRITERE',
                       FORMULE_GRDEQ   = CRIT[1],
                       COURBE_GRD_VIE  = 'WOHLER',
                     )

for j in range(22):
   TEST_RESU(CHAM_NO=( _F( CHAM_GD = FANNL2,
                        NOM_CMP = NPAR[j],
                        NOEUD = 'N214',
                        CRITERE = CTEST[j],
                        VALE_CALC = RESU2[j] ),
                        ), )
########################################################################################
#### CRITERE PAR NOM
FNLAX = [None]*2
PROJ = ['UN_AXE','DEUX_AXES']
NPARA = ['VNM1X','VNM1Y','VNM1Z','ENDO1']
RESUA  = [0.38537838350012,0.83966474984014,0.38268343236509, 9.2799099716954E-05 ]
for i in range(2):

   FNLAX[i]=CALC_FATIGUE( TYPE_CALCUL   = 'FATIGUE_MULTI',
                       OPTION        = 'DOMA_NOEUD',
                       TYPE_CHARGE   = 'NON_PERIODIQUE',
                       RESULTAT      = SOL_NL,
                       CHAM_MATER    = MAT[1],
                       COEF_PREECROU = 1.0,
                       GROUP_MA      = ('CUBE'),
                       MAILLAGE      = CUBE,
                       CRITERE       = CRIT[2],
                       PROJECTION    = PROJ[i],
                     )

   for j in range(4):
      TEST_RESU(CHAM_NO=( _F( CHAM_GD = FNLAX[i],
                        NOM_CMP = NPARA[j],
                        NOEUD = 'N214',
                        VALE_CALC = RESUA[j], ),
                )
          )

###CRITERE EN FORMULE
FNLAFOR=CALC_FATIGUE( TYPE_CALCUL   = 'FATIGUE_MULTI',
                    OPTION        = 'DOMA_NOEUD',
                    TYPE_CHARGE   = 'NON_PERIODIQUE',
                    RESULTAT      = SOL_NL,
                    CHAM_MATER    = MAT[1],
                    COEF_PREECROU = 1.0,
                    GROUP_MA      = ('CUBE'),
                    MAILLAGE      = CUBE,
                    CRITERE       = 'FORMULE_CRITERE',
                    FORMULE_GRDEQ   = CRIT[3],
                    COURBE_GRD_VIE  = 'WOHLER',
                    PROJECTION    = PROJ[0],
                  )

for j in range(4):
   TEST_RESU(CHAM_NO=( _F( CHAM_GD = FNLAFOR,
                     NOM_CMP = NPARA[j],
                     NOEUD = 'N214',
                     VALE_CALC = RESUA[j], ),
             )
       )
FIN()
