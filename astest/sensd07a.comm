# MODIF  DATE 17/05/2004   AUTEUR CIBHHBC M.LOPES 
# TITRE SENSIBILITE EN DYNAMIQUE NON LINEAIRE (3D-VON-MISES ISOT LINEAIRE)
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2004  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# RESPONSABLE CAMBIER S.CAMBIER
# ======================================================================

DEBUT( CODE=_F(  NOM = 'SENSD07A',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
       PAR_LOT='NON' )

# ----------------------------------------------------------------------
#                 *-------------------------------*
#               /                               / !
#          J  /                            OPPOSE !
#           *-------------------------------*     !
#           !               !               !     !
#           !               !               !     !
#           !               !               !     !
#           !               * CENTRE        !     !
#           !               !               !     *
#           !               !               !   /  
#           !               !               ! /
#           *-------------------------------*
#       ORIGINE                              I
#
#              1   < X < 11
#             -1.5 < Y <  1.5
#              0.  < Z < 1.
#
# Calcul des derives des champs resulat par rapport a E, NU, D_SIGM_EPSI (=ET=Pente
# de la courbe de traction), SY (limite d'elasticite), et le chargement (FORCE_NODALE).
# Le modele integre de l'amortissement modal et et de l'amortissement proportionnel.
# Deux dyna_non_line s'enchaine pour tester la fonctionalite de reprise avec
# sensibilite. La solution de reference des sensibilites est calculee par differences
# finies, puis en non regresion. 
# On teste ensuite avec un chargement tel que le regime est lineaire, et on compare
# avec les resultats de DYNA_LINE_TRAN.
# ----------------------------------------------------------------------
# Initialisations

I_DEBUT = 0.
I_FIN = 1.E-4

#nom_cham='ACCE'
nom_cham='VITE'
#nom_cham='DEPL'
cste_alpha=0.# cette valeur est nulle, sinon on ne peut pas verifier les resultats par differences finies, car 
# le choix a ete fait que les derivees par rapport a la raideur ne fassent pas intervenir la derivee par rapport a l amortissement
cste_beta=3.E-1
cste_dsde=2000.
cste_sigy=200.
coef_char=1.E7
epsilon=1.E-5
#      
# 1. Definition/memorisation des fonctions constantes
#
PS_UN=DEFI_CONSTANTE(VALE=1.0,);
MEMO_NOM_SENSI ( NOM_UN = PS_UN ) ;
#
PS_ZERO=DEFI_CONSTANTE(VALE=0.0,);
MEMO_NOM_SENSI ( NOM_ZERO = PS_ZERO ) ;

#
# 2. Definition des parametres sensibles
#
mot_cle =[     "E" ,    "NU" , "D_SIGM_EPSI",    "SY"      ,"FORCE_NODALE" ]
sensible=[   1.E5  ,    0.3  ,  cste_dsde   ,    cste_sigy,  100.*coef_char]
mot_fact=['ELAS_FO','ELAS_FO','ECRO_LINE_FO','ECRO_LINE_FO','FORCE_NODALE']

n=len(sensible)
PS=[None]*n

for i in range(n):
  PS[i]=DEFI_PARA_SENSI(VALE=sensible[i])
  MEMO_NOM_SENSI ( NOM=_F(NOM_SD=PS[i].nom,
                          PARA_SENSI=PS[i],
                          NOM_COMPOSE=PS_UN.nom ),);

ALPHA=DEFI_CONSTANTE(VALE=cste_alpha,);
BETA=DEFI_CONSTANTE(VALE=cste_beta,);
FY=DEFI_CONSTANTE(VALE=30.*coef_char,);
FZ=DEFI_CONSTANTE(VALE=10.*coef_char,);

#
# 3. Prealable
#
PRE_GIBI()
MAILLAGE=LIRE_MAILLAGE(VERI_MAIL=_F(VERIF='NON'),);

MAILLAGE=DEFI_GROUP(reuse=MAILLAGE,
                    MAILLAGE=MAILLAGE,
                    CREA_GROUP_NO=_F(TOUT_GROUP_MA='OUI'));

#
# 3.1. Modele
#
MO=AFFE_MODELE(MAILLAGE=MAILLAGE,
               AFFE=_F(TOUT='OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='3D',),);

#
# 3.2. Mise en place des materiaux
#
MAT=DEFI_MATERIAU(ELAS_FO=_F(E=PS[0],
                             RHO=2400. ,
                             NU=PS[1],
                             AMOR_ALPHA=ALPHA ,
                             AMOR_BETA=BETA,),
                  ECRO_LINE_FO=_F(D_SIGM_EPSI=PS[2],
                                 SY=PS[3],),);

MATS=[None]*n
for i in range(n):
  if mot_cle[i]!="FORCE_NODALE":
    PSFONC=[PS_ZERO]*n
    PSFONC[i]=PS_UN
    MATS[i]=DEFI_MATERIAU(ELAS_FO=_F(E=PSFONC[0],
                                   RHO=2400.,
                                   NU=PSFONC[1],
                                   AMOR_ALPHA=ALPHA,
                                   AMOR_BETA=BETA,
                                   ),
                  ECRO_LINE_FO=_F(D_SIGM_EPSI=PSFONC[2],
                                 SY=PSFONC[3],),);
    MEMO_NOM_SENSI ( NOM=_F(NOM_SD='MAT',
                          PARA_SENSI=PS[i],
                          NOM_COMPOSE=MATS[i].nom,
                          MOT_CLE=mot_cle[i],
                          MOT_FACT=mot_fact[i],
                          VALEUR=PS[i].nom ),);
#
# 3.3. Affectation des materiaux
#
CHMAT=AFFE_MATERIAU(MAILLAGE=MAILLAGE,
                    AFFE=_F(TOUT='OUI',MATER=MAT,),);

CHMS=[None]*n
for i in range(n):
  if mot_cle[i]!="FORCE_NODALE":
    CHMS[i]=AFFE_MATERIAU(MAILLAGE=MAILLAGE,
                        AFFE=_F(TOUT='OUI',MATER=MATS[i],),);
    MEMO_NOM_SENSI ( NOM=_F(NOM_SD='CHMAT',
                          PARA_SENSI=PS[i],
                          NOM_COMPOSE=CHMS[i].nom,
                          MOT_CLE='MATER',
                          MOT_FACT='AFFE',
                          VALEUR='MAT' ),);
    
#
# 3.4. Chargements
#
CLIM=AFFE_CHAR_MECA(MODELE=MO,
                    DDL_IMPO=(_F(GROUP_NO='I',DX=0.0,DY=0.0,DZ=0.0),
                              _F(GROUP_MA='BORD_GAU',DX=0.0,DY=0.0,DZ=0.0)),);
#
CH=AFFE_CHAR_MECA_F(MODELE=MO,
                  FORCE_NODALE=(_F(GROUP_NO='OPPOSE',
                                   FX=PS[4],
                                   FY=FY,
                                   FZ=FZ))
                                   );
CHS=[None]*n
for i in range(n):
  if mot_cle[i]=="FORCE_NODALE":
    PSFONC=[PS_ZERO]*n
    PSFONC[i]=PS_UN
    CHS[i]=AFFE_CHAR_MECA_F(MODELE=MO,
                    FORCE_NODALE=(_F(GROUP_NO='OPPOSE',
                                     FX=PSFONC[4],
                                     FY=PS_ZERO,
                                     FZ=PS_ZERO))
                                       );
                                       
    MEMO_NOM_SENSI ( NOM=_F(NOM_SD='CH',
                          PARA_SENSI=PS[i],
                          NOM_COMPOSE=CHS[i].nom,
                          MOT_CLE=mot_cle[i],
                          MOT_FACT=mot_fact[i],
                          VALEUR=PS[i].nom ),);

L_INST=DEFI_LIST_REEL(DEBUT=I_DEBUT,INTERVALLE=_F(JUSQU_A=I_FIN,NOMBRE=10))
L_INST1=DEFI_LIST_REEL(DEBUT=I_DEBUT,INTERVALLE=_F(JUSQU_A=I_FIN/2,NOMBRE=5))
L_INST2=DEFI_LIST_REEL(DEBUT=I_FIN/2,INTERVALLE=_F(JUSQU_A=I_FIN,NOMBRE=5))

#
# 3.5. Amortissement modal
#
MATELER=CALC_MATR_ELEM(MODELE=MO,OPTION='RIGI_MECA',
                       CHAM_MATER=CHMAT,    
                       CHARGE= CLIM)
MATELEM=CALC_MATR_ELEM(MODELE=MO,OPTION='MASS_MECA',
                       CHAM_MATER=CHMAT,
                       CHARGE= CLIM)                                   
NUM=NUME_DDL(MATR_RIGI=MATELER)
MATASSR=ASSE_MATRICE(MATR_ELEM=MATELER,NUME_DDL=NUM)
MATASSM=ASSE_MATRICE(MATR_ELEM=MATELEM,NUME_DDL=NUM)

MODE=MODE_ITER_SIMULT(  MATR_A=MATASSR,   MATR_B=MATASSM,
                    CALC_FREQ=_F( NMAX_FREQ = 10))


#
# 4. Calcul
#
for i in range(n):
  MEMO_NOM_SENSI(NOM=_F(NOM_SD='DYT',
                        PARA_SENSI=PS[i],
                        NOM_COMPOSE=('DYT_'+PS[i].nom)),);

FC=DEFI_FONCTION(NOM_PARA='INST',
                 PROL_DROITE='CONSTANT',
                 PROL_GAUCHE='CONSTANT',
                 VALE=(I_DEBUT,0.,I_FIN,1.,))

DYT=DYNA_NON_LINE(MODELE=MO,CHAM_MATER=CHMAT,
                   SENSIBILITE=tuple(PS),
                   AMOR_MODAL=_F(  MODE_MECA = MODE,  REAC_VITE = 'OUI',
                            AMOR_REDUIT = 0.07),
                   COMP_INCR=_F(RELATION='VMIS_ISOT_LINE'),
                   EXCIT=(_F(FONC_MULT=FC,CHARGE=CH), 
                          _F( CHARGE = CLIM),),
                   INCREMENT=_F(LIST_INST=L_INST1,),
                   CONVERGENCE=_F(RESI_GLOB_RELA=1e-8,
                                  RESI_GLOB_MAXI = 2.E-7,
                                  ITER_GLOB_MAXI=1000,),
                   NEWMARK=_F(),)                              

DYT=DYNA_NON_LINE(reuse=DYT,
                   ETAT_INIT=_F(EVOL_NOLI=DYT),
                    MODELE=MO,CHAM_MATER=CHMAT,
                   SENSIBILITE=tuple(PS),
                   AMOR_MODAL=_F(  MODE_MECA = MODE,  REAC_VITE = 'OUI',
                            AMOR_REDUIT = 0.07),
                   COMP_INCR=_F(RELATION='VMIS_ISOT_LINE'),
                   EXCIT=(_F(FONC_MULT=FC,CHARGE=CH), 
                          _F( CHARGE = CLIM),),
                   INCREMENT=_F(LIST_INST=L_INST2,),
                   CONVERGENCE=_F(RESI_GLOB_RELA=1e-8,
                                  RESI_GLOB_MAXI = 2.E-7,
                                  ITER_GLOB_MAXI=1000,),
                   NEWMARK=_F(),)                              

T_REF=POST_RELEVE_T(ACTION=_F(INTITULE='SENSIBILITE',
                      GROUP_NO=('OPPOSE'),
                      RESULTAT=DYT,
                      NOM_CHAM=nom_cham,
                      NUME_ORDRE=10,
                      NOM_CMP=('DX','DY','DZ'),
                      OPERATION='EXTRACTION',
                      ),);

#IMPR_RESU(RESU=_F(FORMAT='RESULTAT',
#                  RESULTAT=DYT,
#                  SENSIBILITE=tuple(PS),
#                  ),);

#
# 5. Test par differences finies
#

for i in range(n):
  eps=[1.]*n
  eps[i]=1.0+epsilon
  MAT2=DEFI_MATERIAU(ELAS=_F(E=sensible[0]*eps[0],
                             RHO=2400. ,
                             NU=sensible[1]*eps[1],
                             AMOR_ALPHA =cste_alpha,
                             AMOR_BETA=cste_beta,),
                  ECRO_LINE=_F(D_SIGM_EPSI=sensible[2]*eps[2],
                                 SY=sensible[3]*eps[3],),
                                );

  CHMAT2=AFFE_MATERIAU(MAILLAGE=MAILLAGE,
                       AFFE=_F(TOUT='OUI',MATER=MAT2,),);

  CH2=AFFE_CHAR_MECA(MODELE=MO,
                    FORCE_NODALE=(_F(GROUP_NO='OPPOSE',
                                     FX=sensible[4]*eps[4],
                                     FY=30.*coef_char,
                                     FZ=10.*coef_char))
                                   );

  DYT2=DYNA_NON_LINE(MODELE=MO,CHAM_MATER=CHMAT2,
                   AMOR_MODAL=_F(  MODE_MECA = MODE,  REAC_VITE = 'OUI',
                            AMOR_REDUIT = 0.07),
                   COMP_INCR=_F(RELATION='VMIS_ISOT_LINE'),
                   EXCIT=(_F(FONC_MULT=FC,CHARGE=CH2), 
                          _F( CHARGE = CLIM),),
                   INCREMENT=_F(LIST_INST=L_INST,),
                   CONVERGENCE=_F(RESI_GLOB_RELA=1e-8,
                                  RESI_GLOB_MAXI = 2.E-7,
                                  ITER_GLOB_MAXI=1000,),
                   NEWMARK=_F(),)                              

  T_DIF=POST_RELEVE_T(ACTION=_F(INTITULE='SENSIBILITE',
                                  GROUP_NO=('OPPOSE'),
                                  RESULTAT=DYT2,
                      NOM_CHAM=nom_cham,
                                   NUME_ORDRE=10,
                                  NOM_CMP=('DX','DY','DZ'),
                                  OPERATION='EXTRACTION',
                                  ),);

  diff_X=(T_DIF['DX',1]-T_REF['DX',1])/(sensible[i]*epsilon)
  diff_Y=(T_DIF['DY',1]-T_REF['DY',1])/(sensible[i]*epsilon)
  diff_Z=(T_DIF['DZ',1]-T_REF['DZ',1])/(sensible[i]*epsilon)

  tole=5.E-3
  TEST_RESU(RESU=(
                  _F(RESULTAT=DYT,NUME_ORDRE=10,
                      NOM_CHAM=nom_cham,
                     GROUP_NO='OPPOSE',
                     CRITERE='RELATIF',PRECISION=tole,
                     NOM_CMP='DX',
                     SENSIBILITE=PS[i],
                     VALE=diff_X, 
                     REFERENCE='AUTRE_ASTER')))

  if mot_cle[i]=="FORCE_NODALE" : tole=150.E-2
  else : tole=5.E-3
  # Le reajustement de la tolerance sur les differences finies est necessaire
  # car les valeurs tres faibles sont sensibles a la non convergence parfaite
  # du calcul. (ceci explique le test ci dessus)
  TEST_RESU(RESU=(
                  _F(RESULTAT=DYT,NUME_ORDRE=10,
                      NOM_CHAM=nom_cham,
                      GROUP_NO='OPPOSE',
                     CRITERE='RELATIF',PRECISION=tole,
                     NOM_CMP='DY',
                     SENSIBILITE=PS[i],
                     VALE=diff_Y, 
                     REFERENCE='AUTRE_ASTER')))

  if mot_cle[i]=="FORCE_NODALE" : tole=150.E-2
  else : tole=5.E-3
  TEST_RESU(RESU=(
                  _F(RESULTAT=DYT,NUME_ORDRE=10,
                      NOM_CHAM=nom_cham,
                      GROUP_NO='OPPOSE',
                     CRITERE='RELATIF',PRECISION=tole,
                     NOM_CMP='DZ',
                     SENSIBILITE=PS[i],
                     VALE=diff_Z, 
                     REFERENCE='AUTRE_ASTER')))

  DETRUIRE(CONCEPT=_F(NOM=(MAT2,CHMAT2,DYT2,T_DIF,CH2,)),INFO=1)

#
# 6. Test_Resu en dur
#
TEST_RESU(RESU=(
                _F(RESULTAT=DYT,NUME_ORDRE=10,
                   NOM_CHAM='DEPL',GROUP_NO= 'OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DX',   
                   VALE=(1.9342E-01),REFERENCE='NON_REGRESSION',VERSION='7.2.12'),

                _F(RESULTAT=DYT,NUME_ORDRE=10,
                   NOM_CHAM='DEPL',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DX',
                   SENSIBILITE=PS_0,        
                   VALE=(-2.4739E-13),REFERENCE='NON_REGRESSION',VERSION='7.2.12'),

                _F(RESULTAT=DYT,NUME_ORDRE=10,
                   NOM_CHAM='DEPL',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DY',
                   SENSIBILITE=PS_1,        
                   VALE=(-1.3969E-07),REFERENCE='NON_REGRESSION',VERSION='7.2.12'),

                _F(RESULTAT=DYT,NUME_ORDRE=10,
                   NOM_CHAM='VITE',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DZ',
                   SENSIBILITE=PS_2,        
                   VALE=(-5.9807E-09),REFERENCE='NON_REGRESSION',VERSION='7.2.12'),

                _F(RESULTAT=DYT,NUME_ORDRE=10,
                   NOM_CHAM='VITE',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DX',
                   SENSIBILITE=PS_3,        
                   VALE=(-1.5118E-06),REFERENCE='NON_REGRESSION',VERSION='7.2.12'),

                _F(RESULTAT=DYT,NUME_ORDRE=10,
                   NOM_CHAM='ACCE',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DY',
                   SENSIBILITE=PS_2,        
                   VALE=(-1.0214E-03),REFERENCE='NON_REGRESSION',VERSION='7.2.12'),

                _F(RESULTAT=DYT,NUME_ORDRE=10,
                   NOM_CHAM='ACCE',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DZ',
                   SENSIBILITE=PS_3,        
                   VALE=(-1.7587E-03),REFERENCE='NON_REGRESSION',VERSION='7.2.12'),

                ),)

#
# 7. VERIFICATION EN REGIME LINEAIRE (coef_char=1.)
#    VALEURS DE REFERENCES ISSUES DE DYNA_LINE_TRAN
#
coef_char=1.
DETRUIRE(CONCEPT=_F(NOM=(PS[4],FY,FZ,CH)),INFO=1)
PS[4]=DEFI_PARA_SENSI(VALE=100.*coef_char)
FY=DEFI_CONSTANTE(VALE=30.*coef_char,);
FZ=DEFI_CONSTANTE(VALE=10.*coef_char,);
CH=AFFE_CHAR_MECA_F(MODELE=MO,
                  FORCE_NODALE=(_F(GROUP_NO='OPPOSE',
                                   FX=PS[4],
                                   FY=FY,
                                   FZ=FZ))
                                   );
MEMO_NOM_SENSI(NOM=_F(NOM_SD='DYL',
                        PARA_SENSI=PS[0],
                        NOM_COMPOSE=('DYL_'+PS[0].nom)),);
MEMO_NOM_SENSI(NOM=_F(NOM_SD='DYL',
                        PARA_SENSI=PS[1],
                        NOM_COMPOSE=('DYL_'+PS[1].nom)),);
MEMO_NOM_SENSI(NOM=_F(NOM_SD='DYL',
                        PARA_SENSI=PS[4],
                        NOM_COMPOSE=('DYL_'+PS[4].nom)),);
#VECT=CALC_VECT_ELEM(CHARGE=CH,OPTION='CHAR_MECA')
#MATELEC=CALC_MATR_ELEM(MODELE=MO,OPTION='AMOR_MECA',
#                       RIGI_MECA=MATELER,MASS_MECA=MATELEM,
#                       CHAM_MATER=CHMAT,
#                       CHARGE= CLIM   )
#MATASSC=ASSE_MATRICE(MATR_ELEM=MATELEC,NUME_DDL=NUM)
#DYL=DYNA_LINE_TRAN(MODELE=MO,CHAM_MATER=CHMAT,
#                   MATR_MASS=MATASSM,MATR_RIGI=MATASSR,MATR_AMOR=MATASSC,
#                   INCREMENT=_F(LIST_INST=L_INST,),
#                   SENSIBILITE=(PS[0],PS[1],PS[4]),
#                     EXCIT=( _F(FONC_MULT=FC,CHARGE=CH),                            ), 
#                   NEWMARK=_F(),)
DYL=DYNA_NON_LINE(MODELE=MO,CHAM_MATER=CHMAT,
                   SENSIBILITE=(PS[0],PS[1],PS[4]),
                   COMP_INCR=_F(RELATION='VMIS_ISOT_LINE'),
                   EXCIT=(_F(FONC_MULT=FC,CHARGE=CH), 
                          _F( CHARGE = CLIM),),
                   INCREMENT=_F(LIST_INST=L_INST,),
                   CONVERGENCE=_F(RESI_GLOB_RELA=1e-8,
                                  RESI_GLOB_MAXI = 2.E-7,
                                  ITER_GLOB_MAXI=1000,),
                   NEWMARK=_F(),)                              
TEST_RESU(RESU=(
                _F(RESULTAT=DYL,NUME_ORDRE=10,
                   NOM_CHAM='DEPL',GROUP_NO= 'OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DX',   
                   VALE=(1.9342E-08),REFERENCE='AUTRE_ASTER',VERSION='7.2.12'),

                _F(RESULTAT=DYL,NUME_ORDRE=10,
                   NOM_CHAM='VITE',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DX',
                   SENSIBILITE=PS_0,        
                   VALE=(-1.0577E-14),REFERENCE='AUTRE_ASTER',VERSION='7.2.12'),

                _F(RESULTAT=DYL,NUME_ORDRE=10,
                   NOM_CHAM='VITE',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DY',
                   SENSIBILITE=PS_1,        
                   VALE=(-4.4996E-10),REFERENCE='AUTRE_ASTER',VERSION='7.2.12'),

                _F(RESULTAT=DYL,NUME_ORDRE=10,
                   NOM_CHAM='VITE',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-2,
                   NOM_CMP='DY',
                   SENSIBILITE=PS_4,        
                   VALE=(-9.9810E-13),REFERENCE='AUTRE_ASTER',VERSION='7.2.12'),

                _F(RESULTAT=DYL,NUME_ORDRE=10,
                   NOM_CHAM='VITE',GROUP_NO='OPPOSE',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DZ',
                   SENSIBILITE=PS_4,        
                   VALE=(2.3704E-12),REFERENCE='AUTRE_ASTER',VERSION='7.2.12'),
                 ))

FIN()

