# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# CAS_TEST__: SDNL104B
#
# CALCUL DE LA REPONSE TRANSITOIRE NON-LINEAIRE D UNE POUTRE EN FLEXION
# CHOQUANT SUR UN APPUI ELASTIQUE PAR SOUS-STRUCTURATION
#
DEBUT(  CODE=_F(NIV_PUB_WEB='INTERNET'),
       DEBUG=_F(SDVERI='OUI'))

#
MAYA=LIRE_MAILLAGE( )

MAYA=DEFI_GROUP( reuse=MAYA,   MAILLAGE=MAYA,
  CREA_GROUP_MA=_F(  NOM = 'TOUT', TOUT = 'OUI'))

#
MATERIO=DEFI_MATERIAU(  ELAS=_F( RHO = 1.E06,  NU = 0.3,  E = 1.E10))

#
CHMAT=AFFE_MATERIAU(  MAILLAGE=MAYA,
                              AFFE=_F( TOUT = 'OUI',   MATER = MATERIO))

#
BARRE=AFFE_MODELE(  MAILLAGE=MAYA,
                            AFFE=_F( TOUT = 'OUI',
                                  MODELISATION = 'POU_D_E',
                                  PHENOMENE = 'MECANIQUE'))

#
CARA=AFFE_CARA_ELEM(  MODELE=BARRE,
                           POUTRE=_F(
       GROUP_MA = 'TOUT',
   SECTION = 'CERCLE',
                                   CARA = 'R',     VALE = 0.1))

#
###
###### PARTIE GAUCHE :
###
#
GUIDAGE1=AFFE_CHAR_MECA(    MODELE=BARRE,DDL_IMPO=(
                           _F( TOUT = 'OUI',
                                     DX = 0., DZ = 0., DRX = 0., DRY = 0.),
                           _F( NOEUD = 'A',  DY = 0., DRZ = 0.)))

#
CHARGE1=AFFE_CHAR_MECA(    MODELE=BARRE,
                           DDL_IMPO=_F( NOEUD = 'N5',  DY = 0., DRZ = 0.))

#
K_ELEM1=CALC_MATR_ELEM(      MODELE=BARRE,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='RIGI_MECA',
                               CHARGE=(GUIDAGE1,  CHARGE1,))

#
M_ELEM1=CALC_MATR_ELEM(      MODELE=BARRE,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='MASS_MECA',
                               CHARGE=(GUIDAGE1,  CHARGE1,))

#
NUM1=NUME_DDL(  MATR_RIGI=K_ELEM1)

#
K_ASSE1=ASSE_MATRICE(  MATR_ELEM=K_ELEM1,
                           NUME_DDL=NUM1)

#
M_ASSE1=ASSE_MATRICE(  MATR_ELEM=M_ELEM1,
                           NUME_DDL=NUM1)

#
MODES1=CALC_MODES(MATR_RIGI=K_ASSE1,
                  MATR_MASS=M_ASSE1,
                  CALC_FREQ=_F(NMAX_FREQ=04,
                               ),
                  )


#
INTERF1=DEFI_INTERF_DYNA(   NUME_DDL=NUM1,
                             INTERFACE=_F( NOM = 'DROITE',
                                        TYPE = 'CRAIGB',
                                        MASQUE = ('DX', 'DZ', 'DRX', 'DRY',),
                                        NOEUD = 'N5')
                              )

#
BAMO1=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = INTERF1,
                                        MODE_MECA = MODES1,
                                        NMAX_MODE = 04)
                             )

#
MACRO1=MACR_ELEM_DYNA(  BASE_MODALE=BAMO1,)

#
###
###### PARTIE DROITE :
###
#
GUIDAGE2=AFFE_CHAR_MECA(    MODELE=BARRE,
                           DDL_IMPO=_F( TOUT = 'OUI',
                                     DX = 0., DZ = 0., DRX = 0., DRY = 0.))

#
CHARGE2=AFFE_CHAR_MECA(    MODELE=BARRE,
                           DDL_IMPO=_F( NOEUD = 'A',  DY = 0., DRZ = 0.))

#
CHARTRAN=AFFE_CHAR_MECA(        MODELE=BARRE,
                           FORCE_NODALE=_F( NOEUD = 'N5',  FY = -1000.))

#
K_ELEM2=CALC_MATR_ELEM(      MODELE=BARRE,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='RIGI_MECA',
                               CHARGE=(GUIDAGE2,  CHARGE2,))

#
M_ELEM2=CALC_MATR_ELEM(      MODELE=BARRE,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='MASS_MECA',
                               CHARGE=(GUIDAGE2,  CHARGE2,))

#
V_ELEM=CALC_VECT_ELEM( OPTION='CHAR_MECA',
                            CHARGE=CHARTRAN)

#
NUM2=NUME_DDL(  MATR_RIGI=K_ELEM2)

#
K_ASSE2=ASSE_MATRICE(  MATR_ELEM=K_ELEM2,
                           NUME_DDL=NUM2)

#
M_ASSE2=ASSE_MATRICE(  MATR_ELEM=M_ELEM2,
                           NUME_DDL=NUM2)

#
V_ASSE=ASSE_VECTEUR(  VECT_ELEM=V_ELEM,
                           NUME_DDL=NUM2)

#
MODES2=CALC_MODES(MATR_RIGI=K_ASSE2,
                  MATR_MASS=M_ASSE2,
                  CALC_FREQ=_F(NMAX_FREQ=05,
                               ),
                  )


#
INTERF2=DEFI_INTERF_DYNA(   NUME_DDL=NUM2,
                             INTERFACE=_F( NOM = 'GAUCHE',
                                        TYPE = 'CRAIGB',
                                        MASQUE = ('DX', 'DZ', 'DRX', 'DRY',),
                                        NOEUD = 'A')
                              )

#
BAMO2=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = INTERF2,
                                        MODE_MECA = MODES2,
                                        NMAX_MODE = 05)
                            )

#
MACRO2=MACR_ELEM_DYNA(  BASE_MODALE=BAMO2,)

#
###
###### MODELE GENERALISE :
###
#
MODEGE=DEFI_MODELE_GENE( SOUS_STRUC=(_F( NOM = 'COTE1',
                                         MACR_ELEM_DYNA = MACRO1,
                                         ANGL_NAUT = (0., 0., 0.,),
                                         TRANS=(0.,0.,0.),),
                             _F( NOM = 'COTE2',
                                         MACR_ELEM_DYNA = MACRO2,
                                         ANGL_NAUT = (180.,180.,180.,),
                                         TRANS=(0.5,0.,0.),)),
                                LIAISON=_F( SOUS_STRUC_1 = 'COTE1',
                                         SOUS_STRUC_2 = 'COTE2',
                                         INTERFACE_1 = 'DROITE',
                                         INTERFACE_2 = 'GAUCHE'))

#
NUMEGE=NUME_DDL_GENE(  MODELE_GENE=MODEGE)

#
K_GENE=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='RIGI_GENE')

#
M_GENE=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='MASS_GENE')

#
F_GENE=ASSE_VECT_GENE(    NUME_DDL_GENE=NUMEGE,
                           CHAR_SOUS_STRUC=_F( SOUS_STRUC = 'COTE2',
                                            VECT_ASSE = V_ASSE))

#
###
###### CALCUL MODAL :
###
#
RESGEN=CALC_MODES(MATR_RIGI=K_GENE,
                  MATR_MASS=M_GENE,
                  CALC_FREQ=_F(NMAX_FREQ=5,
                               ),
                  )


#
SQUEL=DEFI_SQUELETTE(  MODELE_GENE=MODEGE,SOUS_STRUC=(
                            _F( NOM = 'COTE1',
                                     GROUP_MA='TOUT'
                               ),
                            _F( NOM = 'COTE2',
                                     GROUP_MA='TOUT'
                                )))


DEBUG(SDVERI='OUI')
MODGLO=REST_SOUS_STRUC(   RESU_GENE=RESGEN, SQUELETTE=SQUEL, TOUT_ORDRE='OUI')
DEBUG(SDVERI='OUI')


NUMEMODE=NUME_DDL_GENE(BASE=RESGEN, STOCKAGE='DIAG')
K_PROJ=PROJ_MATR_BASE(BASE=RESGEN, NUME_DDL_GENE=NUMEMODE, MATR_ASSE_GENE=K_GENE)
M_PROJ=PROJ_MATR_BASE(BASE=RESGEN, NUME_DDL_GENE=NUMEMODE, MATR_ASSE_GENE=M_GENE)
F_PROJ=PROJ_VECT_BASE(BASE=RESGEN, NUME_DDL_GENE=NUMEMODE, VECT_ASSE_GENE=F_GENE)


# DEFINITION DE L OBSTACLE
OBSTACLE=DEFI_OBSTACLE( TYPE='CERCLE')

#
###
###### CALCULS TRANSITOIRES SUR BASE MODALE
###
#

#
t_depl = 0.1315  # max depl
t_vite = 0.1566  # max vite

t_fin = 1.0
dt_arch = 1.e-2
ARCHLIST = [dt_arch*i for i in range(int(round(t_fin/dt_arch)))] + [t_depl, t_vite]
ARCHLIST.sort()

TRAN_GE1=DYNA_VIBRA(TYPE_CALCUL='TRAN',BASE_CALCUL='GENE',
                    SCHEMA_TEMPS=_F(SCHEMA='DIFF_CENTRE',),
                    MATR_MASS=M_PROJ,
                    MATR_RIGI=K_PROJ,
                    EXCIT=_F(VECT_ASSE_GENE = F_PROJ,
                             COEF_MULT = 1.),
                    INCREMENT=_F(  INST_INIT = 0.,
                                        INST_FIN = 1.,
                                        PAS = 1.E-5),
                                 CHOC=_F( NOEUD_1 = 'N5',
                                       SOUS_STRUC_1 = 'COTE2',
                                       OBSTACLE = OBSTACLE,
                                       REPERE = 'COTE2',
                                       ORIG_OBST = (0.5, 0., 0.,),
                                       NORM_OBST = (1.,  0., 0.,),
                                       JEU = 1.E-4,
                                       RIGI_NOR = 1.E+8),
                                 ARCHIVAGE=_F(INST=ARCHLIST, PAS_ARCH=10000000)
                             )
#
TRAN_GE2=DYNA_VIBRA(TYPE_CALCUL='TRAN',BASE_CALCUL='GENE',
                             SCHEMA_TEMPS=_F(SCHEMA='DEVOGE', TOLERANCE=1.E-8, PAS_MAXI=1.E-5),
                             MATR_MASS=M_PROJ,
                             MATR_RIGI=K_PROJ,
                                EXCIT=_F(VECT_ASSE_GENE = F_PROJ,
                                       COEF_MULT = 1.),
                            INCREMENT=_F(  INST_INIT = 0.,
                                        INST_FIN = 1.,
                                        PAS = 1.E-5),
                                 CHOC=_F( NOEUD_1 = 'N5',
                                       SOUS_STRUC_1 = 'COTE2',
                                       OBSTACLE = OBSTACLE,
                                       ORIG_OBST = (1., 0., 0.,),
                                       NORM_OBST = (1., 0., 0.,),
                                       JEU = 1.E-4,
                                       RIGI_NOR = 1.E+8),
                                 ARCHIVAGE=_F(INST=ARCHLIST, PAS_ARCH=10000000)
                             )

#
TRAN_GE3=DYNA_VIBRA(TYPE_CALCUL='TRAN',BASE_CALCUL='GENE',
                             SCHEMA_TEMPS=_F(SCHEMA='ADAPT_ORDRE2',
# ON IMPOSE PAS_MAXI = PAS POUR RETROUVER LES ANCIENS RESULTATS
# POUR AMELIORER LE TEMPS CPU IL VAUT MIEUX TESTER AVEC UN PAS_MAXI PLUS GRAND
                                             PAS_MAXI = 1.E-5,),
                             MATR_MASS=M_PROJ,
                             MATR_RIGI=K_PROJ,
                             EXCIT=_F(VECT_ASSE_GENE = F_PROJ,
                                       COEF_MULT = 1.),
                            INCREMENT=_F(  INST_INIT = 0.,
                                        INST_FIN = 1.,
                                        PAS = 1.E-5),
                                 CHOC=_F( NOEUD_1 = 'N5',
                                       SOUS_STRUC_1 = 'COTE2',
                                       OBSTACLE = OBSTACLE,
                                       ORIG_OBST = (1., 0., 0.,),
                                       NORM_OBST = (1., 0., 0.,),
                                       JEU = 1.E-4,
                                       RIGI_NOR = 1.E+8),
                            ARCHIVAGE=_F( PAS_ARCH=10000000, INST=ARCHLIST),
                             )


#
LIST_R=DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A = 0.16, NOMBRE = 1600), )
LIST_R2=DEFI_LIST_REEL(DEBUT=0.1, INTERVALLE=_F( JUSQU_A = 1., NOMBRE = 9))

#
DEBUG(SDVERI='NON')

TRAN1=REST_GENE_PHYS(   RESU_GENE=TRAN_GE1,
                            TOUT_CHAM='OUI',
                             INST = ARCHLIST,
                             INTERPOL='NON',
                             MODE_MECA=MODGLO )

#
TRAN2=REST_GENE_PHYS(   RESU_GENE=TRAN_GE2,
                            TOUT_CHAM='OUI',
                             INST = ARCHLIST,
                             INTERPOL='NON',
                             MODE_MECA=MODGLO )

#
TRAN3=REST_GENE_PHYS(   RESU_GENE=TRAN_GE3,
                            TOUT_CHAM='OUI',
                             INST = ARCHLIST,
                             INTERPOL='NON',
                             MODE_MECA=MODGLO )

DEBUG(SDVERI='OUI')

# valeurs de référence issues du calcul avec dyna_non_line (MOD A)
valref=-1.85356696663E-06   # a t_depl
valrefv=-0.00463289359505   # a t_vite
#
TEST_RESU(RESU=_F(INST=t_depl,
                  RESULTAT=TRAN1,
                  NOM_CHAM='DEPL',
                  NOEUD='NO12',
                  NOM_CMP='DY',
                  VALE_CALC=-1.71889759158E-06,
                  VALE_REFE=valref,
                  REFERENCE='AUTRE_ASTER',
                  PRECISION=9.0E-2,
                  ),
          )

#
TEST_RESU(RESU=_F(INST=t_vite,
                  RESULTAT=TRAN1,
                  NOM_CHAM='VITE',
                  NOEUD='NO12',
                  NOM_CMP='DY',
                  VALE_CALC=-0.00448674528161,
                  VALE_REFE=valrefv,
                  REFERENCE='AUTRE_ASTER',
                  PRECISION=9.E-2,),
          )

#
TEST_RESU(RESU=_F(INST=t_depl,
                  RESULTAT=TRAN2,
                  NOM_CHAM='DEPL',
                  NOEUD='NO12',
                  NOM_CMP='DY',
                  VALE_CALC=-1.71881962542E-06,
                  VALE_REFE=valref,
                  REFERENCE='AUTRE_ASTER',
                  PRECISION=9.0E-2,
                  ),
          )

#
TEST_RESU(RESU=_F(INST=t_vite,
                  RESULTAT=TRAN2,
                  NOM_CHAM='VITE',
                  NOEUD='NO12',
                  NOM_CMP='DY',
                  VALE_CALC=-0.00448667308637,
                  VALE_REFE=valrefv,
                  REFERENCE='AUTRE_ASTER',
                  PRECISION=9.E-02,),
          )

#
TEST_RESU(RESU=_F(INST=t_depl,
                  RESULTAT=TRAN3,
                  NOM_CHAM='DEPL',
                  NOEUD='NO12',
                  NOM_CMP='DY',
                  VALE_CALC=-1.71880087698E-06,
                  VALE_REFE=valref,
                  REFERENCE='AUTRE_ASTER',
                  PRECISION=9.E-2,
                  ),
          )

#
TEST_RESU(RESU=_F(INST=t_vite,
                  RESULTAT=TRAN3,
                  NOM_CHAM='VITE',
                  NOEUD='NO12',
                  NOM_CMP='DY',
                  VALE_CALC=-0.00448674877558,
                  VALE_REFE=valrefv,
                  REFERENCE='AUTRE_ASTER',
                  PRECISION=9.E-2,),
          )

mod1=REST_SOUS_STRUC(RESU_GENE=RESGEN,
                    SOUS_STRUC='COTE1',
                    TOUT_ORDRE='OUI');

LIST_R3=DEFI_LIST_REEL(DEBUT=0., INTERVALLE=_F( JUSQU_A = 1., NOMBRE = 10))
resu_dy1=REST_GENE_PHYS(   RESU_GENE=TRAN_GE1,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R3,
                             INTERPOL='LIN',
                             MODE_MECA=mod1 )

resu_dy=CALC_CHAMP(RESULTAT= resu_dy1,
                   MODELE=BARRE,CHAM_MATER=CHMAT,CARA_ELEM=CARA,
                    CONTRAINTE=('SIPM_ELNO'))


TEST_RESU(RESU=_F(INST=0.0,
                  RESULTAT=resu_dy,
                  NOM_CHAM='SIPM_ELNO',
                  NOEUD='N1',
                  NOM_CMP='SIXXMAX',
                  VALE_CALC=665.452033642,
                  MAILLE='S1',
                  ),
          )

t_cin1=POST_ELEM(ENER_CIN=_F(GROUP_MA='TOUT',
                            ),
                MODELE=BARRE,
                CHAM_MATER=CHMAT,
                CARA_ELEM=CARA,
                RESULTAT=resu_dy1,
                LIST_INST=LIST_R2,
                );


TEST_TABLE(VALE_CALC=0.0193738393748,
           NOM_PARA='TOTALE',
           TABLE=t_cin1,
           FILTRE=(_F(NOM_PARA='LIEU',
                      VALE_K='TOUT',),
                   _F(NOM_PARA='INST',
                      VALE=1.0,),
                   ),
           )

mod2=REST_SOUS_STRUC(RESU_GENE=RESGEN,
                    SOUS_STRUC='COTE2',
                    TOUT_ORDRE='OUI');

resu_dy2=REST_GENE_PHYS(   RESU_GENE=TRAN_GE1,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R3,
                             INTERPOL='LIN',
                             MODE_MECA=mod2 )


t_cin2=POST_ELEM(ENER_CIN=_F(GROUP_MA='TOUT',
                            ),
                MODELE=BARRE,
                CHAM_MATER=CHMAT,
                CARA_ELEM=CARA,
                RESULTAT=resu_dy2,
                LIST_INST=LIST_R2,
                );


TEST_TABLE(VALE_CALC=0.0493802986221,
           NOM_PARA='TOTALE',
           TABLE=t_cin2,
           FILTRE=(_F(NOM_PARA='LIEU',
                      VALE_K='TOUT',),
                   _F(NOM_PARA='INST',
                      VALE=1.0,),
                   ),
           )

#
FIN()
#
