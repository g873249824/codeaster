# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2018 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

POURSUITE(CODE='OUI', PAR_LOT='NON')

import numpy as np

# extract as dense matrix
matr_dense = stiff.EXTR_MATR()

# extract as sparse matrix by keeping almost null values
data, row, col, dim = stiff.EXTR_MATR(sparse='True', epsilon=0.)

matr_sparse = np.zeros((dim, dim))
for i, j, value in zip(row, col, data):
    matr_sparse[i, j] = value

# check equality
equal = np.allclose(matr_dense, matr_sparse)

tab1 = CREA_TABLE(LISTE=(_F(PARA='EQUAL',
                            LISTE_I=int(equal)),
                         _F(PARA='TERMS',
                            LISTE_I=len(data))))

TEST_TABLE(REFERENCE='ANALYTIQUE',
            VALE_CALC_I=1,
            VALE_REFE_I=1,
            NOM_PARA='EQUAL',
            TABLE=tab1,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
            VALE_CALC_I=196,
            VALE_REFE_I=196,
            NOM_PARA='TERMS',
            TABLE=tab1,)

# extract as sparse matrix
epsilon = 1.e-10
data, row, col, dim = stiff.EXTR_MATR(sparse='True', epsilon=epsilon)

matr_sparse = np.zeros((dim, dim))
for i, j, value in zip(row, col, data):
    matr_sparse[i, j] = value

# check equality
diff = abs(matr_dense - matr_sparse).max()

tab2 = CREA_TABLE(LISTE=(_F(PARA='EQUAL',
                            LISTE_I=int(diff < epsilon)),
                         _F(PARA='TERMS',
                            LISTE_I=len(data))))

TEST_TABLE(REFERENCE='ANALYTIQUE',
            VALE_CALC_I=1,
            VALE_REFE_I=1,
            NOM_PARA='EQUAL',
            TABLE=tab2,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
            VALE_CALC_I=174,
            VALE_REFE_I=174,
            NOM_PARA='TERMS',
            TABLE=tab2,)

# np.savez("/tmp/res.npz", md=matr_dense, data=data, row=row, col=col)

FIN();
