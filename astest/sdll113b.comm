# TITRE SOUS-STRUCTURATION TRANSITOIRE : POUTRE AMORTIE EN TRACTION
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# CAS_TEST__: SDLL113B
#
#12345678901234567890123456789012345678901234567890123456789012345678901
#
# CE FICHIER DE COMMANDE CONTIENT LES INSTRUCTIONS POUR CALCULER LA
# REPONSE TRANSITOIRE EN TRACTION-COMPRESSION D'UNE POUTRE AMORTIE
# SOUMISE A UNE FORCE CONSTANTE :
#      - PAR CALCUL DIRECT (CALCUL DE REFERENCE)
#      - PAR SOUS-STRUCTURATION DYNAMIQUE TRANSITOIRE
#
DEBUT(CODE=_F(NOM='SDLL113B',NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'))

#
MATERIO=DEFI_MATERIAU(  ELAS=_F( RHO = 1.E04,  NU = 0.3,  E = 1.E10,
                                 AMOR_ALPHA = 6.5E-6,  AMOR_BETA = 16.))

#
LIST_R=DEFI_LIST_REEL(       DEBUT=0.,
                           INTERVALLE=_F( JUSQU_A = 1.95E-2,
                                       NOMBRE = 11))

#
########################################################################
#                           CALCUL DIRECT                              #
########################################################################
#
MAYA=LIRE_MAILLAGE( UNITE=20)

MAYA=DEFI_GROUP( reuse=MAYA,   MAILLAGE=MAYA,
  CREA_GROUP_MA=_F(  NOM = 'TOUT', TOUT = 'OUI'))

MAYA=DEFI_GROUP( reuse=MAYA,   MAILLAGE=MAYA,
                 CREA_GROUP_MA=_F(  NOM = 'EXTREM', MAILLE=('S10')))


#
CHMAT=AFFE_MATERIAU(  MAILLAGE=MAYA,
                              AFFE=_F( TOUT = 'OUI',
                                    MATER = MATERIO))

#
POUTRE=AFFE_MODELE(  MAILLAGE=MAYA,
                            AFFE=_F( TOUT = 'OUI',
                                  MODELISATION = 'POU_D_T',
                                  PHENOMENE = 'MECANIQUE'))

#
CARA=AFFE_CARA_ELEM(  MODELE=POUTRE,
                           POUTRE=_F(
       GROUP_MA = 'TOUT',

                                   SECTION = 'CERCLE',
                                   CARA = ('R', 'EP',),
                                   VALE = (0.1, 0.01,)))

#
GUIDAGE=AFFE_CHAR_MECA(    MODELE=POUTRE,DDL_IMPO=(
                           _F( TOUT = 'OUI',
                                     DY = 0., DZ = 0., DRX = 0., DRY = 0., DRZ = 0.),
                           _F( NOEUD = 'A',    DX = 0.)))

#
CHARTRAN=AFFE_CHAR_MECA(        MODELE=POUTRE,
                           FORCE_NODALE=_F( NOEUD = 'N10',  FX = -100.))

#
K_ELEM=CALC_MATR_ELEM(      MODELE=POUTRE,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='RIGI_MECA',
                                CHARGE=GUIDAGE )

#
M_ELEM=CALC_MATR_ELEM(      MODELE=POUTRE,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='MASS_MECA',
                                CHARGE=GUIDAGE )

#
A_ELEM=CALC_MATR_ELEM(      MODELE=POUTRE,
                             RIGI_MECA=K_ELEM,
                             MASS_MECA=M_ELEM,
                             CARA_ELEM=CARA,
                            CHAM_MATER=CHMAT,
                               OPTION='AMOR_MECA',
                                CHARGE=GUIDAGE )

#
V_ELEM=CALC_VECT_ELEM( OPTION='CHAR_MECA',
                            CHARGE=CHARTRAN)

#
NUMERO=NUME_DDL(  MATR_RIGI=K_ELEM)

#
K_ASSE=ASSE_MATRICE(  MATR_ELEM=K_ELEM,
                           NUME_DDL=NUMERO)

#
M_ASSE=ASSE_MATRICE(  MATR_ELEM=M_ELEM,
                           NUME_DDL=NUMERO)

#
A_ASSE=ASSE_MATRICE(  MATR_ELEM=A_ELEM,
                           NUME_DDL=NUMERO)

#
V_ASSE=ASSE_VECTEUR(  VECT_ELEM=V_ELEM,
                           NUME_DDL=NUMERO)

#
MOD_CAL=MODE_ITER_SIMULT(     MATR_RIGI=K_ASSE,
                                 MATR_MASS=M_ASSE,
                             CALC_FREQ=_F( NMAX_FREQ = 10))

# CE BLOC POUR TESTER LIRE_RESU POUR LES BASES
IMPR_RESU(FORMAT='MED',
          UNITE=81,
          RESU=_F(MAILLAGE=MAYA,
                  RESULTAT=MOD_CAL,
                  NOM_CHAM='DEPL',),);
#
MODES=LIRE_RESU(FORMAT='MED',
                UNITE=81,
                FORMAT_MED=_F(NOM_CHAM='DEPL',
                              NOM_CHAM_MED='MOD_CAL_DEPL',),
                TYPE_RESU='MODE_MECA',
                MATR_RIGI=K_ASSE,
                MATR_MASS=M_ASSE,
                TOUT_ORDRE='OUI',
                MAILLAGE=MAYA,);

##
PROJ_BASE(  BASE=MODES,
            STOCKAGE='DIAG',
            MATR_ASSE_GENE=(
             _F(
                             MATRICE = CO("M_PROJ"),
                             MATR_ASSE = M_ASSE),
             _F(
                             MATRICE = CO("K_PROJ"),
                             MATR_ASSE = K_ASSE),
             _F(
                             MATRICE = CO("A_PROJ"),
                             MATR_ASSE = A_ASSE)),
             VECT_ASSE_GENE=_F(
                             VECTEUR = CO("F_PROJ"),
                             VECT_ASSE = V_ASSE)
)

#
TRAN_GEN=DYNA_VIBRA(TYPE_CALCUL='TRAN',BASE_CALCUL='GENE',
                                  MATR_MASS=M_PROJ,
                                  MATR_RIGI=K_PROJ,
                                  MATR_AMOR=A_PROJ,
                                  SCHEMA_TEMPS=_F(SCHEMA='EULER',),
                                  EXCIT=_F(VECT_ASSE_GENE = F_PROJ,
                                            COEF_MULT = 1.),
                                 INCREMENT=_F(  INST_INIT = 0.,
                                             INST_FIN = 0.0195,
                                             PAS = 1.E-6),
                                 ARCHIVAGE=_F( PAS_ARCH = 5)
                            )
#
RESULT1=REST_GENE_PHYS(   RESU_GENE=TRAN_GEN,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R,
                             INTERPOL='LIN')
# CES TEST EST AJOUTE POUR LA COUVERTURE DE CODE
#
# RESTITUTION SUR UNE GROUPE_MA AVEC UNE BASE MODALE ISSUE DE LIRE_RESU
#
RESULT2=REST_GENE_PHYS(   RESU_GENE=TRAN_GEN,
                          TOUT_CHAM='OUI',
                          GROUP_MA='EXTREM',
                          LIST_INST=LIST_R,
                          INTERPOL='LIN')
#
TEST_RESU(RESU=_F(INST=0.0195,
                  REFERENCE='AUTRE_ASTER',
                  RESULTAT=RESULT1,
                  NOM_CHAM='DEPL',
                  NOEUD='N10',
                  NOM_CMP='DX',
                  VALE_CALC=-9.5488174916312E-07,
                  VALE_REFE=-9.54882E-07,
                  CRITERE='RELATIF',
                  PRECISION=1.E-4,),
          )

#
TEST_RESU(RESU=_F(INST=0.0195,
                  REFERENCE='AUTRE_ASTER',
                  RESULTAT=RESULT1,
                  NOM_CHAM='VITE',
                  NOEUD='N10',
                  NOM_CMP='DX',
                  VALE_CALC=1.2218964215031E-03,
                  VALE_REFE=1.2219E-3,
                  CRITERE='RELATIF',
                  PRECISION=1.E-4,),
          )

#
TEST_RESU(RESU=_F(INST=0.0195,
                  REFERENCE='AUTRE_ASTER',
                  RESULTAT=RESULT1,
                  NOM_CHAM='ACCE',
                  NOEUD='N10',
                  NOM_CMP='DX',
                  VALE_CALC=-1.9171162907526,
                  VALE_REFE=-1.91712,
                  CRITERE='RELATIF',
                  PRECISION=1.E-4,),
          )

########################################################################
#          CALCUL PAR SOUS-STRUCTURATION DYNAMIQUE TRANSITOIRE         #
########################################################################
#
PRE_IDEAS(UNITE_IDEAS=19,
           UNITE_MAILLAGE=21)

#
MAYA1=LIRE_MAILLAGE( UNITE=21)

MAYA1=DEFI_GROUP( reuse=MAYA1,   MAILLAGE=MAYA1,
  CREA_GROUP_MA=_F(  NOM = 'TOUT1', TOUT = 'OUI'))

#
CHMAT1=AFFE_MATERIAU(  MAILLAGE=MAYA1,
                              AFFE=_F( TOUT = 'OUI',
                                    MATER = MATERIO))

#
POUTRE1=AFFE_MODELE(  MAILLAGE=MAYA1,
                            AFFE=_F( TOUT = 'OUI',
                                  MODELISATION = 'POU_D_T',
                                  PHENOMENE = 'MECANIQUE'))

#
CARA1=AFFE_CARA_ELEM(  MODELE=POUTRE1,
                           POUTRE=_F(
       GROUP_MA = 'TOUT1',

                                   SECTION = 'CERCLE',
                                   CARA = ('R', 'EP',),
                                   VALE = (0.1, 0.01,)))

#
###
###### PARTIE GAUCHE :
###
#
GUIDAGE1=AFFE_CHAR_MECA(    MODELE=POUTRE1,DDL_IMPO=(
                           _F( TOUT = 'OUI',
                                     DY = 0., DZ = 0., DRX = 0., DRY = 0., DRZ = 0.),
                           _F( GROUP_NO = 'BLOC0',  DX = 0.)))

#
CHARGE1=AFFE_CHAR_MECA(    MODELE=POUTRE1,
                           DDL_IMPO=_F( GROUP_NO = 'BLOC1',  DX = 0.))

#
K_ELEM1=CALC_MATR_ELEM(      MODELE=POUTRE1,
                             CARA_ELEM=CARA1,
                            CHAM_MATER=CHMAT1,
                               OPTION='RIGI_MECA',
                               CHARGE=(GUIDAGE1,  CHARGE1,))

#
M_ELEM1=CALC_MATR_ELEM(      MODELE=POUTRE1,
                             CARA_ELEM=CARA1,
                            CHAM_MATER=CHMAT1,
                               OPTION='MASS_MECA',
                               CHARGE=(GUIDAGE1,  CHARGE1,))

#
A_ELEM1=CALC_MATR_ELEM(      MODELE=POUTRE1,
                             RIGI_MECA=K_ELEM1,
                             MASS_MECA=M_ELEM1,
                             CARA_ELEM=CARA1,
                            CHAM_MATER=CHMAT1,
                               OPTION='AMOR_MECA',
                               CHARGE=(GUIDAGE1,  CHARGE1,))

#
NUM1=NUME_DDL(  MATR_RIGI=K_ELEM1)

#
K_ASSE1=ASSE_MATRICE(  MATR_ELEM=K_ELEM1,
                           NUME_DDL=NUM1)

#
M_ASSE1=ASSE_MATRICE(  MATR_ELEM=M_ELEM1,
                           NUME_DDL=NUM1)

#
A_ASSE1=ASSE_MATRICE(  MATR_ELEM=A_ELEM1,
                           NUME_DDL=NUM1)

#
MODES1=MODE_ITER_SIMULT(     MATR_RIGI=K_ASSE1,
                                 MATR_MASS=M_ASSE1,
                             CALC_FREQ=_F( NMAX_FREQ = 04))

#
INTERF1=DEFI_INTERF_DYNA(   NUME_DDL=NUM1,
                             INTERFACE=_F( NOM = 'DROITE',
                                        TYPE = 'CRAIGB',
                             MASQUE = ('DY', 'DZ', 'DRX', 'DRY', 'DRZ',),
                                        GROUP_NO = 'BLOC1'))

#
BAMO1=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = INTERF1,
                                        MODE_MECA = MODES1,
                                        NMAX_MODE = 04))

#
MACRO1=MACR_ELEM_DYNA(  BASE_MODALE=BAMO1,
                              MATR_AMOR=A_ASSE1)

#
###
###### PARTIE DROITE :
###
#
GUIDAGE2=AFFE_CHAR_MECA(    MODELE=POUTRE1,
                           DDL_IMPO=_F( TOUT = 'OUI',
                                     DY = 0., DZ = 0., DRX = 0., DRY = 0., DRZ = 0.))

#
CHARGE2=AFFE_CHAR_MECA(    MODELE=POUTRE1,
                           DDL_IMPO=_F( GROUP_NO = 'BLOC0',  DX = 0.))

#
CHARTRA2=AFFE_CHAR_MECA(        MODELE=POUTRE1,
                           FORCE_NODALE=_F( GROUP_NO = 'BLOC1',  FX = -100.))

#
K_ELEM2=CALC_MATR_ELEM(      MODELE=POUTRE1,
                             CARA_ELEM=CARA1,
                            CHAM_MATER=CHMAT1,
                               OPTION='RIGI_MECA',
                               CHARGE=(GUIDAGE2,  CHARGE2,))

#
M_ELEM2=CALC_MATR_ELEM(      MODELE=POUTRE1,
                             CARA_ELEM=CARA1,
                            CHAM_MATER=CHMAT1,
                               OPTION='MASS_MECA',
                               CHARGE=(GUIDAGE2,  CHARGE2,))

#
A_ELEM2=CALC_MATR_ELEM(      MODELE=POUTRE1,
                             RIGI_MECA=K_ELEM2,
                             MASS_MECA=M_ELEM2,
                             CARA_ELEM=CARA1,
                            CHAM_MATER=CHMAT1,
                               OPTION='AMOR_MECA',
                               CHARGE=(GUIDAGE2,  CHARGE2,))

#
V_ELEM2=CALC_VECT_ELEM( OPTION='CHAR_MECA',
                            CHARGE=CHARTRA2)

#
NUM2=NUME_DDL(  MATR_RIGI=K_ELEM2)

#
K_ASSE2=ASSE_MATRICE(  MATR_ELEM=K_ELEM2,
                           NUME_DDL=NUM2)

#
M_ASSE2=ASSE_MATRICE(  MATR_ELEM=M_ELEM2,
                           NUME_DDL=NUM2)

#
A_ASSE2=ASSE_MATRICE(  MATR_ELEM=A_ELEM2,
                           NUME_DDL=NUM2)

#
V_ASSE2=ASSE_VECTEUR(  VECT_ELEM=V_ELEM2,
                           NUME_DDL=NUM2)

#
MODES2=MODE_ITER_SIMULT(     MATR_RIGI=K_ASSE2,
                                 MATR_MASS=M_ASSE2,
                             CALC_FREQ=_F( NMAX_FREQ = 05))

#
INTERF2=DEFI_INTERF_DYNA(   NUME_DDL=NUM2,
                             INTERFACE=_F( NOM = 'GAUCHE',
                                        TYPE = 'CRAIGB',
                             MASQUE = ('DY', 'DZ', 'DRX', 'DRY', 'DRZ',),
                                        GROUP_NO = 'BLOC0'))

#
BAMO2=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = INTERF2,
                                        MODE_MECA = MODES2,
                                        NMAX_MODE = 05))

#
MACRO2=MACR_ELEM_DYNA(  BASE_MODALE=BAMO2,
                              MATR_AMOR=A_ASSE2)

#
###
###### MODELE GENERALISE :
###
#
MODEGE=DEFI_MODELE_GENE( SOUS_STRUC=(_F( NOM = 'COTE1',
                                         MACR_ELEM_DYNA = MACRO1,
                                         ANGL_NAUT = (0., 0., 0.,),
                                         TRANS=(0.,0.,0.),),
                                     _F( NOM = 'COTE2',
                                         MACR_ELEM_DYNA = MACRO2,
                                         ANGL_NAUT = (0., 0., 0.,),
                                         TRANS=(0.5,0.,0.),),),
                                LIAISON=_F( SOUS_STRUC_1 = 'COTE1',
                                         SOUS_STRUC_2 = 'COTE2',
                                         INTERFACE_1 = 'DROITE',
                                         INTERFACE_2 = 'GAUCHE'))

#
NUMEGE=NUME_DDL_GENE(  MODELE_GENE=MODEGE)

#
K_GENE=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='RIGI_GENE')

#
M_GENE=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='MASS_GENE')

#
A_GENE=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='AMOR_GENE')

#
F_GENE=ASSE_VECT_GENE(    NUME_DDL_GENE=NUMEGE,
                           CHAR_SOUS_STRUC=_F( SOUS_STRUC = 'COTE2',
                                            VECT_ASSE = V_ASSE2))

#
###
###### CALCULS TRANSITOIRES :
###
#
TRANGENE=DYNA_VIBRA(TYPE_CALCUL='TRAN',BASE_CALCUL='GENE',
                                MATR_MASS=M_GENE,
                                MATR_RIGI=K_GENE,
                                MATR_AMOR=A_GENE,
                                SCHEMA_TEMPS=_F(SCHEMA='EULER',),
                                SOLVEUR=_F(METHODE='LDLT',),

                                     EXCIT=_F(VECT_ASSE_GENE = F_GENE,
                                            COEF_MULT = 1.),
                                 INCREMENT=_F(  INST_INIT = 0.,
                                             INST_FIN = 0.0195,
                                             PAS = 1.E-6),
                                 ARCHIVAGE=_F( PAS_ARCH = 5)
                            )

IMPR_GENE(GENE=_F(RESU_GENE=TRANGENE,
                  NOM_CHAM='DEPL',
                  TOUT_CMP_GENE='OUI',
                  INST=0.00975,
                  CRITERE='ABSOLU',
                  PRECISION=1.E-6,),);

#
SQUEL=DEFI_SQUELETTE(  MODELE_GENE=MODEGE,SOUS_STRUC=(
                            _F( NOM = 'COTE1',
                                        TOUT = 'OUI'),
                            _F( NOM = 'COTE2',
                                        TOUT = 'OUI')))

#
TRAN_GLO=REST_SOUS_STRUC(  RESU_GENE=TRANGENE,
                            TOUT_CHAM='OUI',
                            LIST_INST=LIST_R,
                            INTERPOL='LIN',
                            SQUELETTE=SQUEL)

#
TRAN_SS2=REST_SOUS_STRUC(   RESU_GENE=TRANGENE,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R,
                             INTERPOL='LIN',
                           SOUS_STRUC='COTE2')

#
TEST_RESU(RESU=_F(NUME_ORDRE=12,
                  RESULTAT=TRAN_GLO,
                  NOM_CHAM='DEPL',
                  NOEUD='NO12',
                  NOM_CMP='DX',
                  VALE_REFE=-9.54882E-07,
                  VALE_CALC=-9.5488174916312E-07,
                  PRECISION=1.E-4,
                  REFERENCE='AUTRE_ASTER',
                  CRITERE='RELATIF',
                  ),
          )

#
TEST_RESU(RESU=_F(NUME_ORDRE=12,
                  RESULTAT=TRAN_GLO,
                  NOM_CHAM='VITE',
                  NOEUD='NO12',
                  NOM_CMP='DX',
                  VALE_REFE=1.2219E-3,
                  VALE_CALC=1.2218964215031E-3,
                  PRECISION=1.E-4,
                  REFERENCE='AUTRE_ASTER',
                  CRITERE='RELATIF',
                  ),
          )

#
TEST_RESU(RESU=_F(NUME_ORDRE=12,
                  RESULTAT=TRAN_GLO,
                  NOM_CHAM='ACCE',
                  NOEUD='NO12',
                  NOM_CMP='DX',
                  VALE_REFE=-1.91712,
                  VALE_CALC=-1.9171162907526,
                  PRECISION=1.E-4,
                  REFERENCE='AUTRE_ASTER',
                  CRITERE='RELATIF',
                  ),
          )

#
#####################################################################################
#          VERIFICATION QUE LE CACUL DIRECT ET SSD DONNENT LE MEME RESULTAT         #
#####################################################################################
#
D_direct=CREA_CHAMP(OPERATION='EXTR',
                    INST=1.95E-2,
                    NOM_CHAM = 'DEPL',
                    TYPE_CHAM = 'NOEU_DEPL_R',
                    RESULTAT = RESULT1,);
#
V_direct=CREA_CHAMP(OPERATION='EXTR',
                    INST=1.95E-2,
                    NOM_CHAM = 'VITE',
                    TYPE_CHAM = 'NOEU_DEPL_R',
                    RESULTAT = RESULT1,);
#
A_direct=CREA_CHAMP(OPERATION='EXTR',
                    INST=1.95E-2,
                    NOM_CHAM = 'ACCE',
                    TYPE_CHAM = 'NOEU_DEPL_R',
                    RESULTAT = RESULT1,);
#
TRG_PROJ = PROJ_CHAMP( RESULTAT = TRAN_GLO,
                      MAILLAGE_1 = SQUEL ,
                      MODELE_2 = POUTRE,
                      TOUT_CHAM='OUI',
                      NUME_DDL=NUMERO,
                      INST=1.95E-2,
                      VIS_A_VIS=_F(TOUT_1='OUI',
                                   TOUT_2='OUI',),);
#
D_ssd=CREA_CHAMP(OPERATION='EXTR',
                    INST=1.95E-2,
                    NOM_CHAM = 'DEPL',
                    TYPE_CHAM = 'NOEU_DEPL_R',
                    RESULTAT = TRG_PROJ,);
#
V_ssd=CREA_CHAMP(OPERATION='EXTR',
                    INST=1.95E-2,
                    NOM_CHAM = 'VITE',
                    TYPE_CHAM = 'NOEU_DEPL_R',
                    RESULTAT = TRG_PROJ,);
#
A_ssd=CREA_CHAMP(OPERATION='EXTR',
                    INST=1.95E-2,
                    NOM_CHAM = 'ACCE',
                    TYPE_CHAM = 'NOEU_DEPL_R',
                    RESULTAT = TRG_PROJ,);
#
DIFF_D=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R',MODELE=POUTRE,

                ASSE=(_F(TOUT='OUI', CHAM_GD=D_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DX',NOM_CMP_RESU='DX',),
                      _F(TOUT='OUI', CHAM_GD=D_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DX',NOM_CMP_RESU='DX',),
                      _F(TOUT='OUI', CHAM_GD=D_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DY',NOM_CMP_RESU='DY',),
                      _F(TOUT='OUI', CHAM_GD=D_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DY',NOM_CMP_RESU='DY',),
                      _F(TOUT='OUI', CHAM_GD=D_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DZ',NOM_CMP_RESU='DZ',),
                      _F(TOUT='OUI', CHAM_GD=D_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DZ',NOM_CMP_RESU='DZ',),
                      _F(TOUT='OUI', CHAM_GD=D_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRX',NOM_CMP_RESU='DRX',),
                      _F(TOUT='OUI', CHAM_GD=D_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRX',NOM_CMP_RESU='DRX',),
                      _F(TOUT='OUI', CHAM_GD=D_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRY',NOM_CMP_RESU='DRY',),
                      _F(TOUT='OUI', CHAM_GD=D_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRY',NOM_CMP_RESU='DRY',),
                      _F(TOUT='OUI', CHAM_GD=D_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRZ',NOM_CMP_RESU='DRZ',),
                      _F(TOUT='OUI', CHAM_GD=D_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRZ',NOM_CMP_RESU='DRZ',),
                      ),);
#
DIFF_V=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R',MODELE=POUTRE,

                ASSE=(_F(TOUT='OUI', CHAM_GD=V_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DX',NOM_CMP_RESU='DX',),
                      _F(TOUT='OUI', CHAM_GD=V_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DX',NOM_CMP_RESU='DX',),
                      _F(TOUT='OUI', CHAM_GD=V_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DY',NOM_CMP_RESU='DY',),
                      _F(TOUT='OUI', CHAM_GD=V_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DY',NOM_CMP_RESU='DY',),
                      _F(TOUT='OUI', CHAM_GD=V_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DZ',NOM_CMP_RESU='DZ',),
                      _F(TOUT='OUI', CHAM_GD=V_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DZ',NOM_CMP_RESU='DZ',),
                      _F(TOUT='OUI', CHAM_GD=V_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRX',NOM_CMP_RESU='DRX',),
                      _F(TOUT='OUI', CHAM_GD=V_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRX',NOM_CMP_RESU='DRX',),
                      _F(TOUT='OUI', CHAM_GD=V_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRY',NOM_CMP_RESU='DRY',),
                      _F(TOUT='OUI', CHAM_GD=V_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRY',NOM_CMP_RESU='DRY',),
                      _F(TOUT='OUI', CHAM_GD=V_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRZ',NOM_CMP_RESU='DRZ',),
                      _F(TOUT='OUI', CHAM_GD=V_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRZ',NOM_CMP_RESU='DRZ',),
                      ),);
#
DIFF_A=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R',MODELE=POUTRE,

                ASSE=(_F(TOUT='OUI', CHAM_GD=A_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DX',NOM_CMP_RESU='DX',),
                      _F(TOUT='OUI', CHAM_GD=A_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DX',NOM_CMP_RESU='DX',),
                      _F(TOUT='OUI', CHAM_GD=A_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DY',NOM_CMP_RESU='DY',),
                      _F(TOUT='OUI', CHAM_GD=A_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DY',NOM_CMP_RESU='DY',),
                      _F(TOUT='OUI', CHAM_GD=A_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DZ',NOM_CMP_RESU='DZ',),
                      _F(TOUT='OUI', CHAM_GD=A_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DZ',NOM_CMP_RESU='DZ',),
                      _F(TOUT='OUI', CHAM_GD=A_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRX',NOM_CMP_RESU='DRX',),
                      _F(TOUT='OUI', CHAM_GD=A_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRX',NOM_CMP_RESU='DRX',),
                      _F(TOUT='OUI', CHAM_GD=A_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRY',NOM_CMP_RESU='DRY',),
                      _F(TOUT='OUI', CHAM_GD=A_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRY',NOM_CMP_RESU='DRY',),
                      _F(TOUT='OUI', CHAM_GD=A_direct,CUMUL='OUI',COEF_R=+1.,NOM_CMP='DRZ',NOM_CMP_RESU='DRZ',),
                      _F(TOUT='OUI', CHAM_GD=A_ssd, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DRZ',NOM_CMP_RESU='DRZ',),
                      ),);
#
TEST_RESU(CHAM_NO=_F(CRITERE='ABSOLU',
                     REFERENCE='AUTRE_ASTER',
                     PRECISION=1.0000000000000001E-15,
                     TYPE_TEST='SOMM_ABS',
                     CHAM_GD=DIFF_D,
                     VALE_CALC= 4.501450719064572E-19,
                     VALE_REFE=0.0,),
          )

#
TEST_RESU(CHAM_NO=_F(CRITERE='ABSOLU',
                     REFERENCE='AUTRE_ASTER',
                     PRECISION=9.9999999999999998E-13,
                     TYPE_TEST='SOMM_ABS',
                     CHAM_GD=DIFF_V,
                     VALE_CALC= 3.943378826601E-16,
                     VALE_REFE=0.0,),
          )

#
TEST_RESU(CHAM_NO=_F(CRITERE='ABSOLU',
                     REFERENCE='AUTRE_ASTER',
                     PRECISION=1.0000000000000001E-09,
                     TYPE_TEST='SOMM_ABS',
                     CHAM_GD=DIFF_A,
                     VALE_CALC= 1.733502231E-12,
                     VALE_REFE=0.0,),
          )

FIN()
#
