# person_in_charge: jean-michel.proix at edf.fr
# TITRE TRACTIONS-ROTATIONS MULTIPLES GDEF_LOG EN 3D CINEMATIQUE
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

from Contrib.veri_matr_tang import VERI_MATR_TANG

DEBUT(CODE=_F(NOM = 'SSND107B',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
      IGNORE_ALARM='COMPOR1_70',DEBUG=_F(SDVERI='OUI'))

# L'ALARME COMPOR1_70 EST EMISE CAR ON MET ITER_INTE_MAXI POUR TOUS LES COMPORTEMENTS TESTES, MEME
# CEUX QUI SONT RESOLUS ANALYTIQUEMENT

compor=[]
compor.append(['VMIS_CINE_LINE','GDEF_LOG'])
compor.append(['VMIS_ECMI_LINE','GDEF_LOG'])
compor.append(['VMIS_ECMI_TRAC','GDEF_LOG'])
compor.append(['VMIS_CIN1_CHAB','GDEF_LOG'])
compor.append(['VMIS_CIN2_CHAB','GDEF_LOG'])
compor.append(['VMIS_CIN2_MEMO','GDEF_LOG'])


#definir le materiau

A7=DEFI_FONCTION(NOM_PARA='EPSI',PROL_DROITE='LINEAIRE',
    VALE=( 1.0E-3       ,200.,
          2.E-3        ,202., ))


E=2.E5
ET=2000.
PRAG=2./3.*E*ET/(E-ET)
PRAG2=E*ET/(E-ET)
SY=200.
Q=0.
acier=DEFI_MATERIAU(ELAS=_F(E=E,NU=0.3,),
                    TRACTION=_F(SIGM=A7),
                    ECRO_LINE=_F(D_SIGM_EPSI=ET,SY=SY),
                    PRAGER=_F(C=PRAG),
                    CIN1_CHAB=_F(R_0=SY,
                                 R_I=SY,
                                 C_I=PRAG2,
                                 G_0=0.),
                    CIN2_CHAB=_F(R_0=SY,
                                 R_I=SY,
                                 C1_I=PRAG2/2.,
                                 C2_I=PRAG2/2.,
                                 G1_0=0.,
                                 G2_0=0.,),
                    MEMO_ECRO=_F(
                                  MU =0.,
                                  Q_M=Q,
                                  Q_0=Q,
                                  ETA=0.,
                                 ),
                    );


#lire le maillage
MA=LIRE_MAILLAGE();

mat=AFFE_MATERIAU(MAILLAGE=MA,
                  AFFE=_F(TOUT='OUI',MATER=acier,),);

#affecter les elements
modele=AFFE_MODELE(MAILLAGE=MA,
                   AFFE=_F(TOUT='OUI',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='3D',),);


#-----------------------------donness Traction-Rotation ------------------------------
dureetrac=0.5
dureetracrot=1.
tfintrac=dureetrac
npastrac=5
npasrota=5
nbincr=4
angle_degres=45.0
reaciter=1
iterintemaxi=100
Rota2=[None]*len(compor)*nbincr
Trac2=[None]*len(compor)*nbincr
Ftra2=[None]*len(compor)*nbincr
DZMAX2=200

#conditions limites et charge
DZMAX=500.0
clim_tra=AFFE_CHAR_MECA(MODELE=modele,
                        FACE_IMPO=(_F(GROUP_MA='FINF',
                                     DNOR=0.0,),
                                  _F(GROUP_MA='FSUP',
                                     DNOR=DZMAX),
                                  _F(GROUP_MA='FY0',
                                     DNOR=0.0,),
                                  _F(GROUP_MA='FY1', # DEFORMATION PLANE
                                     DNOR=0.0,),),
                        DDL_IMPO=(_F(GROUP_NO='NAXE',
                                     DX=0.0,
                                     ),),);
F_trac=DEFI_FONCTION(NOM_PARA='INST',VALE=(0.0,0.0,tfintrac,1.0,),PROL_DROITE='LINEAIRE',);
# pour la rotation
ClFixe=AFFE_CHAR_MECA(MODELE=modele,DDL_IMPO=(
                        _F(GROUP_NO='NAXE',DX=0.0,DZ=0.0),
                        _F(GROUP_MA='FY0', DY=0.0,),
                        _F(GROUP_MA='FY1', DY=0.0,),),);

INCLUDE(UNITE=30)

#listes d'instants initiale
L_inst=DEFI_LIST_REEL(DEBUT=0.0,INTERVALLE=_F(JUSQU_A=dureetrac,NOMBRE=npastrac),)
DEFLIST1 = DEFI_LIST_INST(DEFI_LIST=_F(METHODE   ='MANUEL',LIST_INST = L_inst,))

#### boucle sur les comportements
resu=[None]*len(compor)
vmis=[None]*len(compor)
epsg=[None]*len(compor)
icl=-1
for icomp,comp in enumerate(compor) :

    DEBUG(SDVERI='NON')
    resu[icomp]=STAT_NON_LINE(MODELE=modele,
                              CHAM_MATER=mat,
                              EXCIT=_F(CHARGE=clim_tra,FONC_MULT=F_trac,),
                              COMP_INCR=_F(RELATION=comp[0],
                                           DEFORMATION=comp[1],
                                           ITER_INTE_MAXI=iterintemaxi,
                                           TYPE_MATR_TANG='VERIFICATION'),
                   INCREMENT=_F(LIST_INST=DEFLIST1),
                   NEWTON=_F(MATRICE='TANGENTE',REAC_ITER=1,PREDICTION='ELASTIQUE',),
                             );
    DIFF_MAT=VERI_MATR_TANG()
    DETRUIRE(CONCEPT=_F(NOM=(DIFF_MAT)),INFO=1)
    DEBUG(SDVERI='OUI')

    # increments de rotation puis traction
    for incr in range(nbincr):

        tini=dureetrac+ dureetracrot*incr
        tfinrot=dureetracrot+dureetracrot*incr
        tfintrac=dureetrac+dureetracrot+dureetracrot*incr
        # appel a la macro dans INCLUDE
        icl+=1
        Rota2[icl]=CHAR_ROTA(ANGLE_DEGRES=angle_degres,TINI=tini,TFIN=tfinrot,RESU=resu[icomp],MAIL=MA)

        Linst2=DEFI_LIST_REEL(DEBUT=tini,INTERVALLE=_F(JUSQU_A=tfinrot,NOMBRE=npasrota),);
        DEFLIST2 = DEFI_LIST_INST(DEFI_LIST=_F(METHODE   ='MANUEL',LIST_INST = Linst2,))

        resu[icomp]=STAT_NON_LINE(reuse =resu[icomp],
                           MODELE=modele,CHAM_MATER=mat,
                           EXCIT=(_F(CHARGE=Rota2[icl],TYPE_CHARGE='DIDI',),
                                  _F(CHARGE=ClFixe),),
                           COMP_INCR=_F(RELATION=comp[0],DEFORMATION=comp[1],
                                        ITER_INTE_MAXI=iterintemaxi),
                           ETAT_INIT=_F(EVOL_NOLI=resu[icomp],),
                           INCREMENT=_F(LIST_INST=DEFLIST2,),
                           NEWTON=_F(MATRICE='TANGENTE',REAC_ITER=reaciter,PREDICTION='ELASTIQUE',),
                           );
        DETRUIRE(CONCEPT=_F(NOM=(Linst2,DEFLIST2)),INFO=1)
        # nouvelle traction
        Trac2[icl]=AFFE_CHAR_MECA(MODELE=modele,LIAISON_OBLIQUE= (
                                _F(GROUP_NO='FSUP',ANGL_NAUT=(0.,-angle_degres*(incr+1),0.),DZ=DZMAX2),
                                _F(GROUP_NO='NX1Z0',ANGL_NAUT=(0.,-angle_degres*(incr+1),0.),DZ=0.0,),
                                _F(GROUP_NO='NX0Z1',ANGL_NAUT=(0.,-angle_degres*(incr+1),0.),DX=0.0,),),
                                DDL_IMPO=(_F(GROUP_MA='FY0', DY=0.0,),
                                          _F(GROUP_MA='FY1', DY=0.0,),
                                          _F(GROUP_NO='NAXE', DX=0.0,DZ=0.0),
                                          ),)
        Ftra2[icl]=DEFI_FONCTION(NOM_PARA='INST',VALE=(tfinrot,0.,tfintrac,1.,),PROL_DROITE='LINEAIRE',);
        Linst2=DEFI_LIST_REEL(DEBUT=tfinrot,INTERVALLE=_F(JUSQU_A=tfintrac,NOMBRE=npastrac),)
        DEFLIST2 = DEFI_LIST_INST(DEFI_LIST=_F(METHODE   ='MANUEL',LIST_INST = Linst2,))
 
        DEBUG(SDVERI='NON')
        resu[icomp]=STAT_NON_LINE(reuse = resu[icomp],MODELE=modele,CHAM_MATER=mat,
                           EXCIT=(_F(CHARGE=Trac2[icl],TYPE_CHARGE='DIDI',FONC_MULT=Ftra2[icl]),),
                           COMP_INCR=_F(RELATION=comp[0], DEFORMATION=comp[1],
                                        ITER_INTE_MAXI=iterintemaxi,TYPE_MATR_TANG='VERIFICATION'),
                           ETAT_INIT=_F(EVOL_NOLI=resu[icomp]),
                           INCREMENT=_F(LIST_INST=DEFLIST2,INST_FIN=tfintrac),
                           NEWTON=_F(MATRICE='TANGENTE',REAC_ITER=reaciter,PREDICTION='ELASTIQUE',),
                                           );
        DIFF_MAT=VERI_MATR_TANG()
        DETRUIRE(CONCEPT=_F(NOM=(DIFF_MAT)),INFO=1)
        DETRUIRE(CONCEPT=_F(NOM=(Linst2,DEFLIST2)),INFO=1)
        DEBUG(SDVERI='OUI')


    resu[icomp]=CALC_CHAMP(reuse=resu[icomp],RESULTAT=resu[icomp],CRITERES=('SIEQ_ELGA'),DEFORMATION=('EPSG_ELGA'))


    vmis[icomp]=RECU_FONCTION(RESULTAT=resu[icomp],NOM_CHAM='SIEQ_ELGA',
                              NOM_CMP='VMIS',MAILLE='M2',POINT=1,);
    epsg[icomp]=RECU_FONCTION(RESULTAT=resu[icomp],NOM_CHAM='EPSG_ELGA',
                              NOM_CMP='EPZZ',MAILLE='M2',POINT=1,);
    TEST_FONCTION(VALEUR=(_F(VALE_CALC=1126.95682358,
                             VALE_REFE=1126.95,
                             VALE_PARA=1.0,
                             REFERENCE='AUTRE_ASTER',
                             PRECISION=2.E-3,
                             NOM_PARA='INST',
                             FONCTION=vmis[icomp],),
                          _F(VALE_CALC=1412.70676219,
                             VALE_REFE=1412.7070000000001,
                             VALE_PARA=2.0,
                             REFERENCE='AUTRE_ASTER',
                             PRECISION=1.E-3,
                             NOM_PARA='INST',
                             FONCTION=vmis[icomp],),
                          _F(VALE_CALC=1666.15807381,
                             VALE_REFE=1666.1579999999999,
                             VALE_PARA=3.0,
                             REFERENCE='AUTRE_ASTER',
                             PRECISION=1.E-3,
                             NOM_PARA='INST',
                             FONCTION=vmis[icomp],),
                          _F(VALE_CALC=1893.83477424,
                             VALE_REFE=1893.835,
                             VALE_PARA=4.0,
                             REFERENCE='AUTRE_ASTER',
                             PRECISION=1.E-3,
                             NOM_PARA='INST',
                             FONCTION=vmis[icomp],),
                          ),
                  )



IMPR_RESU(RESU=_F(RESULTAT=resu[1],),FORMAT='MED');

DEFI_FICHIER( UNITE=38, FICHIER='./REPE_OUT/courbes_vmis_cinematique.agr')
IMPR_FONCTION(FORMAT='XMGRACE',UNITE=38,
                  COURBE=(
                   _F(FONCTION=vmis[0],LEGENDE=compor[0][0]+'_'+compor[0][1]),
                   _F(FONCTION=vmis[1],LEGENDE=compor[1][0]+'_'+compor[1][1]),
                   _F(FONCTION=vmis[2],LEGENDE=compor[2][0]+'_'+compor[2][1]),
                   _F(FONCTION=vmis[3],LEGENDE=compor[3][0]+'_'+compor[2][1]),
                   _F(FONCTION=vmis[4],LEGENDE=compor[4][0]+'_'+compor[2][1]),
                   ),
                  TITRE='courbes_vmis_cinematique');
DEFI_FICHIER(ACTION='LIBERER',UNITE=38)


DEFI_FICHIER( UNITE=38, FICHIER='./REPE_OUT/courbes_epsg_cinematique.agr')
IMPR_FONCTION(FORMAT='XMGRACE',UNITE=38,
                  COURBE=(
                   _F(FONCTION=epsg[0],LEGENDE=compor[0][0]+'_'+compor[0][1]),
                   _F(FONCTION=epsg[1],LEGENDE=compor[1][0]+'_'+compor[1][1]),
                   _F(FONCTION=epsg[2],LEGENDE=compor[2][0]+'_'+compor[2][1]),
                   ),
                  TITRE='courbes_epsg_cinematique');
DEFI_FICHIER(ACTION='LIBERER',UNITE=38)


FIN()
