# TITRE MODELISATION AXIS_GRAD_VARI + LOI ENDO_SCALAIRE
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NOM='SSNA119B',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'))


# deplacement maximal cible
etaMax = 1.5

########### grandeurs physiques ####
# Sy     contrainte critique
# EE     module Young
# NU     coef de Poisson
# Gf     coef de Griffith (energie disspee par surface)
# DD     demi-largeur de la bande d'endommagement (definit la process zone)
########### parametres recalcules ####
# CC     parametre non local
# gamma  parametre numerique
# kk     energie de dissipation local (terme omega=kk*a)
# pena   coef de penalisation de Lagrange (terme pena/2(a-alpha)**2 ) 


############## L'ECHELLE EST DECIMETRIQUE #############
#EE=37272.e6 ; NU=0.2 ; Sy=3.9e6 ; Gf=0.11e3 ; DD=0.05 
EE=3.e8 ; NU=0.2 ; Sy=3e4 ; Gf=10 ; DD=0.5 

wy   = 0.5*Sy**2/EE
kk   = 0.75*Gf/DD
mm   = kk/wy
pp   = mm/4. - 1        # Compatibilite avec la formulation anterieure avec gamma au lieu de m et p
CC   = 0.375*Gf*DD
pena = 1.E3 * kk

assert pp>1


# LE MAILLAGE EST LU AU FORMAT MED GENERE PAR SALOME
MA_QU=LIRE_MAILLAGE(FORMAT='MED');

# AFFECTATION MODELE
MO=AFFE_MODELE(MAILLAGE=MA_QU,
               AFFE=_F(TOUT='OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='AXIS_GRAD_VARI'));


# DEFINITION DU BETON 
BETON = DEFI_MATERIAU(
  ELAS          = _F(E=EE, NU=NU),
  ENDO_SCALAIRE = _F(M=mm, P=pp, K=kk),
  NON_LOCAL     = _F(C_GRAD_VARI = CC, PENA_LAGR = pena),
  )


# ATTRIBUTION DES PROPRIETES DU BETON AU MATERIAU
CHMAT=AFFE_MATERIAU(MAILLAGE=MA_QU,
                    AFFE=_F(TOUT='OUI',
                            MATER=BETON));

# ETABLISSEMENT DE CONDITIONS LIMITES:
# AXE PEUX SE DEPLACER SELON -Y-
CHARSY=AFFE_CHAR_MECA(MODELE=MO,
                      DDL_IMPO=_F(GROUP_MA='AXE',
                                  DX=0.));

# ETABLISSEMENT DE CONDITION DU AU CHARGEMENT EN DEPLACEMENT
# on s'approche de la limite d'endommagement
EFFORT=AFFE_CHAR_MECA(MODELE=MO,
                      FACE_IMPO=(_F(GROUP_MA='HAUT',
                                    DY=5*Sy/EE),
                                 _F(GROUP_MA='BAS',
                                    DY=-5*Sy/EE)));
                                    
# DEFINITION DE LISTE DE PAS DE TEMPS 
# SERIE LINEAIRE 0,1,2...INS_FIN
# la valeur de pas de temps (dT) sert a definir l'increment d'endommagement en pilotage delta_d= dT/COEF_MULT

INSTANTS=DEFI_LIST_REEL(DEBUT=0,
                        INTERVALLE=_F(JUSQU_A=1000,
                                      NOMBRE=1000));
TEMPS   = DEFI_LIST_INST(DEFI_LIST = _F(LIST_INST = INSTANTS),
                           ECHEC     = _F(ACTION='DECOUPE',
                                          SUBD_METHODE='MANUEL',
                                          SUBD_NIVEAU=10,
                                          SUBD_PAS=4,
                                          )                          
                           ); 

                           
                           
                           
EVOL = STAT_NON_LINE(
                   MODELE=MO,
                   CHAM_MATER=CHMAT,
                   EXCIT=(_F(CHARGE=CHARSY),
                          _F(CHARGE=EFFORT,
                             TYPE_CHARGE='FIXE_PILO')),
                   COMP_INCR=_F(RELATION='ENDO_SCALAIRE',
                                TOUT='OUI'),
                   INCREMENT=_F(LIST_INST=TEMPS),
                   NEWTON=_F(MATRICE='TANGENTE',
                             REAC_ITER=1,
                             ),
                   PILOTAGE=_F(TYPE='PRED_ELAS',
                               COEF_MULT=10.,
                               ETA_PILO_MAX=etaMax,
                               ETA_PILO_R_MAX=2,
                               ETA_PILO_R_MIN=0.,
                               SELECTION='MIXTE',
                               PROJ_BORNES = 'OUI',
                               ),
                   CONVERGENCE = _F(
                                RESI_REFE_RELA = 1.e-3,
                                SIGM_REFE      = Sy,
                                LAGR_REFE      = kk,
                                VARI_REFE      = 1,
                                ITER_GLOB_MAXI = 15,
                                ),                                  
                   SOLVEUR=_F(METHODE='MUMPS',
   
                              SYME = 'OUI',
                              ),
                   ARCHIVAGE=_F(PAS_ARCH=1000), 
                   );


################### POST_TRAITEMENT #############
# CALCUL DE LA REPONSE FORCES DEPLACEMENT GLOBALE
#################################################

# ON CREE UN GROUPE DE NOEUDS A PARTIR D'UN GROUPE DE MAILLES
MA_QU = DEFI_GROUP(reuse = MA_QU,
       MAILLAGE = MA_QU,
       CREA_GROUP_NO = (
          _F(NOM = 'HAUT',    GROUP_MA = 'HAUT'),                       
         )
       )
# FORCES NODALES
EVOL = CALC_CHAMP(reuse = EVOL,
  MODELE = MO,
  CHAM_MATER = CHMAT,
  RESULTAT = EVOL,
  FORCE = 'FORC_NODA',
  )

# FORCE RESULTANTE DANS LA DIRECTION Y:
FPILO = POST_RELEVE_T(
 ACTION = _F(
   INTITULE     = 'F_PILOTE',
   OPERATION    = 'EXTRACTION',   
   GROUP_NO     = 'HAUT',
   NOM_CHAM     = 'FORC_NODA',
   RESULTANTE   =  'DY',
   RESULTAT     =  EVOL,
   TOUT_ORDRE   = 'OUI',
    )) 
    
    
# DEPLACEMENT DU NOEUD P_HAUT
U_HAUT = POST_RELEVE_T(
 ACTION = _F(
   INTITULE     = 'DEPL',
   OPERATION    = 'EXTRACTION',   
   GROUP_NO     = 'P_HAUT',
   NOM_CHAM     = 'DEPL',
   NOM_CMP      =  'DY',
   RESULTAT     =  EVOL,
   TOUT_ORDRE   = 'OUI',
    )) 

#IMPR_TABLE(TABLE=FPILO)
#IMPR_TABLE(TABLE=U_HAUT)


# CREATION DE LA COLONNE AVEC LES DEPLACEMENTS
T_U=CALC_TABLE(TABLE=U_HAUT,
                 ACTION=(
                         _F(OPERATION='EXTR',
                            NOM_PARA=('NUME_ORDRE','DY'),
                            ),
                        ),
                    );
#CHANGEMENT DE NOM DE LA COLONNE POUR LE DEPLACEMENT        
T_U=CALC_TABLE(TABLE=T_U,reuse=T_U,
                    ACTION=_F(OPERATION='RENOMME',
                            NOM_PARA=('DY','DEPL'),
                           ),
                );
                           
# CREATION DE LA COLONNE AVEC LES FORCES                           
T_F=CALC_TABLE(TABLE=FPILO,
                 ACTION=(
                         _F(OPERATION='EXTR',
                            NOM_PARA=('NUME_ORDRE','DY'),
                            ),
                        ),
                    );                 
#CHANGEMENT DE NOM DE COLONNE POUR LES FORCES        
T_F=CALC_TABLE(TABLE=T_F,reuse=T_F,
                    ACTION=_F(OPERATION='RENOMME',
                            NOM_PARA=('DY','FORCE'),
                            ),
               );

# CREATION DE INST_FORCE_DEPL
T_F=CALC_TABLE(reuse =T_F,
          TABLE=T_F,
          ACTION=_F(OPERATION='COMB',
                    TABLE=T_U,
                    NOM_PARA='NUME_ORDRE'));  

# CREATION DU TABLEAU FORCES-DEPL AVEC LES DEPLACEMENTS
T_FU=CALC_TABLE(TABLE=T_F,
                 ACTION=(
                         _F(OPERATION='EXTR',
                            NOM_PARA=('DEPL','FORCE'),
                            ),
                        ),
                    );

 

IMPR_TABLE(TABLE=T_FU,COMM_PARA='#')  

#***********************************************************************
#    TEST COMPARAISON AVEC ENDOMMAGEMENT EN NON_REGRESSION
#*********************************************************************** 
nm_ordre=1
                                         
# TEST DEPL          
TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  GROUP_NO='P_HAUT',
                  RESULTAT=EVOL,
                  NOM_CHAM='DEPL',
                  NOM_CMP='DY',
                  VALE_CALC=7.5000000000000002E-4,
                  TOLE_MACHINE=1.E-4,
                  ),
          )

# TEST SIEF          
TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  REFERENCE='NON_DEFINI',
                  POINT=1,
                  RESULTAT=EVOL,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='SIXX',
                  VALE_CALC=-3.537996896,
                  VALE_REFE=-3.5379999999999998,
                  PRECISION=1.E-2,
                  MAILLE='M160',),
          )

# TEST FORC_NODA          
TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  GROUP_NO='P_HAUT',
                  REFERENCE='NON_DEFINI',
                  RESULTAT=EVOL,
                  NOM_CHAM='FORC_NODA',
                  NOM_CMP='DY',
                  VALE_CALC= 3.43540717E+03,
                  VALE_REFE=3435,
                  PRECISION=1.E-2,),
          )

################## IMPRESSION DANS LE FICHIER (visualisation avec xmgrace)########
## visu xmgrace possible avec  DEBUT(PAR_LOT='NON'); seulement
##################################################################################

## nom du fichier ou on imprime les resultats
#nomfich='./REPE_OUT/FU.dat'
#
#DEFI_FICHIER( UNITE=38, FICHIER=nomfich)
#fichier=open(nomfich,'a')
#fichier.write('# deplacement force \n')
#fichier.close()
#
## fonction de visualisation avec xmgrace
## utilisation de os.system avec la commande de xmgrace
#def use_grace(datafile,title):
#    command= "xmgrace -autoscale xy -pexec"
#    titre='\"'+title+'\"'
#    add_title="title "+ titre
#    add_title=' \''+add_title+'\' '
#    command += add_title+' -nxy '+datafile+'&'
#    print command
#    os.system(command)
#
#
## IMPRESSION DANS LE FICHIER                    
#IMPR_TABLE(UNITE=38,TABLE=T_FU,COMM_PARA='#')  

## visualisation avec xmgrace
#use_grace(nomfich,'force(depl)')
#                
#DEFI_FICHIER(ACTION='LIBERER',UNITE=38)
#                               

#IMPR_RESU(FORMAT='MED',
#          RESU=(_F(RESULTAT=EVOL,
#                   NOM_CHAM='DEPL',
#                   NOM_CMP=('DX','DY'),
#                   TOUT='OUI'),
#                _F(RESULTAT=EVOL,
#                   NOM_CHAM='VARI_ELGA',
#                   NOM_CMP='V3')));

FIN();
