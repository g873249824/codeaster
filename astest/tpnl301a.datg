# -*- coding: iso-8859-1 -*-

### This file is generated by SALOME automatically by dump python functionality

import sys
import salome

salome.salome_init()

import salome_notebook
notebook = salome_notebook.notebook
sys.path.insert( 0, r'/local01/sauvegarde')

import iparameters
ipar = iparameters.IParameters(salome.myStudy.GetCommonParameters("Interface Applicative", 1))

#Set up visual properties:
ipar.setProperty("AP_ACTIVE_VIEW", "VTKViewer_0_0")
ipar.setProperty("AP_WORKSTACK_INFO", "00000001000000000000000201000000010000057e000000040000000200000001000000080000001a00560054004b005600690065007700650072005f0030005f00300000000102000000080000001a004f00430043005600690065007700650072005f0030005f00300000000202")
ipar.setProperty("AP_ACTIVE_MODULE", "Mesh")
ipar.setProperty("AP_SAVEPOINT_NAME", "GUI state: 1")
#Set up lists:
# fill list AP_VIEWERS_LIST
ipar.append("AP_VIEWERS_LIST", "VTKViewer_1")
ipar.append("AP_VIEWERS_LIST", "OCCViewer_2")
# fill list VTKViewer_1
ipar.append("VTKViewer_1", "VTK scene:1 - viewer:1")
ipar.append("VTKViewer_1", """<?xml version="1.0"?>
<ViewState>
    <Position X="30.0818" Y="-7.52281" Z="3.81084"/>
    <FocalPoint X="20.5" Y="0.5" Z="0.5"/>
    <ViewUp X="-0.170929" Y="0.194463" Z="0.965902"/>
    <ViewScale Parallel="0.866025" X="1" Y="1" Z="1"/>
    <DisplayCubeAxis Show="0"/>
    <GraduatedAxis Axis="X">
        <Title isVisible="1" Text="X" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Y">
        <Title isVisible="1" Text="Y" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Z">
        <Title isVisible="1" Text="Z" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <Trihedron isShown="1" Size="105"/>
</ViewState>
""")
# fill list OCCViewer_2
ipar.append("OCCViewer_2", "OCC scene:1 - viewer:1")
ipar.append("OCCViewer_2", "1.069932053791e+01*0.000000000000e+00*0.000000000000e+00*5.773502588272e-01*-5.773502588272e-01*5.773502588272e-01*0.000000000000e+00*0.000000000000e+00*0.000000000000e+00*0.000000000000e+00*2.886751294136e+02*-2.886751294136e+02*2.886751294136e+02*1.000000000000e+00*1.000000000000e+00*1.000000000000e+00*1*100.00")
# fill list AP_MODULES_LIST
ipar.append("AP_MODULES_LIST", "Geometry")
ipar.append("AP_MODULES_LIST", "Mesh")


import tpnl301ab_GEOM
tpnl301ab_GEOM.RebuildData(salome.myStudy)
import tpnl301ab_SMESH
tpnl301ab_SMESH.RebuildData(salome.myStudy)

if salome.sg.hasDesktop():
	salome.sg.updateObjBrowser(1)
	iparameters.getSession().restoreVisualState(1)
# -*- coding: iso-8859-1 -*-
### This file is generated by SALOME automatically by dump python functionality
### of GEOM component

import GEOM
import geompy
import math
import SALOMEDS

def RebuildData(theStudy):
	geompy.init_geom(theStudy)

	global pl21, penta1, Plane_1, p21, Face_3, Extrusion_1, Extrusion_3, Wire_4, Face_1, facequad, Face_2, Wire_3, penta2, p20, Z, dx, tetra, Extrusion_4, Face_4, Extrusion_2, Wire_1, Wire_2
	Wire_1 = geompy.MakeSketcher("Sketcher:F 0 0:TT 0.5 0:TT 0.5 0.5:TT 0 0.5:WW", [0, 0, 0, 0, 0, 1, 1, 0, -0])
	facequad = geompy.MakeFaceWires([Wire_1], 1)
	Z = geompy.MakeVectorDXDYDZ(0, 0, 1)
	geomObj_1 = geompy.MakePipe(facequad, Z)
	Extrusion_1 = geompy.MakePrismVecH(facequad, Z, 0.5)
	Wire_2 = geompy.MakeSketcher("Sketcher:F 0.5 0:TT 1 0:TT 1 0.5:TT 0.5 0.5:WW", [0, 0, 0, 0, 0, 1, 1, 0, -0])
	penta1 = geompy.MakeFaceWires([Wire_2], 1)
	geomObj_2 = geompy.MakePrismVecH(penta1, Z, 1)
	Extrusion_2 = geompy.MakePrismVecH(penta1, Z, 0.5)
	[geomObj_3,geomObj_4,geomObj_5,geomObj_6,Face_1,geomObj_7] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_8,Face_2,geomObj_9,geomObj_10,geomObj_11,geomObj_12] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	Wire_3 = geompy.MakeSketcher("Sketcher:F 0 0.5:TT 0.5 0.5:TT 0.5 1:TT 0 1:WW", [0, 0, 0, 0, 0, 1, 1, 0, -0])
	penta2 = geompy.MakeFaceWires([Wire_3], 1)
	Extrusion_3 = geompy.MakePrismVecH(penta2, Z, 0.5)
	[geomObj_13,geomObj_14,geomObj_15,geomObj_16,geomObj_17,Face_3] = geompy.SubShapeAllSorted(Extrusion_3, geompy.ShapeType["FACE"])
	[Face_4,geomObj_18,geomObj_19,geomObj_20,geomObj_21,geomObj_22] = geompy.SubShapeAllSorted(Extrusion_3, geompy.ShapeType["FACE"])
	Wire_4 = geompy.MakeSketcher("Sketcher:F 0.5 0.5:TT 1 0.5:TT 1 1:TT 0.5 1:WW", [0, 0, 0, 0, 0, 1, 1, 0, -0])
	tetra = geompy.MakeFaceWires([Wire_4], 1)
	Extrusion_4 = geompy.MakePrismVecH(tetra, Z, 0.5)
	p20 = geompy.MakeVertex(21, 0.5, 0.5)
	dx = geompy.MakeVectorDXDYDZ(1, 0, 0)
	pl21 = geompy.MakePlane(p20, dx, 11)
	p21 = geompy.MakeVertex(20, 0.5, 0.5)
	Plane_1 = geompy.MakePlane(p21, dx, 10)
	Face_2.SetColor(SALOMEDS.Color(0,0.666667,1))
	Face_1.SetColor(SALOMEDS.Color(1,0,0.498039))
	geompy.addToStudy( Wire_1, "Wire_1" )
	geompy.addToStudy( facequad, "facequad" )
	geompy.addToStudy( Z, "Z" )
	geompy.addToStudy( Extrusion_1, "Extrusion_1" )
	geompy.addToStudy( Wire_2, "Wire_2" )
	geompy.addToStudy( penta1, "penta1" )
	geompy.addToStudy( Extrusion_2, "Extrusion_2" )
	geompy.addToStudyInFather( Extrusion_2, Face_1, "Face_1" )
	geompy.addToStudyInFather( Extrusion_2, Face_2, "Face_2" )
	geompy.addToStudy( Wire_3, "Wire_3" )
	geompy.addToStudy( penta2, "penta2" )
	geompy.addToStudy( Extrusion_3, "Extrusion_3" )
	geompy.addToStudyInFather( Extrusion_3, Face_3, "Face_3" )
	geompy.addToStudyInFather( Extrusion_3, Face_4, "Face_4" )
	geompy.addToStudy( Wire_4, "Wire_4" )
	geompy.addToStudy( tetra, "tetra" )
	geompy.addToStudy( Extrusion_4, "Extrusion_4" )
	geompy.addToStudy( p20, "p20" )
	geompy.addToStudy( dx, "dx" )
	geompy.addToStudy( pl21, "pl21" )
	geompy.addToStudy( p21, "p21" )
	geompy.addToStudy( Plane_1, "Plane_1" )

	### Store presentation parameters of displayed objects
	import iparameters
	ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "GEOM", 1))

	#Set up entries:
	# set up entry GEOM_18 (pl21) parameters
	ipar.setParameter("GEOM_18", "OCCViewer_0_Visibility", "On")
	ipar.setParameter("GEOM_18", "OCCViewer_0_DisplayMode", "0")
	ipar.setParameter("GEOM_18", "OCCViewer_0_Transparency", "0")
	ipar.setParameter("GEOM_18", "OCCViewer_0_Isos", "1:1")
	# set up entry GEOM_20 (Plane_1) parameters
	ipar.setParameter("GEOM_20", "OCCViewer_0_Visibility", "On")
	ipar.setParameter("GEOM_20", "OCCViewer_0_DisplayMode", "0")
	ipar.setParameter("GEOM_20", "OCCViewer_0_Transparency", "0")
	ipar.setParameter("GEOM_20", "OCCViewer_0_Isos", "1:1")
	# set up entry GEOM_16 (p20) parameters
	ipar.setParameter("GEOM_16", "OCCViewer_0_Visibility", "On")
	ipar.setParameter("GEOM_16", "OCCViewer_0_DisplayMode", "0")
	ipar.setParameter("GEOM_16", "OCCViewer_0_Transparency", "0")
	ipar.setParameter("GEOM_16", "OCCViewer_0_Isos", "1:1")
	# set up entry GEOM_19 (p21) parameters
	ipar.setParameter("GEOM_19", "OCCViewer_0_Visibility", "On")
	ipar.setParameter("GEOM_19", "OCCViewer_0_DisplayMode", "0")
	ipar.setParameter("GEOM_19", "OCCViewer_0_Transparency", "0")
	ipar.setParameter("GEOM_19", "OCCViewer_0_Isos", "1:1")

	pass
# -*- coding: iso-8859-1 -*-
### This file is generated by SALOME automatically by dump python functionality of SMESH component

import salome, SMESH, SALOMEDS
import smesh

## import GEOM dump file ## 
import string, os, sys, re
sys.path.insert( 0, os.path.dirname(__file__) )
exec("from "+re.sub("SMESH$","GEOM",__name__)+" import *")


def RebuildData(theStudy):
	aFilterManager = smesh.CreateFilterManager()
	smesh.SetCurrentStudy(theStudy)
	import StdMeshers
	import NETGENPlugin
	HEXA = smesh.Mesh(Extrusion_1)
	Regular_1D = HEXA.Segment()
	Nb_Segments_1 = Regular_1D.NumberOfSegments(1)
	Nb_Segments_1.SetDistrType( 0 )
	Quadrangle_2D = HEXA.Quadrangle()
	Hexa_3D = smesh.CreateHypothesis('Hexa_3D')
	status = HEXA.AddHypothesis(Hexa_3D)
	isDone = HEXA.Compute()
	penta1_1 = smesh.Mesh(Extrusion_2)
	status = penta1_1.AddHypothesis(Nb_Segments_1)
	Regular_1D_1 = penta1_1.Segment()
	Quadrangle_2D_1 = penta1_1.Quadrangle()
	Prism_3D = penta1_1.Prism()
	Regular_1D_2 = penta1_1.Segment(geom=Face_1)
	status = penta1_1.AddHypothesis(Nb_Segments_1,Face_1)
	MEFISTO_2D = penta1_1.Triangle(geom=Face_1)
	Projection_2D = penta1_1.Projection2D(geom=Face_2)
	Source_Face_1 = Projection_2D.SourceFace(Face_1,None,None,None,None,None)
	isDone = penta1_1.Compute()
	smeshObj_1 = smesh.Mesh(Extrusion_3)
	status = smeshObj_1.AddHypothesis(Nb_Segments_1)
	Regular_1D_3 = smeshObj_1.Segment()
	Quadrangle_2D_2 = smeshObj_1.Quadrangle()
	Prism_3D_1 = smeshObj_1.Prism()
	Regular_1D_4 = smeshObj_1.Segment(geom=Face_3)
	status = smeshObj_1.AddHypothesis(Nb_Segments_1,Face_3)
	MEFISTO_2D_1 = smeshObj_1.Triangle(geom=Face_3)
	Projection_2D_1 = smeshObj_1.Projection2D(geom=Face_4)
	Source_Face_2 = Projection_2D_1.SourceFace(Face_3,None,None,None,None,None)
	isDone = smeshObj_1.Compute()
	isDone = smeshObj_1.InverseDiag( 7, 2 )
	isDone = smeshObj_1.Compute()
	status = smeshObj_1.RemoveHypothesis(Projection_2D,Face_4)
	status = smeshObj_1.RemoveHypothesis(Source_Face_2,Face_4)
	status = smeshObj_1.RemoveHypothesis(MEFISTO_2D,Face_3)
	status = smeshObj_1.RemoveHypothesis(Regular_1D,Face_3)
	status = smeshObj_1.RemoveHypothesis(Nb_Segments_1,Face_3)
	smeshObj_1.GetMesh().RemoveSubMesh( smeshObj_2 )
	smeshObj_1.GetMesh().RemoveSubMesh( smeshObj_3 )
	status = smeshObj_1.RemoveHypothesis(Prism_3D)
	status = smeshObj_1.RemoveHypothesis(Quadrangle_2D)
	status = smeshObj_1.RemoveHypothesis(Regular_1D)
	status = smeshObj_1.RemoveHypothesis(Nb_Segments_1)
	penta2_1 = smesh.Mesh(Extrusion_3)
	status = penta2_1.AddHypothesis(Nb_Segments_1)
	Regular_1D_5 = penta2_1.Segment()
	Quadrangle_2D_3 = penta2_1.Quadrangle()
	Prism_3D_2 = penta2_1.Prism()
	Regular_1D_6 = penta2_1.Segment(geom=Face_4)
	status = penta2_1.AddHypothesis(Nb_Segments_1,Face_4)
	MEFISTO_2D_2 = penta2_1.Triangle(geom=Face_4)
	Projection_2D_2 = penta2_1.Projection2D(geom=Face_3)
	Source_Face_3 = Projection_2D_2.SourceFace(Face_4,None,None,None,None,None)
	isDone = penta2_1.Compute()
	tetra_1 = smesh.Mesh(Extrusion_4)
	status = tetra_1.AddHypothesis(Nb_Segments_1)
	Regular_1D_7 = tetra_1.Segment()
	MEFISTO_2D_3 = tetra_1.Triangle()
	Tetrahedron_Netgen = tetra_1.Tetrahedron(algo=smesh.NETGEN)
	isDone = tetra_1.Compute()
	smeshObj_4 = smesh.Concatenate([HEXA.GetMesh(), penta1_1.GetMesh(), penta2_1.GetMesh(), tetra_1.GetMesh()], 1, 1, 1e-05)
	smeshObj_5 = smeshObj_4.TranslateObjectMakeMesh( smeshObj_4, SMESH.DirStruct( SMESH.PointStruct ( 0, 0, 0.5 )), 0, 'Compound_Mesh_1_translated' )
	isDone = smeshObj_5.Compute()
	smeshObj_6 = smesh.Concatenate([smeshObj_4.GetMesh(), smeshObj_5.GetMesh()], 1, 1, 1e-05)
	smeshObj_7 = smeshObj_6.CreateEmptyGroup( SMESH.NODE, 'A' )
	nbAdd = smeshObj_7.Add( [ 5 ] )
	smeshObj_8 = smeshObj_6.CreateEmptyGroup( SMESH.NODE, 'B' )
	nbAdd = smeshObj_8.Add( [ 31 ] )
	smeshObj_9 = smeshObj_6.CreateEmptyGroup( SMESH.NODE, 'PSUP' )
	nbAdd = smeshObj_9.Add( [ 25 ] )
	smeshObj_10 = smeshObj_6.CreateEmptyGroup( SMESH.FACE, 'FACEINF' )
	nbAdd = smeshObj_10.Add( [ 17, 33, 50, 65, 66 ] )
	smeshObj_11 = smeshObj_6.CreateEmptyGroup( SMESH.NODE, 'NFACEINF' )
	nbAdd = smeshObj_11.Add( [ 11, 9, 17, 13, 1, 7, 5, 3, 15 ] )
	smesh.SetName(smeshObj_6, 'tetra_penta_hexa')
	smeshObj_6.ExportMED( '/home/haelewyn/ther_hydr/tetra_penta_hexa.med', 0, SMESH.MED_V2_2 )
	smeshObj_6.RemoveGroup( smeshObj_10 )
	smeshObj_6.RemoveGroup( smeshObj_11 )
	smeshObj_6.RemoveGroup( smeshObj_9 )
	smeshObj_6.RemoveGroup( smeshObj_8 )
	smeshObj_6.RemoveGroup( smeshObj_7 )
	Nb_Segments_1.SetNumberOfSegments( 4 )
	Nb_Segments_1.SetDistrType( 0 )
	isDone = HEXA.Compute()
	isDone = penta1_1.Compute()
	isDone = penta2_1.Compute()
	isDone = tetra_1.Compute()
	status = penta1_1.RemoveHypothesis(Nb_Segments_1)
	Average_length_1 = Regular_1D_1.LocalLength(0.125)
	Average_length_1.SetPrecision( 1e-07 )
	status = penta1_1.RemoveHypothesis(Nb_Segments_1,Face_1)
	status = penta1_1.AddHypothesis(Average_length_1,Face_1)
	status = penta2_1.RemoveHypothesis(Nb_Segments_1)
	status = penta2_1.RemoveHypothesis(Nb_Segments_1,Face_4)
	status = tetra_1.RemoveHypothesis(Nb_Segments_1)
	isDone = penta1_1.Compute()
	status = penta1_1.RemoveHypothesis(Average_length_1)
	status = penta1_1.AddHypothesis(Nb_Segments_1)
	Propagation_of_1D_Hyp_on_opposite_edges_1 = Regular_1D_1.Propagation()
	status = penta1_1.AddHypothesis(Propagation_of_1D_Hyp_on_opposite_edges_1,Face_1)
	isDone = penta1_1.Compute()
	status = penta1_1.RemoveHypothesis(MEFISTO_2D,Face_1)
	Netgen_2D = penta1_1.Triangle(algo=smesh.NETGEN_2D,geom=Face_1)
	isDone = penta1_1.Compute()
	status = penta2_1.AddHypothesis(Nb_Segments_1)
	status = penta1_1.RemoveHypothesis(Average_length_1,Face_1)
	status = penta1_1.AddHypothesis(Nb_Segments_1,Face_1)
	status = penta2_1.RemoveHypothesis(MEFISTO_2D,Face_4)
	status = penta2_1.RemoveHypothesis(Average_length_1,Face_4)
	status = penta2_1.AddHypothesis(Nb_Segments_1,Face_4)
	Netgen_2D_1 = penta2_1.Triangle(algo=smesh.NETGEN_2D,geom=Face_4)
	isDone = penta2_1.Compute()
	isDone = penta1_1.Compute()
	status = tetra_1.RemoveHypothesis(MEFISTO_2D)
	status = tetra_1.AddHypothesis(Nb_Segments_1)
	status = tetra_1.AddHypothesis(Propagation_of_1D_Hyp_on_opposite_edges_1)
	Netgen_2D_2 = tetra_1.Triangle(algo=smesh.NETGEN_2D)
	isDone = tetra_1.Compute()
	Compound_Mesh_1 = smesh.Concatenate([HEXA.GetMesh(), penta1_1.GetMesh(), penta2_1.GetMesh(), tetra_1.GetMesh()], 1, 1, 1e-05)
	Compound_Mesh_1_translated = Compound_Mesh_1.TranslateObjectMakeMesh( Compound_Mesh_1, SMESH.DirStruct( SMESH.PointStruct ( 0, 0, 0.5 )), 0, 'Compound_Mesh_1_translated' )
	isDone = Compound_Mesh_1_translated.Compute()
	mesh2 = smesh.Concatenate([Compound_Mesh_1_translated.GetMesh(), Compound_Mesh_1.GetMesh()], 1, 1, 1e-05)
	tetra_penta_hexa = mesh2.TranslateObjectMakeMesh( mesh2, SMESH.DirStruct( SMESH.PointStruct ( 20, 0, 0 )), 0, 'tetra_penta_hexa' )
	isDone = tetra_penta_hexa.Compute()
	aFilter0x1aea7b0 = aFilterManager.CreateFilter()
	aCriteria = []
	aCriterion = SMESH.Filter.Criterion(17,32,0,'pl21','',32,32,1e-07,SMESH.NODE,-1)
	aBelongToPlane0x1a6dd90 = aFilterManager.CreateBelongToPlane()
	aBelongToPlane0x1a6dd90.SetTolerance(1e-07)
	aCriteria.append(aCriterion)
	aFilter0x1aea7b0.SetCriteria(aCriteria)
	aFilter0x1aea7b0.SetPredicate(aBelongToPlane0x1a6dd90)
	SEXTERI = tetra_penta_hexa.CreateEmptyGroup( SMESH.NODE, 'SEXTERI' )
	nbAdd = SEXTERI.Add( [ 711, 712, 713, 714, 718, 719, 720, 126, 127, 128, 129, 130, 336, 337, 741, 742, 338, 339, 137, 541, 743, 138, 744, 542, 340, 745, 543, 139, 140, 746, 544, 141, 747, 748, 749, 548, 750, 549, 347, 348, 550, 349, 551, 148, 350, 351, 149, 352, 150, 555, 151, 556, 152, 557, 153, 373, 374, 375, 174, 578, 376, 579, 377, 175, 176, 580, 378, 379, 581, 177, 178, 582, 380, 583, 381, 179, 180, 584, 382, 585, 181, 182, 586 ] )
	aBelongToPlane0x1a6dd90.SetMesh(tetra_penta_hexa.GetMesh())
	aFilter0x1c83880 = aFilterManager.CreateFilter()
	aCriteria = []
	aCriterion = SMESH.Filter.Criterion(17,32,0,'Plane_1','',32,32,1e-07,SMESH.NODE,-1)
	aBelongToPlane0x1b3ebf0 = aFilterManager.CreateBelongToPlane()
	aBelongToPlane0x1b3ebf0.SetTolerance(1e-07)
	aCriteria.append(aCriterion)
	aFilter0x1c83880.SetCriteria(aCriteria)
	aFilter0x1c83880.SetPredicate(aBelongToPlane0x1b3ebf0)
	SINTERI = tetra_penta_hexa.CreateEmptyGroup( SMESH.NODE, 'SINTERI' )
	nbAdd = SINTERI.Add( [ 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 630, 24, 631, 25, 26, 632, 27, 633, 637, 638, 639, 236, 237, 238, 239, 240, 445, 446, 447, 448, 247, 248, 652, 653, 249, 452, 654, 250, 251, 655, 453, 454, 252, 656, 657, 455, 658, 456, 457, 659, 660, 458, 54, 55, 661, 56, 57, 58, 59, 60, 61, 62, 268, 269, 270, 271, 272, 273, 274, 275, 478, 276, 277, 479, 480, 481, 482, 483, 484, 485, 486 ] )
	X205 = tetra_penta_hexa.CreateEmptyGroup( SMESH.NODE, 'X205' )
	nbAdd = X205.Add( [ 1 ] )
	SubMesh_1 = Regular_1D_2.GetSubMesh()
	SubMesh_2 = Projection_2D.GetSubMesh()
	smeshObj_3 = Regular_1D_4.GetSubMesh()
	smeshObj_2 = Projection_2D_1.GetSubMesh()
	SubMesh_3 = Regular_1D_6.GetSubMesh()
	SubMesh_4 = Projection_2D_2.GetSubMesh()

	SEXTERI.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	SINTERI.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	X205.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	## some objects were removed
	aStudyBuilder = theStudy.NewBuilder()
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_1.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_2))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_3))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_4.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_5.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_6.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_7))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_8))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_9))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_10))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_11))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	## set object names
	smesh.SetName(HEXA.GetMesh(), 'HEXA')
	smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
	smesh.SetName(Nb_Segments_1, 'Nb. Segments_1')
	smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
	smesh.SetName(Hexa_3D, 'Hexa_3D')
	smesh.SetName(penta1_1.GetMesh(), 'penta1')
	smesh.SetName(Prism_3D.GetAlgorithm(), 'Prism_3D')
	smesh.SetName(MEFISTO_2D.GetAlgorithm(), 'MEFISTO_2D')
	smesh.SetName(Projection_2D.GetAlgorithm(), 'Projection_2D')
	smesh.SetName(Source_Face_1, 'Source Face_1')
	smesh.SetName(Source_Face_2, 'Source Face_2')
	smesh.SetName(penta2_1.GetMesh(), 'penta2')
	smesh.SetName(Source_Face_3, 'Source Face_3')
	smesh.SetName(tetra_1.GetMesh(), 'tetra')
	smesh.SetName(Tetrahedron_Netgen.GetAlgorithm(), 'Tetrahedron (Netgen)')
	smesh.SetName(Average_length_1, 'Average length_1')
	smesh.SetName(Propagation_of_1D_Hyp_on_opposite_edges_1, 'Propagation of 1D Hyp. on opposite edges_1')
	smesh.SetName(Netgen_2D.GetAlgorithm(), 'Netgen 2D')
	smesh.SetName(Compound_Mesh_1.GetMesh(), 'Compound_Mesh_1')
	smesh.SetName(Compound_Mesh_1_translated.GetMesh(), 'Compound_Mesh_1_translated')
	smesh.SetName(mesh2.GetMesh(), 'mesh2')
	smesh.SetName(tetra_penta_hexa.GetMesh(), 'tetra_penta_hexa')
	smesh.SetName(SEXTERI, 'SEXTERI')
	smesh.SetName(SINTERI, 'SINTERI')
	smesh.SetName(X205, 'X205')
	smesh.SetName(SubMesh_1, 'SubMesh_1')
	smesh.SetName(SubMesh_2, 'SubMesh_2')
	smesh.SetName(SubMesh_3, 'SubMesh_3')
	smesh.SetName(SubMesh_4, 'SubMesh_4')
	if salome.sg.hasDesktop():
		salome.sg.updateObjBrowser(0)

	### Store presentation parameters of displayed objects
	import iparameters
	ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "SMESH", 1))

	#Set up entries:
	# set up entry SMESH_14 (tetra_penta_hexa) parameters
	ipar.setParameter("SMESH_14", "VTKViewer_0_Visibility", "On")
	ipar.setParameter("SMESH_14", "VTKViewer_0_Representation", "0")
	ipar.setParameter("SMESH_14", "VTKViewer_0_IsShrunk", "0")
	ipar.setParameter("SMESH_14", "VTKViewer_0_Entities", "e:1:f:1:v:1")
	ipar.setParameter("SMESH_14", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:0:0:1:edge:0:0.666667:1:node:1:0:0")
	ipar.setParameter("SMESH_14", "VTKViewer_0_Sizes", "line:1:node:3:shrink:0.75")
	ipar.setParameter("SMESH_14", "VTKViewer_0_Opacity", "1")
	ipar.setParameter("SMESH_14", "VTKViewer_0_ClippingPlane", "Off")


	pass
