# TITRE TP DYNAMIQUE TRANSITOIRE LINEAIRE - TRANSITOIRE PHYSIQUE
# ======================================================================
# COPYRIGHT (C) 1991 - 2015  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# person_in_charge: emmanuel.boyere at edf.fr

DEBUT(CODE=_F( NIV_PUB_WEB='INTERNET',),DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU

tfin = 0.5;

pa = 0.002;

fc = 15.0;

om = ((2.0 * pi) * fc);

E = 200.0E9;

rho = 8000.0;

nu = 0.3;


LISTR=DEFI_LIST_REEL(DEBUT=0.,
                     INTERVALLE=_F(JUSQU_A=tfin,
                                   PAS=(1.0 * pa),),);

MAIL=LIRE_MAILLAGE(UNITE=20,
                   FORMAT='MED',);

MODELE=AFFE_MODELE(MAILLAGE=MAIL,
                   AFFE=_F(GROUP_MA='VOL',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='3D',),);

MAT=DEFI_MATERIAU(ELAS=_F(E=E,
                          NU=nu,
                          RHO=rho,),)

CHMAT=AFFE_MATERIAU(MAILLAGE=MAIL,
                    AFFE=_F(GROUP_MA='VOL',
                            MATER=MAT,),);

TAMAS=POST_ELEM(MASS_INER=_F(TOUT='OUI',),
                MODELE=MODELE,
                CHAM_MATER=CHMAT,);

IMPR_TABLE(TABLE=TAMAS,);

BLOCAGE=AFFE_CHAR_MECA(MODELE=MODELE,
                       DDL_IMPO=_F(GROUP_MA='ENCAS',
                                   LIAISON='ENCASTRE',),);

ASSEMBLAGE(MODELE=MODELE,
           CHAM_MATER=CHMAT,
           CHARGE=BLOCAGE,
           NUME_DDL=CO('NUMEDDL'),
           MATR_ASSE=(_F(MATRICE=CO('RIGIDITE'),
                         OPTION='RIGI_MECA',),
                      _F(MATRICE=CO('MASSE'),
                         OPTION='MASS_MECA',),),);

MODES=CALC_MODES(MATR_RIGI=RIGIDITE,
                 OPTION='BANDE',
                 CALC_FREQ=_F(FREQ=(0,50.0,),
                              ),
                 MATR_MASS=MASSE,
                 )

MODES=NORM_MODE(reuse =MODES,
                MODE=MODES,
                NORME='MASS_GENE',);

MODEE=EXTR_MODE(FILTRE_MODE=_F(MODE=MODES,
                               FREQ_MIN=0.0,
                               FREQ_MAX=100.0,),
                IMPRESSION=_F(CUMUL='OUI',),);

MODEF=EXTR_MODE(FILTRE_MODE=_F(MODE=MODES,
                               FREQ_MIN=0.0,
                               FREQ_MAX=(4.0 * fc),),
                IMPRESSION=_F(CUMUL='OUI',),);

GRAV=AFFE_CHAR_MECA(MODELE=MODELE,
                    PESANTEUR=_F(GRAVITE=300.,
                                 DIRECTION=(-1.,0,1,),),);

PESELEM=CALC_VECT_ELEM(OPTION='CHAR_MECA',
                       CHARGE=GRAV,
                       CHAM_MATER=CHMAT,);

PESA=ASSE_VECTEUR(VECT_ELEM=PESELEM,
                  NUME_DDL=NUMEDDL,);

sinom = FORMULE(VALE='sin(om*INST)',
                NOM_PARA='INST',);


TRANSD=DYNA_VIBRA(TYPE_CALCUL='TRAN', BASE_CALCUL='PHYS',
                  MATR_MASS=MASSE,
                  MATR_RIGI=RIGIDITE,
                  SCHEMA_TEMPS=_F(SCHEMA='NEWMARK',),
                  EXCIT=_F(VECT_ASSE=PESA,
                           FONC_MULT=sinom,),
                  INCREMENT=_F(LIST_INST=LISTR,),);

DEPLPDZd=RECU_FONCTION(RESULTAT=TRANSD,
                       NOM_CHAM='DEPL',
                       NOM_CMP='DZ',
                       GROUP_NO='P',);

DEPLPDXd=RECU_FONCTION(RESULTAT=TRANSD,
                       NOM_CHAM='DEPL',
                       NOM_CMP='DX',
                       GROUP_NO='P',);

IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=29,
              COURBE=( _F(FONCTION=DEPLPDZd, MARQUEUR=0,),),);

IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=30,
              COURBE=( _F(FONCTION=DEPLPDXd, MARQUEUR=0,),),);



TEST_FONCTION(VALEUR=(_F(VALE_CALC=0.14537012,
                         VALE_PARA=0.05,
                         FONCTION=DEPLPDZd,
                         ),
              ))

TEST_FONCTION(VALEUR=(_F(VALE_CALC=0.00017243164,
                         VALE_PARA=0.05,
                         FONCTION=DEPLPDXd,
                         ),
              ))

FIN();
