# TITRE FREQUENCES D'UNE LIGNE D'ARBRE SIMPLIFIEE (AMORTISSEMENT GYROSCOPIQUE)
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

import aster_core
import numpy as NP
import numpy.linalg as LA

DEBUT( CODE=_F(NIV_PUB_WEB='INTERNET'),
       PAR_LOT='NON', DEBUG=_F(SDVERI='OUI'))

MAIL=LIRE_MAILLAGE()

MODELE=AFFE_MODELE(MAILLAGE=MAIL,
                   AFFE=(_F(GROUP_MA='ROTOR',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='POU_D_E',),
                         _F(GROUP_MA=('DISQUES'),
                           PHENOMENE='MECANIQUE',
                           MODELISATION='DIS_TR',),
                         )
                       )

ACIER=DEFI_MATERIAU(ELAS=_F(E=2.06E11,
                            NU=0.0,
                            RHO=7800.0,),);



CHMAT=AFFE_MATERIAU(MAILLAGE=MAIL,
                    AFFE=(_F(GROUP_MA='ROTOR',
                            MATER=ACIER,),))

CARELEM=AFFE_CARA_ELEM(MODELE=MODELE,
                       POUTRE=(_F(GROUP_MA='ROTOR',
                                 SECTION='CERCLE',
                                 CARA='R',
                                 VALE=(.025),),),
                        DISCRET=(
                                   _F(GROUP_MA='DISQUES',
                                     CARA='M_TR_D_N',
                                     VALE=(0.03829,3.000E-6,1.8000E-6,1.8000E-6,0.,0.,0.,0.,0.,0.),),
                                   _F(GROUP_MA='DISQUES',
                                     CARA='K_TR_D_N',
                                     VALE=(0.,0.,0.,0.,0.,0.,), ),
                                   _F(GROUP_MA='DISQUES',
                                     CARA='A_TR_D_N',
                                     VALE=(0.,0.,0.,0.,0.,0.,), )
                        )
                        )



BLOQUAGE=AFFE_CHAR_MECA(MODELE=MODELE,
                               DDL_IMPO=(
                                 _F(GROUP_NO=('PALIER_A','PALIER_B'),
                                     DX=0, DY=0, DZ=0,
                                     ),
                          ))


ASSEMBLAGE(MODELE=MODELE,
                CHAM_MATER=CHMAT,
                CARA_ELEM=CARELEM,
                CHARGE=BLOQUAGE,
                NUME_DDL=CO('NUMEDDL'),
                MATR_ASSE=(_F(MATRICE=CO('RIGIDITE'),
                              OPTION='RIGI_MECA',),
                           _F(MATRICE=CO('MASSE'),
                              OPTION='MASS_MECA',),
                           _F(MATRICE=CO('GYASS'),
                              OPTION='MECA_GYRO',),
                           _F(MATRICE=CO('AMOR'),
                              OPTION='AMOR_MECA',),),);

mas=MASSE.EXTR_MATR()
rig=RIGIDITE.EXTR_MATR()


MODES=CALC_MODES(MATR_RIGI=RIGIDITE,
                 OPTION='BANDE',
                 CALC_FREQ=_F(FREQ=(3.,3000.),
                              ),
                 MATR_MASS=MASSE,
                 )


# COMPARAISON STURM ET APM SUR GEP SYM REEL
# METHODE DE STURM (RESULTATS ATTENDUS 1, 3 AND 7)
# ON PANACHE AUSSI LES SOLVEURS LINEAIRES DIRECTS POUR TESTER LEUR ADEQUATION
# AVEC LES METHODES DE COMPTAGE
f1=120.0
f2=130.0
f3=1200.0
NBMOD01 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,INFO=1,TYPE_MODE='DYNAMIQUE',
                          FREQ=(-1.,120.),
                         COMPTAGE=_F(METHODE='AUTO'),SOLVEUR=_F(METHODE='LDLT'))
NBMOD02 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,INFO=1,TYPE_MODE='DYNAMIQUE',
                         FREQ=(-1.,130.),
                         COMPTAGE=_F(METHODE='AUTO'),SOLVEUR=_F(METHODE='MULT_FRONT'))
NBMOD03 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,INFO=1,TYPE_MODE='DYNAMIQUE',
                         FREQ=(-1.,1200.),
                         COMPTAGE=_F(METHODE='AUTO'),SOLVEUR=_F(METHODE='MUMPS'))
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD01,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=3,
           VALE_REFE_I=3,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD02,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=7,
           VALE_REFE_I=7,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD03,)

# METHODE APM VARIANTE LDLT  (RESULTATS ATTENDUS 1, 3 ET 7)
# (ICI ON RENTRE LES BORNES EN PULSATION)
w1=(2*pi*f1)**2
w2=(2*pi*f2)**2
w3=(2*pi*f3)**2
NBMOD11 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,INFO=1,TYPE_MODE='MODE_COMPLEXE',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=0.0+0.0j,RAYON_CONTOUR=w1,
                         COMPTAGE=_F(METHODE='APM'),SOLVEUR=_F(METHODE='LDLT'))
NBMOD12 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,INFO=1,TYPE_MODE='MODE_COMPLEXE',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=0.0+0.0j,RAYON_CONTOUR=w2,
                         COMPTAGE=_F(METHODE='APM'),SOLVEUR=_F(METHODE='MULT_FRONT'))
NBMOD13 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,INFO=1,TYPE_MODE='MODE_COMPLEXE',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=0.0+0.0j,RAYON_CONTOUR=w3,
                         COMPTAGE=_F(METHODE='APM',),SOLVEUR=_F(METHODE='MUMPS'))

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD11,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=3,
           VALE_REFE_I=3,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD12,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=7,
           VALE_REFE_I=7,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD13,)

IMPR_RESU(MODELE=MODELE,
          FORMAT='GMSH',
          UNITE=37,
          RESU=_F(MAILLAGE=MAIL,
                  RESULTAT=MODES,
                  NOM_CHAM='DEPL',),);

OM=10000.*pi/30.

GYOM=COMB_MATR_ASSE(COMB_R=(_F(MATR_ASSE=GYASS, COEF_R=OM,),
                            _F(MATR_ASSE=AMOR, COEF_R=1.,),))


MODEQ=CALC_MODES(MATR_RIGI=RIGIDITE,
                 VERI_MODE=_F(SEUIL=0.5,
                              ),
                 OPTION='TOUT',
                 MATR_AMOR=GYOM,
                 MATR_MASS=MASSE,
                 SOLVEUR_MODAL=_F(TYPE_QZ='QZ_EQUI',
                                  METHODE='QZ',
                                  ),
                 )


# METHODE APM VARIANTE LDLT  (RESULTATS ATTENDUS 4, 2, 22, 84 ET 0)
# ICI ON RENTRE LES BORNES EN PULSATION
f1=124.*2.*pi
f2=3000.*2.*pi
f3=21300.*2.*pi
NBMOD4 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,MATR_AMOR=GYOM,TYPE_MODE='MODE_COMPLEXE',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=0.0+0.0j,RAYON_CONTOUR=f1,
                         COMPTAGE=_F(METHODE='APM',),SOLVEUR=_F(METHODE='LDLT'))
NBMOD5 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,MATR_AMOR=GYOM,TYPE_MODE='MODE_COMPLEXE',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=f1*(0.0+1.0j),RAYON_CONTOUR=7.0,
                         COMPTAGE=_F(METHODE='APM'),SOLVEUR=_F(METHODE='MULT_FRONT'))
NBMOD6 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,MATR_AMOR=GYOM,TYPE_MODE='MODE_COMPLEXE',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=0.0+0.0j,RAYON_CONTOUR=f2,
                         COMPTAGE=_F(METHODE='APM',),SOLVEUR=_F(METHODE='MUMPS'))
NBMOD7 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,MATR_AMOR=GYOM,TYPE_MODE='MODE_COMPLEXE',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=0.0+0.0j,RAYON_CONTOUR=f3,
                         COMPTAGE=_F(METHODE='APM',NBPOINT_CONTOUR=1000),SOLVEUR=_F(METHODE='MULT_FRONT'))
NBMOD8 = INFO_MODE(MATR_RIGI=RIGIDITE,MATR_MASS=MASSE,MATR_AMOR=GYOM,TYPE_MODE='MODE_COMPLEXE',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=f1*(1.0+1.0j),RAYON_CONTOUR=0.9*f1,
                         COMPTAGE=_F(METHODE='APM',),SOLVEUR=_F(METHODE='MUMPS'))

# NBMOD4G CI-DESSOUS EST IDENTIQUE Ã€ NBMOD4, IL SERT ICI SEULEMENT A TESTER LA COMMANDE INFO_MODE AVEC
# LES NOTATIONS GENERIQUES DES MATRICES ASSOCIEES A TYPE_MODE='GENERAL'
NBMOD4G = INFO_MODE(MATR_A=RIGIDITE,MATR_B=MASSE,MATR_C=GYOM,TYPE_MODE='GENERAL',
                         TYPE_CONTOUR='CERCLE',CENTRE_CONTOUR=0.0+0.0j,RAYON_CONTOUR=f1,
                         COMPTAGE=_F(METHODE='APM',),SOLVEUR=_F(METHODE='LDLT'))

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=4,
           VALE_REFE_I=4,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD4,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=2,
           VALE_REFE_I=2,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD5,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=22,
           VALE_REFE_I=22,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD6,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=84,
           VALE_REFE_I=84,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD7,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=0,
           VALE_REFE_I=0,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD8,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=4,
           VALE_REFE_I=4,
           NOM_PARA='NB_MODE',
           TABLE=NBMOD4G,)


gyro=GYOM.EXTR_MATR()


#-----------------------------------------------------#
#--                                                 --#
#-- Elimination des degres de libertes de Lagranges --#
#--                                                 --#
#--        c.f. doc R4.06.02   - section 2.5        --#
#--                                                 --#
#-----------------------------------------------------#

#-- recuperation des indices des DDL de Lagranges


#-- Par construction, les contraintes lineaires sont
#-- stockees dans la matrice de rigidite. Les lignes
#-- ind_lag1 correspondent aux equations de Lagranges (contraintes)
#-- les lignes ind_nolag correspondent aux equations sur
#-- les DDL physiques

nom_nume='NUMEDDL'
Nume=aster.getvectjev(nom_nume.ljust(8)+'      .NUME.DELG        ' )
ind_lag1=[]
ind_nolag=[]
print "Nume=",Nume

for i1 in range(len(Nume)) :
  if Nume[i1] > -0.5 :
    ind_nolag.append(i1)
  if (Nume[i1] < -0.5) & (Nume[i1] > -1.5):
    ind_lag1.append(i1)

#-- On recupere la matrice des contraintes "rig[ind_lag1][:,ind_nolag]"
#-- et on la complete par des zeros.
#-- On determine le noyau par decomposition QR de la matrice
#-- des contraintes.
#-- Si on ne rempli pas de zeros, le QR est fait "a l'economie"
#-- et la matrice Q n'est pas complete.

nlag1=len(ind_lag1)
nnolag=len(ind_nolag)

Z=NP.zeros((nnolag-nlag1,nnolag))
C=NP.vstack((rig[ind_lag1][:,ind_nolag],Z))

Q,R = NP.linalg.qr(NP.transpose(C))

#-- la base T du noyau des contraintes correspond aux vecteurs de
#-- Q associes aux colonnes de R contenant un terme nul sur la diagonale

dR=[]
for i1 in range(len(R)) :
  dR.append(NP.abs(R[i1,i1]))

mdR=NP.max(dR)
indz=[]
for i1 in range(len(R)) :
  if NP.abs(R[i1,i1]) <= mdR*1.e-16 :
    indz.append(i1)

#-- On projete ensuite les matrices de masse, raideur et gyroscopie
#-- sur les vecteurs de Q formant la base des contraintes.

massP=NP.dot(NP.transpose(Q[:][:,indz]),NP.dot(mas[ind_nolag][:,ind_nolag],Q[:][:,indz]))
raidP=NP.dot(NP.transpose(Q[:][:,indz]),NP.dot(rig[ind_nolag][:,ind_nolag],Q[:][:,indz]))
gyroP=NP.dot(NP.transpose(Q[:][:,indz]),NP.dot(gyro[ind_nolag][:,ind_nolag],Q[:][:,indz]))


#-- On assemble le probleme quadratique generalise pour
#-- la recherche des valeurs propres

sha= massP.shape
nddl=sha[0]
massI=LA.inv(massP)
HPRIME=NP.zeros((nddl*2,nddl*2))
HPRIME[0:nddl,0:nddl]=NP.dot(-massI,gyroP)
HPRIME[0:nddl,nddl:2*nddl]=NP.dot(-massI,raidP)
HPRIME[nddl:2*nddl,0:nddl]=NP.identity(nddl)

aster_core.matfpe(-1)
vprime=LA.eigvals(HPRIME)/2./NP.pi
vpreal=list(vprime.imag)
vpreal.sort()
i=1
j=0
for vp in vpreal:
 if vp>1.e2:
   print "vp %4d : %6.6f" %(i,vp)
   i=i+1
 j=j+1
 dij=j-i
aster_core.matfpe(+1)


FREQROT=CREA_TABLE(
        LISTE=(
               _F(LISTE_I=(1,2,3,4),PARA='NUME_ORDRE'),
               _F(LISTE_R=(vpreal[1+dij],vpreal[2+dij],vpreal[3+dij],vpreal[4+dij]),PARA='FREQ'),
              ))

IMPR_TABLE(TABLE=FREQROT)

TEST_TABLE(
           VALE_CALC=123.91535370831,
           NOM_PARA='FREQ',
           TABLE=FREQROT,
           FILTRE=_F(NOM_PARA='NUME_ORDRE',
                     VALE_I=1,),
           )

TEST_TABLE(
           VALE_CALC=124.54646642508,
           NOM_PARA='FREQ',
           TABLE=FREQROT,
           FILTRE=_F(NOM_PARA='NUME_ORDRE',
                     VALE_I=2,),
           )

TEST_TABLE(
           VALE_CALC=497.033,
           NOM_PARA='FREQ',
           TABLE=FREQROT,
           FILTRE=_F(NOM_PARA='NUME_ORDRE',
                     VALE_I=3,),
           )

TEST_TABLE(
           VALE_CALC=499.575,
           NOM_PARA='FREQ',
           TABLE=FREQROT,
           FILTRE=_F(NOM_PARA='NUME_ORDRE',
                     VALE_I=4,),
           )

# POUR QZ
TEST_RESU(RESU=(_F(NUME_ORDRE=1,
                   PARA='FREQ',
                   RESULTAT=MODEQ,
                   VALE_REFE=123.91535370831,
                   VALE_CALC=123.91535367663,
                   PRECISION=1.E-3,
                   REFERENCE='SOURCE_EXTERNE',
                   CRITERE='RELATIF',
                   ),
                _F(NUME_ORDRE=1,
                   PARA='AMOR_REDUIT',
                   RESULTAT=MODEQ,
                   VALE_CALC=0.0,
                   CRITERE='ABSOLU',
                   ),
                _F(NUME_ORDRE=20,
                   PARA='FREQ',
                   RESULTAT=MODEQ,
                   VALE_REFE=7971.6,
                   VALE_CALC=7971.6000041241005,
                   PRECISION=1.E-3,
                   REFERENCE='NON_DEFINI',
                   CRITERE='RELATIF',
                   ),
                _F(NUME_ORDRE=20,
                   PARA='AMOR_REDUIT',
                   RESULTAT=MODEQ,
                   VALE_CALC=0.0,
                   CRITERE='ABSOLU',
                   ),
                _F(NUME_ORDRE=40,
                   PARA='FREQ',
                   RESULTAT=MODEQ,
                   VALE_REFE=2.1163265E4,
                   VALE_CALC=2.1163265E4,
                   PRECISION=1.E-3,
                   REFERENCE='NON_DEFINI',
                   CRITERE='RELATIF',
                   ),
                _F(NUME_ORDRE=40,
                   PARA='AMOR_REDUIT',
                   RESULTAT=MODEQ,
                   VALE_REFE=0.0,
                   VALE_CALC=0.0,
                   REFERENCE='NON_DEFINI',
                   CRITERE='ABSOLU',
                   ),
                _F(NUME_ORDRE=60,
                   PARA='FREQ',
                   RESULTAT=MODEQ,
                   VALE_REFE=3.7289789E4,
                   VALE_CALC=3.7289789E4,
                   PRECISION=1.E-3,
                   REFERENCE='NON_DEFINI',
                   CRITERE='RELATIF',
                   ),
                _F(NUME_ORDRE=60,
                   PARA='AMOR_REDUIT',
                   RESULTAT=MODEQ,
                   VALE_CALC=0.0,
                   CRITERE='ABSOLU',
                   ),
                _F(NUME_ORDRE=80,
                   PARA='FREQ',
                   RESULTAT=MODEQ,
                   VALE_REFE=7.4712423E4,
                   VALE_CALC=7.4712423094465004E4,
                   PRECISION=1.E-3,
                   REFERENCE='NON_DEFINI',
                   CRITERE='RELATIF',
                   ),
                _F(NUME_ORDRE=80,
                   PARA='AMOR_REDUIT',
                   RESULTAT=MODEQ,
                   VALE_CALC=0.0,
                   CRITERE='ABSOLU',
                   ),
                _F(NUME_ORDRE=100,
                   PARA='FREQ',
                   RESULTAT=MODEQ,
                   VALE_REFE=1.8639955E5,
                   VALE_CALC=1.8639954760764999E5,
                   PRECISION=1.E-3,
                   REFERENCE='NON_DEFINI',
                   CRITERE='RELATIF',
                   ),
                _F(NUME_ORDRE=100,
                   PARA='AMOR_REDUIT',
                   RESULTAT=MODEQ,
                   VALE_CALC=0.0,
                   CRITERE='ABSOLU',
                   ),
                _F(NUME_ORDRE=107,
                   PARA='FREQ',
                   RESULTAT=MODEQ,
                   VALE_REFE=2.0492518E5,
                   VALE_CALC=2.0492518391503001E5,
                   PRECISION=1.E-3,
                   REFERENCE='NON_DEFINI',
                   CRITERE='RELATIF',
                   ),
                _F(NUME_ORDRE=107,
                   PARA='AMOR_REDUIT',
                   RESULTAT=MODEQ,
                   VALE_CALC=0.0,
                   CRITERE='ABSOLU',
                   ),
                ),
          )

FIN()
