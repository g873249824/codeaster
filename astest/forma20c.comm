# person_in_charge: gerald.nicolas at edf.fr
# TITRE Maillage adaptatif mecanique sur une poutre en flexion
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#-------------------------------------------------------------------
#                 CORRIGE TP INDICATEUR-REMAILLAGE N 1 (FORMAT NEW6)
#                          POUTRE EN FLEXION
#          QUESTION 4: RAFFINEMENT-DERAFFINEMENT LIBRE EN TRIA6
#
# RQ PROPRE AU CAS-TEST OFFICIEL: La plupart des appels PYTHON ont
# ete commentarises. Ils n'ont lieu d'etre que pour un fonctionne
# ment en interactif.
#
# INSTRUCTIONS LIEES AU TP EN INTERACTIF:
# EN RUN_ASTER_NEW6 ('run_aster config.txt' ou via l'outil 'meg')
# PARAMETRE D'EXECUTION DE CETTE ETUDE: 64Mo
# MODE D'EMPLOI:
# MEG;'FICHIER/OUVRIR' AVEC TP14_LOCAL.PRET; BOUTON 'GO'
#-------------------------------------------------------------------

#-------------------------------------------------------------------
#                       PRE-TRAITEMENTS PYTHON
#-------------------------------------------------------------------
# IMPORT PYTHON
import numpy as NP

# VALEURS DE REFERENCE (APPROCHEES) APRES 4 REMAILLAGES UNIFORMES TRIA6
ener_ref =  0.102242
flec_ref = -0.0614777

# INITIALISATION DES LISTES PYTHON ET CREATION DES VECTEURS ASSOCIES
energie_vs_raff = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
fleche_vs_raff = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
erenergie_vs_raff = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
erfleche_vs_raff = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
energie_vs_raff_NUM = NP.zeros((len(energie_vs_raff),2))
fleche_vs_raff_NUM  = NP.zeros((len(fleche_vs_raff),2))
erenergie_vs_raff_NUM = NP.zeros((len(energie_vs_raff),2))
erfleche_vs_raff_NUM  = NP.zeros((len(fleche_vs_raff),2))

for i in range(len(energie_vs_raff)) :
    energie_vs_raff_NUM[i][1] = 0.0
    fleche_vs_raff_NUM[i][1]  = 0.0
    erenergie_vs_raff_NUM[i][1] = 0.0
    erfleche_vs_raff_NUM[i][1]  = 0.0
    energie_vs_raff_NUM[i][0] = i
    fleche_vs_raff_NUM[i][0]  = i
    erenergie_vs_raff_NUM[i][0] = i
    erfleche_vs_raff_NUM[i][0]  = i

# NOMBRE DE REMAILLAGES (MAILLAGE INITIAL = MAILLAGE 0)
nb_calc = 4

# INIT. TABLEAU
nb_calc1 = nb_calc + 1
nb_calc2 = nb_calc1 + 1
MA      = [None]*nb_calc1
MO      = [None]*nb_calc1
CHMAT   = [None]*nb_calc1
CLIM    = [None]*nb_calc1
CH      = [None]*nb_calc1
DEPLA   = [None]*nb_calc1
RESV    = [None]*nb_calc1
ENER    = [None]*nb_calc1
FLEC    = [None]*nb_calc1

#-------------------------------------------------------------------
#                       CALCUL ASTER
#-------------------------------------------------------------------
DEBUT(CODE=_F(NOM='FORMA20C',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'),
      PAR_LOT='NON')

# DEFINITION DU MATERIAU
ACIER=DEFI_MATERIAU(ELAS=_F(E=210.E3,
                            NU=0.2,),);

# DEFINITION DES INSTANTS POUR STAT_NON_LINE
L_INST=DEFI_LIST_REEL(DEBUT=0.0,INTERVALLE=_F(JUSQU_A=1.0,
                                NOMBRE=1,),);
F_INST=DEFI_FONCTION(NOM_PARA='INST',
                     VALE=(0.0,0.0,1.,1.),);

# LECTURE ET INFO MAILLAGE
num_calc=0
MA[num_calc]=LIRE_MAILLAGE(FORMAT='MED',INFO=2,);
MA[num_calc]=DEFI_GROUP(reuse =MA[num_calc],
                 MAILLAGE=MA[num_calc],
                 CREA_GROUP_NO=_F(TOUT_GROUP_MA='OUI',),);

# BOUCLE PYTHON INDICATEUR D'ERREUR/REMAILLAGE
for num_calc in range(0,nb_calc1) :

# PREPARATION DU CALCUL SUR LE NOUVEAU MAILLAGE MA[num_calc]
   MO[num_calc]=AFFE_MODELE(MAILLAGE=MA[num_calc],
                  AFFE=(_F(TOUT = 'OUI',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='C_PLAN',),),);
   CHMAT[num_calc]=AFFE_MATERIAU(MAILLAGE=MA[num_calc],
                       AFFE=_F(GROUP_MA='GM14',
                                MATER=ACIER,),);

# CL D'ENCASTREMENT + PRESSION REPARTIE POUR FLEXION
   CLIM[num_calc]=AFFE_CHAR_MECA(
             MODELE=MO[num_calc],
             DDL_IMPO=_F(GROUP_MA='GM13',
                       DX=0.0,
                       DY=0.0),);
   CH[num_calc]=AFFE_CHAR_MECA(MODELE=MO[num_calc],
                 PRES_REP=(_F(GROUP_MA='GM12',
                              PRES=1.E-1,),),);

# CALCUL ELASTIQUE VIA STAT_NON_LINE OU MECA_STATIQUE
#   DEPLA[num_calc]=MECA_STATIQUE(MODELE=MO[num_calc],
#                     CHAM_MATER=CHMAT[num_calc],
#                     EXCIT=(
#                         _F(CHARGE = CLIM[num_calc]),
#                         _F(CHARGE = CH[num_calc]))
#                        )

   RESV[num_calc]=STAT_NON_LINE(MODELE=MO[num_calc],
                       CHAM_MATER=CHMAT[num_calc],
                       EXCIT=(_F(CHARGE=CLIM[num_calc],),
                              _F(CHARGE=CH[num_calc],
                                 FONC_MULT=F_INST,),),
                       COMP_INCR=(_F(RELATION='ELAS',
                                     TOUT='OUI',), ),
                       INCREMENT=_F(LIST_INST=L_INST),);

   DEPLA[num_calc]=EXTR_RESU(RESULTAT=RESV[num_calc],ARCHIVAGE=_F(NUME_ORDRE=1,),);

# POST_TRAITEMENT POUR OBTENIR LES CONTRAINTES AUX NOEUDS ET LES
# DEUX TYPES D'INDICATEURS D'ERREUR EN MECANIQUE (ZZ1 ET RESIDU).
   DEPLA[num_calc]=CALC_CHAMP(reuse=DEPLA[num_calc],RESULTAT=DEPLA[num_calc],NUME_ORDRE=1,CONTRAINTE=('SIGM_ELNO'))


   DEPLA[num_calc]=CALC_ERREUR(reuse=DEPLA[num_calc],
                  RESULTAT=DEPLA[num_calc],
                  TOUT='OUI',
                  NUME_ORDRE=1,
                  OPTION=(
# CALCUL DE L'INDICATEUR ZZ1 PAR ELEM
                       'ERZ1_ELEM',
# CALCUL DE L'INDICATEUR EN RESIDU PAR ELEM ET AUX NOEUDS PAR ELEM
                       'ERME_ELEM',
                       'ERME_ELNO',),);

# IMPRESSION FORMAT CASTEM I
   DEFI_FICHIER(FICHIER='IMPR',UNITE=55)
   IMPR_RESU(MODELE=MO[num_calc], FORMAT='CASTEM', UNITE=55,
            RESU=_F(MAILLAGE=MA[num_calc],
                    RESULTAT=DEPLA[num_calc],
                    NOM_CHAM=('DEPL','SIGM_ELNO',
                              'ERME_ELNO')
                     ),);
   DEFI_FICHIER(ACTION='LIBERER',UNITE=55)

# AFFICHAGE GIBI INTERACTIF DEPL + CONTRAINTE + INDICATEURS EN RESIDU
#   os.system('sed s/numcalc/'+str(num_calc)+'/g /home/boiteau/ASTER/TP_INDIC/TP14/post1.dgibi > post1.dgibi')
#   os.system('/logiciels/aster/outils/gibi2000.x post1.dgibi')

# CALCUL DE L'ENERGIE POTENTIELLE DE DEFORMATION
   ENER[num_calc]=POST_ELEM(
                     RESULTAT=DEPLA[num_calc],
                     ENER_POT=_F(TOUT='OUI',),);

# CALCUL DE LA FLECHE
   FLEC[num_calc] = POST_RELEVE_T(
          ACTION=(_F(INTITULE='FLECHE',
                 GROUP_NO='GM10',
                 RESULTAT=DEPLA[num_calc],

                 NOM_CHAM='DEPL',
                 RESULTANTE=('DY'),
                 OPERATION='EXTRACTION',),

                 ),

                 )

   FLEC[num_calc]=CALC_TABLE(reuse =FLEC[num_calc],
               TABLE=FLEC[num_calc],
               ACTION=(_F(
                          OPERATION = 'FILTRE',
                          NOM_PARA  = 'NUME_ORDRE',
                          CRIT_COMP = 'GT',
                          VALE    = 0,
                         ),),);

# IMPRESSION DES TABLES PRECEDENTES DANS LE .RESU
   IMPR_TABLE(TABLE=ENER[num_calc])
   IMPR_TABLE(TABLE=FLEC[num_calc])

# PASSAGE VARIABLE ASTER --> VARIABLE PYTHON VIA DES TABLES
   energie_vs_raff_NUM[num_calc][1] = ENER[num_calc]['TOTALE',1]
   fleche_vs_raff_NUM[num_calc][1]  = FLEC[num_calc]['DY',1]
   erenergie_vs_raff_NUM[num_calc][1] = abs((energie_vs_raff_NUM[num_calc][1]-ener_ref)/ener_ref)*100
   erfleche_vs_raff_NUM[num_calc][1]  = abs((fleche_vs_raff_NUM[num_calc][1]-flec_ref)/flec_ref)*100

# SPECIAL CAS-TEST OFFICIEL POUR TEST_FONCTION
   if num_calc == 0 :
      erfl0 = abs((fleche_vs_raff_NUM[num_calc][1]-flec_ref)/flec_ref)*100
      eren0 = abs((energie_vs_raff_NUM[num_calc][1]-ener_ref)/ener_ref)*100
   if num_calc == 4 :
      erfl4 = abs((fleche_vs_raff_NUM[num_calc][1]-flec_ref)/flec_ref)*100
      eren4 = abs((energie_vs_raff_NUM[num_calc][1]-ener_ref)/ener_ref)*100

# AFFICHAGES GNUPLOT INTERACTIF (APRES LE PREMIER REMAILLAGE)
   num_calc1 = num_calc + 1
#   if num_calc > 0 :
#     graphe = Gnuplot.Gnuplot()
#     Gnuplot.GnuplotOpts.prefer_inline_data=1
#     graphe('set data style lines')
#     graphe('set grid')
#     graphe.xlabel('Numero iteration de raffinement libre')
#     graphe.ylabel('Fleche ou energie')
#     graphe.plot(Gnuplot.Data(fleche_vs_raff_NUM[:num_calc1],\
#                 title='Convergence de la fleche'),
#                 Gnuplot.Data(energie_vs_raff_NUM[:num_calc1],\
#                 title='Convergence de l energie de deformation'),)
#     raw_input('\n\n\nAppuyer sur une touche pour continuer...\n\n\n')
#     del graphe
#     graphe = Gnuplot.Gnuplot()
#     Gnuplot.GnuplotOpts.prefer_inline_data=1
#     graphe('set data style lines')
#     graphe('set grid')
#     graphe.xlabel('Numero iteration de raffinement libre')
#     graphe.ylabel('Erreur relative en %')
#     graphe.plot(Gnuplot.Data(erenergie_vs_raff_NUM[:num_calc1],\
#                 title='Energie de deformation'),
#            Gnuplot.Data(erfleche_vs_raff_NUM[:num_calc1],title='Fleche'),)
#     raw_input('\n\n\nAppuyer sur une touche pour continuer...\n\n\n')
#     del graphe

# IMPRESSION DANS LE FICHIER MESSAGE DES RESULATS
   print '**************'
   print 'CONVERGENCE DE L ENERGIE = ',energie_vs_raff_NUM[:num_calc1]
   print '**************'
   print 'CONVERGENCE DE LA FLECHE = ',fleche_vs_raff_NUM[:num_calc1]
   print '**************'
   print 'ERREUR EN ENERGIE = ',erenergie_vs_raff_NUM[:num_calc1]
   print '**************'
   print 'ERREUR EN FLECHE = ',erfleche_vs_raff_NUM[:num_calc1]

# POUR NE PAS REMAILLER A LA DERNIERE ITERATION
   if num_calc == nb_calc :
     break

# SUBTILITE MACRO_COMMANDE VIS A VIS DES ENTREES
   MA[num_calc1]=CO('MA_%d' % (num_calc1))

# RAFFINEMENT LIBRE VIA HOMARD
# MAILLAGE DE DEPART: MA[num_calc]
# MAILLAGE D'ARRIVE: MA[num_calc1]
   MACR_ADAP_MAIL(
              ADAPTATION='RAFF_DERA',
              MAILLAGE_N = MA[num_calc],
              MAILLAGE_NP1 = MA[num_calc1],
              RESULTAT_N=DEPLA[num_calc],
              NOM_CHAM='ERME_ELEM',
              NOM_CMP='NUEST',
              CRIT_RAFF_PE=0.2,
              CRIT_DERA_PE=0.2,
              QUALITE='OUI',
              TAILLE='OUI',
              CONNEXITE='OUI')

#-------------------------------------------------------------------
#             TEST_FONCTION SPECIAL CAS-TEST OFFICIEL
# On teste des variables PYTHON (erreur en energie et en fleche)
#-------------------------------------------------------------------

ERREFL0=FORMULE(VALE='erfl0*1.',NOM_PARA='BIDON')
ERREEN0=FORMULE(VALE='eren0*1.',NOM_PARA='BIDON')
ERREFL4=FORMULE(VALE='erfl4*1.',NOM_PARA='BIDON')
ERREEN4=FORMULE(VALE='eren4*1.',NOM_PARA='BIDON')
TEST_FONCTION(VALEUR=(_F(VALE_CALC=0.10692930,
                         CRITERE='RELATIF',
                         VALE_PARA=0.0,
                         NOM_PARA='BIDON',
                         FONCTION=ERREFL0,
                         ),
                      _F(VALE_CALC=0.12563700,
                         CRITERE='RELATIF',
                         VALE_PARA=0.0,
                         NOM_PARA='BIDON',
                         FONCTION=ERREEN0,
                         ),
                      _F(VALE_CALC=0.01124863,
                         CRITERE='RELATIF',
                         VALE_PARA=0.0,
                         NOM_PARA='BIDON',
                         FONCTION=ERREFL4,
                         ),
                      _F(VALE_CALC=0.01319903,
                         TOLE_MACHINE=1.E-3,      # TODO TOLE_MACHINE
                         CRITERE='RELATIF',
                         VALE_PARA=0.0,
                         NOM_PARA='BIDON',
                         FONCTION=ERREEN4,
                         ),
                      ),
              )

#-------------------------------------------------------------------
#                       POST-TRAITEMENTS PYTHON
#-------------------------------------------------------------------

# AFFICHAGES GNUPLOT POSTSCRIPT
#f1 = open("fort.60","w")
#f2 = open("fort.61","w")
#f3 = open("fort.62","w")
#f4 = open("fort.63","w")

#for num_calc in range(0,nb_calc1) :
#  f1.write("%i %f \n" %( num_calc, fleche_vs_raff_NUM[num_calc][1]))
#  f2.write("%i %f \n" %( num_calc, energie_vs_raff_NUM[num_calc][1]))
#  f3.write("%i %f \n" %( num_calc, erfleche_vs_raff_NUM[num_calc][1]))
#  f4.write("%i %f \n" %( num_calc, erenergie_vs_raff_NUM[num_calc][1]))
#f1.close()
#f2.close()
#f3.close()
#f4.close()

FIN();
