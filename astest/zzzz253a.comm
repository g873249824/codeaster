# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'),PAR_LOT='OUI')
#===============================================================================================================
#
# La structure est un barreau de longueur 10.
# Elle est maillee avec des elements 2D (1 dans l'epaisseur) selon l'axe Ox.
# On impose des conditions aux limites telles que l'etat de deformation est uniaxial : EPXX=f(x)
#
# Le maillage est double : BARR1 est maille avec n1 elements ; BARR2 est maille avec n2 elements
# On va comparer 3 calculs :
#   RESU1 : calcul sur BARR1
#   RESU2 : calcul sur BARR2
#   RESU3 : calcul sur BARR1  puis changement de maillage et poursuite du calcul sur BARR2
#
# Le calcul est un calcul elasto-plastique entre les instants 0. et 1.
# Le chargement est un chargement reparti selon Ox : FX=f(x) que l'on applique progressivement (rampe).
# Pour augmenter la difficulte de projection, le barreau est divise en 2 zones : A(x=0,...,5) et B(x=5,...,10)
# sur les 2 zones A et B, les materiaux sont differents (MATA et MATB)
#
# La platification commence aux allentours de t=0.6
# Le changement de maillage pour le calcul RESU3 se fait a l'instant inst1
inst1=0.8
#
# validation : on examine a la fin du transitoire la deformation plastique cumulee pres du milieu du barreau


#===============================================================================================================
from math import *

MA=LIRE_MAILLAGE(FORMAT='MED',);

MO1=AFFE_MODELE(MAILLAGE=MA, AFFE=_F(GROUP_MA='BARR1',  PHENOMENE='MECANIQUE', MODELISATION='D_PLAN',),);
MO2=AFFE_MODELE(MAILLAGE=MA, AFFE=_F(GROUP_MA='BARR2',  PHENOMENE='MECANIQUE', MODELISATION='D_PLAN',),);

MATA=DEFI_MATERIAU(ELAS=_F(E=2.E11, NU=0.3),  ECRO_LINE=_F(D_SIGM_EPSI=5.E10,  SY=1.E6,))
MATB=DEFI_MATERIAU(ELAS=_F(E=6.E11, NU=0.3),  ECRO_LINE=_F(D_SIGM_EPSI=2.E10,  SY=1.2E6,))

CHMAT=AFFE_MATERIAU(MAILLAGE=MA, AFFE=(_F(GROUP_MA=('BARR1A', 'BARR2A'), MATER=MATA),
                                       _F(GROUP_MA=('BARR1B', 'BARR2B'), MATER=MATB),))


BLOQ1=AFFE_CHAR_CINE(MODELE=MO1,  MECA_IMPO=(_F(GROUP_MA='AB',  DX=0.0),_F(GROUP_MA=('BAS1','HAUT1'), DY=0.0)))
BLOQ2=AFFE_CHAR_CINE(MODELE=MO2,  MECA_IMPO=(_F(GROUP_MA='AB',  DX=0.0),_F(GROUP_MA=('BAS2','HAUT2'), DY=0.0)))

# chargement lineique selon x reparti sur la poutre :
def reparti(x) :
    x2=x*2*pi/10.
    return -1.E6*sin(x2)

F1=FORMULE(NOM_PARA=('X'),VALE='reparti(X)')
CHARG1=AFFE_CHAR_MECA_F(MODELE=MO1,  FORCE_INTERNE=_F( GROUP_MA = 'BARR1', FX=F1))
CHARG2=AFFE_CHAR_MECA_F(MODELE=MO2,  FORCE_INTERNE=_F( GROUP_MA = 'BARR2', FX=F1))


# Calcul de la reponse du barreau au chargement :

L_INST=DEFI_LIST_REEL(DEBUT=0.0,  INTERVALLE=_F(JUSQU_A=1.0,  NOMBRE=10,),);

FMULT=DEFI_FONCTION(NOM_PARA='INST',  VALE=(0.0,  0.0,    1.0,  1.))


# 1er calcul (uniquement avec le maillage BARR1)
#-------------------------------------------------
RESU1=STAT_NON_LINE(MODELE=MO1,  CHAM_MATER=CHMAT,
                   EXCIT=(_F(CHARGE=BLOQ1,),_F(CHARGE=CHARG1,  FONC_MULT=FMULT,),),
                   COMPORTEMENT=_F(RELATION='VMIS_ISOT_LINE',),
                   INCREMENT=_F(LIST_INST=L_INST, ),
                   NEWTON=_F(MATRICE='TANGENTE', REAC_ITER=1,),
                   CONVERGENCE=_F(  RESI_GLOB_RELA = 1.E-9),
                   SOLVEUR=_F(METHODE='GCPC',
                              PRE_COND='LDLT_SP',
                              REAC_PRECOND=1,),)

if 0 :  # pour verifier que le calcul sans projection est bien fichu : champs uniaxiaux, pas d'oscillations, ...
    CALC_CHAMP(reuse=RESU1,RESULTAT=RESU1,DEFORMATION=('EPSI_ELGA','EPSP_ELGA'))

    #IMPR_RESU(RESU=_F(RESULTAT=RESU1))
    IMPR_RESU(RESU=_F(RESULTAT=RESU1, INST=(1.,), PRECISION=1.E-2 ))

    vx1, vy1 = qfx(xg1,RESU1,1.,'SIEF_ELGA','BARR1', 'SIXX' )
    IMPR_FONCTION(   FORMAT='XMGRACE', UNITE=53, COURBE= (
                     _F( ABSCISSE=vx1,  ORDONNEE=vy1, LEGENDE='RESU1', STYLE=2, COULEUR=1,FREQ_MARQUEUR=10,)))

    vx1, vy1 = qfx(xg1,RESU1,1.,'VARI_ELGA','BARR1', 'V1' )
    IMPR_FONCTION(   FORMAT='XMGRACE', UNITE=54, COURBE= (
                     _F( ABSCISSE=vx1,  ORDONNEE=vy1, LEGENDE='RESU1', STYLE=2, COULEUR=1,FREQ_MARQUEUR=10,)))
    FIN()


# 2eme calcul (uniquement avec le maillage BARR2)
#-------------------------------------------------
RESU2=STAT_NON_LINE(MODELE=MO2,  CHAM_MATER=CHMAT,
                   EXCIT=(_F(CHARGE=BLOQ2,),_F(CHARGE=CHARG2,  FONC_MULT=FMULT,),),
                   COMPORTEMENT=_F(RELATION='VMIS_ISOT_LINE',),
                   INCREMENT=_F(LIST_INST=L_INST, ),
                   NEWTON=_F(MATRICE='TANGENTE', REAC_ITER=1,),
                   CONVERGENCE=_F(  RESI_GLOB_RELA = 1.E-9),
                   SOLVEUR=_F(METHODE='GCPC',
                              PRE_COND='LDLT_SP',
                              REAC_PRECOND=1,),)

# 3eme calcul (on commence avec le maillage BARR1)
#-------------------------------------------------
RESU3A=STAT_NON_LINE(MODELE=MO1,  CHAM_MATER=CHMAT,
                   EXCIT=(_F(CHARGE=BLOQ1,),_F(CHARGE=CHARG1,  FONC_MULT=FMULT,),),
                   COMPORTEMENT=_F(RELATION='VMIS_ISOT_LINE',),
                   INCREMENT=_F(LIST_INST=L_INST, INST_FIN=inst1 ),
                   NEWTON=_F(MATRICE='TANGENTE', REAC_ITER=1,),
                   CONVERGENCE=_F(  RESI_GLOB_RELA = 1.E-9),
                   SOLVEUR=_F(METHODE='GCPC',
                              PRE_COND='LDLT_SP',
                              REAC_PRECOND=1,),)


# 3eme calcul (on projette le resultat de BARR1 sur BARR2)
#---------------------------------------------------------
RESU3A=CALC_CHAMP(reuse=RESU3A,RESULTAT=RESU3A,INST=inst1,CONTRAINTE=('SIGM_ELNO'),VARI_INTERNE=('VARI_ELNO'))

RESU3B=PROJ_CHAMP(RESULTAT=RESU3A,METHODE='COLLOCATION',MODELE_1=MO1, MODELE_2=MO2, CAS_FIGURE='2D', INST=inst1,
                  NOM_CHAM=('DEPL','SIGM_ELNO','VARI_ELNO'),)
U=CREA_CHAMP(  OPERATION='EXTR', TYPE_CHAM='NOEU_DEPL_R', NOM_CHAM='DEPL', RESULTAT=RESU3B,INST=inst1)
SIGELNO=CREA_CHAMP(  OPERATION='EXTR', TYPE_CHAM='ELNO_SIEF_R', NOM_CHAM='SIGM_ELNO', RESULTAT=RESU3B,INST=inst1)
VARELNO=CREA_CHAMP(  OPERATION='EXTR', TYPE_CHAM='ELNO_VARI_R', NOM_CHAM='VARI_ELNO', RESULTAT=RESU3B,INST=inst1)

#IMPR_RESU(RESU=_F(RESULTAT=RESU3B))


# 3eme calcul (on poursuit avec le maillage BARR2)
#-------------------------------------------------
RESU3=STAT_NON_LINE(MODELE=MO2,  CHAM_MATER=CHMAT,
                   INCREMENT=_F(LIST_INST=L_INST, INST_INIT=inst1 ),
                   ETAT_INIT=_F(DEPL=U, SIGM=SIGELNO, VARI=VARELNO),

                   EXCIT=(_F(CHARGE=BLOQ2,),_F(CHARGE=CHARG2,  FONC_MULT=FMULT,),),
                   COMPORTEMENT=_F(RELATION='VMIS_ISOT_LINE',),
                   NEWTON=_F(MATRICE='TANGENTE', REAC_ITER=1,),
                   CONVERGENCE=_F(  RESI_GLOB_RELA = 1.E-9),
                   SOLVEUR=_F(METHODE='GCPC',
                              PRE_COND='LDLT_SP',
                              REAC_PRECOND=1,),)


# Validation :
#-----------------
CALC_CHAMP(reuse=RESU1,RESULTAT=RESU1,INST=1.0,CONTRAINTE=('SIGM_ELNO'),VARI_INTERNE=('VARI_ELNO'))

CALC_CHAMP(reuse=RESU2,RESULTAT=RESU2,INST=1.0,CONTRAINTE=('SIGM_ELNO'),VARI_INTERNE=('VARI_ELNO'))

CALC_CHAMP(reuse=RESU3,RESULTAT=RESU3,INST=1.0,CONTRAINTE=('SIGM_ELNO'),VARI_INTERNE=('VARI_ELNO'))

CALC_CHAMP(reuse =RESU1,RESULTAT=RESU1,INST=1.0,VARI_INTERNE='VARI_NOEU',CONTRAINTE='SIGM_NOEU')
CALC_CHAMP(reuse =RESU2,RESULTAT=RESU2,INST=1.0,VARI_INTERNE='VARI_NOEU',CONTRAINTE='SIGM_NOEU')
CALC_CHAMP(reuse =RESU3,RESULTAT=RESU3,INST=1.0,VARI_INTERNE='VARI_NOEU',CONTRAINTE='SIGM_NOEU')
#IMPR_RESU(RESU=_F(RESULTAT=RESU2,INST=1.)) ; IMPR_RESU(RESU=_F(RESULTAT=RESU3,INST=1.))

TEST_RESU(RESU=(_F(GROUP_NO='C2',
                   INST=1.0,
                   RESULTAT=RESU2,
                   NOM_CHAM='SIGM_NOEU',
                   NOM_CMP='SIXX',
                   VALE_CALC=3.1907992568410998E6,),
                _F(GROUP_NO='C2',
                   INST=1.0,
                   RESULTAT=RESU2,
                   NOM_CHAM='VARI_NOEU',
                   NOM_CMP='V1',
                   VALE_CALC=2.6584363130215999E-06,),
                _F(GROUP_NO='C2',
                   INST=1.0,
                   REFERENCE='AUTRE_ASTER',
                   RESULTAT=RESU3,
                   NOM_CHAM='SIGM_NOEU',
                   NOM_CMP='SIXX',
                   VALE_CALC= 3.19185117E+06,
                   VALE_REFE=3.1907992568410998E6,
                   PRECISION=1.E-3,),
                _F(GROUP_NO='C2',
                   INST=1.0,
                   REFERENCE='AUTRE_ASTER',
                   RESULTAT=RESU3,
                   NOM_CHAM='VARI_NOEU',
                   NOM_CMP='V1',
                   VALE_CALC= 3.15599684E-06,
                   VALE_REFE=2.6584363130215999E-06,
                   PRECISION=0.2,),
                _F(GROUP_NO='C1',
                   INST=1.0,
                   REFERENCE='AUTRE_ASTER',
                   RESULTAT=RESU1,
                   NOM_CHAM='SIGM_NOEU',
                   NOM_CMP='SIXX',
                   VALE_CALC= 3.20927848E+06,
                   VALE_REFE=3.1907992568410998E6,
                   PRECISION=1.E-2,),
                _F(GROUP_NO='C1',
                   INST=1.0,
                   REFERENCE='AUTRE_ASTER',
                   RESULTAT=RESU1,
                   NOM_CHAM='VARI_NOEU',
                   NOM_CMP='V1',
                   VALE_CALC= 2.69538740E-06,
                   VALE_REFE=2.6584363130215999E-06,
                   PRECISION=0.02,),
                ),
          )

FIN()



#===============================================================================================================
# Post-traitement graphique pour visualiser l'erreur de projection (en mode PAR_LOT='NON') :
# -------------------------------------------------------------------------------------------
if 0 :

    # extraction de la geometrie des points de Gauss pour les 2 "maillages" : xg1 et xg2
    CHXN=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='NOEU_GEOM_R',
                    NOM_CHAM='GEOMETRIE', MAILLAGE=MA, INFO=1)
    CHXG1=CREA_CHAMP(OPERATION='DISC', TYPE_CHAM='ELGA_GEOM_R',
                     MODELE=MO1,   CHAM_GD=CHXN,  INFO=1 )
    xg1=CHXG1.EXTR_COMP("X",['BARR1'],1)
    #print xg1.valeurs[0:20] ; print xg1.maille[0:20] ; print xg1.point[0:20]
    CHXG2=CREA_CHAMP(OPERATION='DISC', TYPE_CHAM='ELGA_GEOM_R',
                     MODELE=MO2,   CHAM_GD=CHXN,  INFO=1 )
    xg2=CHXG2.EXTR_COMP("X",['BARR2'],1)



    # un petit utilitaire pour creer de quoi imprimer une fonction "quantite=f(x)":
    def qfx(xg,RESU1,inst,nomcham,nomgma,nomcmp) :
        # retourne les 2 listes de reels representant la fonction nomcmp=f(x) pour l'instant inst et le champ nomcham

        assert nomcham in ('SIEF_ELGA','VARI_ELGA') , nomcham
        if nomcham== 'SIEF_ELGA' : typcham='ELGA_SIEF_R'
        if nomcham== 'VARI_ELGA' : typcham='ELGA_VARI_R'
        XXX1  = CREA_CHAMP(  TYPE_CHAM = typcham , OPERATION = 'EXTR',  RESULTAT  = RESU1, NOM_CHAM  = nomcham,  INST = inst)
        xcomp=XXX1.EXTR_COMP(nomcmp,[nomgma],1)

        # on relie les valeurs des points de Gauss 1 et 3 (QUA4) ou 1,3,6 (QUA8):
        dico={}
        assert len(xg.valeurs)==len(xcomp.valeurs)
        for k in range(len(xg.valeurs)):
            if xg.point[k] in (1,3,6) : dico[(xg.maille[k],xg.point[k])]= [xg.valeurs[k], None]
        for k in range(len(xcomp.valeurs)):
            if xcomp.point[k] in (1,3,6) : dico[(xcomp.maille[k],xcomp.point[k])][1]= xcomp.valeurs[k]

        # on trie par x croissant et on fabrique les 2 listes de reels : vx, vy
        l1=dico.values()
        l1.sort()
        vx=[]; vy=[]
        for (x,y) in l1 :
            vx.append(x)
            vy.append(y)

        DETRUIRE(CONCEPT=_F(NOM=XXX1))
        return vx,vy



    vx1, vy1 = qfx(xg1,RESU1,1.,'SIEF_ELGA','BARR1', 'SIYY' )
    vx2, vy2 = qfx(xg2,RESU2,1.,'SIEF_ELGA','BARR2', 'SIYY' )
    vx3, vy3 = qfx(xg2,RESU3,1.,'SIEF_ELGA','BARR2', 'SIYY' )
    IMPR_FONCTION(   FORMAT='XMGRACE', UNITE=53, COURBE= (
                     _F( ABSCISSE=vx1,  ORDONNEE=vy1, LEGENDE='RESU1', STYLE=2, COULEUR=1,FREQ_MARQUEUR=20,),
                     _F( ABSCISSE=vx2,  ORDONNEE=vy2, LEGENDE='RESU2', STYLE=3, COULEUR=2,FREQ_MARQUEUR=23,),
                     _F( ABSCISSE=vx3,  ORDONNEE=vy3, LEGENDE='RESU3', STYLE=4, COULEUR=3,FREQ_MARQUEUR=26,)))

    vx1, vy1 = qfx(xg1,RESU1,1.,'VARI_ELGA','BARR1', 'V1' )
    vx2, vy2 = qfx(xg2,RESU2,1.,'VARI_ELGA','BARR2', 'V1' )
    vx3, vy3 = qfx(xg2,RESU3,1.,'VARI_ELGA','BARR2', 'V1' )
    IMPR_FONCTION(   FORMAT='XMGRACE', UNITE=54, COURBE= (
                     _F( ABSCISSE=vx1,  ORDONNEE=vy1, LEGENDE='RESU1', STYLE=2, COULEUR=1,FREQ_MARQUEUR=20,),
                     _F( ABSCISSE=vx2,  ORDONNEE=vy2, LEGENDE='RESU2', STYLE=3, COULEUR=2,FREQ_MARQUEUR=23,),
                     _F( ABSCISSE=vx3,  ORDONNEE=vy3, LEGENDE='RESU3', STYLE=4, COULEUR=3,FREQ_MARQUEUR=26,)))

    FIN()
