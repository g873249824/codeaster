# -*- coding: utf-8 -*-
# TITRE Loi de Norton en C_PLAN et AXIS avec MFront, cf SSNA107A
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU

os.system("mfront --obuild --interface=aster ImplicitNorton.mfront")
os.system("cp src/libAsterBehaviour.so mfront.so")




MA = LIRE_MAILLAGE(FORMAT='MED',);


MAT = DEFI_MATERIAU(
            ELAS=_F( E = 1., NU = 0.3, ALPHA = 0.),
            CIN1_CHAB=_F( R_0 = 0.,
                          R_I = 0.,
                          B   = 0.,
                          C_I = 0.,
                          K   = 0.,
                          W   = 0.,
                          G_0 = 0.,
                          A_I = 0.),
            LEMAITRE=_F( N = 2.,UN_SUR_K = 1.,UN_SUR_M = 0.),
            
                      UMAT=_F( NB_VALE=4,
                               C1 = 1. ,
                               C2 = 0.3 ,
                               C3 = 1., 
                               C4  = 2.,
                               ),
           )
CHMAT = AFFE_MATERIAU (MAILLAGE = MA,
                       AFFE =_F(TOUT='OUI',
                                MATER = MAT,
                                )
                       )


 #DEFORMATION AXIALE IMPOSEE
# ON IMPOSE UN DEPLACEMENT EN DZ SUR LES FACES SUPERIEURES
# ET INFERIEURES DU CYLINDRE.


F_DEPL = DEFI_FONCTION (NOM_PARA = 'INST',
                        PROL_DROITE = 'CONSTANT',
                        PROL_GAUCHE = 'CONSTANT',
                        VALE =( 0.,  0.,
                                2.,  0.25,
                                4.,  0.25,),
                        )
F_MDEPL = DEFI_FONCTION (NOM_PARA = 'INST',
                        PROL_DROITE = 'CONSTANT',
                        PROL_GAUCHE = 'CONSTANT',
                        VALE =( 0.,  0.,
                                2.,  -0.25,
                                4.,  -0.25,),
                        )

L_INST1=DEFI_LIST_REEL(  DEBUT=0.0,
                        INTERVALLE=(
                        _F( PAS = 0.002,        JUSQU_A = 0.1),
                        _F( PAS = 0.004,        JUSQU_A = 0.3),
                        _F( PAS = 0.01,        JUSQU_A = 1.),
                        _F( PAS = 0.02,         JUSQU_A = 4.),
                                     )
                      )



L_INST=DEFI_LIST_REEL(  DEBUT=0.0,
                        INTERVALLE=(
                      #  _F( PAS = 0.002,        JUSQU_A = 0.1),
                        _F( PAS = 0.1,         JUSQU_A = 4.),
                                     )
                      )





# resolution AXIS

MOAX = AFFE_MODELE( MAILLAGE =MA,
                  AFFE=_F(
                       TOUT ='OUI',
                       PHENOMENE = 'MECANIQUE',
                       MODELISATION = 'AXIS',)
                 )

#
CHARAX = AFFE_CHAR_MECA_F (MODELE = MOAX,
                       DDL_IMPO=(
                              _F(GROUP_MA ='DCD',
                                   DY=F_DEPL),
                              _F(GROUP_MA ='DAB',
                                   DY=F_MDEPL),
                      ))



RESUAX = STAT_NON_LINE (MODELE = MOAX,
                      CHAM_MATER = CHMAT,
                      EXCIT =(
                         _F( CHARGE = CHARAX),),
                      COMPORTEMENT=_F(RELATION='MFRONT',
                        LIBRAIRIE='mfront.so',
                        NOM_ROUTINE='asternortonjprog',
                        RESI_INTE_RELA=1e-11,
                        ),
                      INCREMENT =_F(LIST_INST =L_INST,  ),
                      NEWTON    =_F(
                                MATRICE ='TANGENTE',
                                REAC_ITER= 1),
                        )

RESUAX = CALC_CHAMP ( reuse= RESUAX,
                  RESULTAT = RESUAX,
                  CONTRAINTE='SIGM_NOEU',)
                  
# reference SSNA107A

TEST_RESU(RESU=(_F(INST=4.,
                   GROUP_NO='B',
                   REFERENCE='ANALYTIQUE',
                   RESULTAT=RESUAX,
                   NOM_CHAM='DEPL',
                   NOM_CMP='DX',
                   VALE_CALC=-0.210901089195,
                   VALE_REFE=-0.2109,),
                _F(INST=4.,
                   GROUP_NO='B',
                   REFERENCE='ANALYTIQUE',
                   RESULTAT=RESUAX,
                   NOM_CHAM='SIGM_NOEU',
                   NOM_CMP='SIYY',
                   VALE_CALC=0.216171121759,
                   VALE_REFE=0.21615999999999999,
                   PRECISION=2.E-3,),
                ),
          )









# resolution CPLAN

MOCP = AFFE_MODELE( MAILLAGE =MA,
                  AFFE=_F(
                       TOUT ='OUI',
                       PHENOMENE = 'MECANIQUE',
                       MODELISATION = 'C_PLAN',)
                 )

ZERO=DEFI_CONSTANTE(VALE=0.)
#
CHARCP = AFFE_CHAR_MECA_F (MODELE = MOCP,
                       DDL_IMPO=(
                              _F(GROUP_MA ='DDA',
                                   DX=ZERO),
                              _F(GROUP_MA ='DCD',
                                   DY=F_DEPL),
                              _F(GROUP_MA ='DAB',
                                   DY=F_MDEPL),
                      ))



RESUCP = STAT_NON_LINE (MODELE = MOCP,
                      CHAM_MATER = CHMAT,
                      EXCIT =(
                         _F( CHARGE = CHARCP),),
                      COMPORTEMENT=_F(RELATION='MFRONT',
                        LIBRAIRIE='mfront.so',
                        NOM_ROUTINE='asternortonjprog',
                        RESI_INTE_RELA=1e-11,
                        ),
                      INCREMENT =_F(LIST_INST =L_INST,  ),
                      NEWTON    =_F(
                                MATRICE ='TANGENTE',
                                REAC_ITER= 1),
                        )

RESUCP = CALC_CHAMP ( reuse= RESUCP,
                  RESULTAT = RESUCP,
                  CONTRAINTE='SIGM_NOEU',)

TEST_RESU(RESU=( _F(INST=4.,
                   GROUP_NO='B',
                   REFERENCE='ANALYTIQUE',
                   RESULTAT=RESUCP,
                   NOM_CHAM='SIGM_NOEU',
                   NOM_CMP='SIYY',
                   VALE_CALC=0.21617112039,
                   VALE_REFE=0.21615999999999999,
                   PRECISION=2.E-3,),
                ),
          )

FIN()
