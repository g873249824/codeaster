# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2019 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import math

try:
  # Import du module de calcul symbolique Sympy
  import sympy
  sympy_available = True
except ImportError:
  sympy_available = False


# ================================================================================================================================================================================
def NormeAster(RESULTAT, Depl_Ana, P_ana, MAIL, MODELE, GROUP_MA_VOL, GROUP_MA_SUR):
     """ RESULTAT  : SD Resultat contenant la solution calculee
         Depl_Ana  : Solution analytique sous forme d une liste de FORMULEs Aster du deplacement
         P_Ana     : Solution analytique sous forme d une liste de FORMULEs Aster de la pression de contact
         MAIL      : SD Maillage
         MODELE    : SD Modele de la solution calculee
         GROUP_MA  : Entitee sur laquelle on veut calculer la norme

         OUT : {'NormeL2ErreurU':NormeL2ErreurU,'NormeInfSolAna':NormeInfSolAna,'NormeInfErreur':NormeInfErreur}
     """

     # ========================================================================================
     #          Creation de la solution analytique en deplacement
     # ========================================================================================
     CHXN=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='NOEU_GEOM_R',
                     NOM_CHAM='GEOMETRIE', MAILLAGE=MAIL, INFO=1);

     TEMP1=CREA_CHAMP(OPERATION='AFFE',
                      TYPE_CHAM='NOEU_NEUT_F',
                      MAILLAGE=MAIL,
                      AFFE=(_F( GROUP_MA=GROUP_MA_VOL, NOM_CMP = 'X1', VALE_F = Depl_Ana[0]),
                            _F( GROUP_MA=GROUP_MA_VOL, NOM_CMP = 'X2', VALE_F = Depl_Ana[1]),
                           ),);

     TEMP2=CREA_CHAMP(OPERATION='EVAL',
                      TYPE_CHAM='NOEU_NEUT_R',
                      CHAM_F=TEMP1,
                      CHAM_PARA=CHXN);

     Uana=CREA_CHAMP(OPERATION='ASSE',
                     TYPE_CHAM='NOEU_DEPL_R',
                     MAILLAGE=MAIL,
                     ASSE=(_F(GROUP_MA=GROUP_MA_VOL,
                              CHAM_GD = TEMP2,
                              NOM_CMP = 'X1',
                              NOM_CMP_RESU = 'DX',),
                           _F(GROUP_MA=GROUP_MA_VOL,
                              CHAM_GD = TEMP2,
                              NOM_CMP = 'X2',
                              NOM_CMP_RESU = 'DY',),
                           ));

     Ucalc = CREA_CHAMP(OPERATION='EXTR',
                        INST=1.,
                        NOM_CHAM = 'DEPL' , TYPE_CHAM = 'NOEU_DEPL_R',
                        RESULTAT = RESULTAT ,);

     # ========================================================================================
     #          Creation de la solution analytique en pression
     # ========================================================================================

     TEMP1P=CREA_CHAMP(OPERATION='AFFE',
                      TYPE_CHAM='NOEU_NEUT_F',
                      MAILLAGE=MAIL,
                      AFFE=(_F( GROUP_MA=GROUP_MA_SUR, NOM_CMP='X1', VALE_F=P_ana),
                           )
                     );

     TEMP2P=CREA_CHAMP(OPERATION='EVAL',
                      TYPE_CHAM='NOEU_NEUT_R',
                      CHAM_F=TEMP1P,
                      CHAM_PARA=CHXN);

     Pana=CREA_CHAMP(OPERATION='ASSE',
                     TYPE_CHAM='NOEU_DEPL_R',
                     MAILLAGE=MAIL,
                     ASSE=(_F(GROUP_MA=GROUP_MA_SUR,
                              CHAM_GD = TEMP2P,
                              NOM_CMP = 'X1',
                              NOM_CMP_RESU = 'LAGS_C',),)
                     );

     Pcalc = CREA_CHAMP(OPERATION='EXTR',
                        INST=1.,
#                        NOM_CHAM = 'CONT_ELEM' , TYPE_CHAM = 'ELEM_NEUT_R',
                        NOM_CHAM = 'CONT_ELEM' , TYPE_CHAM = 'ELEM_CLAC_R',
                        RESULTAT = RESULTAT ,);


     # ========================================================================================
     #          Creation de la solution analytique en deplacement aux points d'integration
     # ========================================================================================

     CHXG=CREA_CHAMP(OPERATION='DISC', TYPE_CHAM='ELGA_GEOM_R',PROL_ZERO='OUI',
                     CHAM_GD=CHXN, MODELE=MODELE, );


     TEMP3=CREA_CHAMP(OPERATION='AFFE',
                      TYPE_CHAM='ELGA_NEUT_F',
                      MODELE=MODELE,
                      PROL_ZERO='OUI',
                      AFFE=(_F(GROUP_MA=GROUP_MA_VOL,
                               NOM_CMP = 'X1',
                               VALE_F = Depl_Ana[0]),
                            _F(GROUP_MA=GROUP_MA_VOL,
                               NOM_CMP = 'X2',
                               VALE_F = Depl_Ana[1]),
                            ),);

     UanaG=CREA_CHAMP(OPERATION='EVAL',
                      TYPE_CHAM='ELGA_NEUT_R',
                      CHAM_F=TEMP3,
                      CHAM_PARA=CHXG,
                      );

     # ========================================================================================
     #          Creation de la solution analytique en pression
     # ========================================================================================

     TEMP3P=CREA_CHAMP(OPERATION='AFFE',
                      TYPE_CHAM='ELGA_NEUT_F',
                      MODELE=MODELE,
                      PROL_ZERO='OUI',
                      AFFE=(_F(GROUP_MA=GROUP_MA_SUR,
                               NOM_CMP = 'X1',
                               VALE_F = P_ana),
                            ),);

     PanaG=CREA_CHAMP(OPERATION='EVAL',
                      TYPE_CHAM='ELGA_NEUT_R',
                      CHAM_F=TEMP3P,
                      CHAM_PARA=CHXG,
                      );


     # ========================================================================================
     #          Creation de la solution calculee en deplacement aux points d'integration
     # ========================================================================================

     Ucalc1=CREA_CHAMP(OPERATION='ASSE',
                       TYPE_CHAM='NOEU_NEUT_R',
                       MAILLAGE=MAIL,
                       ASSE=(_F(GROUP_MA=GROUP_MA_VOL,
                                CHAM_GD = Ucalc,
                                NOM_CMP = 'DX',
                                NOM_CMP_RESU = 'X1',),
                             _F(GROUP_MA=GROUP_MA_VOL,
                                CHAM_GD = Ucalc,
                                NOM_CMP = 'DY',
                                NOM_CMP_RESU = 'X2',),
                             ),);

     UcalcG=CREA_CHAMP(OPERATION='DISC',
                       TYPE_CHAM='ELGA_NEUT_R',
                       MODELE=MODELE,
                       PROL_ZERO='OUI',
                       CHAM_GD=Ucalc1,
                       );

     # ========================================================================================
     #          Creation de la pression calculee en deplacement aux points d'integration
     # ========================================================================================
     Pcalc1=CREA_CHAMP(OPERATION='ASSE',
                       TYPE_CHAM='CART_NEUT_R',
                       MAILLAGE=MAIL,
                       ASSE=(_F(GROUP_MA=GROUP_MA_SUR,
                                CHAM_GD = Pcalc,
                                NOM_CMP = 'PRES',
                                NOM_CMP_RESU = 'X1',),
                             ),);


     PcalcG=CREA_CHAMP(OPERATION='DISC',
                       TYPE_CHAM='ELGA_NEUT_R',
                       MODELE=MODELE,
                       PROL_ZERO='OUI',
                       CHAM_GD=Pcalc1,
                       );


     # ========================================================================================
     #          Calcul de la norme L2 de l'erreur en deplacement et de la repartition de l'erreur
     # ========================================================================================

     DIFFUG=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='ELGA_DEPL_R',MODELE=MODELE,
                      PROL_ZERO='OUI',
                      ASSE=(_F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=UcalcG,CUMUL='OUI',COEF_R=1., NOM_CMP='X1',NOM_CMP_RESU='DX',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=UanaG, CUMUL='OUI',COEF_R=-1.,NOM_CMP='X1',NOM_CMP_RESU='DX',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=UcalcG,CUMUL='OUI',COEF_R=1., NOM_CMP='X2',NOM_CMP_RESU='DY',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=UanaG, CUMUL='OUI',COEF_R=-1.,NOM_CMP='X2',NOM_CMP_RESU='DY',),
                            ),);

     DIFFUN=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R',MODELE=MODELE,

                      ASSE=(_F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Ucalc,CUMUL='OUI',COEF_R=1., NOM_CMP='DX',NOM_CMP_RESU='DX',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Uana, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DX',NOM_CMP_RESU='DX',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Ucalc,CUMUL='OUI',COEF_R=1., NOM_CMP='DY',NOM_CMP_RESU='DY',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Uana, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DY',NOM_CMP_RESU='DY',),
                            ),);

     tabU=POST_ELEM(NORME=_F(TYPE_NORM='L2',
                            GROUP_MA=GROUP_MA_VOL,
                            CHAM_GD=DIFFUG,
                            MODELE=MODELE,
                            ),)
     NormeL2ErreurU=tabU['VALE_NORM',1]
     IMPR_TABLE(TABLE=tabU)

     # ========================================================================================
     #          Calcul de la norme L2 de l'erreur en pression et de la repartition de l'erreur
     # ========================================================================================

     DIFFPG=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='ELGA_DEPL_R',MODELE=MODELE,
                       PROL_ZERO='OUI',
                       ASSE=(_F(GROUP_MA=GROUP_MA_SUR, CHAM_GD=PcalcG,CUMUL='OUI',COEF_R=1., NOM_CMP='X1',NOM_CMP_RESU='DX',),
                             _F(GROUP_MA=GROUP_MA_SUR, CHAM_GD=PanaG, CUMUL='OUI',COEF_R=-1.,NOM_CMP='X1',NOM_CMP_RESU='DX',),
                             ),);
     '''
     DIFFPN=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R',MODELE=MODELE,

                       ASSE=(_F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Pcalc,CUMUL='OUI',COEF_R=1., NOM_CMP='DX',NOM_CMP_RESU='LAGS_C',),
                             _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Pana, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DX',NOM_CMP_RESU='LAGS_C',),
                             ),);
     '''
     tabP=POST_ELEM(NORME=_F(TYPE_NORM='L2',
                             GROUP_MA=GROUP_MA_SUR,
                             CHAM_GD=DIFFPG,
                             MODELE=MODELE,
                             ),)
     NormeL2ErreurP=tabP['VALE_NORM',1]
     IMPR_TABLE(TABLE=tabP)


     DETRUIRE(CONCEPT=(_F(NOM=CHXN),
                       _F(NOM=TEMP1),
                       _F(NOM=TEMP1P),
                       _F(NOM=TEMP2),
                       _F(NOM=TEMP2P),
                       _F(NOM=TEMP3),
                       _F(NOM=TEMP3P),
                       _F(NOM=CHXG),
                       _F(NOM=UanaG),
                       _F(NOM=PanaG),
                       _F(NOM=Ucalc1),
                       _F(NOM=Pcalc1),
                       _F(NOM=UcalcG),
                       _F(NOM=PcalcG),
                       _F(NOM=DIFFUG),
                       _F(NOM=tabU),
                       _F(NOM=tabP),
                       ),
               INFO=1,
              );

     #return {'NormeL2ErreurU':NormeL2ErreurU,'NormeL2ErreurP':NormeL2ErreurP,'Ucalc':Ucalc,'Uana':Uana,'Pcalc':Pcalc,'Pana':Pana, 'DIFFUN':DIFFUN, 'DIFFPN':DIFFPN}
     return {'NormeL2ErreurU':NormeL2ErreurU,'NormeL2ErreurP':NormeL2ErreurP,'Ucalc':Ucalc,'Uana':Uana,'Pcalc':Pcalc,'Pana':Pana, 'DIFFUN':DIFFUN, 'DIFFPG':DIFFPG }
# ================================================================================================================================================================================







DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',),
      DEBUG=_F(SDVERI='OUI'),
      PAR_LOT='NON',
      IGNORE_ALARM = ( 'SUPERVIS_1','SUPERVIS_25','MODELE1_63'),
      )

#================================================================================================
# Definition des caracteristiques du materiau
#================================================================================================
E=1;
NU=0.;

#================================================================================================
# Calcul de la solution de reference
#================================================================================================

INCLUDE(UNITE=38)

#================================================================================================
# Debut de l'etude de la convergence
#================================================================================================
# Nombre de Test
# nbtest=4
# Nombre de remaillage
Nb_Raffinement=6;
TitreU      ='Erreur ||\qU\sh\N-\2U\N\Q || en norme L\s2\N, maillages en quadrangles'

TitreP      ='Erreur ||\qP\sh\N-\2P\N\Q || en norme L\s2\N, maillages en quadrangles'

Legende     ='Cas QUAD 8'

# Initialisation des listes
MA0                 =[None]*(Nb_Raffinement);
MA                  =[None]*(Nb_Raffinement);
# MALine              =[None]*(Nb_Raffinement);
NormeL2ErreurU      =[None]*(Nb_Raffinement);
NormeL2ErreurP      =[None]*(Nb_Raffinement);

TailleMaille        =[(1./2.**(i+1)) for i in range(Nb_Raffinement)]

MA0[0]=LIRE_MAILLAGE(FORMAT='MED',
                     UNITE=20,);

MA0[0]=MODI_MAILLAGE(reuse=MA0[0],
                    MAILLAGE=MA0[0],
                    ORIE_PEAU_2D=(_F(GROUP_MA='MAITRE'),
                                  _F(GROUP_MA='BAS'),
                              )
                        );
MA[0]=CREA_MAILLAGE(MAILLAGE=MA0[0],
                    DECOUPE_LAC=_F(GROUP_MA_ESCL='BAS',),);

#Definition du materiau cas isotrope
acier=DEFI_MATERIAU(ELAS=_F(E=E, NU=NU,),);

#Definition du transitoire
LINST=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=(
                                _F(JUSQU_A=1., NOMBRE=2,),
                      ),);

RAMPE=DEFI_FONCTION(NOM_PARA='INST',
                     VALE=(0.0, 0.0,
                           1.,  1.0,),
                           PROL_DROITE='LINEAIRE',
                           PROL_GAUCHE='LINEAIRE',);


for Raff in range(0,Nb_Raffinement):


    # ========================================================================================
    #          Preparation de calcul sur le nouveau maillage
    # ========================================================================================


    modl=AFFE_MODELE(MAILLAGE=MA[Raff],
                     AFFE=_F(TOUT='OUI',
                             PHENOMENE='MECANIQUE',
                             MODELISATION='D_PLAN',),
                      );

    chmat=AFFE_MATERIAU(MAILLAGE=MA[Raff],
                        AFFE=_F(TOUT='OUI',
                                MATER=acier,),
                        );

    Dirich=AFFE_CHAR_CINE_F(MODELE=modl,
                            MECA_IMPO=_F(GROUP_MA='HAUT', DX=FUx, DY=FUy,),
                            );

    Neumann=AFFE_CHAR_MECA_F(MODELE=modl,
                             FORCE_CONTOUR=(_F(GROUP_MA='DROITE', FX=FsurfXD, FY=FsurfYD,),
                                            _F(GROUP_MA='GAUCHE', FX=FsurfXG, FY=FsurfYG,),
                                            _F(GROUP_MA='BAS',    FX=FsurfTX, FY=FsurfTY,),
                                            ),);

    ForceInt=AFFE_CHAR_MECA_F(MODELE=modl,
                              FORCE_INTERNE=_F(GROUP_MA='SURFACE', FX=FvolX, FY=FvolY,),
                              );

    Contact=DEFI_CONTACT(MODELE=modl,
                         FORMULATION='CONTINUE',
                         LISSAGE='NON',
                         ALGO_RESO_GEOM ='NEWTON',
                         ALGO_RESO_CONT='NEWTON',
                         ZONE=_F(ALGO_CONT="LAC",
                                 TYPE_JACOBIEN='INITIAL',
                                 GROUP_MA_MAIT=('MAITRE',),
                                 GROUP_MA_ESCL=('BAS',),
                                 CONTACT_INIT='OUI',
                                 ),);

    BlocBase=AFFE_CHAR_CINE(MODELE=modl,
                            MECA_IMPO=_F(GROUP_MA='MAITRE',
                                         DX=0,DY=0),);

    EVOLNOLI=STAT_NON_LINE(MODELE=modl,
                           CHAM_MATER=chmat,
                           COMPORTEMENT=_F(RELATION='ELAS',
                                           DEFORMATION='GROT_GDEP',
                                           TOUT='OUI',),
                            INCREMENT=_F(LIST_INST=LINST,),
                            NEWTON=_F(REAC_ITER=1,),
                            CONVERGENCE=_F(ITER_GLOB_MAXI=100,
                                           RESI_GLOB_MAXI=1.E-12,),
                            CONTACT=Contact,
                            EXCIT=(_F(CHARGE=Neumann, FONC_MULT=RAMPE),
                                   _F(CHARGE=Dirich,  FONC_MULT=RAMPE),
                                   _F(CHARGE=ForceInt,FONC_MULT=RAMPE),
                                   _F(CHARGE=BlocBase,),),
                            SOLVEUR=_F(METHODE='MUMPS',
                                        ),
                            INFO=1,
                           );
    CALC_CHAMP(reuse=EVOLNOLI,
               RESULTAT=EVOLNOLI,
               CONTRAINTE=('SIEF_NOEU',),);


   # ========================================================================================
   #          Calcul des normes d'erreur
   # ========================================================================================

    dicResu=NormeAster(EVOLNOLI, [FUx, FUy], FcontNN, MA[Raff], modl, 'SURFACE','BAS');

    NormeL2ErreurU [Raff]=dicResu['NormeL2ErreurU']
    NormeL2ErreurP [Raff]=dicResu['NormeL2ErreurP']


   # ========================================================================================
   #          Adaptationn de maillage proprement dite
   # ========================================================================================

    if Raff<(Nb_Raffinement-1) :
        MA0[Raff+1]=CO('MA0_%d' % (Raff+1))
        MACR_ADAP_MAIL(ADAPTATION = 'RAFFINEMENT_UNIFORME',
                       GROUP_MA='SURFACE',
                       MAILLAGE_N =MA0[Raff],
                       MAILLAGE_NP1 =MA0[Raff+1],
                       )

        MA[Raff+1]=CREA_MAILLAGE(MAILLAGE=MA0[Raff+1],
                            DECOUPE_LAC=_F(GROUP_MA_ESCL='BAS',),);

     # DESTRUCTION DES CONCEPTS INUTILISES DANS LES PROCHAINES ETAPES DE LA BOUCLE
        DETRUIRE(CONCEPT=(_F(NOM=modl,),
                          _F(NOM=chmat),
                          _F(NOM=BlocBase),
                          _F(NOM=Neumann),
                          _F(NOM=Dirich),
                          _F(NOM=Contact),
                          _F(NOM=ForceInt),
                          _F(NOM=EVOLNOLI),
                          _F(NOM=Uana),
                          _F(NOM=Ucalc),
                          _F(NOM=DIFFUN),
                          _F(NOM=Pana),
                          _F(NOM=Pcalc),
                          _F(NOM=DIFFPG),
                         ),
                  INFO=1,
                    );

#================================================================================================
# Impression de la courbe de convergence
#================================================================================================



PenteL2U=-math.log( NormeL2ErreurU[-1]/NormeL2ErreurU[-2])/math.log(2.)
PenteL2P=-math.log( NormeL2ErreurP[-1]/NormeL2ErreurP[-2])/math.log(2.)

PenteLST=CREA_TABLE( LISTE= (
                            _F(LISTE_R= PenteL2U , PARA = 'PU'),
                            _F(LISTE_R= PenteL2P , PARA = 'PP'), ),
                    )

TEST_TABLE (TABLE = PenteLST,
            NOM_PARA= 'PU',
            REFERENCE='ANALYTIQUE',
            VALE_CALC= 2.67333768953,  # raffiement=6,
            VALE_REFE=2.5,             # taux de convergence
            PRECISION=0.139,           #
            )


TEST_TABLE (TABLE = PenteLST,
            NOM_PARA= 'PP',
            REFERENCE='ANALYTIQUE',
            VALE_CALC=1.0193044686,   # raffiement=6,
            VALE_REFE=1.0,             # taux de convergence
            PRECISION=0.020,
            )

sous_titreU='Ordres de convergence: cas QUAD8= %f '%(PenteL2U)
sous_titreP='Ordres de convergence: cas QUAD8= %f '%(PenteL2P)
Bxmin=min(TailleMaille)*0.7
Bxmax=max(TailleMaille)*1.3
ByminU=min(NormeL2ErreurU)*0.7
BymaxU=max(NormeL2ErreurU)*1.3
ByminP=min(NormeL2ErreurP)*0.7
BymaxP=max(NormeL2ErreurP)*1.3

IMPR_FONCTION(FORMAT='XMGRACE',
              #PILOTE='EPS',
              UNITE=29,
              BORNE_X=(Bxmin,Bxmax),
              BORNE_Y=(ByminU,BymaxU),
              COURBE=(_F(ABSCISSE=TailleMaille,
                         ORDONNEE=NormeL2ErreurU,
                         LEGENDE= Legende,
                     ),
                 ),
                TITRE=TitreU,
                SOUS_TITRE=sous_titreU,
                LEGENDE_X='h',
                LEGENDE_Y='L\s2\N(Erreur)',
                ECHELLE_X='LOG',
                ECHELLE_Y='LOG',
                INFO=2,)

IMPR_FONCTION(FORMAT='XMGRACE',
              #PILOTE='EPS',
              UNITE=33,
              BORNE_X=(Bxmin,Bxmax),
              BORNE_Y=(ByminP,BymaxP),
              COURBE=(_F(ABSCISSE=TailleMaille,
                     ORDONNEE=NormeL2ErreurP,
                     LEGENDE= Legende,
                     ),
                 ),
              TITRE=TitreP,
              SOUS_TITRE=sous_titreP,
              LEGENDE_X='h',
              LEGENDE_Y='L\s2\N(Erreur)',
              ECHELLE_X='LOG',
              ECHELLE_Y='LOG',
              INFO=2,)



# Impression des deplacements
# ----------------------------
IMPR_RESU(FORMAT='MED',
          UNITE=80,
          RESU=(_F(CHAM_GD=dicResu['Ucalc'], NOM_CMP=('DX','DY'),),
                _F(CHAM_GD=dicResu['Uana'],  NOM_CMP=('DX','DY'),),
                _F(CHAM_GD=dicResu['DIFFUN'],NOM_CMP=('DX','DY'),),
                _F(CHAM_GD=dicResu['DIFFPG'],GROUP_MA='BAS',NOM_CMP=('DX'),),
                _F(RESULTAT=EVOLNOLI,
                   NOM_CHAM=('CONT_ELEM','SIEF_NOEU'),),),);

DETRUIRE(CONCEPT=(_F(NOM=modl,),
                  _F(NOM=chmat),
                  _F(NOM=BlocBase),
                  _F(NOM=Neumann),
                  _F(NOM=Dirich),
                  _F(NOM=Contact),
                  _F(NOM=ForceInt),
                  _F(NOM=EVOLNOLI),
                  _F(NOM=Uana),
                  _F(NOM=Ucalc),
                  _F(NOM=DIFFUN),
                  _F(NOM=Pana),
                  _F(NOM=Pcalc),
                  _F(NOM=DIFFPG),
                  _F(NOM=RAMPE),
                  _F(NOM=LINST),
                  _F(NOM=acier),
                  ),
           INFO=1,);
for n in range(0,Nb_Raffinement):

    DETRUIRE(CONCEPT=(_F(NOM=MA0[n],),
                      _F(NOM=MA[n]),
                      ),
             INFO=1,);


FIN();
