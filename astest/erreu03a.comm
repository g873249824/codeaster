# TITRE DETECTION DE SINGULARITE SIMPLE AVEC LES SOLVEURS LINEAIRES
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#       DIRECTS ET UNE COMMANDE INTEGREE
#
# person_in_charge: mathieu.courtois at edf.fr
#########################################################################
# VALIDATION DE LA DETECTION DE SINGULARITE SIMPLE (BLOCAGE ABSENT OU
# SURABONDANT) AVEC LES SOLVEURS LINEAIRES DIRECTS: MUMPS, LDLT ET MF.
# CAS SYMETRIQUE REEL AVEC UN OPERATEUR INTEGRE: MECA_STATIQUE
# ON TESTE LES MSGS SUIVANT:
#    1. MANQUE DE BLOCAGE: FACTOR_10 POUR LDLT/MF/MUMPS
#             + FACTOR_57 SI MUMPS ET NPREC<0
#    2. BLOCAGE SURABONDANTS: FACTOR_10 POUR LDLT/MF/MUMPS
#             + FACTOR_42 SI MUMPS ET NPREC<0
# VALIDATION DE LA DETECTION DE MATRICE NON SPD AVEC
# MUMPS+TYPE_RESOL='SYMDEF'
# AVEC MUMPS, VALIDATION DE LA VALEUR 'EVAL' DU MOT-CLE GESTION_MEMOIRE
#########################################################################

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET', VISU_EFICAS='NON'),
     DEBUG=_F(SDVERI='OUI'),
      ERREUR=_F(ERREUR_F='EXCEPTION',),
      PAR_LOT='NON',)

fmt_raison='-'*80+"""

   Exception interceptee
   Message : %s

"""+'-'*80+'\n'

PRE_GIBI()
MA=LIRE_MAILLAGE( )
DEFI_GROUP(reuse=MA, MAILLAGE=MA, CREA_GROUP_NO=_F(TOUT_GROUP_MA='OUI',))
MO=AFFE_MODELE(   MAILLAGE=MA,
           AFFE=_F( TOUT = 'OUI',  PHENOMENE = 'MECANIQUE', MODELISATION = '3D')
                  )
MAT=DEFI_MATERIAU(   ELAS=_F( E = 1.E+05,  NU = 0.3, RHO=9800.)  )
CHAM_MAT=AFFE_MATERIAU(   MAILLAGE=MA,  AFFE=_F( TOUT = 'OUI', MATER = MAT) )
CHAR=AFFE_CHAR_MECA( MODELE=MO,
       DDL_IMPO=  _F( GROUP_MA = 'BASE1',  DZ = 0., DY = 0.),
       PESANTEUR= _F(GRAVITE=9.81,
                     DIRECTION=(0.,0.,-1.,),),)

CTROP=AFFE_CHAR_MECA( MODELE=MO,
       DDL_IMPO=  _F( GROUP_MA = 'BASE1',  DZ = 0., DY = 0., DX = 0.),
       PESANTEUR= _F(GRAVITE=9.81,
                     DIRECTION=(0.,0.,-1.,),),)

CHARP=AFFE_CHAR_MECA( MODELE=MO,
       PESANTEUR= _F(GRAVITE=9.81,
                     DIRECTION=(0.,0.,-1.,),),)

CHARCI=AFFE_CHAR_CINE( MODELE=MO, MECA_IMPO=  _F( GROUP_NO = 'BASE1',  DX = 10.),  )

# 0 : PRE-EVALUATION DES CONSOMMATIONS MEMOIRE AVEC GESTION_MEMOIRE='EVAL'
# POUR LE SOLVEUR LINEAIRE MUMPS
#----------------------------------------------------------------------
is_ok = 0
try :
  RESU01=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=1,
                     EXCIT=( _F(CHARGE = CHAR),),
                     SOLVEUR=_F(METHODE='MUMPS',GESTION_MEMOIRE='EVAL',),
                   )

except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_77":
      is_ok = 1
TAB01=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB01,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU01, TAB01),),)

# 1 : MANQUE DE BLOCAGE DETECTE VIA LE MECANISME NPREC/STOP_SINGULIER
#     TEST AVEC LDLT/MF/MUMPS. AVEC MUMPS ON TESTE AUSSI LE MECANISME NPREC<0
#----------------------------------------------------------------------
is_ok = 0
try :
  RESU11=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=1,
                     EXCIT=( _F(CHARGE = CHAR),),
                     SOLVEUR=_F(METHODE='LDLT',NPREC=8,STOP_SINGULIER='OUI',),
                   )

except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_10":
      is_ok = 1
TAB11=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB11,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU11, TAB11),),)

is_ok = 0
try :
  RESU12=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=1,
                     EXCIT=( _F(CHARGE = CHAR),),
                     SOLVEUR=_F(METHODE='MULT_FRONT',NPREC=8,STOP_SINGULIER='OUI',),
                   )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_10":
      is_ok = 1
TAB12=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB12,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU12, TAB12),),)

is_ok = 0
try :
  RESU130=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=1,
                     EXCIT=( _F(CHARGE = CHAR),),
                     SOLVEUR=_F(METHODE='MUMPS',NPREC=8,STOP_SINGULIER='OUI',),
                   )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_10":
      is_ok = 1
TAB130=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB130,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU130, TAB130),),)

is_ok = 0
try :
  RESU131=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=1,
                     EXCIT=( _F(CHARGE = CHAR),),
                     SOLVEUR=_F(METHODE='MUMPS',NPREC=-8,STOP_SINGULIER='OUI',),
                   )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_57":
      is_ok = 1
TAB131=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB131,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU131, TAB131),),)


# 2 : REDONDANCE DE BLOCAGES DETECTE VIA LE MECANISME NPREC/STOP_SINGULIER
#     TEST AVEC LDLT/MF/MUMPS. AVEC MUMPS ON TESTE AUSSI LE MECANISME NPREC<0
#----------------------------------------------------------------------
is_ok = 0
try :
  RESU21=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=1,
                     EXCIT=( _F(CHARGE = CTROP),_F(CHARGE = CHARCI)),
                     SOLVEUR=_F(METHODE='LDLT',NPREC=8,STOP_SINGULIER='OUI',),
                   )

except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_10":
      is_ok = 1
TAB21=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB21,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU21, TAB21),),)

is_ok = 0
try :
  RESU22=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=1,
                     EXCIT=( _F(CHARGE = CTROP),_F(CHARGE = CHARCI)),
                     SOLVEUR=_F(METHODE='MULT_FRONT',NPREC=8,STOP_SINGULIER='OUI',),
                   )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_10":
      is_ok = 1
TAB22=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB22,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU22, TAB22),),)

is_ok = 0
try :
  RESU230=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=1,
                     EXCIT=( _F(CHARGE = CTROP),_F(CHARGE = CHARCI)),
                     SOLVEUR=_F(METHODE='MUMPS',NPREC=8,STOP_SINGULIER='OUI',),
                   )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_10":
      is_ok = 1
TAB230=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB230,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU230, TAB230),),)

is_ok = 0
try :
  RESU231=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=2,
                     EXCIT=( _F(CHARGE = CTROP),_F(CHARGE = CHARCI)),
                     SOLVEUR=_F(METHODE='MUMPS',NPREC=-8,STOP_SINGULIER='OUI',),
                   )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_42":
      is_ok = 1
TAB231=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB231,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU231, TAB231),),)

is_ok = 0
try :
  RESU232=MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHAM_MAT, INFO=2,
                     EXCIT=( _F(CHARGE = CTROP),_F(CHARGE = CHARCI)),
                     SOLVEUR=_F(METHODE='MUMPS',TYPE_RESOL='SYMDEF'),
                   )
except aster.error,err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   if err.id_message == "FACTOR_84":
      is_ok = 1
TAB232=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                         _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB232,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

DETRUIRE(CONCEPT=_F(NOM=(RESU232, TAB232),),)
FIN();
