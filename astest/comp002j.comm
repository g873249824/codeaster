# TITRE TEST MONOCRISTAL  3D UTILISANT SIMU_POINT_MAT
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

from Contrib.veri_matr_tang import VERI_MATR_TANG

DEBUT(CODE=_F(NOM='COMP002J',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'),
);

# donnee materiau et fonction


# def des materiaux
ACIER = [None]*2
# pour MONOCRISTAL
COMP1 = [None]*2
#parametres elastiques
EL=2.1E5
ET=4.E5
EN=2.1E5
GLT=0.45E5
GTN=0.45E5
GLN=0.35E5
NULT=0.075
NULN=0.075
NUTN=0.0142857143
# monocristal
N=10.0
K=40.0
C=10.0
R_0=75.5
Q=9.77
B=19.34
H=0.0
D=36.68

#unite en Pa
C_Pa = 1.E+6

ACIER[0]=DEFI_MATERIAU(
ELAS_ORTH=_F(   E_L   = EL*C_Pa  ,
                E_T   = ET*C_Pa  ,
                E_N   = EN*C_Pa  ,
                G_LT  = GLT*C_Pa ,
                G_TN  = GTN*C_Pa ,
                G_LN  = GLN*C_Pa ,
                NU_LT = NULT,
                NU_LN = NULN,
                NU_TN = NUTN,),
                MONO_VISC1=_F(N=N,
                              K=K*C_Pa,
                              C=C*C_Pa),
                MONO_ISOT1=_F(R_0=R_0*C_Pa,
                              Q=Q*C_Pa,
                              B=B,
                              H=H),
                MONO_CINE1=_F(D=D),
                                 );

#unite en MPa
ACIER[1]=DEFI_MATERIAU(
ELAS_ORTH=_F(   E_L   = EL,
                E_T   = ET,
                E_N   = EN,
                G_LT  = GLT,
                G_TN  = GTN,
                G_LN  = GLN,
                NU_LT = NULT,
                NU_LN = NULN,
                NU_TN = NUTN,
                ),
                MONO_VISC1=_F(N=N,
                              K=K,
                              C=C),
                MONO_ISOT1=_F(R_0=R_0,
                              Q=Q,
                              B=B,
                              H=H),
                MONO_CINE1=_F(D=D),
                                 )

compor='MONOCRISTAL'
COMP1[0]=DEFI_COMPOR(MONOCRISTAL=(_F(MATER=ACIER[0],
                                    ECOULEMENT='MONO_VISC1',
                                    ECRO_ISOT='MONO_ISOT1',
                                    ECRO_CINE='MONO_CINE1',
                                    ELAS='ELAS_ORTH',
                                    FAMI_SYST_GLIS='OCTAEDRIQUE',),),);

COMP1[1]=DEFI_COMPOR(MONOCRISTAL=(_F(MATER=ACIER[1],
                                    ECOULEMENT='MONO_VISC1',
                                    ECRO_ISOT='MONO_ISOT1',
                                    ECRO_CINE='MONO_CINE1',
                                    ELAS='ELAS_ORTH',
                                    FAMI_SYST_GLIS='OCTAEDRIQUE',),),);


##################################################################################
#Discretisation du calcul. nbequi = nombre de calculs "equivalents" : Pa, Rot
Ncal = 5
N_pas = 2*[1] + [1, 5, 25]
nbequi=2
# les differents calculs effectues
label_cal=['_Pa_','_rot_'] + 3* ['_N']
#pointeur materiau
P_imat = [0] + [1] + (Ncal-2)*[1]

#parametres vitesse de sollicitation
vitesse = 1.e-2
t_0 = 5.e-2/(8.0*vitesse)
# calibrage des deformations maximum (dans  .93)
calibrage = 3.5;
CALIB_E=EL
CALIB_NU=NULT

# liste d'archivage
temps_ar=DEFI_LIST_REEL( VALE =[t_0*i for i in range(9)],)

# angles utilises pour la rotation
angle2=30.
angle0=0.
angles=[angle0,angle2] + (Ncal-2)*[angle0]

# les precisions sur chaque TEST_RESU
prec_ecart=[3.E-2]+[2.E-8] + [50.E-2] + [11.E-2] + [1.E-10]
prec_tgt=2.e-2
prec_zero=[1.E-10, 0.01, 0.01]

# les quantites (invariants...) sur lequels portent les calculs d'erreur et les test_resu
ch_param2=['V56','VMIS','TRACE']
# coefficients pour ch_param2 pour calculer l'erreur sur le cas "Pa"
coef_para=[1.,C_Pa,C_Pa]

# utilitaires divers : calcul de l'erreur, renommage
INCLUDE(UNITE=91)
# definition du chargement 2D
# INCLUDE(UNITE=92)
# definition du chargement 3D
INCLUDE(UNITE=93)


##################################################################################
#  TEST 3D
##################################################################################

# les quantites extraites du calcul
ch_param=['V56','VMIS','TRACE','SIXX','SIYY','SIZZ','SIXY','SIXZ','SIYZ']

# resultats
RESU=[None]*Ncal
R_SI=[None]*len(ch_param)
TMP_S=[None]


#Boucle sur l'ensemble des calculs
for i in range(Ncal):
        N = N_pas[i]
        imat = P_imat[i]
        temps=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=(_F(JUSQU_A=t_0,NOMBRE=N,),
                                 _F(JUSQU_A=2.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=3.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=4.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=5.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=6.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=7.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=8.0*t_0,NOMBRE=N,),),);

        DEFLIST =DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST = temps,),
                                ECHEC=_F(ACTION='DECOUPE',
                                         SUBD_METHODE='MANUEL',
                                         SUBD_PAS=10,
                                         SUBD_NIVEAU=2,),)

#       Resout le pb a deformation imposee
        RESU[i]=SIMU_POINT_MAT(
                   COMPORTEMENT=_F(RELATION=compor,
                                COMPOR=COMP1[imat],
                                ITER_INTE_MAXI=200,
                                RESI_INTE_RELA=1.E-10
                                ),
                   ANGLE=angles[i],
                   MASSIF=_F(ANGL_REP=(angles[i])),
                   NEWTON=_F(MATRICE='TANGENTE',#PREDICTION='ELASTIQUE',
                             REAC_ITER=1,),
                   CONVERGENCE=_F(ITER_GLOB_MAXI=10,RESI_GLOB_RELA=1.E-8),
                   MATER      = ACIER[imat],
                   ARCHIVAGE = _F(LIST_INST = temps_ar),
#                   INCREMENT=_F(LIST_INST=DEFLIST),
                   INCREMENT=_F(LIST_INST=temps),
                   EPSI_IMPOSE=_F(EPXX=eps_def[0], EPYY=eps_def[1], EPZZ=eps_def[2],
                                  EPXY=eps_def[3], EPXZ=eps_def[4], EPYZ=eps_def[5]),
                        );
        #IMPR_TABLE(TABLE=RESU[i])
        DETRUIRE(CONCEPT=_F(NOM=temps))
        DETRUIRE(CONCEPT=_F(NOM=DEFLIST))

# On renomme les composantes en fonction de  l'ordre de discretisation
        R_SI=RENOMME(i,N_pas,label_cal,ch_param,RESU,R_SI)

# impressions
for i in range(len(ch_param)):
        IMPR_TABLE(TABLE=R_SI[i])

# TEST_RESU sur les erreurs relatives
TEST_ECART(ch_param2,label_cal,N_pas,Ncal,nbequi,R_SI,prec_ecart,prec_zero,coef_para)


# TESTS DE NON REGRESSION DES QUANTITES SIGNIFICATIVES

TEST_TABLE(
           VALE_CALC=3.31336000E8,
           NOM_PARA='VMIS_Pa_1',
           TABLE=R_SI_1,
           FILTRE=_F(NOM_PARA='INST',
                     VALE=5.0,),
           )

TEST_TABLE(
           VALE_CALC=2.079485379201E7,
           NOM_PARA='SIXX_Pa_1',
           TABLE=R_SI_3,
           FILTRE=_F(NOM_PARA='INST',
                     VALE=5.0,),
           )

for i in range(Ncal):
    DETRUIRE ( CONCEPT = _F (NOM = RESU[i]))
for i in range(len(ch_param)):
    DETRUIRE ( CONCEPT = _F (NOM = R_SI[i]))



###############################################################################


# Test de la matrice tangente sur le calcul le plus fin

N = N_pas[Ncal-1]
Linst=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=(_F(JUSQU_A=t_0,NOMBRE=N,),
                                 _F(JUSQU_A=2.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=3.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=4.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=5.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=6.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=7.0*t_0,NOMBRE=N,),
                                 _F(JUSQU_A=8.0*t_0,NOMBRE=N,),),);

DEFLIST =DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST = Linst,),
                                ECHEC=_F(ACTION='DECOUPE',
                                         SUBD_METHODE='MANUEL',
                                         SUBD_PAS=10,
                                         SUBD_NIVEAU=2,),)

DEBUG(SDVERI='NON')
RESU_TGT=SIMU_POINT_MAT(
                   COMPORTEMENT=_F(RELATION=compor,
                                TYPE_MATR_TANG='VERIFICATION',
                                VALE_PERT_RELA=1.E-5,
                                COMPOR=COMP1[imat],
                                ITER_INTE_MAXI=100,
                                RESI_INTE_RELA=1.E-9,
                                ),
                   ANGLE=angles[0],
                   MASSIF=_F(ANGL_REP=(angles[0])),
                   NEWTON=_F(MATRICE='TANGENTE',REAC_ITER=1,),
                   CONVERGENCE=_F(ITER_GLOB_MAXI=10,),
                   MATER      = ACIER[1],
                 #  INCREMENT=_F(LIST_INST=DEFLIST,),
                   INCREMENT=_F(LIST_INST=Linst,),
                   EPSI_IMPOSE=_F(EPXX=eps_def[0], EPYY=eps_def[1], EPZZ=eps_def[2],
                                  EPXY=eps_def[3], EPXZ=eps_def[4], EPYZ=eps_def[5]),
                        );


DIFF_MAT=VERI_MATR_TANG()

###############################################################################
# impressions

IMPR_TABLE(TABLE=DIFF_MAT)


TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=0.02,
           VALE_CALC=0.0,
           VALE_REFE=0.0,
           NOM_PARA='MAT_DIFF',
           TYPE_TEST='MAX',
           TABLE=DIFF_MAT,)

FIN();
