# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

# MASS-SPRING SYSTEM WITH 2 DOFs
# 2 MASSES RELATED BY 1 SPRING
# THE FIRST MASS IS SUBJECTED TO TIME-DEPENDENT FRICTION
# WHICH EVOLED DURING THE TEST
# THE SECOND ONE IS FRICTIONLESS
# -----------------------------------------------------------------
# REF: ANALYTICAL COMPARISON WITH MATLAB CALCULATION


DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),
      DEBUG=_F(SDVERI='OUI'),);

MESH0=LIRE_MAILLAGE();

MESH=CREA_MAILLAGE(MAILLAGE=MESH0,
                   CREA_POI1=(_F(NOM_GROUP_MA='NE_FRICT',
                                 GROUP_NO='N_FRICT',),
                              _F(NOM_GROUP_MA='NE_IMPOF',
                                 GROUP_NO='N_IMPOF',),),);

MODEL=AFFE_MODELE(MAILLAGE=MESH,
                  AFFE=(_F(TOUT='OUI',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='DIS_T',),),);


k = 1.E4; # spring
m = 5.;   # mass of each node

ELEM=AFFE_CARA_ELEM(MODELE=MODEL,
                    DISCRET=(_F(CARA='K_T_D_L',
                                GROUP_MA='E_SPRING',
                                VALE=(k,0,0,),),
                                _F(  CARA = 'M_T_L',  GROUP_MA = 'E_SPRING',
                                        VALE = (0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,
                                        0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.)),
                             _F(CARA='M_T_D_N',
                                GROUP_MA=('NE_FRICT','NE_IMPOF'),
                                VALE=m,), ),);


BOUNDARY=AFFE_CHAR_MECA(MODELE=MODEL,
                        DDL_IMPO=(_F(GROUP_NO='N_ALL',
                                     DY=0.,
                                     DZ=0.,),),);

FORCE=AFFE_CHAR_MECA(MODELE=MODEL,
                     FORCE_NODALE=_F(GROUP_NO='N_IMPOF',
                                     FX=1.),);

ASSEMBLAGE(MODELE=MODEL,
                CARA_ELEM=ELEM,
                CHARGE=BOUNDARY,
                NUME_DDL=CO('DOF_NUM'),
                MATR_ASSE=(_F(MATRICE=CO('K_ASSEMB'),
                              OPTION='RIGI_MECA',),
                           _F(MATRICE=CO('M_ASSEMB'),
                              OPTION='MASS_MECA',),),
                VECT_ASSE=(_F(VECTEUR=CO("F_ASSEMB"),
                              OPTION='CHAR_MECA',
                              CHARGE=FORCE),),);

F0=3000.; # value of the imposed force
F_FUNCT=DEFI_FONCTION(NOM_PARA='INST',
                      VALE=(0.0,F0,
                            0.2,F0,
                            0.200001,0.0),
                      PROL_DROITE='CONSTANT',);

MODES=CALC_MODES(MATR_RIGI=K_ASSEMB,
                 OPTION='BANDE',
                 CALC_FREQ=_F(FREQ=(-0.1,40.),
                              ),
                 MATR_MASS=M_ASSEMB,
                 SOLVEUR_MODAL=_F(METHODE='SORENSEN',
                                  ),
                 )

IMPR_RESU(UNITE=80,
          FORMAT='MED',
          RESU=_F(MAILLAGE=MESH,
                  RESULTAT=MODES,),);


PROJ_BASE(BASE=MODES,
          STOCKAGE='PLEIN',
          MATR_ASSE_GENE=(_F(MATRICE=CO('M_GENERA'),
                             MATR_ASSE=M_ASSEMB,),
                          _F(MATRICE=CO('K_GENERA'),
                             MATR_ASSE=K_ASSEMB,),),
          VECT_ASSE_GENE=_F(VECTEUR=CO('F_GENERA'),
          VECT_ASSE=F_ASSEMB,),);


OBSTA_F=DEFI_OBSTACLE(TYPE='PLAN_Z',);

duration = 0.35;
time_step = 1.e-04;

testlist = [0.02, 0.15, 0.339965]

RESU_GEN=DYNA_VIBRA(TYPE_CALCUL='TRAN',BASE_CALCUL='GENE',
                         SCHEMA_TEMPS=_F(SCHEMA='ADAPT_ORDRE2',PAS_MAXI=time_step,),
# ON IMPOSE PAS_MAXI = PAS POUR RETROUVER LES ANCIENS RESULTATS
# POUR AMELIORER LE TEMPS CPU IL VAUT MIEUX TESTER AVEC UN PAS_MAXI PLUS GRAND
                         MATR_MASS=M_GENERA,
                         MATR_RIGI=K_GENERA,
                         INCREMENT=_F(INST_INIT=0.,
                                      INST_FIN=duration,
                                      PAS=time_step,
                                     ),
                         ARCHIVAGE=_F(PAS_ARCH=1, INST=testlist),
                         EXCIT=_F(VECT_ASSE_GENE=F_GENERA,
                                  FONC_MULT=F_FUNCT,),
                         COMPORTEMENT=(_F(RELATION='DIS_CHOC',
                                  GROUP_NO_1='N_FRICT',
                                  OBSTACLE=OBSTA_F,
                                  ORIG_OBST=(0.,0.,1.01,),
                                  NORM_OBST=(0.,1.,0.,),
                                  JEU=0.01,
                                  RIGI_NOR=1.E4, # arbitraire
                                  AMOR_NOR=0.,
                                  RIGI_TAN=5.E7,
                                  FROTTEMENT='COULOMB_STAT_DYNA',
                                  COULOMB_DYNA=0.2,
                                  COULOMB_STAT=0.3,),),
                                 );


### Grandeurs au noeud de traction:
DX_IMPOF=RECU_FONCTION(RESU_GENE=RESU_GEN,
                       #RESULTAT=RESU_PHY,
                      TOUT_INST='OUI',
                      NOM_CHAM='DEPL',
                      NOM_CMP='DX',
                      GROUP_NO='N_IMPOF');

SX_IMPOF=RECU_FONCTION(RESU_GENE=RESU_GEN,
                    #   RESULTAT=RESU_PHY,
                      TOUT_INST='OUI',
                      NOM_CHAM='VITE',
                      NOM_CMP='DX',
                      GROUP_NO='N_IMPOF',);

AX_IMPOF=RECU_FONCTION(RESU_GENE=RESU_GEN,
                    #   RESULTAT=RESU_PHY,
                      TOUT_INST='OUI',
                      NOM_CHAM='ACCE',
                      NOM_CMP='DX',
                      GROUP_NO='N_IMPOF',);

### Grandeurs au noeud de frottement

DX_FRICT=RECU_FONCTION(RESU_GENE=RESU_GEN,
                       TOUT_INST='OUI',
                       NOM_CHAM='DEPL',
                       NOM_CMP='DX',
                       GROUP_NO='N_FRICT',);

SX_FRICT=RECU_FONCTION(RESU_GENE=RESU_GEN,
                       TOUT_INST='OUI',
                       NOM_CHAM='VITE',
                       NOM_CMP='DX',
                       GROUP_NO='N_FRICT',);

AX_FRICT=RECU_FONCTION(RESU_GENE=RESU_GEN,
                       TOUT_INST='OUI',
                       NOM_CHAM='ACCE',
                       NOM_CMP='DX',
                       GROUP_NO='N_FRICT',);

FN_FRICT=RECU_FONCTION(RESU_GENE=RESU_GEN,
                       GROUP_NO_CHOC='N_FRICT',
                       PARA_X='INST',
                       PARA_Y='FN',);

FT_FRICT=RECU_FONCTION(RESU_GENE=RESU_GEN,
                       GROUP_NO_CHOC='N_FRICT',
                       PARA_X='INST',
                       PARA_Y='FT1',);




##Results printing:
IMPR_FONCTION(FORMAT='TABLEAU',
              COURBE=(_F(FONCTION=DX_IMPOF,),
                      _F(FONCTION=SX_IMPOF,),
                      _F(FONCTION=AX_IMPOF,),
                      _F(FONCTION=DX_FRICT,),
                      _F(FONCTION=SX_FRICT,),
                      _F(FONCTION=AX_FRICT,),
                      _F(FONCTION=FN_FRICT,),
                      _F(FONCTION=FT_FRICT,),
              _F(FONCTION=F_FUNCT,)),
              UNITE=38,);

TEST_FONCTION(VALEUR=(_F(VALE_CALC=2.062164499878E-05,
                         VALE_REFE=0.0,
                         CRITERE='ABSOLU',
                         VALE_PARA=0.02,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-4,
                         FONCTION=DX_FRICT,),
                      _F(VALE_CALC=0.11221176670215,
                         VALE_REFE=0.11221,
                         CRITERE='ABSOLU',
                         VALE_PARA=0.02,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-4,
                         FONCTION=DX_IMPOF,),
                      _F(VALE_CALC=1.353287742815,
                         VALE_REFE=1.3533200000000001,
                         CRITERE='ABSOLU',
                         VALE_PARA=0.14999999999999999,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-4,
                         FONCTION=DX_FRICT,),
                      _F(VALE_CALC=1.807507933517,
                         VALE_REFE=1.80751,
                         CRITERE='ABSOLU',
                         VALE_PARA=0.14999999999999999,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-4,
                         FONCTION=DX_IMPOF,),
                      _F(VALE_CALC=-3.375499081490E-05,
                         VALE_REFE=0.0,
                         CRITERE='ABSOLU',
                         VALE_PARA=0.33996500000000002,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-4,
                         FONCTION=SX_FRICT,),
                      _F(VALE_CALC=3.970109739183,
                         VALE_REFE=3.9681299999999999,
                         CRITERE='ABSOLU',
                         VALE_PARA=0.33996500000000002,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=2.E-3,
                         FONCTION=DX_IMPOF,),
                      ),
              )

FIN();
