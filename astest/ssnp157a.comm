# MODIF  DATE 10/10/2012   AUTEUR COURTOIS M.COURTOIS 
# TITRE BENCHMARK NAFEMS DE VALIDATION DU CONTACT 5 STEEL ROLLER ON RUBBER
# ssnp157a.para = tps_job 1500 mem_job 512Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NOM='SSNP157A',NIV_PUB_WEB='INTERNET',),IGNORE_ALARM=('CONTACT3_16',),);

MESH1=LIRE_MAILLAGE(FORMAT='MED',);

MESH=CREA_MAILLAGE(MAILLAGE=MESH1,
                   LINE_QUAD=_F(GROUP_MA=('Rubber','Slave','Bottom','gauche','droite',),),);

MESH=MODI_MAILLAGE(reuse=MESH,
                   MAILLAGE=MESH,
                   ORIE_PEAU_2D=(_F(GROUP_MA='Master',),
                                 _F(GROUP_MA='Slave',),),);

MESH=DEFI_GROUP(reuse=MESH,
                MAILLAGE=MESH,
                CREA_GROUP_NO=(_F(TOUT_GROUP_MA='OUI'),
                               _F(DIFFE=('Roller','C',),
                                  NOM='NRoller',),),);

#IMPR_RESU(FORMAT='MED',
#          RESU=_F(MAILLAGE=MESH,),);

MAT_Rol=DEFI_MATERIAU(ELAS=_F(E=210000.0,
                              NU=0.3,),);

# Neo-Hookean material for rubber
# Incompressibility is only enforced in a penalized sense
MAT_Rub=DEFI_MATERIAU(ELAS_HYPER=_F(C10=10.0,
                                    C01=0.0,
                                    C20=0.0,
                                    NU=0.49,),);

Fup=DEFI_FONCTION(NOM_PARA='INST',VALE=(0.0,0.0,
                          1.0,1.0,
                          ),PROL_DROITE='CONSTANT',PROL_GAUCHE='EXCLU',);

Frot=DEFI_FONCTION(NOM_PARA='INST',VALE=(0.0,0.0,
                          1.0,0.0,
                          ),PROL_DROITE='EXCLU',PROL_GAUCHE='EXCLU',);

Tcomp=1.0
Tfin=2.0
Ncomp=10
Nrot=90
L_INST=DEFI_LIST_REEL(DEBUT=0.0,
                      INTERVALLE=(_F(JUSQU_A=Tcomp,
                                     NOMBRE=Ncomp,),
                                  _F(JUSQU_A=Tfin,
                                     NOMBRE=Nrot,),),);

LINST=DEFI_LIST_INST(DEFI_LIST=_F(METHODE='MANUEL',
                                  LIST_INST=L_INST,),
                     ECHEC=_F(SUBD_PAS=4,
                              SUBD_NIVEAU=10,),);

# The rubber is meshed with quadratic elements
# Reduced integration is used to better treat incompressibility
# Nevertheless stress locking still occurs (near the boundary)
# Upcoming developpements will permit to correctly handle incompressibility
MO=AFFE_MODELE(MAILLAGE=MESH,
               AFFE=(_F(GROUP_MA='Roller',
                        PHENOMENE='MECANIQUE',
                        MODELISATION='D_PLAN',),
                     _F(GROUP_MA='Rubber',
                        PHENOMENE='MECANIQUE',
                        MODELISATION=('D_PLAN_SI',),
                        ),),);

MA=AFFE_MATERIAU(MAILLAGE=MESH,
                 AFFE=(_F(GROUP_MA='Roller',
                          MATER=MAT_Rol,),
                       _F(GROUP_MA='Rubber',
                          MATER=MAT_Rub,),),);

# The rotation of the roller is imposed by way a formula (X=R.omega)
RotX = FORMULE(VALE='sqrt(X*X+(Y-40.)*(Y-40.))*cos(atan2((Y-40.),X)-2*pi*(INST-Tcomp)/Tcomp)-X',
               NOM_PARA=('X','Y','INST',),);

RotY = FORMULE(VALE='sqrt(X*X+(Y-40.)*(Y-40.))*sin(atan2((Y-40.),X)-2*pi*(INST-Tcomp)/Tcomp)-(Y-40.)',
               NOM_PARA=('X','Y','INST',),);

ROT=AFFE_CHAR_CINE_F(MODELE=MO,
                     MECA_IMPO=_F(GROUP_NO='NRoller',
                                  DX=RotX,
                                  DY=RotY,),);

# The center of the roller is fixed
CLC=AFFE_CHAR_CINE(MODELE=MO,
                   MECA_IMPO=_F(GROUP_NO='C',
                                DX=0.0,
                                DY=0.0,),);

# The rubber is put into contact with the roller
CLUp=AFFE_CHAR_CINE(MODELE=MO,
                   MECA_IMPO=_F(GROUP_MA='Bottom',
                                DY=3.0,),);

# During the loading phase the rubber is keep fixed in the x-direction
# This suppresses the rigid body motion of the rubber
CLfix=AFFE_CHAR_CINE(MODELE=MO,
                   MECA_IMPO=_F(GROUP_MA='droite',
                                DX=0.0,),);

# Contact definition
coef = 1.0E-5
CON=DEFI_CONTACT(MODELE=MO,
                 FORMULATION='CONTINUE',
                 FROTTEMENT='COULOMB',
                 #ITER_GEOM_MAXI=50,
                 ALGO_RESO_GEOM = 'NEWTON',
                 ALGO_RESO_CONT='NEWTON',
                 ALGO_RESO_FROT='NEWTON',
                 ZONE=_F(GROUP_MA_MAIT='Master',
                         GROUP_MA_ESCL='Slave',
                         # This removes any rigid-body motion :
                         #  - at the first time step, contact will be taken into account removing the need to use RESI_GLOB_MAXI in STAT_NON_LINE
                         #  - when putting the roller into rotation, this will ensure the correct continuation of the computation by taking into account pre-existing contact from the previous step
                         CONTACT_INIT='INTERPENETRE',
                         COULOMB=0.3,
                         # See top : this parameter must be chosen wisely otherwise computation won't converge
                         COEF_FROT=coef,
                         INTEGRATION='AUTO',
                         ),);

RESU=STAT_NON_LINE(INFO=1,
                   MODELE=MO,
                   CHAM_MATER=MA,
                   EXCIT=(_F(CHARGE=CLC,),
                          _F(CHARGE=CLUp,
                             FONC_MULT=Fup,),
                          _F(CHARGE=ROT,
                             FONC_MULT=Frot,),
                          _F(CHARGE=CLfix,),),
                   CONTACT=CON,
                   COMP_INCR=(_F(RELATION='ELAS',
                                 DEFORMATION='GROT_GDEP',
                                 GROUP_MA='Roller',),
                              _F(RELATION='ELAS_HYPER',
                                 DEFORMATION='GROT_GDEP',
                                 GROUP_MA='Rubber',),),
                   INCREMENT=_F(LIST_INST=LINST,
                                INST_FIN=1.0,
                                ),
                   CONVERGENCE=_F(ITER_GLOB_MAXI=50,
                                  ),
                   SOLVEUR=_F(METHODE='MULT_FRONT',),
                   NEWTON=_F(MATRICE='TANGENTE',
                             REAC_ITER=1,),);


RESU=STAT_NON_LINE(reuse =RESU,
                   MODELE=MO,
                   CHAM_MATER=MA,
                   EXCIT=(_F(CHARGE=CLC,),
                          _F(CHARGE=CLUp,
                             FONC_MULT=Fup,),
                          _F(CHARGE=ROT,),
                          ),
                   CONTACT=CON,
                   COMP_INCR=(_F(RELATION='ELAS',
                                 DEFORMATION='GROT_GDEP',
                                 GROUP_MA='Roller',),
                              _F(RELATION='ELAS_HYPER',
                                 DEFORMATION='GROT_GDEP',
                                 GROUP_MA='Rubber',),),
                   ETAT_INIT=_F(EVOL_NOLI=RESU,),
                   INCREMENT=_F(LIST_INST=LINST,
                                #NUME_INST_FIN=11,
                                ),
                   CONVERGENCE=_F(ITER_GLOB_MAXI=50,
                                  ),
                   SOLVEUR=_F(METHODE='MULT_FRONT',),
                   NEWTON=_F(MATRICE='TANGENTE',
                             REAC_ITER=1,),);


RESU=CALC_CHAMP(reuse=RESU,RESULTAT=RESU,CRITERES=('SIEQ_ELGA'))


RESU=CALC_CHAMP(reuse =RESU,
                RESULTAT=RESU,
                FORCE=('FORC_NODA','REAC_NODA',),);

RELE_F=POST_RELEVE_T(ACTION=_F(OPERATION='EXTRACTION',
                               INTITULE='Force',
                               RESULTAT=RESU,
                               NOM_CHAM='REAC_NODA',
                               GROUP_NO='Slave',
                               RESULTANTE='DY',),);


# This force vs. time curve is an output of the NAFEMS benchmark
FORC=RECU_FONCTION(TABLE=RELE_F,
                   PARA_X='INST',
                   PARA_Y='DY',);

MFORC=CALC_FONCTION(COMB=_F(FONCTION=FORC,
                            COEF=-1,),);

IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=29,
              COURBE=_F(FONCTION=MFORC,LEGENDE='--',MARQUEUR=0,),
              TITRE='Reponse force - instant',
              BORNE_X=(0.0,2.0,),
              BORNE_Y=(0,300.0,),
              ECHELLE_X='LIN',
              ECHELLE_Y='LIN',
              GRILLE_X=0.2,
              GRILLE_Y=50,
              LEGENDE_X='Instant (s)',
              LEGENDE_Y='Force (N)',
              );

IMPR_RESU(FORMAT='MED',
          UNITE=80,
          RESU=_F(RESULTAT=RESU,NOM_CHAM=('DEPL','FORC_NODA','SIEQ_ELGA',)),);

# ===========================================
# Tests

# On utilise un couple pour PRECISION pour bien selectionner l'instant

TEST_RESU(RESU=_F(INST=2.0,
                  REFERENCE='SOURCE_EXTERNE',
                  RESULTAT=RESU,
                  NOM_CHAM='DEPL',
                  NOEUD='N281',
                  NOM_CMP='DX',
                  VALE_CALC=-176.935953452,
                  VALE_REFE=-175.0,
                  PRECISION=0.02, TOLE_MACHINE=(0.02, 1.E-3),),
          )

TEST_RESU(RESU=_F(INST=2.0,
                  RESULTAT=RESU,
                  NOM_CHAM='DEPL',
                  NOEUD='N281',
                  NOM_CMP='DX',
                  VALE_CALC=-176.93727596068001,
                  TOLE_MACHINE=1.E-3,
                  ),
          )

FIN();
