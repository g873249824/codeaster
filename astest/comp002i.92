def PROD_ROT(X1,X2):
    "calcul Produit de 2 vecteurs pour les coef de rotations"
    "dimension de X1 et X2 liste de 3 scalaire resultat liste de 6 scalaire"
    if (len(X1)==len(X2)==3) : 
        Y=[None]*6
        V_ind=[[0,0,0.5],[1,1,0.5],[2,2,0.5],[0,1,1.0],[0,2,1.0],[1,2,1.0]]
        for ind in V_ind:
            i=V_ind.index(ind)
            ind1,ind2,coef=ind[0],ind[1],ind[2]
            Y[i]=coef*(X1[ind1]*X2[ind2]+X1[ind2]*X2[ind1])
        return Y
    else :
        print "CALCUL PROD_ROT IMPOSSIBLE, dimensions innatendues"
        return None
#######################################################################
def ERREUR(X,Xref,coef=1.,prec_zero=0.):
    "calcul erreur relative entre deux nombres"
    if (Xref<prec_zero) : return 0.
    else :
        err= abs((X*coef-Xref)/Xref)
        return err
#######################################################################
def RENOMME(i,N_pas,label_cal,ch_param,RESU,R_SI):
# On renomme les composantes en fonction de  l'ordre de discrÃ©tisation
        N = N_pas[i]
        chN=label_cal[i]+str(N)
        for ch in ch_param:
                j=ch_param.index(ch)
                chnew=ch+chN
##Extraction par type de variable 
             #   print 'R_SI',R_SI
                if R_SI[j] == None:
                        R_SI[j]=CALC_TABLE( TABLE=RESU[i],
                                     TITRE = ' ',
                                     ACTION=( _F(OPERATION='EXTR',
                                            NOM_PARA=('INST',ch,),),
                                              _F(OPERATION='RENOMME',
                                                NOM_PARA=(ch,chnew,),),
                                                                ),);
                else:
                        TMP_S=CALC_TABLE( TABLE=RESU[i],
                                     TITRE = ' ',
                                     ACTION=( _F(OPERATION='EXTR',
                                            NOM_PARA=('INST',ch,),),
                                                _F(OPERATION='RENOMME',
                                                NOM_PARA=(ch,chnew,),),
                                                                ),);
                        R_SI[j]=CALC_TABLE( reuse=R_SI[j], TABLE=R_SI[j],
                                     TITRE = ' ',
                                        ACTION=( _F(OPERATION='COMB',
                                        TABLE=TMP_S,NOM_PARA='INST',),
                                                ),);
                        DETRUIRE ( CONCEPT = _F (NOM = TMP_S,),)
 
     
        return R_SI
#######################################################################
def TEST_ECART(ch_param2,label_cal,N_pas,Ncal,ch_param,R_SI,prec_ecart,prec_zero):
   #Exploitations
   CH_V1 = ['INST']
   for ch in ch_param2 :
   #CALCUL des ecarts relatifs
        i=ch_param2.index(ch)
        chref1 =ch + label_cal[4] + str(N_pas[4]) 
        chref2 = ch + label_cal[Ncal-1] + str(N_pas[Ncal-1])
        chref = [chref1, chref2]        

        for j in range(Ncal) :
                coef = 1.
                ch_cal = ch + label_cal[j] + str(N_pas[j]) 
                ch_err = 'ER_' + ch_cal
                if j < 4 :
                        if (j==0 and i>0 and i<9) : coef = 1/C_Pa
                        iref = 0
                else :
                        iref =1
                        if (i==0) : CH_V1.append(ch_cal)
#               calcul de l'erreur (ecart relatif)
                preczero=prec_zero[i]    
                ch_for ='ERREUR('+ch_cal+','+chref[iref]+','+str(coef)+','+str(preczero)+')'
                ERR_REL = FORMULE (NOM_PARA = (ch_cal,chref[iref]),
                                VALE = ch_for)
                R_SI[i] = CALC_TABLE(TABLE =R_SI[i], reuse=R_SI[i],
                                     TITRE = 'R_SI'+str(j),
                             ACTION = (_F(OPERATION='OPER',NOM_PARA=ch_err,
                                          FORMULE=ERR_REL),
                                      ),);
                DETRUIRE ( CONCEPT = _F (NOM = ERR_REL,),)                

        for j in range(Ncal) :
           ch_cal = ch + label_cal[j] + str(N_pas[j]) 
           ch_err = 'ER_' + ch_cal
           TEST_TABLE(TABLE=R_SI[i],NOM_PARA=ch_err,
                 TYPE_TEST='MAX',
                 VALE_CALC=0.,
                 VALE_REFE=0.,
                 CRITERE='ABSOLU',
                 TOLE_MACHINE=prec_ecart[j],
                 PRECISION=prec_ecart[j],
                 REFERENCE='ANALYTIQUE',);
                 
   return
        
#######################################################################

#######################################################################

# definition du trajet de chargement 3D
        
#######################################################################


#fonctions chargement  
calibrage = 3.5;
Ctau = ((2 * calibrage) * ((1 + POISSON) / (2 * YOUNG)));
Ctrac = (calibrage * (1 / YOUNG));
Y_trace=DEFI_LIST_REEL( VALE = (0., 150., 150., -50, 0., 50., -150., -150., 0.),)
Trace=DEFI_FONCTION(NOM_PARA='INST',
                    VALE_PARA= temps_ar,
                     VALE_FONC= Y_trace,         
                    PROL_DROITE='EXCLU',
                    PROL_GAUCHE='EXCLU',);

Y_Devi_1=DEFI_LIST_REEL( VALE = (0., 75., 150., 150, 0., -150., -150., -75., 0.),)
Devi_1=DEFI_FONCTION(NOM_PARA='INST',
                     VALE_PARA= temps_ar,
                      VALE_FONC= Y_Devi_1,       
                     PROL_DROITE='EXCLU',
                     PROL_GAUCHE='EXCLU',);

Y_Devi_2=DEFI_LIST_REEL( VALE = (0., 75., -50., 100, 0., -100., 50., -75., 0.),)
Devi_2=DEFI_FONCTION(NOM_PARA='INST',
                     VALE_PARA= temps_ar,
                      VALE_FONC= Y_Devi_2,       
                     PROL_DROITE='EXCLU',
                     PROL_GAUCHE='EXCLU',);

Y_tauxy=DEFI_LIST_REEL( VALE = (0., 200., 100., 300, 0., -300., -100., -200., 0.),)
TAU_xy=DEFI_FONCTION(NOM_PARA='INST',
                     VALE_PARA= temps_ar,
                      VALE_FONC= Y_tauxy,        
                     PROL_DROITE='EXCLU',
                     PROL_GAUCHE='EXCLU',);

Y_tauxz=DEFI_LIST_REEL( VALE = (0., -100., 100., 200, 0., -200., -100., 100., 0.),)
TAU_xz=DEFI_FONCTION(NOM_PARA='INST',
                     VALE_PARA= temps_ar,
                      VALE_FONC= Y_tauxz,        
                     PROL_DROITE='EXCLU',
                     PROL_GAUCHE='EXCLU',);

Y_tauyz=DEFI_LIST_REEL( VALE = (0., 0., 200., -100, 0., 100., -200., 0., 0.),)
TAU_yz=DEFI_FONCTION(NOM_PARA='INST',
                     VALE_PARA= temps_ar,
                      VALE_FONC= Y_tauyz,        
                     PROL_DROITE='EXCLU',
                     PROL_GAUCHE='EXCLU',);

eps_xy=CALC_FONCTION(COMB=_F(FONCTION=TAU_xy,
                             COEF=Ctau,),);

eps_xz=CALC_FONCTION(COMB=_F(FONCTION=TAU_xz,
                             COEF=Ctau,),);

eps_yz=CALC_FONCTION(COMB=_F(FONCTION=TAU_yz,
                             COEF=Ctau,),);

eps_xx=CALC_FONCTION(COMB=(_F(FONCTION=Trace,
                              COEF=Ctrac,),
                           _F(FONCTION=Devi_1,
                              COEF=Ctrac,),),);

eps_yy=CALC_FONCTION(COMB=(_F(FONCTION=Trace,
                              COEF=Ctrac,),
                           _F(FONCTION=Devi_1,
                              COEF=-(Ctrac),),
                           _F(FONCTION=Devi_2,
                              COEF=Ctrac,),),);

eps_zz=CALC_FONCTION(COMB=(_F(FONCTION=Trace,
                              COEF=Ctrac,),
                           _F(FONCTION=Devi_2,
                              COEF=-(Ctrac),),),);
eps_def = [eps_xx, eps_yy, eps_zz, eps_xy, eps_xz, eps_yz]
#rotation tenseur des def
#angle de precession, nutation, rotation propre
psi,teta,phi=0.9,0.7,0.4
cps,cte,cph=cos(psi),cos(teta),cos(phi)
sps,ste,sph=sin(psi),sin(teta),sin(phi)
#matrice de passage
p11,p21,p31 = cph*cps-sph*cte*sps,cph*sps+sph*cte*cps,sph*ste
p12,p22,p32 = -sph*cps-cph*cte*sps,-sph*sps+cph*cte*cps,cph*ste
p13,p23,p33 = ste*sps,-ste*cps,cte
V1= [p11, p21, p31]
V2= [p12, p22, p32]
V3= [p13, p23, p33]
#eps apres rotation
VI = [[V1,V1],[V2,V2],[V3,V3],[V1,V2],[V1,V3],[V2,V3]]
eps_rot = [None]*6
for vect_i in VI:
    i = VI.index(vect_i)
    V_COEF = PROD_ROT(vect_i[0],vect_i[1])
    eps_rot [i] =CALC_FONCTION(COMB=(
            _F(FONCTION=eps_xx,COEF=V_COEF[0],),
            _F(FONCTION=eps_yy,COEF=V_COEF[1],),
            _F(FONCTION=eps_zz,COEF=V_COEF[2],),
            _F(FONCTION=eps_xy,COEF=V_COEF[3],),
            _F(FONCTION=eps_xz,COEF=V_COEF[4],),
            _F(FONCTION=eps_yz,COEF=V_COEF[5],),
                ),);
#eps apres symetrie
eps_sym = [eps_zz,eps_xx,eps_yy,eps_xz,eps_yz,eps_xy]

V_EPS = [eps_def,eps_sym,eps_rot]


#trace chargement

IMPR_FONCTION(#FORMAT='XMGRACE',PILOTE='INTERACTIF',
              COURBE=(_F(FONCTION=eps_def[0],),
                      _F(FONCTION=eps_def[1],),
                      _F(FONCTION=eps_def[2],),
                      _F(FONCTION=eps_def[3],),
                      _F(FONCTION=eps_def[4],),
                      _F(FONCTION=eps_def[5],),
                      ),
              UNITE=29,);
