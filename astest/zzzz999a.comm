# MODIF  DATE 10/10/2012   AUTEUR COURTOIS M.COURTOIS 
# TITRE TEST DE L'OPTIMISATION DE L'OPERATEUR DEFI_CABLE_BP
# zzzz999a.para = tps_job 500 mem_job 5000Mo ncpus 1 liste_test R
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# zzzz999.para = tps_job 500 mem_job 5000Mo ncpus 1 liste_test R

DEBUT(CODE=_F(NOM='ZZZZ999A', NIV_PUB_WEB='INTERNET'), DEBUG=_F(SDVERI='OUI'))

#------------------------------------------------------------------------
# Divers parametres
#------------------------------------------------------------------------
Nb_cab_hori = 100.0
Nb_cab_vert = 100.0

#------------------------------------------------------------------------
# B Beton
#------------------------------------------------------------------------
B_E     = 4.E10     # Module de Young
B_Nu    = 0.20      # Coef. de Poisson
B_Rho   = 2500.     # Masse volumique
# Liste des groupes à prendre en compte comme du béton
l_beton = ['CYL']

#------------------------------------------------------------------------
# Acier cables de precontrainte
#------------------------------------------------------------------------
A_E           = 1.93E11     # Module de Young
A_Nu          = 0.0         # Coef. de Poisson
A_Rho         = 7850.       # Masse volumique
A_F_PRG       = 1.94E11     # Contrainte fprg

d_tension = {
       'CH' : 3.75E6,
       'CV' : 3.75E6,
            }

d_aire = {
       'CH' : 0.00555,
       'CV' : 0.00555,
         }

#------------------------------------------------------------------------
# Lecture du maillage
#------------------------------------------------------------------------
MAIL=LIRE_MAILLAGE(FORMAT='MED', UNITE=20,);

l_cable=[]
for i in range(1,Nb_cab_hori+1):
        l_cable.append('CH_%02i'%i)
for i in range(1,Nb_cab_vert+1):
        l_cable.append('CV_%02i'%i)

MODELE=AFFE_MODELE(
                 MAILLAGE=MAIL,
                 AFFE=(
                       _F( GROUP_MA = l_beton,
                            PHENOMENE = 'MECANIQUE',
                            MODELISATION = '3D'),
                       _F( GROUP_MA = l_cable,
                            PHENOMENE = 'MECANIQUE',
                            MODELISATION = 'BARRE'),
                       )
                   )

#------------------------------------------------------------------------
# Defnition des matériaux et affectation des matériaux
#------------------------------------------------------------------------
# Béton
#------------------------------------------------------------------------
d_beton = {}
d_elas = {'RHO':B_Rho,}
d_elas['E'] = B_E
d_elas['NU'] = B_Nu
d_beton['ELAS'] = _F(**d_elas)

MATBETON=DEFI_MATERIAU( BPEL_BETON=_F(),
                       **d_beton
                      )

d_affe_materiau = {}
d_affe_materiau['AFFE'] = []

d_affe_materiau['AFFE'].append(_F(GROUP_MA = l_beton, MATER = MATBETON,),)

# Acier
#------------------------------------------------------------------------
d_acier = {}
d_elas = {'RHO':A_Rho,}
d_elas['E'] = A_E
d_elas['NU'] = A_Nu
d_acier['ELAS'] = _F(**d_elas)

MATACIER=DEFI_MATERIAU( BPEL_ACIER=_F(),
                       **d_acier
                      )

d_affe_materiau['AFFE'].append(_F(GROUP_MA = l_cable, MATER = MATACIER,),)

CHMATER=AFFE_MATERIAU(MAILLAGE=MAIL,
                       **d_affe_materiau)

#------------------------------------------------------------------------
d_cara_elem = {}
l_cara = []


for nom in l_cable:
        prefix = nom.split('_')[0]
        l_cara.append(_F(GROUP_MA = nom,
                         SECTION='GENERALE',
                         CARA='A',
                         VALE=(d_aire[prefix],)),)

d_cara_elem['BARRE'] = l_cara

if len(d_cara_elem):
  CARAELE=AFFE_CARA_ELEM(MODELE=MODELE,
                      **d_cara_elem
                     )

#------------------------------------------------------------------------
# Conditions aux limites et chargement
#------------------------------------------------------------------------
l_excit_encast = []

d_affe_char_meca = {}
d_affe_char_meca['DDL_IMPO'] = _F(DX=0., DY=0., DZ=0., GROUP_NO = 'ENCAST')

CHARBLOQ=AFFE_CHAR_MECA(MODELE=MODELE,
                        **d_affe_char_meca)

l_excit_encast.append(_F(CHARGE=CHARBLOQ))

#------------------------------------------------------------------------
# Définition des câbles
#------------------------------------------------------------------------
l_group_cable = ['CV','CH']
d_defi_cable = {}

for prefix in l_group_cable :
    d_defi_cable[prefix]=[]

l_group_modele = []
for nom_cable in l_cable:
  l_group_modele.append(nom_cable)

for group_ma in l_cable:
    group_ma_prefix = group_ma.split('_')[0]
    nom_group_ma = group_ma.strip()
    nom_noeud_debut = nom_group_ma + '_A'
    nom_noeud_fin = nom_group_ma + '_B'
    defi_cable = _F(GROUP_MA = nom_group_ma,
                        GROUP_NO_ANCRAGE = (nom_noeud_debut,nom_noeud_fin),
                   )
    d_defi_cable[group_ma_prefix].append(defi_cable)

l_tor = {}
l_cable_bp = []
l_cable_bp_cine = []
i = -1

for prefix in l_group_cable:
    i+=1
    l_tor[i] = DEFI_CABLE_BP(MODELE       = MODELE,
                             CHAM_MATER     = CHMATER,
                             CARA_ELEM      = CARAELE,
                             GROUP_MA_BETON = ('CYL',),
                             TYPE_ANCRAGE   = ('ACTIF','ACTIF'),
                             TENSION_INIT   = d_tension[prefix],
                             RECUL_ANCRAGE  = 0.0,
                             DEFI_CABLE     = d_defi_cable[prefix],
                             )

    l_cable_bp.append(l_tor[i])
    l_cable_bp_cine.append(_F(CABLE_BP=l_tor[i],
                              SIGM_BPEL='NON',
                              RELA_CINE='OUI',))



DEFI_FICHIER(UNITE=82, FICHIER='./fort.82')

# IMPRESSION DES CONCEPTS CABLE_PRECONT

IMPR_CO(UNITE=82,CONCEPT=_F(NOM=l_tor[0]))

DEFI_FICHIER(UNITE=82, ACTION='LIBERER')

DEFI_FICHIER(UNITE=83, FICHIER='./fort.83')

# IMPRESSION DES CONCEPTS CABLE_PRECONT

IMPR_CO(UNITE=83,CONCEPT=_F(NOM=l_tor[1]))

DEFI_FICHIER(UNITE=83, ACTION='LIBERER')



TEST_FICHIER(FICHIER='./fort.82',
             NB_VALE=8584488,
             VALE_CALC=2.979387165549E+12,
             TOLE_MACHINE = 1E-7,
             EXPR_IGNORE = ( 'ASTER',),
             )

TEST_FICHIER(FICHIER='./fort.83',
             NB_VALE=18355435,
             VALE_CALC=1.1032120645186E+13,
             TOLE_MACHINE = 1E-7,
             EXPR_IGNORE = ( 'ASTER',),
             )

FIN();
