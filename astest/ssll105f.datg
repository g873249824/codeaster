# -*- coding: iso-8859-1 -*-

###
### This file is generated automatically by SALOME v6.4.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
theStudy = salome.myStudy

import salome_notebook
notebook = salome_notebook.notebook
sys.path.insert( 0, r'/home/aster/Flamb')

import iparameters
ipar = iparameters.IParameters(salome.myStudy.GetCommonParameters("Interface Applicative", 1))

#Set up visual properties:
ipar.setProperty("AP_ACTIVE_VIEW", "VTKViewer_0_0")
ipar.setProperty("AP_WORKSTACK_INFO", "000000010000000000000002010000000100000588000000040000000200000002000000080000001a004f00430043005600690065007700650072005f0030005f00300000000102000000080000001a00560054004b005600690065007700650072005f0030005f00300000000202")
ipar.setProperty("AP_ACTIVE_MODULE", "Mesh")
ipar.setProperty("AP_SAVEPOINT_NAME", "GUI state: 1")
#Set up lists:
# fill list AP_VIEWERS_LIST
ipar.append("AP_VIEWERS_LIST", "OCCViewer_1")
ipar.append("AP_VIEWERS_LIST", "VTKViewer_2")
# fill list OCCViewer_1
ipar.append("OCCViewer_1", "OCC scene:1 - viewer:1")
ipar.append("OCCViewer_1", "scale=2.491666314739e+00*centerX=1.987553292483e+02*centerY=-9.275248698253e+01*projX=0.000000000000e+00*projY=0.000000000000e+00*projZ=1.000000000000e+00*twist=0.000000000000e+00*atX=0.000000000000e+00*atY=0.000000000000e+00*atZ=0.000000000000e+00*eyeX=0.000000000000e+00*eyeY=0.000000000000e+00*eyeZ=5.000000000000e+02*scaleX=1.000000000000e+00*scaleY=1.000000000000e+00*scaleZ=1.000000000000e+00*isVisible=1*size=255.00*gtIsVisible=0*gtDrawNameX=1*gtDrawNameY=1*gtDrawNameZ=1*gtNameX=X*gtNameY=Y*gtNameZ=Z*gtNameColorRX=255*gtNameColorGX=0*gtNameColorBX=0*gtNameColorRY=0*gtNameColorGY=255*gtNameColorBY=0*gtNameColorRZ=0*gtNameColorGZ=0*gtNameColorBZ=255*gtDrawValuesX=1*gtDrawValuesY=1*gtDrawValuesZ=1*gtNbValuesX=3*gtNbValuesY=3*gtNbValuesZ=3*gtOffsetX=2*gtOffsetY=2*gtOffsetZ=2*gtColorRX=255*gtColorGX=0*gtColorBX=0*gtColorRY=0*gtColorGY=255*gtColorBY=0*gtColorRZ=0*gtColorGZ=0*gtColorBZ=255*gtDrawTickmarksX=1*gtDrawTickmarksY=1*gtDrawTickmarksZ=1*gtTickmarkLengthX=5*gtTickmarkLengthY=5*gtTickmarkLengthZ=5")
# fill list VTKViewer_2
ipar.append("VTKViewer_2", "VTK scene:2 - viewer:1")
ipar.append("VTKViewer_2", """<?xml version="1.0"?>
<ViewState>
    <Position X="127.5" Y="-112.5" Z="2691.74"/>
    <FocalPoint X="127.5" Y="-112.5" Z="0"/>
    <ViewUp X="0" Y="1" Z="0"/>
    <ViewScale Parallel="180.312" X="1" Y="1" Z="1"/>
    <DisplayCubeAxis Show="0"/>
    <GraduatedAxis Axis="X">
        <Title isVisible="1" Text="X" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Y">
        <Title isVisible="1" Text="Y" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Z">
        <Title isVisible="1" Text="Z" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <Trihedron isShown="1" Size="1"/>
</ViewState>
""")
# fill list AP_MODULES_LIST
ipar.append("AP_MODULES_LIST", "Geometry")
ipar.append("AP_MODULES_LIST", "Mesh")


###
### GEOM component
###

import GEOM
import geompy
import math
import SALOMEDS


geompy.init_geom(theStudy)

A = geompy.MakeVertex(0, -15, 0)
B = geompy.MakeVertex(0, 15, 0)
Line_1 = geompy.MakeLineTwoPnt(A, B)
O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Part_A = geompy.MakePrismVecH(Line_1, OX, 225)
[Edge_1] = geompy.SubShapes(Part_A, [10])
Part_B = geompy.MakePrismVecH(Edge_1, OX, 30)
[Edge_2] = geompy.SubShapes(Part_B, [3])
Part_C = geompy.MakePrismVecH(Edge_2, OY, -225)
Poutre = geompy.MakeCompound([Part_A, Part_B, Part_C])
[Encas] = geompy.SubShapes(Poutre, [10])
[Charge] = geompy.SubShapes(Poutre, [24])
listSubShapeIDs = geompy.SubShapeAllIDs(Poutre, geompy.ShapeType["SHAPE"])
geomObj_1 = geompy.GetSubShape(Poutre, [2])
geompy.addToStudy( A, 'A' )
geompy.addToStudy( B, 'B' )
geompy.addToStudy( Line_1, 'Line_1' )
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Part_A, 'Part_A' )
geompy.addToStudyInFather( Part_A, Edge_1, 'Edge_1' )
geompy.addToStudy( Part_B, 'Part_B' )
geompy.addToStudyInFather( Part_B, Edge_2, 'Edge_2' )
geompy.addToStudy( Part_C, 'Part_C' )
geompy.addToStudy( Poutre, 'Poutre' )
geompy.addToStudyInFather( Poutre, Encas, 'Encas' )
geompy.addToStudyInFather( Poutre, Charge, 'Charge' )

### Store presentation parameters of displayed objects
import iparameters
ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "GEOM", 1))

#Set up entries:
# set up entry GEOM_1 (A) parameters
objId = geompy.getObjectID(A)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_10 (Part_C) parameters
objId = geompy.getObjectID(Part_C)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_11 (Poutre) parameters
objId = geompy.getObjectID(Poutre)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_11:4 (Encas) parameters
objId = geompy.getObjectID(Encas)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_11:5 (Charge) parameters
objId = geompy.getObjectID(Charge)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_2 (B) parameters
objId = geompy.getObjectID(B)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_3 (Line_1) parameters
objId = geompy.getObjectID(Line_1)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_8 (Part_A) parameters
objId = geompy.getObjectID(Part_A)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_8:3 (Edge_1) parameters
objId = geompy.getObjectID(Edge_1)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_9 (Part_B) parameters
objId = geompy.getObjectID(Part_B)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_9:3 (Edge_2) parameters
objId = geompy.getObjectID(Edge_2)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")

###
### SMESH component
###

import smesh, SMESH, SALOMEDS

smesh.SetCurrentStudy(theStudy)
import StdMeshers
Equerre_Q8 = smesh.Mesh(Poutre)
Regular_1D = Equerre_Q8.Segment()
Local_Length_1 = Regular_1D.LocalLength(7.5)
Local_Length_1.SetPrecision( 1e-07 )
Quadrangle_2D = Equerre_Q8.Quadrangle()
isDone = Equerre_Q8.Compute()
equerre = Equerre_Q8.GroupOnGeom(Poutre,'Poutre',SMESH.FACE)
Encas_1 = Equerre_Q8.GroupOnGeom(Encas,'Encas',SMESH.EDGE)
Charge_1 = Equerre_Q8.GroupOnGeom(Charge,'Charge',SMESH.NODE)
smesh.SetName(Equerre_Q8, 'Poutre_L_Q4')
Equerre_Q8.ExportMED( r'/home/aster/Flamb/Poutre_L_Q4.med', 0, SMESH.MED_V2_2, 1 )
equerre.SetName( 'equerre' )
smesh.SetName(Equerre_Q8, 'Poutre_L_Q4')
Equerre_Q8.ExportMED( r'/home/aster/Flamb/Poutre_L_Q4.med', 0, SMESH.MED_V2_2, 1 )
smesh.SetName(Equerre_Q8, 'Equerre_Q4')
Equerre_Q8.ExportMED( r'/home/aster/Flamb/Equerre_Q4.med', 0, SMESH.MED_V2_2, 1 )
Equerre_Q8.ConvertToQuadratic( 0 )
smesh.SetName(Equerre_Q8, 'Equerre_Q8')
Equerre_Q8.ExportMED( r'/home/aster/Flamb/Equerre_Q8.med', 0, SMESH.MED_V2_2, 1 )

## set object names
smesh.SetName(Equerre_Q8.GetMesh(), 'Equerre_Q8')
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Local_Length_1, 'Local Length_1')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(equerre, 'equerre')
smesh.SetName(Encas_1, 'Encas')
smesh.SetName(Charge_1, 'Charge')

### Store presentation parameters of displayed objects
import iparameters
ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "SMESH", 1))

#Set up entries:
# set up entry SMESH_3 (Equerre_Q8) parameters
ipar.setParameter("SMESH_3", "VTKViewer_0_Visibility", "On")
ipar.setParameter("SMESH_3", "VTKViewer_0_Representation", "2")
ipar.setParameter("SMESH_3", "VTKViewer_0_IsShrunk", "0")
ipar.setParameter("SMESH_3", "VTKViewer_0_Entities", "e:1:f:1:v:0")
ipar.setParameter("SMESH_3", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:-100:edge:0:0.666667:1:node:1:0:0:outline:0:0.27451:0")
ipar.setParameter("SMESH_3", "VTKViewer_0_Sizes", "line:1:shrink:0.75")
ipar.setParameter("SMESH_3", "VTKViewer_0_PointMarker", "std:1:9")
ipar.setParameter("SMESH_3", "VTKViewer_0_Opacity", "1")
ipar.setParameter("SMESH_3", "VTKViewer_0_ClippingPlane", "Off")


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser(1)
  iparameters.getSession().restoreVisualState(1)
