# TITRE VALIDATION ELEMENTAIRE DE L'OPERATEUR POST_RUPTURE
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# person_in_charge: samuel.geniaut at edf.fr

DEBUT(CODE=_F(NOM='ZZZZ287A',
              NIV_PUB_WEB='INTERNET',
              VISU_EFICAS='OUI'),
      DEBUG=_F(SDVERI='OUI'),
      IGNORE_ALARM='RUPTURE1_60',
      )

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'K1_NEGATIF'
#---------------------------------------------------------------------------------------

e=205000.0E6
nu = 0.3
E=DEFI_CONSTANTE(VALE=e)
NU=DEFI_CONSTANTE(VALE=nu)

ACIER=DEFI_MATERIAU(ELAS_FO=_F(E=E,
                               NU=NU))
# en 3D
TAB=LIRE_TABLE(UNITE=44, FORMAT='ASTER')

TAB=POST_RUPTURE(TABLE=TAB,
                 reuse=TAB,
                 OPERATION='K1_NEGATIF',
                 MODELISATION='3D',
                 MATER=ACIER)

IMPR_TABLE(TABLE=TAB)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-14,
           VALE_CALC= 0.00000000000000E+00,
           VALE_REFE=0.0,
           TOLE_MACHINE=1.E-14,
           NOM_PARA='K1',
           TYPE_TEST='MIN',
           TABLE=TAB,)

Gref3D = (1-nu**2)/e * (2e6*2e6) +  (1+nu)/e * 3e6*3e6

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-14,
           VALE_CALC=Gref3D,
           VALE_REFE=Gref3D,
           TOLE_MACHINE=1.E-14,
           NOM_PARA='G',
           TABLE=TAB,
           FILTRE=_F(NOM_PARA='NUM_PT',
                     VALE_I=1,),
           )

DETRUIRE(CONCEPT=_F(NOM=TAB),INFO=1)

# en C_PLAN
TAB=LIRE_TABLE(UNITE=45, FORMAT='ASTER')

TAB=POST_RUPTURE(TABLE=TAB,
                 reuse=TAB,
                 OPERATION='K1_NEGATIF',
                 MODELISATION='C_PLAN',
                 MATER=ACIER)

IMPR_TABLE(TABLE=TAB)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-14,
           VALE_CALC= 0.00000000000000E+00,
           VALE_REFE=0.0,
           TOLE_MACHINE=1.E-14,
           NOM_PARA='K1',
           TYPE_TEST='MIN',
           TABLE=TAB,)

GrefCP = 1./e

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-14,
           VALE_CALC=GrefCP,
           VALE_REFE=GrefCP,
           TOLE_MACHINE=1.E-14,
           NOM_PARA='G',
           TABLE=TAB,
           FILTRE=(_F(NOM_PARA='NUM_PT',
                      VALE_I=6,),
                   _F(NOM_PARA='INST',
                      VALE=2.,),),);

DETRUIRE(CONCEPT=_F(NOM=TAB),INFO=1)

# en D_PLAN
TAB=LIRE_TABLE(UNITE=45, FORMAT='ASTER')

TAB=POST_RUPTURE(TABLE=TAB,
                 reuse=TAB,
                 OPERATION='K1_NEGATIF',
                 MODELISATION='D_PLAN',
                 MATER=ACIER)

IMPR_TABLE(TABLE=TAB)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-14,
           VALE_CALC= 0.00000000000000E+00,
           VALE_REFE=0.0,
           TOLE_MACHINE=1.E-14,
           NOM_PARA='K1',
           TYPE_TEST='MIN',
           TABLE=TAB,)

GrefDP = (1.-nu**2)/e

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-14,
           VALE_CALC=GrefDP,
           VALE_REFE=GrefDP,
           TOLE_MACHINE=1.E-14,
           NOM_PARA='G',
           TABLE=TAB,
           FILTRE=(_F(NOM_PARA='NUM_PT',
                      VALE_I=6,),
                   _F(NOM_PARA='INST',
                      VALE=2.,),),);

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'ABSC_CURV_NORM'
#---------------------------------------------------------------------------------------

TAB=POST_RUPTURE(TABLE=TAB,
                 reuse=TAB,
                 OPERATION='ABSC_CURV_NORM')

IMPR_TABLE(TABLE=TAB)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-14,
           VALE_CALC=1.000000000000000,
           VALE_REFE=1.0,
           TOLE_MACHINE=1.E-14,
           NOM_PARA='ABSC_CURV_NORM',
           TYPE_TEST='MAX',
           TABLE=TAB,)

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'ANGLE_BIFURCATION'
#---------------------------------------------------------------------------------------

l_crit_bifurcation = ['SITT_MAX','K1_MAX','K2_NUL',]

for crit in l_crit_bifurcation :

   TAB=POST_RUPTURE(TABLE=TAB,
                    reuse=TAB,
                    OPERATION='ANGLE_BIFURCATION',
                    CRITERE=crit,
                    NOM_PARA='BETA_'+crit)

IMPR_TABLE(TABLE=TAB)

# TEST EN K1 PUR POUR TOUS LES CRITERES
for crit in l_crit_bifurcation :
   TEST_TABLE(CRITERE='ABSOLU',
              REFERENCE='ANALYTIQUE',
              PRECISION=1.E-14,
              VALE_CALC= 0.00000000000000E+00,
              VALE_REFE=0.0,
              TOLE_MACHINE=1.E-14,
              NOM_PARA='BETA_SITT_MAX',
              TABLE=TAB,
              FILTRE=(_F(CRIT_COMP='EQ',
                         NOM_PARA='INST',
                         VALE=1.0,),
                      _F(CRIT_COMP='EQ',
                         NOM_PARA='NUM_PT',
                         VALE_I=1,),
                      ),
              )

# TEST EN K1=-K2 POUR TOUS LES CRITERES
beta_ref = [11.202877689339, 10, 10]
for i,crit in enumerate(l_crit_bifurcation):
   TEST_TABLE(CRITERE='RELATIF',
              REFERENCE='ANALYTIQUE',
              PRECISION=9.9999999999999998E-13,
              VALE_CALC=beta_ref[i],
              VALE_REFE=beta_ref[i],
              TOLE_MACHINE=9.9999999999999998E-13,
              NOM_PARA='BETA_'+crit,
              TABLE=TAB,
              FILTRE=(_F(CRIT_COMP='EQ',
                         NOM_PARA='INST',
                         VALE=1.0,),
                      _F(CRIT_COMP='EQ',
                         NOM_PARA='NUM_PT',
                         VALE_I=5,),
                      ),
              )

# TEST EN K2 PUR POUR TOUS LES CRITERES SAUF K2_NUL
beta_ref = [-atan(sqrt(8))*180/pi, -80]
for i,crit in enumerate(l_crit_bifurcation[0:2] ):
   TEST_TABLE(CRITERE='RELATIF',
              REFERENCE='ANALYTIQUE',
              PRECISION=9.9999999999999998E-13,
              VALE_CALC=beta_ref[i],
              VALE_REFE=beta_ref[i],
              TOLE_MACHINE=9.9999999999999998E-13,
              NOM_PARA='BETA_'+crit,
              TABLE=TAB,
              FILTRE=(_F(CRIT_COMP='EQ',
                         NOM_PARA='INST',
                         VALE=2.0,),
                      _F(CRIT_COMP='EQ',
                         NOM_PARA='NUM_PT',
                         VALE_I=6,),
                      ),
              )

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'K_EQ'
#---------------------------------------------------------------------------------------

l_crit_cumul_1 = ['CUMUL_G','QUADRATIQUE',]
l_crit_cumul_2 = ['LINEAIRE','MODE_I']

for crit in l_crit_cumul_1 :

   TAB=POST_RUPTURE(TABLE=TAB,
                    reuse=TAB,
                    OPERATION='K_EQ',
                    CUMUL=crit,
                    NOM_PARA='K_EQ_'+crit,
                    MATER=ACIER)

for crit in l_crit_cumul_2:

   TAB=POST_RUPTURE(TABLE=TAB,
                    reuse=TAB,
                    OPERATION='K_EQ',
                    CUMUL=crit,
                    NOM_PARA='K_EQ_'+crit)

IMPR_TABLE(TABLE=TAB)

TEST_TABLE(CRITERE='RELATIF',
           VALE_CALC=4.746311E+05,
           
           NOM_PARA='K_EQ_CUMUL_G',
           TABLE=TAB,
           FILTRE=(_F(CRIT_COMP='EQ',
                      NOM_PARA='NUM_PT',
                      VALE_I=1,),
                   _F(CRIT_COMP='EQ',
                      NOM_PARA='NUME_ORDRE',
                      VALE_I=1,),
                   ),
           )

TEST_TABLE(CRITERE='RELATIF',
           VALE_CALC=1.0,
           
           NOM_PARA='K_EQ_QUADRATIQUE',
           TABLE=TAB,
           FILTRE=(_F(CRIT_COMP='EQ',
                      NOM_PARA='NUM_PT',
                      VALE_I=1,),
                   _F(CRIT_COMP='EQ',
                      NOM_PARA='NUME_ORDRE',
                      VALE_I=1,),
                   ),
           )

TEST_TABLE(CRITERE='RELATIF',
           VALE_CALC=1.0,
           
           NOM_PARA='K_EQ_LINEAIRE',
           TABLE=TAB,
           FILTRE=(_F(CRIT_COMP='EQ',
                      NOM_PARA='NUM_PT',
                      VALE_I=1,),
                   _F(CRIT_COMP='EQ',
                      NOM_PARA='NUME_ORDRE',
                      VALE_I=1,),
                   ),
           )

TEST_TABLE(CRITERE='RELATIF',
           VALE_CALC=1.0,
           
           NOM_PARA='K_EQ_MODE_I',
           TABLE=TAB,
           FILTRE=(_F(CRIT_COMP='EQ',
                      NOM_PARA='NUM_PT',
                      VALE_I=1,),
                   _F(CRIT_COMP='EQ',
                      NOM_PARA='NUME_ORDRE',
                      VALE_I=1,),
                   ),
           )

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'COMPTAGE_CYCLES'
#---------------------------------------------------------------------------------------

# test du comptage RAINFLOW
TAB2=LIRE_TABLE(UNITE=46, FORMAT='ASTER')

TAB3=POST_RUPTURE(TABLE=TAB2,
                  OPERATION='COMPTAGE_CYCLES',
                  NOM_PARA=('K_EQ','K_EQBIS'),
                  COMPTAGE='RAINFLOW',
                  DELTA_OSCI=0.3)

IMPR_TABLE(TABLE=TAB3)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_CALC_I=12,
           VALE_REFE_I=12,
           NOM_PARA='CYCLE',
           TYPE_TEST='MAX',
           TABLE=TAB3,
           FILTRE=_F(CRIT_COMP='EQ',
                     NOM_PARA='NUM_PT',
                     VALE_I=1,),
           )

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='CYCLE',
           TYPE_TEST='MAX',
           TABLE=TAB3,
           FILTRE=_F(CRIT_COMP='EQ',
                     NOM_PARA='NUM_PT',
                     VALE_I=2,),
           )

# test du comptage unitaire
TAB4=LIRE_TABLE(UNITE=47, FORMAT='ASTER')

TAB5=POST_RUPTURE(TABLE=TAB4,
                  OPERATION='COMPTAGE_CYCLES',
                  NOM_PARA=('K1','K2'),
                  COMPTAGE='UNITAIRE',
                  COEF_MULT_MINI=10.,
                  COEF_MULT_MAXI=20.)

IMPR_TABLE(TABLE=TAB5)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=40.000000000,
           VALE_REFE=40.0,
           NOM_PARA='DELTA_K1',
           TABLE=TAB5,
           FILTRE=_F(CRIT_COMP='EQ',
                     NOM_PARA='NUM_PT',
                     VALE_I=1,),
           )

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'DELTA_K_EQ'
#---------------------------------------------------------------------------------------

l_crit_cumul_1 = ['CUMUL_G','QUADRATIQUE',]
l_crit_cumul_2 = ['MODE_I']

TAB51 =  CALC_TABLE(TABLE=TAB5,
                    ACTION=_F(OPERATION='AJOUT_COLONNE',NOM_PARA='G',VALE=1.0))

for crit in l_crit_cumul_1 :

   TAB51=POST_RUPTURE(TABLE=TAB51,
                    reuse=TAB51,
                    OPERATION='DELTA_K_EQ',
                    CUMUL=crit,
                    NOM_PARA='D_K_EQ_'+crit,
                    MATER=ACIER)

for crit in l_crit_cumul_2:

   TAB51=POST_RUPTURE(TABLE=TAB51,
                    reuse=TAB51,
                    OPERATION='DELTA_K_EQ',
                    CUMUL=crit,
                    NOM_PARA='D_K_EQ_'+crit)

IMPR_TABLE(TABLE=TAB51)

TEST_TABLE(CRITERE='RELATIF',
           VALE_CALC=4.746311E+05,
           
           NOM_PARA='D_K_EQ_CUMUL_G',
           TABLE=TAB51,
           FILTRE=_F(CRIT_COMP='EQ',
                     NOM_PARA='NUM_PT',
                     VALE_I=1,),
           )

TEST_TABLE(CRITERE='RELATIF',
           VALE_CALC=56.5685,
           
           NOM_PARA='D_K_EQ_QUADRATIQ',
           TABLE=TAB51,
           FILTRE=_F(CRIT_COMP='EQ',
                     NOM_PARA='NUM_PT',
                     VALE_I=1,),
           )

TEST_TABLE(CRITERE='RELATIF',
           VALE_CALC=40.0,
           
           NOM_PARA='D_K_EQ_MODE_I',
           TABLE=TAB51,
           FILTRE=_F(CRIT_COMP='EQ',
                     NOM_PARA='NUM_PT',
                     VALE_I=1,),
           )

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'LOI_PROPA'
#---------------------------------------------------------------------------------------

TAB3=POST_RUPTURE(TABLE=TAB3,
                  reuse=TAB3,
                  OPERATION='LOI_PROPA',
                  LOI='PARIS',
                  C=1,
                  M=2.)

IMPR_TABLE(TABLE=TAB3)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=36.000000000,
           VALE_REFE=36.0,
           NOM_PARA='DELTA_A',
           TABLE=TAB3,
           FILTRE=(_F(CRIT_COMP='EQ',
                      NOM_PARA='NUM_PT',
                      VALE_I=1,),
                   _F(CRIT_COMP='EQ',
                      NOM_PARA='CYCLE',
                      VALE_I=1,),
                   ),
           )

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'CUMUL_CYCLES'
#---------------------------------------------------------------------------------------

TAB6=POST_RUPTURE(TABLE=TAB3,
                  OPERATION='CUMUL_CYCLES')

IMPR_TABLE(TABLE=TAB6)

da_ref = 227./6.
TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=37.833333333333333,
           VALE_REFE=da_ref,
           NOM_PARA='DELTA_A',
           TABLE=TAB6,
           FILTRE=_F(CRIT_COMP='EQ',
                     NOM_PARA='NUM_PT',
                     VALE_I=1,),
           )

#---------------------------------------------------------------------------------------
#  VALIDATION DE L'OPERATEUR POST_RUPTURE, OPERATION = 'PILO_PROPA'
#---------------------------------------------------------------------------------------

# validation dans le cas de 2 fissures dont la 1ere possede 2 fonds

# lecture de la table des DA pour le 2eme fond de la 1ere fissure
TAB7=LIRE_TABLE(UNITE=51, FORMAT='ASTER')

# combinaison des 2 tables (une pour chacun des 2 fonds de la 1ere fissure)
# et on supprime les colonnes inutiles
TAB67=CALC_TABLE(TABLE=TAB6,
                 ACTION=(_F(OPERATION='COMB',TABLE=TAB7,NOM_PARA=('NUM_PT','NUME_FOND')),
                         _F(OPERATION='SUPPRIME',NOM_PARA=('DELTA_K_EQ','DELTA_K_EQBIS')),
                         )
                  )

IMPR_TABLE(TABLE=TAB67)

# lecture de la table des DA pour le 1er fond de la 2eme fissure
TAB8=LIRE_TABLE(UNITE=52, FORMAT='ASTER')

# test du pilotage en increment de nombre de cycles
dn = 100.
TAB9=POST_RUPTURE(OPERATION='PILO_PROPA',
                  TABLE=(TAB67,TAB8),
                  DELTA_N = dn)

IMPR_TABLE(TABLE=TAB9)

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           VALE_CALC= 3.7833333333333E+03,
           VALE_REFE=da_ref * dn,
           NOM_PARA='DELTA_A',
           TABLE=TAB9,
           FILTRE=(_F(NOM_PARA='FISSURE',
                      VALE_K='FISS1',),
                   _F(NOM_PARA='NUME_FOND',
                      VALE_I=1,),
                   _F(NOM_PARA='NUM_PT',
                      VALE_I=1,),
                   ),
           )

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=100.000000000,
           VALE_REFE=dn,
           NOM_PARA='DELTA_CYCLE',
           TYPE_TEST='MAX',
           TABLE=TAB9,)

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=100.000000000,
           VALE_REFE=dn,
           NOM_PARA='DELTA_CYCLE',
           TYPE_TEST='MIN',
           TABLE=TAB9,)

# test du pilotage en increment d'avancee max
da_max = 1.
TAB10=POST_RUPTURE(OPERATION='PILO_PROPA',
                  TABLE=(TAB67,TAB8),
                   DELTA_A_MAX = da_max)

IMPR_TABLE(TABLE=TAB10)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=1.000000000,
           VALE_REFE=da_max,
           NOM_PARA='DELTA_A',
           TABLE=TAB10,
           FILTRE=(_F(NOM_PARA='FISSURE',
                      VALE_K='FISS1',),
                   _F(NOM_PARA='NUME_FOND',
                      VALE_I=1,),
                   _F(NOM_PARA='NUM_PT',
                      VALE_I=1,),
                   ),
           )

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=0.026431718,
           VALE_REFE=da_max/da_ref,
           NOM_PARA='DELTA_CYCLE',
           TYPE_TEST='MAX',
           TABLE=TAB10,)

TEST_TABLE(CRITERE='ABSOLU',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=0.026431718,
           VALE_REFE=da_max/da_ref,
           NOM_PARA='DELTA_CYCLE',
           TYPE_TEST='MIN',
           TABLE=TAB10,)

#---------------------------------------------------------------------------------------


FIN()
