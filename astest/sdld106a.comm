# MODIF  DATE 04/09/2012   AUTEUR LADIER A.LADIER 
# TITRE VALIDATION INFORMATIQUE DE MACR_ADAP_MAIL
# sdld106a.para = tps_job 60 mem_job 300Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NOM='SDLD106A', 
              NIV_PUB_WEB='INTERNET',
              VISU_EFICAS='NON'), 
      DEBUG=_F(SDVERI='NON'),
      IGNORE_ALARM='CALCULEL3_40',);

POUTRE=LIRE_MAILLAGE()

MODELE=AFFE_MODELE(MAILLAGE=POUTRE,
                   AFFE=_F(TOUT='OUI',
                   PHENOMENE='MECANIQUE',
                   MODELISATION='2D_DIS_TR'))

k1 = 4.*pi*pi
m1 = 100.
c1 = 4.e-1*pi  # amortissement reduit de 0.01
k2 = 1.e10
m2 = 0.

CHAMPCAR=AFFE_CARA_ELEM(MODELE=MODELE,
                        DISCRET_2D=(_F(GROUP_MA='LIAISON',
                                       CARA='K_TR_D_L',
                                       VALE=(k1,k2,k2,),),
                                    _F(GROUP_MA='MOBILE',
                                       CARA='M_TR_N',
                                       VALE=(m1,m2,m1,m2,m2,m2,),),
                                    _F(GROUP_MA='MOBILE',
                                       CARA='A_TR_D_N',
                                       VALE=(0.,0.,0.,),),
                                    _F(GROUP_MA='LIAISON',
                                       CARA='A_TR_D_L',
                                       VALE=(c1,c1,c1,),),),);

CHARGE=AFFE_CHAR_MECA(MODELE=MODELE,
                      DDL_IMPO=(_F(GROUP_NO='FIXE',
                                   DX=0.,DY=0.,DRZ=0.,),),);

RIGIELEM=CALC_MATR_ELEM(MODELE=MODELE,
                        CHARGE=CHARGE,
                        CARA_ELEM=CHAMPCAR,
                        OPTION='RIGI_MECA');

MASSELEM=CALC_MATR_ELEM(MODELE=MODELE,
                        CHARGE=CHARGE,
                        CARA_ELEM=CHAMPCAR,
                        OPTION='MASS_MECA',);

AMORELEM=CALC_MATR_ELEM(MODELE=MODELE,
                        CARA_ELEM=CHAMPCAR,
                        OPTION='AMOR_MECA');

NUMEROTA=NUME_DDL(MATR_RIGI=RIGIELEM,);

MATRRIGI=ASSE_MATRICE(MATR_ELEM=RIGIELEM,
                      NUME_DDL=NUMEROTA,);

MATRMASS=ASSE_MATRICE(MATR_ELEM=MASSELEM,
                      NUME_DDL=NUMEROTA,);

MATRAMOR=ASSE_MATRICE(MATR_ELEM=AMORELEM,
                      NUME_DDL=NUMEROTA,);

def sqrt(x):
    return x**.5

f1 = sqrt(k1/(4.*pi*pi*m1))
df1k1 = 1./(4.*pi*sqrt(m1*k1))
df1m1 = -f1/(2.*m1)

f1e = f1*(1.+1.e-4)

MODES=MODE_ITER_SIMULT(MATR_A=MATRRIGI,
                       MATR_B=MATRMASS,
                       CALC_FREQ=_F(OPTION='CENTRE',
                                    NMAX_FREQ=1,
                                    FREQ=(f1e,),),);

TEST_RESU(RESU=(_F(RESULTAT=MODES,
                   NUME_ORDRE=1, 
                   PARA='FREQ',
                   VALE=f1, 
                   CRITERE='RELATIF', 
                   PRECISION=1.E-4,
                   REFERENCE='ANALYTIQUE',),
                _F(RESULTAT=MODES,
                   NUME_ORDRE=1, 
                   PARA='FREQ',
                   VALE=0.1, 
                   CRITERE='RELATIF', 
                   PRECISION=1.E-6,
                   REFERENCE='NON_REGRESSION',),),);

I_DEBUT = 0.
I_FIN = 1.

fext = 1.

CHF=AFFE_CHAR_MECA(MODELE=MODELE,
                   FORCE_NODALE=(_F(GROUP_NO='MOBILE', 
                                    FX=fext),),);

L_TEMPS=DEFI_LIST_REEL(DEBUT=I_DEBUT,
                       INTERVALLE=_F(JUSQU_A=I_FIN,
                                     NOMBRE=100,),);

FORCE=FORMULE(NOM_PARA='INST',
              VALE='sin(INST)',);

FC=CALC_FONC_INTERP(FONCTION=FORCE,
                    LIST_PARA=L_TEMPS,
                    NOM_PARA='INST',
                    PROL_GAUCHE='CONSTANT',
                    PROL_DROITE='CONSTANT',);

F_DEBUT = 0.5*f1
F_FIN = 1.5*f1

L_FREQ=DEFI_LIST_REEL(DEBUT=F_DEBUT,
                      INTERVALLE=_F(JUSQU_A=F_FIN,
                                    NOMBRE=2,),);

DYTRN=DYNA_VIBRA(TYPE_CALCUL='TRAN',
                 BASE_CALCUL='PHYS',
                 MODELE=MODELE,
                 CARA_ELEM=CHAMPCAR,
                 MATR_MASS=MATRMASS, 
                 MATR_RIGI=MATRRIGI,
                 INCREMENT=_F(LIST_INST=L_TEMPS,),
                 EXCIT=(_F(FONC_MULT=FC,
                           CHARGE=CHF),),
                 SCHEMA_TEMPS=_F(SCHEMA='NEWMARK',),);

DYHAN=DYNA_VIBRA(TYPE_CALCUL='HARM',
                 BASE_CALCUL='PHYS',
                 MODELE=MODELE,
                 CARA_ELEM=CHAMPCAR,
                 MATR_MASS=MATRMASS, 
                 MATR_RIGI=MATRRIGI,
                 MATR_AMOR=MATRAMOR, 
                 LIST_FREQ=L_FREQ,
                 TOUT_CHAM='OUI',
                 EXCIT=(_F(COEF_MULT_C=1.+0.j,
                           CHARGE=CHF),),);

omega2 = k1/m1
omega = sqrt(omega2)
omega2ext = 1.
omegaext = sqrt(omega2ext)
x_fin = fext*(sin(omegaext*I_FIN) - sin(omega*I_FIN)*omegaext/omega)/(m1*(omega2-omega2ext))
dx_dk1 = omegaext*(sin(omega*I_FIN)/omega - I_FIN*cos(omega*I_FIN))/(2.*m1*k1*(omega2-omega2ext))
dx_dk2 = (sin(omegaext*I_FIN) - sin(omega*I_FIN)*omegaext/omega)/(m1*m1*(omega2-omega2ext)*(omega2-omega2ext))
dx_dk = fext*(dx_dk1 - dx_dk2)
dx_dm1 = (I_FIN*cos(omega*I_FIN) - sin(omega*I_FIN)/omega)/(2.*m1*m1*(omega2-omega2ext))
dx_dm2 = omegaext*(sin(omegaext*I_FIN) - sin(omega*I_FIN)*omegaext/omega)/(m1*m1*(omega2-omega2ext)*(omega2-omega2ext))
dx_dm = fext*omegaext*(dx_dm1 + dx_dm2)

omega2_fin = (2.*pi*F_FIN)*(2.*pi*F_FIN)
x_fr1 = fext/(k1-omega2_fin*m1+(1.j)*c1)
dx_fr1_dk = -x_fr1/(k1-omega2_fin*m1+(1.j)*c1)
dx_fr1_dm = x_fr1*omega2_fin/(k1-omega2_fin*m1+(1.j)*c1)

TEST_RESU(RESU=(_F(RESULTAT=DYTRN,
                   INST=I_FIN,
                   NOM_CHAM='DEPL',
                   GROUP_NO='MOBILE',
                   CRITERE='RELATIF',
                   PRECISION=5.E-4,
                   NOM_CMP='DX',
                   VALE=(x_fin,),
                   REFERENCE='ANALYTIQUE',),
                _F(RESULTAT=DYTRN,
                   INST=I_FIN,
                   NOM_CHAM='DEPL',
                   GROUP_NO='MOBILE',
                   CRITERE='RELATIF',
                   PRECISION=1.E-6,
                   NOM_CMP='DX',
                   VALE=(1.5535093481451E-03,),
                   REFERENCE='NON_REGRESSION',),),);

TEST_RESU(RESU=(_F(RESULTAT=DYHAN,
                   FREQ = F_FIN,
                   NOM_CHAM='DEPL',
                   GROUP_NO='MOBILE',
                   CRITERE='RELATIF',
                   PRECISION=5.E-3,
                   NOM_CMP='DX',
                   VALE_C=(x_fr1,),
                   REFERENCE='ANALYTIQUE'),
                _F(RESULTAT=DYHAN,
                   FREQ = F_FIN,
                   NOM_CHAM='DEPL',
                   GROUP_NO='MOBILE',
                   CRITERE='RELATIF',
                   PRECISION=1.E-6,
                   NOM_CMP='DX',
                   VALE_C=(-0.020252571247429-4.860617099383E-04j,),
                   REFERENCE='NON_REGRESSION'),),);


FIN()

