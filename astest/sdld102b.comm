# MODIF  DATE 19/04/2010   AUTEUR GREFFET N.GREFFET 
# TITRE SOUS-STRUCT. TRANS. (MNEAL) : SYSTEME 3 MASSES - 4 RESSORTS
# sdld102b.para = tps_job 60 mem_job 128Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2001  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# CAS_TEST__: SDLD102B
#
# CE FICHIER DE COMMANDES CONTIENT LES INSTRUCTIONS POUR CALCULER LA
# REPONSE TRANSITOIRE PAR SOUS-STRUCTURATION D'UN SYSTEME COMPOSE DE
# 3 MASSES ET 4 RESSORTS SOUMIS A UNE FORCE CONSTANTE.
#
# LA BASE DE PROJECTION DES SOUS-STRUCTURES EST DE TYPE 'MNEAL'.
#
# 4 SCHEMAS D'INTEGRATION DE DYNA_TRAN_MODAL ('EULER', 'NEWMARK'
# ET 'ADAPT') SONT TESTES.
#
#
#
DEBUT(CODE=_F(NOM='SDLD102B', NIV_PUB_WEB='INTERNET'), DEBUG=_F(SDVERI='OUI'))

#
MAILLA=LIRE_MAILLAGE( )

#
MODELE=AFFE_MODELE(  MAILLAGE=MAILLA,AFFE=(
                            _F( GROUP_MA = 'RESSORT',
                                  PHENOMENE = 'MECANIQUE',
                                  MODELISATION = 'DIS_TR'),
                            _F( GROUP_NO = 'MASSE',
                                  PHENOMENE = 'MECANIQUE',
                                  MODELISATION = 'DIS_T')))

#
PARAM=AFFE_CARA_ELEM(    MODELE=MODELE,DISCRET=(
                            _F( GROUP_MA = 'RESSORT',
                                     CARA = 'K_TR_D_L',
                                     VALE = (1., 0., 0., 0., 0., 0., )),
                            _F( GROUP_NO = 'MASSE',
                                     CARA = 'M_T_D_N',
                                     VALE = (1., ))))

#  DEFINITION DES CHARGEMENTS
#------------------------------------------------------------------

CHARGE=AFFE_CHAR_MECA(  MODELE=MODELE,
         DDL_IMPO=_F( TOUT = 'OUI', DY = 0.0,  DZ = 0.0, DRX = 0., DRY = 0., DRZ = 0.))

#
CHARG1=AFFE_CHAR_MECA(    MODELE=MODELE,
                           DDL_IMPO=_F( NOEUD = 'NO1', DX = 0.0))

#
CHARG2=AFFE_CHAR_MECA(    MODELE=MODELE,
                           DDL_IMPO=_F( NOEUD = 'NO3', DX = 0.0))

#
CHARTRAN=AFFE_CHAR_MECA(        MODELE=MODELE,
                           FORCE_NODALE=_F( NOEUD = 'NO2',  FX = 1.))

#  MATRICES ET VECTEURS ELEMENTS FINIS
#------------------------------------------------------------------

K_ELEM1=CALC_MATR_ELEM(      MODELE=MODELE,
                               CHARGE=(CHARGE,CHARG1,),
                             CARA_ELEM=PARAM,
                               OPTION='RIGI_MECA')

#
M_ELEM1=CALC_MATR_ELEM(      MODELE=MODELE,
                               CHARGE=(CHARGE,CHARG1,),
                             CARA_ELEM=PARAM,
                               OPTION='MASS_MECA')

#
K_ELEM2=CALC_MATR_ELEM(      MODELE=MODELE,
                               CHARGE=(CHARGE,CHARG2,),
                             CARA_ELEM=PARAM,
                               OPTION='RIGI_MECA')

#
M_ELEM2=CALC_MATR_ELEM(      MODELE=MODELE,
                               CHARGE=(CHARGE,CHARG2,),
                             CARA_ELEM=PARAM,
                               OPTION='MASS_MECA')

#
V_ELEM=CALC_VECT_ELEM( OPTION='CHAR_MECA',
                            CHARGE=CHARTRAN)

#  NUMEROTATION DU PROBLEME ELEMENTS FINIS
#------------------------------------------------------------------

NUMDDL1=NUME_DDL(  MATR_RIGI=K_ELEM1)

NUMDDL2=NUME_DDL(  MATR_RIGI=K_ELEM2)

#  ASSEMBLAGE DES MATRICES ET VECTEURS
#------------------------------------------------------------------

K_ASSE1=ASSE_MATRICE(  MATR_ELEM=K_ELEM1,
                           NUME_DDL=NUMDDL1)

#
M_ASSE1=ASSE_MATRICE(  MATR_ELEM=M_ELEM1,
                           NUME_DDL=NUMDDL1)

#
K_ASSE2=ASSE_MATRICE(  MATR_ELEM=K_ELEM2,
                           NUME_DDL=NUMDDL2)

#
M_ASSE2=ASSE_MATRICE(  MATR_ELEM=M_ELEM2,
                           NUME_DDL=NUMDDL2)

#
V_ASSE=ASSE_VECTEUR(  VECT_ELEM=V_ELEM,
                           NUME_DDL=NUMDDL1)

#  CALCUL DES MODES PROPRES DES SOUS-STRUCTURES
#------------------------------------------------------------------

MODES1=MODE_ITER_SIMULT(     MATR_A=K_ASSE1,
                                 MATR_B=M_ASSE1,
                             CALC_FREQ=_F( NMAX_FREQ = 1))

#
MODES2=MODE_ITER_SIMULT(     MATR_A=K_ASSE2,
                                 MATR_B=M_ASSE2,
                             CALC_FREQ=_F( NMAX_FREQ = 1,
                                        DIM_SOUS_ESPACE = 1))

#  DEFINITION DES INTERFACES
#------------------------------------------------------------------

LINT1=DEFI_INTERF_DYNA(   NUME_DDL=NUMDDL1,
                             INTERFACE=_F( NOM = 'DROITE',
                                        TYPE = 'MNEAL',
                                        NOEUD = 'NO3',
                         MASQUE = ('DY', 'DZ', 'DRX', 'DRY', 'DRZ',)))

#
LINT2=DEFI_INTERF_DYNA(   NUME_DDL=NUMDDL2,
                             INTERFACE=_F( NOM = 'GAUCHE',
                                        TYPE = 'MNEAL',
                                        NOEUD = 'NO1',
                         MASQUE = ('DY', 'DZ', 'DRX', 'DRY', 'DRZ',)))

#  CALCUL DES BASES MODALES DES SOUS-STRUCTURES
#------------------------------------------------------------------

BAMO1=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = LINT1,
                                        MODE_MECA = MODES1,
                                        NMAX_MODE = 1))

#
BAMO2=DEFI_BASE_MODALE( CLASSIQUE=_F( INTERF_DYNA = LINT2,
                                        MODE_MECA = MODES2,
                                        NMAX_MODE = 1))

#  CALCUL DU MACRO-ELEMENT
#------------------------------------------------------------------

MACEL1=MACR_ELEM_DYNA(  BASE_MODALE=BAMO1)

MACEL2=MACR_ELEM_DYNA(  BASE_MODALE=BAMO2)

#  DEFINITION DU MODELE GENERALISE
#------------------------------------------------------------------

MODEGE=DEFI_MODELE_GENE( SOUS_STRUC=(_F( NOM = 'COTE1',
                                         MACR_ELEM_DYNA = MACEL1),
                             _F( NOM = 'COTE2',
                                         MACR_ELEM_DYNA = MACEL2)),
                             LIAISON=_F( SOUS_STRUC_1 = 'COTE1',
                                      SOUS_STRUC_2 = 'COTE2',
                                      INTERFACE_1 = 'DROITE',
                                      INTERFACE_2 = 'GAUCHE'),
                               VERIF=_F( STOP_ERREUR = 'OUI',
                                      PRECISION = 1.E-6,
                                      CRITERE = 'RELATIF'))

#  NUMEROTATION DU PROBLEME GENERALISE DES SOUS-STRUCTURES
#------------------------------------------------------------------

NUMEGE=NUME_DDL_GENE(  MODELE_GENE=MODEGE)

#  ASSEMBLAGE DES MATRICES ET VECTEURS
#------------------------------------------------------------------

MASGEN=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='MASS_GENE')

#
RIGGEN=ASSE_MATR_GENE(  NUME_DDL_GENE=NUMEGE,
                                  OPTION='RIGI_GENE')

#
FGEN=ASSE_VECT_GENE(    NUME_DDL_GENE=NUMEGE,
                         CHAR_SOUS_STRUC=_F( SOUS_STRUC = 'COTE1',
                                          VECT_ASSE = V_ASSE))

#  CALCUL DES MODES PROPRES DE LA STRUCTURE GLOBALE
#------------------------------------------------------------------

RESGEN=MODE_ITER_SIMULT(     MATR_A=RIGGEN,
                                 MATR_B=MASGEN,
                             CALC_FREQ=_F( OPTION = 'PLUS_PETITE',
                                        NMAX_FREQ = 3))

#
MODGLO=REST_SOUS_STRUC(   RESU_GENE=RESGEN,
                           SOUS_STRUC='COTE1',
                           TOUT_ORDRE='OUI')

#  NUMEROTATION DU PROBLEME GENERALISE
#------------------------------------------------------------------

NUMEMODE=NUME_DDL_GENE( BASE=RESGEN,
                           STOCKAGE='PLEIN')

#  MATRICES ET VECTEURS GENERALISES
#------------------------------------------------------------------

MASPRO=PROJ_MATR_BASE( BASE=RESGEN,
                          NUME_DDL_GENE=NUMEMODE,
                          MATR_ASSE_GENE=MASGEN)

#
RIGPRO=PROJ_MATR_BASE( BASE=RESGEN,
                          NUME_DDL_GENE=NUMEMODE,
                          MATR_ASSE_GENE=RIGGEN)

#
VECPRO=PROJ_VECT_BASE( BASE=RESGEN,
                          NUME_DDL_GENE=NUMEMODE,
                          VECT_ASSE_GENE=FGEN)

#
#
LIST_R=DEFI_LIST_REEL(       DEBUT=0.,
                           INTERVALLE=_F( JUSQU_A = 80.,
                                       NOMBRE = 10))

#  CALCULS TRANSITOIRES
#-----------------------------------------------------------------

TRANGEN1=DYNA_TRAN_MODAL(   METHODE='EULER',
                             MASS_GENE=MASPRO,
                             RIGI_GENE=RIGPRO,
                                EXCIT=_F( VECT_GENE = VECPRO,
                                       COEF_MULT = 1.),
                            INCREMENT=_F(  INST_INIT = 0.,
                                        INST_FIN = 82.,
                                        PAS = 0.01),
                            ARCHIVAGE=_F( PAS_ARCH = 10)
                            )

#
TRANGEN2=DYNA_TRAN_MODAL(   METHODE='NEWMARK',
                             MASS_GENE=MASPRO,
                             RIGI_GENE=RIGPRO,
                                EXCIT=_F( VECT_GENE = VECPRO,
                                       COEF_MULT = 1.),
                            INCREMENT=_F(  INST_INIT = 0.,
                                        INST_FIN = 82.,
                                        PAS = 0.01),
                            ARCHIVAGE=_F( PAS_ARCH = 10)
                            )

#
TRANGEN3=DYNA_TRAN_MODAL(   METHODE='DEVOGE',
                             MASS_GENE=MASPRO,
                             RIGI_GENE=RIGPRO,
                                EXCIT=_F( VECT_GENE = VECPRO,
                                       COEF_MULT = 1.),
                            INCREMENT=_F(  INST_INIT = 0.,
                                        INST_FIN = 82.,
                                        PAS = 0.01),
                            ARCHIVAGE=_F( PAS_ARCH = 10)
                            )

#
TRANGEN4=DYNA_TRAN_MODAL(   METHODE='ADAPT',
                             MASS_GENE=MASPRO,
                             RIGI_GENE=RIGPRO,
                                EXCIT=_F( VECT_GENE = VECPRO,
                                       COEF_MULT = 1.),
                            INCREMENT=_F(  INST_INIT = 0.,
                                        INST_FIN = 82.,
# ON IMPOSE PAS_MAXI = PAS POUR RETROUVER LES ANCIENS RESULTATS
# POUR AMELIORER LE TEMPS CPU IL VAUT MIEUX TESTER AVEC UN PAS_MAXI PLUS GRAND
                                        PAS_MAXI = 0.01,
                                        PAS = 0.01,
                                        NB_POIN_PERIODE = 300,
                                        VITE_MIN = 'MAXI'),
                            ARCHIVAGE=_F( PAS_ARCH = 10)
                            )

#  RESTITUTIONS
#------------------------------------------------------------------


TRAN1=REST_GENE_PHYS(   RESU_GENE=TRANGEN1,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R,
                             INTERPOL='LIN',
                             MODE_MECA=MODGLO )

#
TRAN2=REST_GENE_PHYS(   RESU_GENE=TRANGEN2,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R,
                             INTERPOL='LIN',
                             MODE_MECA=MODGLO )

#
TRAN3=REST_GENE_PHYS(   RESU_GENE=TRANGEN3,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R,
                             INTERPOL='LIN',
                             MODE_MECA=MODGLO )

#
TRAN4=REST_GENE_PHYS(   RESU_GENE=TRANGEN4,
                            TOUT_CHAM='OUI',
                             LIST_INST=LIST_R,
                             INTERPOL='LIN',
                             MODE_MECA=MODGLO )

#
TEST_RESU( RESU=_F( RESULTAT = TRAN1,
                  NOM_CHAM = 'DEPL',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = 4.17E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN1,
                  NOM_CHAM = 'VITE',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = -4.3011E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN1,
                  NOM_CHAM = 'ACCE',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = 3.3749E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN2,
                  NOM_CHAM = 'DEPL',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = 4.17E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN2,
                  NOM_CHAM = 'VITE',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = -4.3011E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN2,
                  NOM_CHAM = 'ACCE',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = 3.3749E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN3,
                  NOM_CHAM = 'DEPL',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = 4.17E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN3,
                  NOM_CHAM = 'VITE',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = -4.3011E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN3,
                  NOM_CHAM = 'ACCE',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = 3.3749E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN4,
                  NOM_CHAM = 'DEPL',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = 4.17E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN4,
                  NOM_CHAM = 'VITE',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = -4.3011E-01))

#
TEST_RESU( RESU=_F( RESULTAT = TRAN4,
                  NOM_CHAM = 'ACCE',
                  NUME_ORDRE = 11,
                  CRITERE = 'RELATIF',
                  PRECISION = 1.E-2,
                  NOEUD = 'NO3',
                  NOM_CMP = 'DX',
                  VALE = 3.3749E-01))

#------------------------------------------------------------------

FIN( )
#
##------------------------------------------------------------------
##
#FIN();
