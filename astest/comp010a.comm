# person_in_charge: david.haboussa at edf.fr
# ======================================================================
# COPYRIGHT (C) 1991 - 2017  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#         TEMPERATURE DANS LES LOIS DE COMPORTEMENT ELASTOVISCOPLASTIQUE
#
#         RELATION = 'GRAN_IRRA_LOG' sous COMPORTEMENT
#
# CAS-TEST DE REFERENCE : SSNL128A
#
#=====================================================================


DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),PAR_LOT='NON',IMPR_MACRO='NON',DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU

#=====================================================================
#               INITIALISATIONS
#=====================================================================
#

import numpy as N

NCAL = 20

MATER  = [None]*NCAL
RESU   = [None]*NCAL

TREF = 0.
T0   = TREF
Tmax = 500.

epsi = 1.E-10

ZERO = DEFI_CONSTANTE(VALE=0.0);

UN   = DEFI_CONSTANTE(VALE=1.0);

tmax = .5


compor='GRAN_IRRA_LOG'

# Nombre de variables internes
Nbvari = 3

#=====================================================================
#               MATERIAU  FONCTION  DE  LA  TEMPERATURE
#=====================================================================

# Parametres elastiques
YOUN=DEFI_FONCTION(  NOM_PARA='TEMP',
                     VALE=(T0,   1.0E5,
                           Tmax, 0.8E5,)  )

ALPH=DEFI_FONCTION(NOM_PARA='TEMP',VALE=(T0,   1.0E-5,
                                         Tmax, 2.0E-5,),);

GRAN_A=-1.51E-16*100.
GRAN_B=1.542E-13*100.
GRAN_S=0.396
GRAND=FORMULE(NOM_PARA=('TEMP','IRRA'),VALE='(GRAN_A*TEMP+GRAN_B)*(IRRA**GRAN_S)');

MATERI=DEFI_MATERIAU(ELAS_FO=_F(E=YOUN,
                                NU=ZERO,
                                TEMP_DEF_ALPHA=TREF,
                                ALPHA=ALPH,),
                      GRAN_IRRA_LOG=_F(
                                       A = 1.28E-1,
                                       B=0.01159,
                                       CSTE_TPS = 0.3540,
                                       ENER_ACT=5000.,
                                       GRAN_FO = GRAND,
                                       ),
                      );

L_INST=DEFI_LIST_REEL(DEBUT=0.,
                      INTERVALLE=(_F(JUSQU_A=tmax,
                                     NOMBRE=NCAL,),
                                     ),
                      );

TIMP=DEFI_FONCTION(NOM_PARA='INST',  NOM_RESU='TEMP',
                   VALE=(  0. , T0, .5, Tmax, 1. , Tmax)
                   )

FLU_IMP=DEFI_FONCTION(NOM_PARA='INST',  NOM_RESU='IRRA',
                      VALE=(  0. , 0., .5, 0., 1. , 2.)
                      )

U=SIMU_POINT_MAT(COMPORTEMENT=_F(RELATION=compor,),
                 MATER=MATERI,
                 SUPPORT='POINT',
                   AFFE_VARC=(
                   _F(  NOM_VARC='TEMP',
                        VALE_FONC=TIMP,
                        VALE_REF=TREF),
                   _F(  NOM_VARC='IRRA',
                        VALE_FONC=FLU_IMP)),
                 INCREMENT=_F(LIST_INST=L_INST,),
                 NEWTON=_F(PREDICTION='ELASTIQUE',
                           MATRICE='TANGENTE',
                           REAC_ITER=1,),
                 EPSI_IMPOSE=_F(EPXX=ZERO,),
                 INFO=1,);

IMPR_TABLE(TABLE=U,);


SXM = 0.
EXM = 0.

Vim = N.zeros(Nbvari)

time = 0.


for i in range(NCAL):

          timem = time

          time = timem + tmax/NCAL

          if time < .5 :
            Ti = T0 + time/tmax * (Tmax - T0)
          else :
            Ti = Tmax

          if timem <= .5 : 
            Tm = T0 + timem/tmax * (Tmax - T0)
          else :
            Tm = Tmax

          # deformation mecanique imposee correspondant a la deformation thermique du premier calcul

          epsimp =DEFI_CONSTANTE(VALE=-ALPH(Ti)*(Ti - TREF));

          fluxi= DEFI_CONSTANTE (VALE = FLU_IMP(time) )

          fluxm= FLU_IMP(timem)

          tempi= DEFI_FONCTION (NOM_PARA='INST',NOM_RESU='TEMP',
                                VALE=(timem,Ti,time,Ti));

          print 'i=',i, ' instant=', time, ' Temperature=',Ti, 'epsimp=',epsimp

          # variation des coef du comportement avec la temperature
          # correction eventuelle des valeurs initiales du temps ti

          if i > 0 :
             # Cette actualisation de la contrainte force l'utilisation de PAR_LOT='NON'
             SXM = SXM *(YOUN(Ti)/YOUN(Tm))

          MATER[i]=DEFI_MATERIAU(ELAS =_F(E=YOUN(Ti),
                                          NU=0.,
                                          ALPHA=0.,),
                      GRAN_IRRA_LOG=_F(
                                       A = 1.28E-1,
                                       B=0.01159,
                                       CSTE_TPS = 0.3540,
                                       ENER_ACT=5000.,
                                       GRAN_FO = GRAND,),
                                 );

          list = DEFI_LIST_REEL(DEBUT=timem,
                      INTERVALLE=(_F(JUSQU_A=time,NOMBRE=1,),),);

          RESU[i]=SIMU_POINT_MAT(COMPORTEMENT=_F(RELATION=compor,),
                                 MATER=MATER[i],
                                 SUPPORT='POINT',
                                 AFFE_VARC=(
                                             _F(NOM_VARC='TEMP',     # ces 3 lignes permettent de laisser passer le
                                                VALE_FONC=tempi,     # calcul mais elles ne semblent pas justifiees
                                                VALE_REF=TREF),      # mais le resultat n'est pas OK
                                             _F(NOM_VARC='IRRA',
                                               # VALE_FONC=fluxi,
                                                VALE_FONC=FLU_IMP)),
                                 INCREMENT=_F(LIST_INST = list, ),
                                 NEWTON=_F( PREDICTION='ELASTIQUE',
                                             MATRICE='TANGENTE',
                                             REAC_ITER=1,),
                                 EPSI_IMPOSE=_F(EPXX=epsimp),
                                 VARI_INIT=_F(VALE=[Vim[j] for j in range(Nbvari)]),
                                 SIGM_INIT=_F(SIXX=SXM),
                                 EPSI_INIT=_F(EPXX=EXM, EPYY=0.,EPZZ=0.,EPXY=0.,EPXZ=0.,EPYZ=0.),
                                 INFO=1,);

          # recuperation des valeurs initiales du futur pas de temps dans la table resultat

          EXM = RESU[i]['EPXX',2]

          SXM = RESU[i]['SIXX',2]

          Vim[0] = RESU[i]['V1',2]
          Vim[1] = RESU[i]['V2',2]
          Vim[2] = RESU[i]['V3',2]

          IMPR_TABLE(TABLE=RESU[i]);

          DETRUIRE ( CONCEPT =  _F (NOM =epsimp),);
          DETRUIRE ( CONCEPT =  _F (NOM =list),);
          DETRUIRE ( CONCEPT =  _F (NOM =(fluxi,tempi)),);

          TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='VMIS',
                     VALE_CALC=U['VMIS',i+2],
                     VALE_REFE=U['VMIS',i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',);

          TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='TRACE',
                     VALE_CALC=U['TRACE',i+2],
                     VALE_REFE=U['TRACE',i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',);

          for j in range(Nbvari):
             nomvari='V'+str(j+1)
             if U[nomvari,i+2] > epsi :
                TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA=nomvari,
                     VALE_CALC=U[nomvari,i+2],
                     VALE_REFE=U[nomvari,i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',);

FIN();
