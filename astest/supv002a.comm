# MODIF  DATE 03/01/2012   AUTEUR COURTOIS M.COURTOIS 
# TITRE TEST DES MESSAGES - INTERNATIONALISATION
# supv002a.para = tps_job 180 mem_job 128Mo ncpus 1 liste_test R
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# RESPONSABLE COURTOIS M.COURTOIS

DEBUT(CODE=_F(NOM='SUPV002A', NIV_PUB_WEB='INTERNET', VISU_EFICAS='NON'),
      PAR_LOT='OUI')

import os
os.environ['LANG'] = 'fr_FR.utf8'
# remove all LC_xxxx variables
keys = [k for k in os.environ.keys() if k.startswith('LC_')]
for k in keys:
    del os.environ[k]

import os.path as osp
from glob import glob

from Utilitai.Utmess import UTMESS
import Messages
MSGDIR = osp.dirname(Messages.__file__)

# this replaces 'import supv002a.33'
execfile('fort.33', globals())

checker = Checker()

LCATA = [osp.basename(osp.splitext(cata)[0]) for cata in glob(osp.join(MSGDIR, '*.py'))]
#LCATA = [osp.basename(osp.splitext(cata)[0]) for cata in glob(osp.join(MSGDIR, 'c*.py'))]

# check default/native messages
check_catamess(checker, 'fr', LCATA)
# check translated messages in english
check_catamess(checker, 'en', LCATA)

nbwrn = checker.count_unknown_words()
warns = checker.get_warnings() + """\nNumber of unknown words : %d""" % nbwrn
nberr = checker.count_errors()
errors = checker.get_errors() + """\nNumber of errors : %d""" % nberr

if nberr > 0:
    UTMESS('A', 'SUPERVIS2_5', valk=("'CheckMessages'", errors, ""))
if nbwrn > 0:
    UTMESS('A', 'SUPERVIS2_5', valk=("'CheckMessages'", warns, ""))
#mods = checker.get_modules()

tab = CREA_TABLE(LISTE=_F(PARA='NBERR', LISTE_I=nberr))

TEST_TABLE(TABLE=tab,
           NOM_PARA='NBERR',
           VALE_I=0,
           REFERENCE='ANALYTIQUE',)

tabw = CREA_TABLE(LISTE=_F(PARA='NBWARN', LISTE_I=nbwrn))

TEST_TABLE(TABLE=tabw,
           NOM_PARA='NBWARN',
           VALE_I=0,
           CRITERE='ABSOLU',
           PRECISION=336.1,
           REFERENCE='NON_REGRESSION',)

# Mots-cles inconnus du dictionnaire malgre tout acceptes pour le moment
# L'objectif est bien sur de reduire cette liste !
# Permet d'afficher la liste des nouveaux mots interdits ajoutes.
previous_errors = set([
    'ALCHML', 'ALITMI', 'AMDBAR', 'AMUMPS.F', 'ASCSEP', 'AU-YANG',
    'AXI', 'BiCG', 'CHABOCHE', 'CHARAC', 'CHARACTER', 'CHNO', 'CHNO.NUEQ', 'CHOUT', 'CHPVER',
    'CINX', 'CINx', 'CLAV', 'CLO', 'COMBU', 'CVRC', 'D-POUTRE', 'DAMAX', 'DEEQ', 'DELG',
    'DEP', 'DEPSEQ', 'DEPSI', 'DEPSIMAX', 'DEUXMU', 'DISMOI', 'DLAHQR', 'DOMM', 'DPMAT',
    'DPMAX', 'DPSIDS', 'DRMAX', 'DSIGM', 'DTREVC', 'DVP', 'ECLAU', 'EDITGD', 'EFNEMA',
    'ELREFA', 'ELREFE', 'EPSEQ', 'ETENCA', 'EXICHA', 'FATEMI', 'FETG', 'FINSF', 'FLAHQR',
    'FONREE', 'FTREVC', 'GAMDEV', 'GERPAS', 'GILIRE.INDIRECT', 'GL', 'GREL', 'Gnuplot.py',
    'HDFCRF', 'HEXS', 'HUJCI', 'HUJCRI', 'HUJDDD', 'HUJDP', 'HUJELA', 'HUJIID', 'HUJJID',
    'HUJKSI', 'HUJNVI', 'HUJPLA', 'HUJPOT', 'HUJTEL', 'HUJTID', 'ICHIN', 'ICOEF', 'IDDL',
    'IM', 'INFOG', 'JECROC', 'JENONU', 'JENUNO', 'JEXNOM', 'JEXNUM', 'JM', 'JUVECA', 'K.PHI',
    'K.U', 'KMOD', 'KSIB', 'KTILDA', 'Kcam', "L'elrefe", 'LCDPPA', 'LIBRARY', 'LIGREL',
    'LIGRELs', 'LMAT', 'LONCUM', 'LONT', 'LTNT', 'MOLOC', 'Map', 'NBCMP', 'NBCYCL', 'NBDDL',
    'NBMECA', 'NBNOCO', 'NBNOEUD', 'NBPOIN', 'NBRUP', 'NBSIGM', 'NBVIMAX', 'NDDL', 'NDS',
    'NEMA', 'NEQ', 'NEQUA', 'NMCOMP', 'NMCONV', 'NMHUJ', 'NMVPIR', 'NMXINS', 'NNOE', 'NOCART',
    'NOCP', 'NODE', 'NOMLI', 'NOSOLVE', 'NPQ', 'NSEUIL', 'NUEQ', 'NUME.LILI', 'NUMER',
    'NUMERO.F', 'NUMERO.f', 'NUTIOC', 'NV', 'NVI', 'NVIMAX', 'NaN', 'OMEGA', 'OPENDR',
    'OUT-OF-CORE', 'PARAMETER', 'PATH', 'PERMEA', 'PFACY', 'PHYSICAL', 'PMAX', 'POLYNOME',
    'POSTK', 'PREML', 'PRNO', 'Ptrac', 'RAPH', 'RCVALA', 'READDR', 'RESUEL', 'RINF', 'RM-EP',
    'ROMBOUT', 'ROOT', 'RREUR', 'RSEXCH', 'RSUP', 'SCHUR', 'SECHM', 'SECHP', 'SIF', 'SIGMMO',
    'SOCIE', 'SOLVE', 'SPD', 'SQRT', 'SSP', 'STOGI', 'SV', 'Scalar', 'TBLIVA', 'TGU', 'TGV',
    'TRIA-QUAD', 'TYPB', 'TYPEKE', 'TYPL', 'TYPVF', 'Tmax', 'UMC', 'UMOY', 'UNILATER',
    'USASTE.F', 'UTTCPU', 'VALF', 'VCINE', 'VITG', 'VPSTOR', 'WORKD', 'WRITDR', 'XMIN',
    'XOUS', 'YM', 'ZEDGAR', 'abs', 'acearp', 'alchml', 'alfint', 'apetsc.F', 'appariable',
    'autor', 'breakdown', 'cabl', 'cagnba', 'cata', 'chckma', 'chno', 'chvari', 'clcplq.f',
    'coefal', 'coefam', 'coefra', 'coefrl', 'cuon', 'cupn', 'cvon', 'cvpn', "d'ACIER",
    'deltat', 'dfdi', 'eO', 'efferm', 'effoco', 'efouvr', 'elem', 'elrefa', 'elrefe', 'ep',
    'er', 'error', 'etanca', 'etenca', 'exchml.f', 'exe', 'export',
    'fait-il', 'flag', 'flip-flop', 'floating', 'fointa', 'fonree', 'gl', 'grels', 'hexa',
    'i.e', 'icoret', 'indn', 'inpsco', 'ipos', 'kapa', 'kr', "l'AXE", "l'EVOL", 'lg',
    'ligrel', 'lkcaln', 'lkdhds', 'lkds', 'lklmat', 'lmat', 'longt', 'lumpe', 'majpad',
    'materiau.nomrc', 'matns', 'mdump', 'medconforme', 'medimport', 'mem', 'memjeveux',
    'modelisation', 'nadm', 'nbmmai', 'nbmmax', 'nbtyp', 'ncmp', 'nmaxcmp', 'nmaxocl',
    'nmocl', 'nomres', 'nomta', 'nomte', 'nomtyp', 'nosimp', 'not', 'nt', 'number', 'nume',
    'numeli', 'overflow', 'phenomene', 'pnosym', 'porte-t-il', 'post', 'pr', 'precont',
    'raymin', 'rayon-raymin', 'rcmaco', 'relcom', 'rembobinage', 'respecte-t-elle',
    'resuelem', 'resultat', 'rhocp', 'rof', 'rsexch', 'runSalomeScript', 'sch', 'sd',
    'skin.pos', 'svp', 'tbliva', 'texxxx.f', 'tmax', 'tmin', 'typelem', 'typesd',
    'typf', 'typgeo', 'uttcpu', 'uttrif', 'vari', 'vect', 'xxx', 'xxxxxx.py'])

current_errors = checker.get_unknown_words()
new = list(set(current_errors).difference(previous_errors))
new.sort()
correct = list(previous_errors.difference(current_errors))
correct.sort()
print "--- List of unknown words : "
print current_errors
print "--- List of new errors :"
print new
print "--- List of removed errors (please update previous_errors) :"
print correct

FIN()
