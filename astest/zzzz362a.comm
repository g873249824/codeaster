# TITRE : COHERENCE DES MODES LOCAUX DES OPTIONS TOPOSE ET TOPOFA (MAILLAGE 3D)
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),
      PAR_LOT = 'NON',
      IGNORE_ALARM=('MODELISA4_6','SUPERVIS_1'),
      DEBUG=_F(SDVERI='OUI'),
      )

# ###################################################
# ###################################################
#
# Utilisation d'un maillage lineaire pour tester la
# coherence entre les modelisations suivantes :
#
#  - MECANIQUE / 3D
#  - MECANIQUE / 3D / avec contact
#  - THERMIQUE / 3D
#
# ###################################################
# ###################################################

# ###################################################
# Raffinement avec homard -> creation de PYRAM5
# ###################################################

MA0 = LIRE_MAILLAGE(FORMAT = 'MED',);

MODBID = AFFE_MODELE(MAILLAGE = MA0,
                     AFFE = _F(TOUT = 'OUI',
                               PHENOMENE = 'MECANIQUE',
                               MODELISATION = '3D',)
                     )

LN = FORMULE(NOM_PARA=('X','Y','Z'),VALE='Z+0.125');

FISBID = DEFI_FISS_XFEM(MAILLAGE = MA0,
                        TYPE_DISCONTINUITE = 'INTERFACE', 
                        DEFI_FISS = _F(FONC_LN = LN,),
                        )

CHERR= RAFF_XFEM(FISSURE=FISBID)

MA1 = CO('MA1')

MACR_ADAP_MAIL(ADAPTATION = 'RAFFINEMENT',
               CHAM_GD = CHERR,
               CRIT_RAFF_PE = 0.05,
               USAGE_CMP = 'RELATIF',
               MAILLAGE_N = MA0,
               MAILLAGE_NP1 = MA1)

MAILLALI = CREA_MAILLAGE(MAILLAGE = MA1,
                         CREA_POI1 = (_F(NOM_GROUP_MA = 'POCOUPE1',
                                         GROUP_NO = 'NORPHHAU',),
                                      _F(NOM_GROUP_MA = 'POCOUPE2',
                                         GROUP_NO = 'NORPHBAS',),),)

# ###################################################
# Definition des modeles sains
# ###################################################

# MLMES : Modele Lineaire MEcanique Sain
MLMES = AFFE_MODELE(MAILLAGE = MAILLALI,
                    AFFE = (
                            _F(GROUP_MA = ('VOLUME','FACE','EDGE',),
                            #_F(GROUP_MA = ('VOLUME','FACE',),
                            #_F(GROUP_MA = ('VOLUME',),
                               PHENOMENE = 'MECANIQUE',
                               MODELISATION = '3D',),
                            _F(GROUP_MA = ('POCOUPE1','POCOUPE2',),
                               PHENOMENE = 'MECANIQUE',
                               MODELISATION = 'DIS_TR',),
                            ),)

# MLTHS : Modele Lineaire THermique Sain
MLTHS = AFFE_MODELE(MAILLAGE = MAILLALI,
                     AFFE = _F(GROUP_MA = ('VOLUME','FACE'),
                               PHENOMENE = 'THERMIQUE',
                               MODELISATION = '3D',),)

# ###################################################
# Definition des fissure et interface
# ###################################################

D    = 1.0
cent = D/2
a    = 0.57
b    = 0.57

FISSLI = DEFI_FISS_XFEM(MAILLAGE = MAILLALI,
                        TYPE_DISCONTINUITE = 'FISSURE', 
                        DEFI_FISS = _F(FORM_FISS = 'ELLIPSE',
                                       DEMI_GRAND_AXE = a, # suivant x ellipse
                                       DEMI_PETIT_AXE = b, # suivant y ellipse
                                       CENTRE = (cent,0.0,0.0),
                                       VECT_X = (0.1,0.0,0.0),
                                       VECT_Y = (0.0,1.0,0.0)
                                       ),
                        )

LNHAUT = FORMULE(NOM_PARA=('X','Y','Z'),VALE='Z-0.5');

INTELI = DEFI_FISS_XFEM(MAILLAGE = MAILLALI,
                        TYPE_DISCONTINUITE = 'INTERFACE', 
                        DEFI_FISS = _F(FONC_LN = LNHAUT,),)

# ###################################################
# Definition des modeles enrichis
# ###################################################

# MLMEX  : Modele Lineaire MEcanique Xfem 
MLMEX  = MODI_MODELE_XFEM(MODELE_IN = MLMES,
                          FISSURE = (FISSLI,INTELI),)

# MLMEXC : Modele Lineaire MEcanique Xfem Contact
MLMEXC = MODI_MODELE_XFEM(MODELE_IN = MLMES,
                          FISSURE = (FISSLI,INTELI),
                          CONTACT = 'OUI')

# MLTHX  : Modele Lineaire THermique Xfem
MLTHX  = MODI_MODELE_XFEM(MODELE_IN = MLTHS,
                          FISSURE = (FISSLI,INTELI),)

# ###################################################
# Impression du contenu des modeles xfem obtenus :
# ###################################################

DEFI_FICHIER(UNITE=31, FICHIER='./fort.31')
DEFI_FICHIER(UNITE=32, FICHIER='./fort.32')
DEFI_FICHIER(UNITE=33, FICHIER='./fort.33')

# tant que issue22486 n'est pas restituee : -> pas de SOMMI ou SOMMR 
# car les permutations peuvent changer la somme de controle
#IMPR_CO(UNITE=31,CONCEPT=_F(NOM=MLMEX ),NIVEAU=-1,PERMUTATION='NON',)
#IMPR_CO(UNITE=32,CONCEPT=_F(NOM=MLMEXC),NIVEAU=-1,PERMUTATION='NON',)
#IMPR_CO(UNITE=33,CONCEPT=_F(NOM=MLTHX ),NIVEAU=-1,PERMUTATION='NON',)
IMPR_CO(UNITE=31,CONCEPT=_F(NOM=MLMEX ),NIVEAU=-1,)
IMPR_CO(UNITE=32,CONCEPT=_F(NOM=MLMEXC),NIVEAU=-1,)
IMPR_CO(UNITE=33,CONCEPT=_F(NOM=MLTHX ),NIVEAU=-1,)

DEFI_FICHIER(ACTION='LIBERER',UNITE=31)
DEFI_FICHIER(ACTION='LIBERER',UNITE=32)
DEFI_FICHIER(ACTION='LIBERER',UNITE=33)

# ###################################################
# "Post-traitements" des fichiers obtenus avec IMPR_CO
# ###################################################

File31 = open('./fort.31', "r")
File32 = open('./fort.32', "r")
File33 = open('./fort.33', "r")

LinesFile31 = File31.readlines()
LinesFile32 = File32.readlines()
LinesFile33 = File33.readlines()

File31.close()
File32.close()
File33.close()

ListLMEX  = [] # 31 <-> MLMEX 
ListLMEXC = [] # 32 <-> MLMEXC
ListLTHX  = [] # 33 <-> MLTHX 

# 31 <-> ListLMEX  / MLMEX
nommo  = 'MLMEX'
nommo += (8-len(nommo))*" "
for line in LinesFile31:
  if ('TOPOFAC' in line) and ('.CELV' in line) or \
     ('TOPOSE'  in line) and ('.CELV' in line) :
    lsplit = line.split("|")
    assert nommo in lsplit[1]
    # on remplace le nom du modele par 8 " "
    lsplit[1] = lsplit[1].replace(nommo," "*8)
    ListLMEX.append(lsplit)

# 32 <-> ListLMEXC / MLMEXC
nommo  = 'MLMEXC'
nommo += (8-len(nommo))*" "
for line in LinesFile32:
  if ('TOPOFAC' in line) and ('.CELV' in line) or \
     ('TOPOSE'  in line) and ('.CELV' in line) :
    lsplit = line.split("|")
    assert nommo in lsplit[1]
    # on remplace le nom du modele par 8 " "
    lsplit[1] = lsplit[1].replace(nommo," "*8)
    ListLMEXC.append(lsplit)

# 33 <-> ListLTHX  / MLTHX
nommo  = 'MLTHX'
nommo += (8-len(nommo))*" "
for line in LinesFile33:
  if ('TOPOFAC' in line) and ('.CELV' in line) or \
     ('TOPOSE'  in line) and ('.CELV' in line) :
    lsplit = line.split("|")
    assert nommo in lsplit[1]
    # on remplace le nom du modele par 8 " "
    lsplit[1] = lsplit[1].replace(nommo," "*8)
    ListLTHX.append(lsplit)

# tant que issue22486 n'est pas restituee : -> pas de SOMMI ou SOMMR 
# car les permutations peuvent changer la somme de controle
for line in ListLMEX:
  for row in line:
    if 'SOMMR' in row or 'SOMMI' in row:
      line.remove(row)
for line in ListLMEXC:
  for row in line:
    if 'SOMMR' in row or 'SOMMI' in row:
      line.remove(row)
for line in ListLTHX:
  for row in line:
    if 'SOMMR' in row or 'SOMMI' in row:
      line.remove(row)

## pour debug
#assert len(ListLMEX ) == len(ListLMEXC)
#for i in xrange(len(ListLMEX )):
  #print ListLMEX[i] == ListLMEXC[i]
  #print ListLMEX[i]
  #print ListLMEXC[i]
#print "&&"
#assert len(ListLMEX ) == len(ListLTHX)
#for i in xrange(len(ListLMEX )):
  #print ListLMEX[i] == ListLTHX[i]
  #print ListLMEX[i]
  #print ListLTHX[i]
#print "&&"

# ###################################################
# Tests une fois les infos extraites de ces fichiers
# ###################################################

# -------
# nobj_ok == 1 si il y a le meme nombre de cham_elem out
# de TOPOSE et TOPOFA d'un modele a l'autre
# nobj_ok == 0 sinon
# -------

# TABTAIL1 -> entre MLMEX et MLMEXC
nobj_ok = 0
if (len(ListLMEX ) > 0) and (len(ListLMEX ) == len(ListLMEXC)) : nobj_ok = 1
TABTAIL1 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [nobj_ok], PARA = 'BOOLEEN'),)

# TABTAIL2 -> entre MLMEX et MLTHX 
nobj_ok = 0
if (len(ListLMEX ) > 0) and (len(ListLMEX ) == len(ListLTHX )) : nobj_ok = 1
TABTAIL2 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [nobj_ok], PARA = 'BOOLEEN'),)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TABTAIL1,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TABTAIL2,)

## -------
## vale_ok == 1 si le "resume" (IMPR_CO/NIVEAU=-1) des .CELV
## ou .VALE des cham_elem issus de TOPOSE et TOPOFA et contenus 
## dans les deux modeles sont identiques (au nom du modele pres) 
## vale_ok == 0 sinon
## -------

# TARESUM1 -> entre MLMEX et MLMEXC
vale_ok = 0
if (ListLMEX != []) and (ListLMEX == ListLMEXC) : vale_ok = 1
TARESUM1 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [vale_ok], PARA = 'BOOLEEN'),)

# TARESUM2 -> entre MLMEX et MLTHX 
vale_ok = 0
if (ListLMEX != []) and (ListLMEX == ListLTHX ) : vale_ok = 1
TARESUM2 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [vale_ok], PARA = 'BOOLEEN'),)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TARESUM1,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TARESUM2,)

# ###################################################
# ###################################################
#
# Utilisation d'un maillage quadratique pour tester la
# coherence entre les modelisations suivantes :
#
#  - MECANIQUE / 3D
#  - MECANIQUE / 3D_HM
#
# Rq :
#
# -> pour la definition du modele sain HM, il n'existe 
#    pas d'elements PYRAM13 HM. On travaille donc sur le 
#    maillage initial avant raffinement HOMARD, en 
#    contrepartie le maillage ne contient pas de TETRA10.
# -> pour la definition du modele enrichi HM, il n'existe
#    pas d'elements cracktip. On travaille donc uniquement
#    avec une interface
#
# ###################################################
# ###################################################

MAILLAQU = CREA_MAILLAGE(MAILLAGE = MA0,
                         LINE_QUAD = _F(TOUT = 'OUI'))

# ################################################################
# Definition des modeles sains
# ################################################################

# MQMES : Modele Quadratique MEcanique Sain
MQMES = AFFE_MODELE(MAILLAGE = MAILLAQU,
                    AFFE = _F(GROUP_MA = ('VOLUME','FACE'),
                              PHENOMENE = 'MECANIQUE',
                              MODELISATION = '3D',),)

# MQHMS : Modele Quadratique Hydro-Mecanique Sain
MQHMS = AFFE_MODELE(MAILLAGE = MAILLAQU,
                    AFFE = _F(GROUP_MA = ('VOLUME','FACE'),
                              PHENOMENE = 'MECANIQUE',
                              MODELISATION = '3D_HM',),)

# ###################################################
# Definition de l'interface
# ###################################################

INTEQU = DEFI_FISS_XFEM(MAILLAGE = MAILLAQU,
                        TYPE_DISCONTINUITE = 'INTERFACE', 
                        DEFI_FISS = _F(FONC_LN = LNHAUT,),)

# ###################################################
# Definition des modeles enrichis
# ###################################################

# MQMEX : Modele Quadratique MEcanique Xfem
MQMEX = MODI_MODELE_XFEM(MODELE_IN = MQMES,
                         FISSURE  = INTEQU,)

# MQHMX : Modele Quadratique Hydro-Mecanique Xfem
MQHMX = MODI_MODELE_XFEM(MODELE_IN = MQHMS,
                         FISSURE  = INTEQU,)

# ###################################################
# Impression du contenu des modeles xfem obtenus :
# ###################################################

DEFI_FICHIER(UNITE=31, FICHIER='./fort.31')
DEFI_FICHIER(UNITE=32, FICHIER='./fort.32')

# tant que issue22486 n'est pas restituee : -> pas de SOMMI ou SOMMR 
# car les permutations peuvent changer la somme de controle
#IMPR_CO(UNITE=31,CONCEPT=_F(NOM=MQMEX),NIVEAU=-1,PERMUTATION='NON',)
#IMPR_CO(UNITE=32,CONCEPT=_F(NOM=MQHMX),NIVEAU=-1,PERMUTATION='NON',)
IMPR_CO(UNITE=31,CONCEPT=_F(NOM=MQMEX),NIVEAU=-1,)
IMPR_CO(UNITE=32,CONCEPT=_F(NOM=MQHMX),NIVEAU=-1,)

DEFI_FICHIER(ACTION='LIBERER',UNITE=31)
DEFI_FICHIER(ACTION='LIBERER',UNITE=32)

# ###################################################
# "Post-traitements" des fichiers obtenus avec IMPR_CO
# ###################################################

File31 = open('./fort.31', "r")
File32 = open('./fort.32', "r")

LinesFile31 = File31.readlines()
LinesFile32 = File32.readlines()

File31.close()
File32.close()

ListQMEX = [] # 31 <-> MQMEX
ListQHMX = [] # 32 <-> MQHMX

# 31 <-> ListQMEX / MQMEX
nommo  = 'MQMEX'
nommo += (8-len(nommo))*" "
for line in LinesFile31:
  if ('TOPOFAC' in line) and ('.CELV' in line) or \
     ('TOPOSE'  in line) and ('.CELV' in line) :
    lsplit = line.split("|")
    assert nommo in lsplit[1]
    # on remplace le nom du modele par 8 " "
    lsplit[1] = lsplit[1].replace(nommo," "*8)
    ListQMEX.append(lsplit)

# 32 <-> ListQHMX / MQHMX
nommo  = 'MQHMX'
nommo += (8-len(nommo))*" "
for line in LinesFile32:
  if ('TOPOFAC' in line) and ('.CELV' in line) or \
     ('TOPOSE'  in line) and ('.CELV' in line) :
    lsplit = line.split("|")
    assert nommo in lsplit[1]
    # on remplace le nom du modele par 8 " "
    lsplit[1] = lsplit[1].replace(nommo," "*8)
    ListQHMX.append(lsplit)

# tant que issue22486 n'est pas restituee : -> pas de SOMMI ou SOMMR 
# car les permutations peuvent changer la somme de controle
for line in ListQMEX:
  for row in line:
    if 'SOMMR' in row or 'SOMMI' in row:
      line.remove(row)
for line in ListQHMX:
  for row in line:
    if 'SOMMR' in row or 'SOMMI' in row:
      line.remove(row)

## pour debug
#assert len(ListQMEX) == len(ListQHMX)
#for i in xrange(len(ListQMEX)):
  #print ListQMEX[i] == ListQHMX[i]
  #print ListQMEX[i]
  #print ListQHMX[i]
#print "&&"

# ###################################################
# Tests une fois les infos extraites de ces fichiers
# ###################################################

# -------
# nobj_ok == 1 si il y a le meme nombre de cham_elem out
# de TOPOSE et TOPOFA d'un modele a l'autre
# nobj_ok == 0 sinon
# -------

# TABTAIL3 -> entre MQMEX et MQHMX
nobj_ok = 0
if (len(ListQMEX) > 0) and (len(ListQMEX) == len(ListQHMX)) : nobj_ok = 1
TABTAIL3 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [nobj_ok], PARA = 'BOOLEEN'),)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TABTAIL3,)

## -------
## vale_ok == 1 si le "resume" (IMPR_CO/NIVEAU=-1) des .CELV
## ou .VALE des cham_elem issus de TOPOSE et TOPOFA et contenus 
## dans les deux modeles sont identiques (au nom du modele pres) 
## vale_ok == 0 sinon
## -------

# TARESUM3 -> entre MQMEX et MQHMX
vale_ok = 0
if (ListQMEX != []) and (ListQMEX == ListQHMX) : vale_ok = 1
TARESUM3 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [vale_ok], PARA = 'BOOLEEN'),)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TARESUM3,)

FIN()