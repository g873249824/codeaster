# TITRE : VALIDATION DE LA BONNE PRISE EN COMPTE DE LA VARIATION DE
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#         TEMPERATURE DANS LES LOIS DE COMPORTEMENT ELASTIQUES
#
#         RELATION = 'ROUSS_PR' sous COMPORTEMENT
#
# CAS-TEST DE REFERENCE : SSNV103A
#
#=====================================================================


DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),PAR_LOT='NON',DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU


import numpy as N


MATER = [None]*30
RESU  = [None]*30

epsi = 1.E-10

TREF = 20.

T0   = TREF
Tmax = 800

ZERO =DEFI_CONSTANTE(VALE=0.0);

UN   =DEFI_CONSTANTE(VALE=1.0);

#===========================================================
#                  RELATION = 'ROUSS_PR'
#===========================================================
#
# INITIALISATIONS

tmax = 1.

NCAL = 30

compor='ROUSS_PR'

# Nombre de variable interne
Nbvari=5

#parametre theta de schema numerique
theta=1.


YOUN=DEFI_FONCTION(NOM_PARA='TEMP',VALE=(T0,   210000.,
                                         Tmax, 100000.,
                                      #   Tmax, 210000.,
                                         ),);
ALPH=DEFI_FONCTION(NOM_PARA='TEMP',VALE=(T0, 1.E-5,
                                      #   Tmax, 1.E-5,
                                         Tmax, 2.E-5,
                                         ),);


S1_T=DEFI_FONCTION(NOM_PARA='TEMP',VALE=(TREF, 500,
                                         Tmax, 500,
                                         ),);

D_T=DEFI_FONCTION(NOM_PARA='TEMP',VALE=(TREF, 1.5,
                                        Tmax, 1.5,
                                         ),);


F0_T=DEFI_FONCTION(NOM_PARA='TEMP',VALE=(TREF, 5.E-4,
                                         Tmax, 5.E-4,
                                         ),);
#   necessaire pour l'interpolation de la courbe de traction
SY0=800.
SY1=600.
#SY1=800.
E0=YOUN(TREF)
E1=YOUN(Tmax)
eps0=SY0/E0
eps1=SY1/E1


FCT1=DEFI_FONCTION(
               NOM_PARA='EPSI',
               PROL_GAUCHE='LINEAIRE',
               PROL_DROITE='LINEAIRE',
               VALE=(
               eps0,    SY0,
               1.005,    1600.,
               )
             )

FCT2=DEFI_FONCTION(
               NOM_PARA='EPSI',
               PROL_GAUCHE='LINEAIRE',
               PROL_DROITE='LINEAIRE',
               VALE=(
               eps1,     SY1,
               1.005,    1200.,
             #  1.005,    1600.,
               )
             )

CTRACB=DEFI_NAPPE(   NOM_PARA='TEMP',
                                         PROL_DROITE='CONSTANT',
                           PARA=(TREF,Tmax,),
                           FONCTION=(FCT1,FCT2,)            )

# fonctions Sigma=F(Epsilon_p)
FP1=DEFI_FONCTION(
               NOM_PARA='EPSI',
               PROL_GAUCHE='LINEAIRE',
               PROL_DROITE='LINEAIRE',
               VALE=(
               0.,    SY0,
               1.005-1600./E0,    1600.,
               )
             )
FP2=DEFI_FONCTION(
               NOM_PARA='EPSI',
               PROL_GAUCHE='LINEAIRE',
               PROL_DROITE='LINEAIRE',
               VALE=(
               0.,     SY1,
               1.005-1000./E1,    1200.,
              #1.005-1600./E0,    1600.,
               )
             )
#  nappe Sigma(epsp, Temp) necessaire pour l'interpolation de la courbe de traction
RP=DEFI_NAPPE(   NOM_PARA='TEMP',
                 PROL_DROITE='CONSTANT',
                 PARA=(TREF,Tmax,),
                 FONCTION=(FP1,FP2,)
              )

MATERI=DEFI_MATERIAU(ELAS_FO=_F(E=YOUN,
                                NU=ZERO,
                                TEMP_DEF_ALPHA=TREF,
                                ALPHA=ALPH,),
                     ROUSSELIER_FO=_F(SIGM_1   = S1_T,
                                      D        = D_T,
                                      BETA=1.,
                                      PORO_INIT= F0_T,),
                     TRACTION=_F(SIGM=CTRACB,),
                     );

L_INST=DEFI_LIST_REEL(DEBUT=0.0,
                      INTERVALLE=(_F(JUSQU_A=tmax,
                                     NOMBRE=NCAL,),
                                     ),);

TIMP=DEFI_FONCTION(
                      NOM_PARA='INST',  NOM_RESU='TEMP',
                       VALE=(  0. , TREF, tmax , Tmax)
                        )

U=SIMU_POINT_MAT(COMPORTEMENT=_F(RELATION=compor,RESI_INTE_RELA=1.E-6,
                              PARM_THETA=theta),
                 MATER=MATERI,
                 SUPPORT='POINT',
                   AFFE_VARC=(
                   _F(  NOM_VARC='TEMP',
                        VALE_FONC=TIMP,
                        VALE_REF=TREF),
                        ),
                 INCREMENT=_F(LIST_INST=L_INST,),
                 NEWTON=_F(PREDICTION='ELASTIQUE',
                           MATRICE='TANGENTE',
                           REAC_ITER=1,),
                CONVERGENCE=_F(RESI_GLOB_RELA=1.E-6,
                               ITER_GLOB_MAXI=50,),
                 EPSI_IMPOSE=_F(EPXX=ZERO,),
                 INFO=1,);

IMPR_TABLE(TABLE=U,);


MATER  = [None]*NCAL
RESU   = [None]*NCAL

SXM = 0.
EXM = 0.

Vim = N.zeros(Nbvari)

time = 0.

def EXTR_FONC_NAP(nappe,temp,YOUN) :
#   interpolation dans une nappe pour une temperature donnee
#   en sortie, courbe de traction a cette temperature
    epsmax=1.
    npas=200
    l=N.array(range(0,npas))
    labs=[]
    lsig=[]
    lepsp=l*epsmax/npas
    for epsp in lepsp :
       y=nappe(temp, epsp)
       lsig.append(y)
       labs.append(epsp+y/YOUN(temp))
    fonc=DEFI_FONCTION(NOM_PARA='EPSI',ABSCISSE=labs,ORDONNEE=lsig,PROL_DROITE='LINEAIRE')

    return fonc

# ajout de vale_calc
for i in range(NCAL):

          timem = time

          time = timem + tmax/NCAL

          Ti = T0 + time/tmax * (Tmax - T0)

          Tm = T0 + timem/tmax * (Tmax - T0)

          # deformation mecanique imposee correspondant a la deformation thermique du premier calcul

          epsimp =DEFI_CONSTANTE(VALE=-ALPH(Ti)*(Ti - TREF));

          print 'i=',i, ' instant=', time, ' Temperature=',Ti, F0_T(Ti)

          # variation des coef du comportement avec la temperature
          # correction eventuelle des valeurs initiales du temps ti

          if i > 0 :
             SXM = SXM *(YOUN(Ti)/YOUN(Tm))

          COU_TRAC=EXTR_FONC_NAP(RP,Ti,YOUN)

          MATER[i]=DEFI_MATERIAU(ELAS =_F(E=YOUN(Ti),
                                          NU=0.,
                                          ALPHA=0.),
                                 ROUSSELIER=_F(SIGM_1   = S1_T(Ti),
                                               D        = D_T(Ti),
                                               PORO_INIT= F0_T(Ti),
                                               BETA=1.,
                                               ),
                                 TRACTION=_F(SIGM=COU_TRAC,),
                                  );

          list = DEFI_LIST_REEL(DEBUT=timem,
                      INTERVALLE=(_F(JUSQU_A=time,NOMBRE=1,),),);

          RESU[i]=SIMU_POINT_MAT(COMPORTEMENT=_F(RELATION=compor,RESI_INTE_RELA=1.E-6,
                                              PARM_THETA=theta),
                                 MATER=MATER[i],
                                 SUPPORT='POINT',
                                 INCREMENT=_F(LIST_INST = list, ),
                                 NEWTON=_F( PREDICTION='ELASTIQUE',
                                             MATRICE='TANGENTE',
                                             REAC_ITER=1,),
                                 EPSI_IMPOSE=_F(EPXX=epsimp),
                                 CONVERGENCE=_F(RESI_GLOB_RELA=1.E-6,
                                                ITER_GLOB_MAXI=50,),
                                 SIGM_INIT=_F(SIXX=SXM),
                                 EPSI_INIT=_F(EPXX=EXM, EPYY=0.,EPZZ=0.,EPXY=0, EPXZ=0.,EPYZ=0.),
                                 VARI_INIT=_F(VALE=[Vim[j] for j in range(Nbvari)]),
                                 INFO=1,);

          # recuperation des valeurs initiales du futur pas de temps dans la table resultat

          EXM = RESU[i]['EPXX',1]

          SXM = RESU[i]['SIXX',1]

          for j in range(Nbvari):
             Vim[j] = RESU[i]['V'+str(j+1),1]

          IMPR_TABLE(TABLE=RESU[i]);

          DETRUIRE ( CONCEPT =  _F (NOM =epsimp),);
          DETRUIRE ( CONCEPT =  _F (NOM =list),);
          DETRUIRE ( CONCEPT =  _F (NOM =COU_TRAC),);

          TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='VMIS',
                     VALE_CALC=RESU[i]['VMIS',2],
                     VALE_REFE=U['VMIS',i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',
                     );

          TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='TRACE',
                     VALE_CALC=RESU[i]['TRACE',2],
                     VALE_REFE=U['TRACE',i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',
                     );

          for j in range(2):
             nomvari='V'+str(j+1)
             if U[nomvari,i+2] > epsi :
                TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA=nomvari,
                     VALE_CALC=RESU[i][nomvari,2],
                     VALE_REFE=U[nomvari,i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',
                     );

FIN();
