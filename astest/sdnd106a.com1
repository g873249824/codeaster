
# COPYRIGHT (C) 1991 - 2013  EDF R&D                WWW.CODE-ASTER.ORG
#
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
# 1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
POURSUITE(CODE=_F(NOM = 'SDND106A',),);

import numpy as NP

############################################################
################  Transitions Phasis    ####################
############################################################
tmpd = aster.getvectjev('FT_FRICT           .VALE        ');
t = NP.array(tmpd[0:len(tmpd)/2])
# Euler:
force_tangentielle = NP.array(tmpd[len(tmpd)/2:len(tmpd)])
del tmpd
# Definition de la force tangentielle de transition
force_tangentielle_transition = -2e3
############################################################
# Time transition search 
############################################################
N=len(t)
dd=[]
for i in range(N):
    dd.append(NP.abs((force_tangentielle[i]-force_tangentielle_transition)/force_tangentielle_transition) - 1E-6)
d_force = NP.array(dd) <= 0
d_force = d_force.astype(int)
diff_force = NP.zeros(N, int)
diff_force[1:len(diff_force)] = d_force[1:N]-d_force[0:N-1]
transition_1 = NP.nonzero(diff_force>=1)[0]
transition_2 = NP.nonzero(diff_force<=-1)[0]

indice_transition=[transition_1[0],transition_2[0]]
instants_transition=[t[i] for i in indice_transition]
instants_transition.sort()


############################################################
# Analitical time transition
############################################################
instants_transition_analytique=[0.03512, 0.31492]


############################################################
# Time transition tests :
############################################################
tio_inst = DEFI_LIST_REEL(VALE=instants_transition,);
tio_fonc= DEFI_FONCTION(NOM_PARA='INST',
                        VALE_PARA=tio_inst,
                        VALE_FONC=tio_inst,);

for i in range(0,len(instants_transition)):
   TEST_FONCTION(VALEUR=_F(VALE_CALC=instants_transition_analytique[i],
                           VALE_REFE=instants_transition_analytique[i],
                           CRITERE='ABSOLU',
                           VALE_PARA=instants_transition[i],
                           REFERENCE='ANALYTIQUE',
                           TOLE_MACHINE=1.E-4,  #TODO: creer une liste des vale_calc
                           PRECISION=1.E-4,
                           FONCTION=tio_fonc,),
                 )

FIN();
