# TITRE FISSURE INCLINEE EN 2D AVEC X-FEM
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NOM='SSNP138A',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'))

# MODELISATION A : CHARGEMENT SUR LES BORDS DU DOMAINE, MAILLES QUAD4, ENRICHISSEMENT GEOMETRIQUE

#*********************************************************
#                    GEOMETRIE
#                    *********
#     Parametres a modifier avec le maillage
#*********************************************************
#
# LARGEUR DE L EPROUVETTE SELON X
W = 0.2 
#
# HAUTEUR DE L EPROUVETTE SELON Y
H = 0.5 
#
# NOMBRE D ELEMENTS SELON X
NX = 100. 
#
# NOMBRE D ELEMENTS SELON Y
NY = 100. 
#
# precision
eps = sqrt((W/NX)**2+(H/NY)**2)

#*********************************************************

# LONGUEUR DE LA FISSURE
A = 0.04

# PRESSION APPLIQUEE SUR LES FACES INFERIEURE ET SUPERIEURE
PRES=-1.e6

# DEFINITION DU MATERIAU
E   = 210E9
nu  = 0.3
ACIER=DEFI_MATERIAU(ELAS=_F(E=E,NU=nu))

#*********************************************************

# ANGLES D INCLINAISON DE LA FISSURE (EN DEGRES)
alphaf = [0., 15., 30., 45., 60.] 
#alphaf = [30.] 

# DEFINITION DES COURONNES POUR LE CALCUL DES SIF
RI=[0.1*A,   eps]
RS=[0.3*A, 3*eps]

#----------------------------------------------
#                MAILLAGE, MODELE INITIAL
#----------------------------------------------

MAILLAGE=LIRE_MAILLAGE(FORMAT='MED')

MAILLAGE=DEFI_GROUP(reuse =MAILLAGE,
                    MAILLAGE=MAILLAGE,
                    CREA_GROUP_NO=(_F(NOM='NA',OPTION='ENV_SPHERE',POINT=(-W/2.,0.),PRECISION=eps/4.,RAYON=eps/4.),
                                   _F(NOM='NB',OPTION='ENV_SPHERE',POINT=(+W/2.,0.),PRECISION=eps/4.,RAYON=eps/4.),
                                   _F(NOM='NC',OPTION='ENV_SPHERE',POINT=(0.,-H/2.),PRECISION=eps/4.,RAYON=eps/4.),
                                   _F(NOM='ND',OPTION='ENV_SPHERE',POINT=(0.,+H/2.),PRECISION=eps/4.,RAYON=eps/4.),
                                   ),
                    INFO=2)
                    
MODELEIN=AFFE_MODELE(MAILLAGE=MAILLAGE,
                     AFFE=_F(GROUP_MA=('SURF','LIG1','LIG3'),
                             PHENOMENE='MECANIQUE',
                             MODELISATION='D_PLAN'))

MAILLAGE=MODI_MAILLAGE(reuse =MAILLAGE,
                       MAILLAGE=MAILLAGE,
                       ORIE_PEAU_2D=_F(GROUP_MA=('LIG1','LIG3',),),
                       )

#----------------------------------------------
#         DEBUT DE LA BOUCLE SUR LES ANGLES
#----------------------------------------------

nbcalc = len(alphaf)
alpha = [None]*nbcalc
FISS = [None]*nbcalc
MODELK = [None]*nbcalc
CHMA = [None]*nbcalc
CH = [None]*nbcalc
RESU = [None]*nbcalc
RESU = [None]*nbcalc
PK1 = [None]*nbcalc
PK2 = [None]*nbcalc

nbc=len(RI)
SIF_1 = [None]*(nbc*nbcalc)
SIF_2 = [None]*(nbc*nbcalc)
TG_1 = [None]*(nbc*nbcalc)

VAL_CALC = [
            2.5708212590632E+05 ,
            2.5708212590632E+05 ,
            0.28635937454729    ,
            20.577642984005     ,
            20.577642984529     ,
            2.5675026373716E+05 ,
            2.5675026373715E+05 ,
            0.28535797314068    ,
            3.5620742697313     ,
            3.5620742703065     ,
            2.5887241598571E+05 ,
            158.76891370095     ,
            2.5887241598571E+05 ,
            158.76891369451     ,
            2.3903313521549E+05 ,
            2.390126388733E+05  ,
            0.26603706707924    ,
            62765.29194782      ,
            62758.38310944      ,
            2.3998639243309E+05 ,
            2.3998185774928E+05 ,
            0.26638265062566    ,
            63005.314776172     ,
            63007.786619954     ,
            2.4123409967558E+05 ,
            63238.632978295     ,
            2.4123304133091E+05 ,
            63227.499234692     ,
            1.9370388062567E+05 ,
            1.9369454086446E+05 ,
            0.21517889064490    ,
            1.0970326832313E+05 ,
            1.0970178446867E+05 ,
            1.9382199956969E+05 ,
            1.9382002770573E+05 ,
            0.21486064985100    ,
            1.0976613566215E+05 ,
            1.0976760267839E+05 ,
            1.9628738052866E+05 ,
            1.1031579891943E+05 ,
            1.9630157570887E+05 ,
            1.1031592384974E+05 ,
            1.2934952181045E+05 ,
            1.2935676600294E+05 ,
            0.14290530563460    ,
            1.2684113182406E+05 ,
            1.2693309470329E+05 ,
            1.2974865497667E+05 ,
            1.2975353178825E+05 ,
            0.14327987178326    ,
            1.2717557744754E+05 ,
            1.2724604781889E+05 ,
            1.3041512888428E+05 ,
            1.2798759571307E+05 ,
            1.3030468176211E+05 ,
            1.2769176109547E+05 ,
            65344.008545075     ,
            65315.197194223     ,
            0.072078218827704   ,
            1.1096767324308E+05 ,
            1.1105106478907E+05 ,
            65175.895518816     ,
            65144.500597726     ,
            0.071743612978393   ,
            1.1029747584569E+05 ,
            1.1037066510078E+05 ,
            64771.471205546     ,
            1.1082917439351E+05 ,
            65079.522854474     ,
            1.1062879944302E+05 ,
      ]

ct = -1
for i in range(nbcalc) :

   # on passe pas un string pour que l evaluation de la fonction se fasse a chaque pas
   alpha = str(eval('alphaf[i]*pi/180.'))

   FISS[i]=DEFI_FISS_XFEM(MODELE=MODELEIN,
                          DEFI_FISS=_F(
                                       FORM_FISS  = 'SEGMENT',
                                       PFON_ORIG  = (-A*cos(eval(alpha))/2,-A*sin(eval(alpha))/2, 0.),
                                       PFON_EXTR  = ( A*cos(eval(alpha))/2, A*sin(eval(alpha))/2, 0.),
                                       ),
                          TYPE_ENRI_FOND='GEOMETRIQUE',
                          NB_COUCHES=3,
                          )

   MODELK[i]=MODI_MODELE_XFEM(MODELE_IN=MODELEIN,FISSURE=FISS[i])

   CHMA[i]=AFFE_MATERIAU(MAILLAGE=MAILLAGE,
                         MODELE=MODELK[i],
                         AFFE=_F(TOUT = 'OUI',
                                 MATER=ACIER))

   CH[i]=AFFE_CHAR_MECA(MODELE=MODELK[i],
                        DDL_IMPO=(_F(GROUP_NO=('NA','NB',),DY=0.),
                                  _F(GROUP_NO=('NC','ND',),DX=0.),),
                        PRES_REP=_F(GROUP_MA=('LIG1','LIG3',),PRES=PRES))

   RESU[i]=MECA_STATIQUE(MODELE=MODELK[i],
                         CHAM_MATER=CHMA[i],
                         EXCIT=_F(CHARGE=CH[i]))

   # SOLUTION ANALYTIQUE (handbook tada p42)
   fab=1.0+0.128*(A/W)-0.288*(A/W)**2+1.525*(A/W)**3
   K1REF=-PRES*sqrt(pi*A/2.)*fab*cos(eval(alpha))**2
   K2REF=-PRES*sqrt(pi*A/2.)*fab*cos(eval(alpha))*sin(eval(alpha))
   GREF = (1-nu**2)/E*(K1REF**2+K2REF**2)

   for j in range(0,nbc) :
      k = i*nbc + j
      SIF_1[k]=CALC_G(RESULTAT=RESU[i],
                     OPTION='CALC_K_G',
                     THETA=_F(FISSURE=FISS[i],
                              R_INF=RI[j],
                              R_SUP=RS[j]))

      SIF_2[k]=CALC_G(RESULTAT=RESU[i],
                     OPTION='CALC_K_G',
                     THETA=_F(FISSURE=FISS[i],
                              NUME_FOND=2,
                              R_INF=RI[j],
                              R_SUP=RS[j]))

      TG_1[k]=CALC_G(RESULTAT=RESU[i],
                     THETA=_F(FISSURE=FISS[i],
                              R_INF=RI[j],
                              R_SUP=RS[j]))

      IMPR_TABLE(TABLE=SIF_1[k])
      IMPR_TABLE(TABLE=SIF_2[k])
      IMPR_TABLE(TABLE=TG_1[k])
      
      ct = ct+1
      TEST_TABLE(TABLE=SIF_1[k],
                 NOM_PARA='K1',
                 VALE_CALC=VAL_CALC[ct], VALE_REFE=K1REF,
                 CRITERE='RELATIF',
                  
                 PRECISION=0.02, 
                 REFERENCE='ANALYTIQUE')
      ct = ct+1
      TEST_TABLE(TABLE=SIF_2[k],
                 NOM_PARA='K1',
                 VALE_CALC=VAL_CALC[ct], VALE_REFE=K1REF,
                 CRITERE='RELATIF',
                  
                 PRECISION=0.02,                  
                 REFERENCE='ANALYTIQUE')
      ct = ct+1
      TEST_TABLE(TABLE=TG_1[k],
                 NOM_PARA='G',
                 VALE_CALC=VAL_CALC[ct], VALE_REFE=GREF,
                 CRITERE='RELATIF',
                  
                 PRECISION=0.02,
                 REFERENCE='ANALYTIQUE')

      if K2REF != 0. :
         ct = ct+1
         TEST_TABLE(TABLE=SIF_1[k],
                    NOM_PARA='K2',
                    VALE_CALC=VAL_CALC[ct], VALE_REFE=K2REF,
                    CRITERE='RELATIF',
                    PRECISION=0.03, 
                    REFERENCE='ANALYTIQUE')
         ct = ct+1
         TEST_TABLE(TABLE=SIF_2[k],
                    NOM_PARA='K2',
                    VALE_CALC=VAL_CALC[ct], VALE_REFE=K2REF,
                    CRITERE='RELATIF',
                    PRECISION=0.03,
                    REFERENCE='ANALYTIQUE')
      else :
         ct = ct+1
         TEST_TABLE(TABLE=SIF_1[k],
                    NOM_PARA='K2',
                    VALE_CALC=VAL_CALC[ct], VALE_REFE=K2REF,
                    CRITERE='ABSOLU',
                     PRECISION=K1REF/1000.,
                    REFERENCE='ANALYTIQUE')
         ct = ct+1
         TEST_TABLE(TABLE=SIF_2[k],
                    NOM_PARA='K2',
                    VALE_CALC=VAL_CALC[ct], VALE_REFE=K2REF,
                    CRITERE='ABSOLU',
                     PRECISION=K1REF/1000., 
                    REFERENCE='ANALYTIQUE')

   # K1 SUR LE 1er FOND
   PK1[i]=POST_K1_K2_K3(MODELISATION='D_PLAN',
                        MATER=ACIER,
                        FISSURE = FISS[i],
                        NUME_FOND = 1,
                        RESULTAT  = RESU[i],
                       )

   IMPR_TABLE(TABLE = PK1[i])
   ct = ct+1
   TEST_TABLE(TABLE=PK1[i],
              NOM_PARA='K1',
              VALE_CALC=VAL_CALC[ct], VALE_REFE=K1REF,
              CRITERE='RELATIF',
               PRECISION=0.02, 
              REFERENCE='ANALYTIQUE')

   if K2REF != 0. :
      ct = ct+1
      TEST_TABLE(TABLE=PK1[i],
                 NOM_PARA='K2',
                 VALE_CALC=VAL_CALC[ct], VALE_REFE=K2REF,
                 CRITERE='RELATIF',
                  PRECISION=0.02, 
                 REFERENCE='ANALYTIQUE')
   else :
      ct = ct+1
      TEST_TABLE(TABLE=PK1[i],
                 NOM_PARA='K2',
                 VALE_CALC=VAL_CALC[ct], VALE_REFE=K2REF,
                 CRITERE='ABSOLU',
                  PRECISION=K1REF/1000., 
                 REFERENCE='ANALYTIQUE')


   # K1 SUR LE 2EME FOND
   PK2[i]=POST_K1_K2_K3(MODELISATION='D_PLAN',
                        MATER=ACIER,
                        FISSURE = FISS[i],
                        NUME_FOND = 2,
                        RESULTAT  = RESU[i],
                       )

   IMPR_TABLE(TABLE = PK2[i])
   ct = ct+1
   TEST_TABLE(TABLE=PK2[i],
              NOM_PARA='K1',
              VALE_CALC=VAL_CALC[ct], VALE_REFE=K1REF,
              CRITERE='RELATIF',
               PRECISION=0.02, 
              REFERENCE='ANALYTIQUE');

   if K2REF != 0. :
      ct = ct+1
      TEST_TABLE(TABLE=PK2[i],
                NOM_PARA='K2',
                VALE_CALC=VAL_CALC[ct], VALE_REFE=K2REF,
                CRITERE='RELATIF',
                 PRECISION=0.02, 
                REFERENCE='ANALYTIQUE')

   else :
      ct = ct+1
      TEST_TABLE(TABLE=PK2[i],
                NOM_PARA='K2',
                VALE_CALC=VAL_CALC[ct], VALE_REFE=K2REF,
                CRITERE='ABSOLU',
                 PRECISION=K1REF/1000.,
                REFERENCE='ANALYTIQUE')



#------------------------------------------------------------------------
# POST-TRAITEMENT : MAILLAGE FISSURE et DEPLACEMENTS POUR LE MAILLAGE FISSURE
#------------------------------------------------------------------------

i=0

MA_XFEM=POST_MAIL_XFEM(MODELE=MODELK[i])

MOD_VISU=AFFE_MODELE(MAILLAGE=MA_XFEM,
                     AFFE=_F(TOUT='OUI',
                             PHENOMENE='MECANIQUE',
                             MODELISATION='D_PLAN'))

RES_XFEM=POST_CHAM_XFEM(MODELE_VISU= MOD_VISU,
                        RESULTAT= RESU[i])

RES_XFEM=CALC_CHAMP(reuse=RES_XFEM,
                    RESULTAT=RES_XFEM,
                    CRITERES=('SIEQ_ELGA','SIEQ_ELNO'))

IMPR_RESU(FORMAT='MED',RESU=_F(RESULTAT=RES_XFEM))

FIN()
