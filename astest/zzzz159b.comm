# MODIF  DATE 22/04/2013   AUTEUR ASSIRE A.ASSIRE 
# TITRE TEST DE LA MACRO COMMANDE DE RECALAGE
# 4 calculs esclaves distribues : ncpus = 4 + 1 (maitre),
# on met 4 car c'est une limite courante en interactif (interactif_nbpmax)
# zzzz159b.para = tps_job 600 mem_job 512Mo ncpus 4 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# RESPONSABLE ASSIRE A.ASSIRE
import numpy as NP

DEBUT(CODE=_F(NOM='ZZZZ159B',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'))

parametres =[['YOUN__',100000.,50000.,150000.],['DSDE__',2000.,500.,10000.],['SIGY__',30.,5.,500.]]

calcul = [['REPONSE1','INST','SIYY'],['REPONSE2','INST','V1']]

experience=[    NP.array([[0.00000E+00  , 0.00000E+00 ],
                              [5.00000E-02  , 5.00000E+01 ],
                              [1.00000E-01  , 1.00000E+02 ],
                              [1.50000E-01  , 1.50000E+02 ],
                              [2.00000E-01  , 2.00000E+02 ],
                              [2.50000E-01  , 2.00500E+02 ],
                              [3.00000E-01  , 2.01000E+02 ],
                              [3.50000E-01  , 2.01500E+02 ],
                              [4.00000E-01  , 2.02000E+02 ],
                              [4.50000E-01  , 2.02500E+02 ],
                              [5.00000E-01  , 2.03000E+02 ],
                              [5.50000E-01  , 2.03500E+02 ],
                              [6.00000E-01  , 2.04000E+02 ],
                              [6.50000E-01  , 2.04500E+02 ],
                              [7.00000E-01  , 2.05000E+02 ],
                              [7.50000E-01  , 2.05500E+02 ],
                              [8.00000E-01  , 2.06000E+02 ],
                              [8.50000E-01  , 2.06500E+02 ],
                              [9.00000E-01  , 2.07000E+02 ],
                              [9.50000E-01  , 2.07500E+02 ],
                              [1.00000E+00  , 2.08000E+02 ]]),
               NP.array([[0.00000E+00  , 0.00000E+00 ],
                              [5.00000E-02  , 0.00000E+00 ],
                              [1.00000E-01  , 0.00000E+00 ],
                              [1.50000E-01  , 0.00000E+00 ],
                              [2.00000E-01  , 0.00000E+00 ],
                              [2.50000E-01  , 2.47500E-04 ],
                              [3.00000E-01  , 4.95000E-04 ],
                              [3.50000E-01  , 7.42500E-04 ],
                              [4.00000E-01  , 9.90000E-04 ],
                              [4.50000E-01  , 1.23750E-03 ],
                              [5.00000E-01  , 1.48500E-03 ],
                              [5.50000E-01  , 1.73250E-03 ],
                              [6.00000E-01  , 1.98000E-03 ],
                              [6.50000E-01  , 2.22750E-03 ],
                              [7.00000E-01  , 2.47500E-03 ],
                              [7.50000E-01  , 2.72250E-03 ],
                              [8.00000E-01  , 2.97000E-03 ],
                              [8.50000E-01  , 3.21750E-03 ],
                              [9.00000E-01  , 3.46500E-03 ],
                              [9.50000E-01  , 3.71250E-03 ],
                              [1.00000E+00  , 3.96000E-03 ]]) ]



# LANCEMENT DE L'IDENTIFICATION

RESU=MACR_RECAL(
         UNITE_ESCL       = 3,
         RESU_EXP         = experience,
         LIST_PARA        = parametres,
         RESU_CALC        = calcul,
         TOLE_FONC        = 0.9,
         CALCUL_ESCLAVE=_F(LANCEMENT = 'DISTRIBUTION',
                           UNITE_SUIVI = 90),
         INFO=1,
)  ;


# On cree une liste bidon pour pouvoir
# definir une fonction testable par TEST_RESU
BIDON=DEFI_LIST_REEL(DEBUT=1.,
                     INTERVALLE=_F(JUSQU_A = 3., NOMBRE=2));

OPTIM=DEFI_FONCTION(NOM_PARA='INST',
                    VALE_PARA=BIDON,
                    VALE_FONC=RESU);

TEST_FONCTION(VALEUR=(_F(VALE_CALC=150000.,
                         VALE_REFE=150000.,
                         VALE_PARA=1.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-2,
                         FONCTION=OPTIM,),
                      _F(VALE_CALC=10000.,
                         VALE_REFE=10000.,
                         VALE_PARA=2.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-2,
                         FONCTION=OPTIM,),
                      _F(VALE_CALC=115.1865,
                         VALE_REFE=115.1865,
                         VALE_PARA=3.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-2,
                         FONCTION=OPTIM,),
                      ),
              )

FIN()
