# TITRE VALIDATION DE LA MODELISATION 3D_GRAD_VARI AVEC PILOTAGE
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#       ET UTILISATION DE LA MATRICE SECANTE


DEBUT(CODE=_F(NOM='COMP005D',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'))


MA_L  =  LIRE_MAILLAGE(FORMAT='MED');


MA_Q = CREA_MAILLAGE(
  MAILLAGE = MA_L,
  LINE_QUAD = _F(TOUT = 'OUI')
  )

L_INST = DEFI_LIST_REEL (
              DEBUT=0.0,
              INTERVALLE=(_F(JUSQU_A=3.00,NOMBRE=30,),
                          ),);




METAL = DEFI_MATERIAU(
  ELAS       = _F(E = 1.E5,
                  NU = 0.3,
                  ALPHA=1.E-5
                  ),
  ECRO_LINE  = _F(SY= 100., D_SIGM_EPSI = -1.E4),
  BETON_ECRO_LINE  = _F(SYT= 100., D_SIGM_EPSI = -1.E4),
#  NON_LOCAL  = _F(LONG_CARA = 1.,PENA_LAGR=1000.)
  NON_LOCAL  = _F(C_GRAD_VARI = 2800.,PENA_LAGR=1000.*2800.)
  )




U_COMP=DEFI_FONCTION(NOM_PARA='INST',
                     VALE=(0.,0.,2.,3.e-3,3.,6.e-3),
                     PROL_DROITE='CONSTANT',);


MO=[None]*2
C_RIG=[None]*2
CHR_C=[None]*2
CHP_T=[None]*2
TEMP=[None]*2
CHP_M=[None]*2

MA=[MA_Q,MA_L];


modelisation=['3D_GRAD_VARI','3D'];
comportement=['ENDO_ISOT_BETON'];


for i in range(0,len(modelisation)):





  CHP_M[i]=AFFE_MATERIAU(MAILLAGE=MA[i],
                     AFFE=_F(TOUT='OUI',
                             MATER=METAL),);

  MO[i]=AFFE_MODELE(MAILLAGE=MA[i],
              AFFE=_F(TOUT='OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION=modelisation[i],
                       ),
                       );

  C_RIG[i] = AFFE_CHAR_MECA(
                               MODELE = MO[i],
                               DDL_IMPO = (
               _F(GROUP_MA = 'BLOX',DX = 0),
               _F(GROUP_MA = 'BLOY',DY = 0),
               _F(GROUP_MA = 'BLOZ',DZ = 0),
               ),
           );

  CHR_C[i] = AFFE_CHAR_MECA( MODELE = MO[i],
                        DDL_IMPO = _F(GROUP_MA='TIRX', DX= 1.),
                       );


DIFF=[None]*len(comportement)
F_DIFF = FORMULE(NOM_PARA=('SIXX','SIXX_L'),VALE='(SIXX-SIXX_L)/SIXX')

for j in range(0,len(comportement)):
  U=[None]*2
  SIG=[None]*2
  TAB_E=[None]*2
  TAB_S=[None]*2
  TG_E=[None]*2

  for i in range(0,len(modelisation)):


# Matrice tangente

    U[i]=STAT_NON_LINE(MODELE=MO[i],
              CHAM_MATER=CHP_M[i],
              EXCIT=(_F(CHARGE=CHR_C[i],
                       FONC_MULT=U_COMP,),
                     _F(CHARGE=C_RIG[i],),
                     ),
              COMP_INCR=_F(RELATION=comportement[j]),
              INCREMENT=_F(LIST_INST=L_INST,
                           INST_FIN=0.5,
                           ),
              NEWTON=_F(MATRICE='TANGENTE',
                        REAC_ITER=1,
                        ),
              CONVERGENCE=_F(ITER_GLOB_MAXI=50,
                             RESI_GLOB_RELA=1.e-6,
                            ),
         );


# Matrice secante

    U[i]=STAT_NON_LINE(reuse=U[i],
              ETAT_INIT=_F(EVOL_NOLI=U[i]),
              MODELE=MO[i],
              CHAM_MATER=CHP_M[i],
              EXCIT=(_F(CHARGE=CHR_C[i],
                       FONC_MULT=U_COMP,),
                     _F(CHARGE=C_RIG[i],),
                     ),
              COMP_INCR=_F(RELATION=comportement[j]),
              INCREMENT=_F(LIST_INST=L_INST,
                           INST_FIN=1.,
                           ),
              NEWTON=_F(MATRICE='TANGENTE',
                        REAC_ITER=1,
                        PAS_MINI_ELAS=1.,
                        REAC_ITER_ELAS=1
                        ),
              CONVERGENCE=_F(ITER_GLOB_MAXI=50,
                             ITER_GLOB_ELAS=200,
                             RESI_GLOB_RELA=1.e-6,
                            ),
              ARCHIVAGE=_F(LIST_INST=L_INST),
         );




# Pilotage + Matrice tangente

    U[i]=STAT_NON_LINE(reuse=U[i],
              ETAT_INIT=_F(EVOL_NOLI=U[i]),
              MODELE=MO[i],
              CHAM_MATER=CHP_M[i],
              EXCIT=(_F(CHARGE=CHR_C[i],
                       TYPE_CHARGE='FIXE_PILO',),
                     _F(CHARGE=C_RIG[i],),
                     ),
              COMP_INCR=_F(RELATION=comportement[j]),
              INCREMENT=_F(LIST_INST=L_INST,
                           INST_FIN=2.,
                           ),
              NEWTON=_F(MATRICE='TANGENTE',
                        REAC_ITER=1,
                        REAC_ITER_ELAS=1
                        ),
              PILOTAGE=_F(TYPE='PRED_ELAS',
                          COEF_MULT=2.,
                          SELECTION='RESIDU',
                          ETA_PILO_R_MIN = 0.,
                          ETA_PILO_MIN=1.e-6,
                          ETA_PILO_MAX=1.,
                          ETA_PILO_R_MAX=1.),
              CONVERGENCE=_F(ITER_GLOB_MAXI=50,
                             ITER_GLOB_ELAS=200,
                             RESI_GLOB_RELA=1.e-6,
                            ),
              ARCHIVAGE=_F(LIST_INST=L_INST),
         );

    U[i]=CALC_CHAMP(reuse=U[i],RESULTAT=U[i],CONTRAINTE=('SIGM_ELNO'),VARI_INTERNE=('VARI_ELNO'))




    U[i] = CALC_CHAMP(
                reuse = U[i],

                RESULTAT  =U[i],
                CONTRAINTE='SIGM_NOEU',VARI_INTERNE='VARI_NOEU',FORCE='FORC_NODA',
                );



    SIG[i]=RECU_FONCTION(RESULTAT=U[i],
                                   MAILLE='M19',
                                   NOM_CHAM='SIEF_ELGA',
                                   NOM_CMP='SIXX',
                                POINT=1,
                         );


    TAB_E[i]=POST_RELEVE_T(
             ACTION=
                  _F(INTITULE='DEFO',
                   GROUP_NO='NO_POST',
                   RESULTAT=U[i],
                   NOM_CHAM='DEPL',
                   NOM_CMP=('DX'),
                   OPERATION='EXTRACTION',),);

    TAB_S[i]=POST_RELEVE_T(
             ACTION=
                  _F(INTITULE='DEFO',
                   GROUP_NO='NO_POST',
                   RESULTAT=U[i],
                   NOM_CHAM='SIGM_NOEU',
                   NOM_CMP=('SIXX'),
                   OPERATION='EXTRACTION',),);

    TG_E[i]=RECU_FONCTION(TABLE=TAB_E[i],
                    PARA_X='INST',
                    PARA_Y='DX',
                    PROL_DROITE='CONSTANT',
                    PROL_GAUCHE='CONSTANT',);

    if i==1 :
      DIFF[j]=CALC_TABLE(TABLE=TAB_S[i],
                         TITRE = ' ',
                         ACTION=(
                                 _F(OPERATION='FILTRE',NOM_PARA='NUME_ORDRE',CRIT_COMP='GT',VALE=0.,),
                                 _F(OPERATION='RENOMME',NOM_PARA=('SIXX','SIXX_L'),),
                                 _F(OPERATION='COMB',TABLE=TAB_S[i-1],NOM_PARA='INST'),
                                 _F(OPERATION='OPER',FORMULE=F_DIFF,NOM_PARA='DIFF'),
                                 ),
                       );




  IMPR_TABLE(TABLE=DIFF[j]);

  TEST_TABLE(CRITERE='ABSOLU',
             REFERENCE='NON_DEFINI',
             VALE_REFE=0.0,
             VALE_CALC=2.1449177384617E-05,
             NOM_PARA='DIFF',
             TABLE=DIFF_0,
             FILTRE=_F(CRIT_COMP='MAXI_ABS',
                       NOM_PARA='DIFF',),
             )

  for i in range(0,len(modelisation)):
    DETRUIRE ( CONCEPT = _F (NOM = U[i],),)
    DETRUIRE ( CONCEPT = _F (NOM = SIG[i],),)
    DETRUIRE ( CONCEPT = _F (NOM = TAB_E[i],),)
    DETRUIRE ( CONCEPT = _F (NOM = TAB_S[i],),)
    DETRUIRE ( CONCEPT = _F (NOM = TG_E[i],),)



FIN();
