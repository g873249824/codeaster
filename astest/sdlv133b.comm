# TITRE REPONSE TRANSITOIRE PAR RESOLUTION HARMONIQUE CYLINDRE DE SOL
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT( CODE=_F(  NOM = 'SDLV133B',NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'));


MAILLAGE = LIRE_MAILLAGE(FORMAT='MED', ) ;
#
MAILLAGE=DEFI_GROUP(reuse =MAILLAGE,
                MAILLAGE=MAILLAGE,
                CREA_GROUP_NO=_F(GROUP_MA=('SBASE',),
                                ),
               );


MODELE = AFFE_MODELE( MAILLAGE= MAILLAGE,
          AFFE=(
          _F( GROUP_MA=('VOLUM'),PHENOMENE= 'MECANIQUE',
                         MODELISATION= '3D' ),
                ),
                        ) ;
#

mat1      = DEFI_MATERIAU( ELAS=_F( E= 5.419008E+8 , RHO= 2000.,
                                    AMOR_HYST = 0.1,
                                    NU= 0.2  )    ) ;



champmat = AFFE_MATERIAU( MAILLAGE= MAILLAGE,
              AFFE=(
              _F( GROUP_MA= 'VOLUM' , MATER= mat1 ),
              )
                           ) ;
#
# La structure est encastree a l interface
#-----------------------------------------
cond_lim = AFFE_CHAR_MECA( MODELE= MODELE,
                       DDL_IMPO=_F( GROUP_NO = ('SBASE'),
                                  DX = 0., DY= 0., DZ= 0.,
                                  ),
                                             ) ;
#
# Calcul des matrices et vecteurs elementaires=
#----------------------------------------------
rigi_ele = CALC_MATR_ELEM( MODELE= MODELE , OPTION= 'RIGI_MECA',
                             CHAM_MATER= champmat ,
                             CHARGE= cond_lim                      ) ;
righ_ele = CALC_MATR_ELEM( MODELE= MODELE , OPTION= 'RIGI_MECA_HYST',
                             CHAM_MATER= champmat ,
                             RIGI_MECA= rigi_ele,
                             CHARGE= cond_lim                      ) ;
mass_ele = CALC_MATR_ELEM( MODELE= MODELE , OPTION= 'MASS_MECA',
                             CHAM_MATER= champmat ,
                             CHARGE= cond_lim                      ) ;

nume_ddl = NUME_DDL( MATR_RIGI= rigi_ele, );
#
# Assemblage des matrices et vecteurs=
#-------------------------------------
rigidite = ASSE_MATRICE( MATR_ELEM= rigi_ele , NUME_DDL= nume_ddl ) ;
rigihyst = ASSE_MATRICE( MATR_ELEM= righ_ele , NUME_DDL= nume_ddl ) ;
masse    = ASSE_MATRICE( MATR_ELEM= mass_ele , NUME_DDL= nume_ddl ) ;


#
# CALCUL DES MODES =
#---------------------------------------------

# MASSTOT=POST_ELEM(MODELE=MODELE,
#                   CHAM_MATER= champmat ,
#                   TITRE='MASSES',
#                   MASS_INER=(_F(TOUT='OUI',),
#                                _F(GROUP_MA=('VOLUM',),)
#                                ),
#                   );
# 
# IMPR_TABLE(TABLE=MASSTOT,);


mode =MACRO_MODE_MECA(MATR_RIGI=rigidite,
                      MATR_MASS=masse,
                      CALC_FREQ=_F(FREQ=(0.1,70.,100.,125.,
                                        
                                          ),
                                  ),
                      FILTRE_MODE=_F(SEUIL=0.0003,),
                      IMPRESSION=_F(),);



fo1 = DEFI_FONCTION ( NOM_PARA= 'FREQ',
         VALE= ( 0., 1., 100., 1., ) );


interdyn = DEFI_INTERF_DYNA( NUME_DDL= nume_ddl,
           INTERFACE=_F(NOM= 'DROITE',
                       TYPE= 'CRAIGB',
                       GROUP_NO= 'SBASE')
           );

bamo = DEFI_BASE_MODALE ( CLASSIQUE=_F (INTERF_DYNA= interdyn,
                                      MODE_MECA= mode,
                                      NMAX_MODE= 999)
       );
mael = MACR_ELEM_DYNA (BASE_MODALE= bamo,
                      );

nddlgen = NUME_DDL_GENE( BASE= bamo,
                          STOCKAGE= 'PLEIN',);

rigigen=PROJ_MATR_BASE(  BASE=bamo,  NUME_DDL_GENE=nddlgen,
                            MATR_ASSE=rigidite );

massgen=PROJ_MATR_BASE(  BASE=bamo,  NUME_DDL_GENE=nddlgen,
                            MATR_ASSE=masse );

RIGIGENC=PROJ_MATR_BASE(  BASE=bamo,  NUME_DDL_GENE=nddlgen,
                            MATR_ASSE=rigihyst );

# ENTREE ACCELEROGRAMME
INCLUDE(UNITE=11,);

IMPR_MACR_ELEM(MACR_ELEM_DYNA=mael,
               FORMAT='MISS_3D',
               UNITE=31,
               AMOR_REDUIT=(0.05,),
               IMPR_MODE_MECA='NON',
               IMPR_MODE_STAT='NON',
               GROUP_MA_INTERF= ('SBASE'),
               SOUS_TITRE= 'CYLINDRE SOL',
               );

IMPR_MISS_3D(MACR_ELEM_DYNA=mael,
             EXCIT_SOL=(_F(DIRECTION=(1.0,0.0,0.0,),
                           FONC_SIGNAL=ACCE1,
                           NOM_CHAM='ACCE',),
                        ),
             INST_INIT=0.0,
             INST_FIN=10.0,
#             INST_FIN=9.99,
             PAS=1.E-2,
             UNITE=31,);

df = 0.5
df2 = 0.1
nft=41
fmax = nft*df
fma2 = 500*df2

MACRO_MISS_3D(OPTION=_F(TOUT='OUI',),
              PROJET= 'SDLV133B',
              REPERTOIRE= './SDLV133B',
              UNITE_IMPR_ASTER=31,
              UNITE_OPTI_MISS=21,
              UNITE_MODELE_SOL=22,
              VERSION='V1_4',
              PARAMETRE=_F(
               FREQ_MIN=df,
               FREQ_MAX=fmax,
               FREQ_PAS=df,
               TYPE='BINAIRE',
               Z0= 0.,
               # SURF='OUI',
               DREF=1.,
               ALGO = 'REGU',
               OFFSET_MAX=10,
               OFFSET_NB=200,
               FICH_RESU_IMPE='../fort.38',
               FICH_RESU_FORC='../fort.28',
                           ),
              );


DYNA1=LIRE_MISS_3D(MACR_ELEM_DYNA=mael,
                     UNITE=27,
                     NOM = 'SDLV133B.01.t',
                     TYPE_RESU='TRANS',
                     TITRE='REPONSE SEISME X',
                     );

ACX_PH = RECU_FONCTION(
                     RESULTAT = DYNA1,
                     NOM_CHAM = 'ACCE',
                     GROUP_NO = 'PH',
                     NOM_CMP = 'DX',
                     );


ACX_PM = RECU_FONCTION(
                     RESULTAT = DYNA1,
                     NOM_CHAM = 'ACCE',
                     GROUP_NO = 'PM',
                     NOM_CMP = 'DX',
                     );

ACX_PB = RECU_FONCTION(
                     RESULTAT = DYNA1,
                     NOM_CHAM = 'ACCE',
                     GROUP_NO = 'PB',
                     NOM_CMP = 'DX',
                     );


XFF=CALC_FONCTION( FFT=_F( FONCTION = ACCE1, METHODE='COMPLET',) );


DEFI_FICHIER(ACTION='LIBERER', UNITE=38, );
DEFI_FICHIER(ACTION='LIBERER', UNITE=28, );

NF = nft+1
impe=[None]*NF
rito=[None]*NF
fosi=[None]*NF

for k in range(1,NF):

  impe[k] = LIRE_IMPE_MISS(BASE=bamo,  NUME_DDL_GENE=nddlgen,
                       UNITE_RESU_IMPE=38, FREQ_EXTR=0.+df*k,
                       TYPE='BINAIRE',
                          );

  rito[k]=COMB_MATR_ASSE(COMB_C=(
                                _F(MATR_ASSE=impe[k],
                                 COEF_C=1.0+0.j,),
                                _F(MATR_ASSE=RIGIGENC,
                                 COEF_C=1.0+0.j,),
                                 ),
                                 SANS_CMP='LAGR',
                                 );

  fosi[k] = LIRE_FORC_MISS(BASE=bamo,  NUME_DDL_GENE=nddlgen,
                       NOM_CMP='DX',NOM_CHAM='ACCE',
                       UNITE_RESU_FORC=28, FREQ_EXTR=0.+df*k,);

  if k==1:
      dyge = DYNA_VIBRA(TYPE_CALCUL='HARM',BASE_CALCUL='GENE',
                          MATR_MASS = massgen,
                          MATR_RIGI = rito[k],
                          SOLVEUR=_F( METHODE='LDLT', ),
                          FREQ = 0.+df*k,
                          EXCIT =_F ( VECT_ASSE_GENE = fosi[k],
                                      COEF_MULT=1.0,
                                  ),
                        );
  else:
    dyge = DYNA_VIBRA(TYPE_CALCUL='HARM',BASE_CALCUL='GENE',
                          reuse=dyge, RESULTAT=dyge,
                          MATR_MASS = massgen,
                          MATR_RIGI = rito[k],
                          SOLVEUR=_F( METHODE='LDLT', ),
                          FREQ = 0.+df*k,
                          EXCIT =_F ( VECT_ASSE_GENE = fosi[k],
                                      COEF_MULT=1.0,
                                  ),
                        );

dyha = REST_GENE_PHYS (RESU_GENE = dyge,
                       NOM_CHAM=('DEPL','VITE','ACCE',),
                      );

listfreq = DEFI_LIST_REEL(DEBUT=0.0,
             INTERVALLE=_F(JUSQU_A=fma2, PAS=df2),
                          );

FATHX0 = RECU_FONCTION ( RESULTAT = dyha,
           NOM_CHAM = 'ACCE',
           GROUP_NO = 'PH',
           NOM_CMP = 'DX',
           INTERPOL='LIN',
           PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',);

FATHXf = FORMULE(NOM_PARA='FREQ',VALE_C='FATHX0(FREQ)*XFF(FREQ)') ;

FATHX = CALC_FONC_INTERP(NOM_PARA='FREQ', LIST_PARA=listfreq,
                         FONCTION=FATHXf,);

ACX_PH_h=CALC_FONCTION(
              FFT=_F( FONCTION = FATHX, METHODE='COMPLET', SYME='NON',)
                       );

FATMX0 = RECU_FONCTION ( RESULTAT = dyha,
           NOM_CHAM = 'ACCE',
           GROUP_NO = 'PM',
           NOM_CMP = 'DX',
           INTERPOL='LIN',
           PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',);

FATMXf = FORMULE(NOM_PARA='FREQ',VALE_C='FATMX0(FREQ)*XFF(FREQ)') ;

FATMX = CALC_FONC_INTERP(NOM_PARA='FREQ', LIST_PARA=listfreq,
                         FONCTION=FATMXf,);

ACX_PM_h=CALC_FONCTION(
              FFT=_F( FONCTION = FATMX, METHODE='COMPLET', SYME='NON',)
                       );

FATBX0 = RECU_FONCTION ( RESULTAT = dyha,
           NOM_CHAM = 'ACCE',
           GROUP_NO = 'PB',
           NOM_CMP = 'DX',
           INTERPOL='LIN',
           PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',);

FATBXf = FORMULE(NOM_PARA='FREQ',VALE_C='FATBX0(FREQ)*XFF(FREQ)') ;

FATBX = CALC_FONC_INTERP(NOM_PARA='FREQ', LIST_PARA=listfreq,
                         FONCTION=FATBXf,);

ACX_PB_h=CALC_FONCTION(
              FFT=_F( FONCTION = FATBX, METHODE='COMPLET', SYME='NON',)
                       );

TEST_FONCTION(VALEUR=(_F(VALE_CALC=0.30881668,
                         VALE_REFE=0.308861,
                         CRITERE='RELATIF',
                         VALE_PARA=3.7000000000000002,
                         REFERENCE='AUTRE_ASTER',
                         PRECISION=1.E-2,
                         FONCTION=ACX_PH_h,),
                      _F(VALE_CALC=0.27651602,
                         CRITERE='RELATIF',
                         VALE_PARA=3.7000000000000002,
                         FONCTION=ACX_PH,
                         ),
                      _F(VALE_CALC=-0.29500745,
                         VALE_REFE=-0.29508400000000001,
                         CRITERE='RELATIF',
                         VALE_PARA=6.6200000000000001,
                         REFERENCE='AUTRE_ASTER',
                         PRECISION=1.E-2,
                         FONCTION=ACX_PH_h,),
                      _F(VALE_CALC=-0.28209054,
                         CRITERE='RELATIF',
                         VALE_PARA=6.6200000000000001,
                         FONCTION=ACX_PH,
                         ),
                      _F(VALE_CALC=0.28561495 ,
                         VALE_REFE=0.286713,
                         CRITERE='RELATIF',
                         VALE_PARA=3.7000000000000002,
                         REFERENCE='AUTRE_ASTER',
                         PRECISION=0.02,
                         FONCTION=ACX_PB_h,),
                      _F(VALE_CALC=0.25903100,
                         CRITERE='RELATIF',
                         VALE_PARA=3.7000000000000002,
                         FONCTION=ACX_PB,
                         ),
                      _F(VALE_CALC=-0.25935750,
                         VALE_REFE=-0.26305299999999998,
                         CRITERE='RELATIF',
                         VALE_PARA=6.6299999999999999,
                         REFERENCE='AUTRE_ASTER',
                         PRECISION=2.E-2,
                         FONCTION=ACX_PB_h,),
                      _F(VALE_CALC=-0.26607300,
                         CRITERE='RELATIF',
                         VALE_PARA=6.6299999999999999,
                         FONCTION=ACX_PB,
                         ),
                      ),
              )

FIN( );
