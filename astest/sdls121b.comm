# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import numpy as NP

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',),
PAR_LOT='NON',DEBUG=_F(SDVERI='OUI'))

# On ajoute les commandes correspondant au modeles experimental
INCLUDE(UNITE=2)

#nombre de frequences utiles
NF=8

# le tableau des frequences experimentales

REPEXP1=RECU_TABLE(CO=MODMES,
                    NOM_PARA='FREQ');

# le tableau des MAC experimentaux - en fait le MAC ideal qui est 1.0

liste_mac=[]
for i in range(NF):
    liste_mac.append(1.0)

REPEXP2=CREA_TABLE(LISTE=(_F(PARA='NUME_ORDRE',LISTE_I=list(range(1,NF+1)),),
                          _F(PARA='MAC_EXP',LISTE_R=liste_mac,),
                       ),);

# on recupere les reponses experimentales en format numpy

data1 = REPEXP1.EXTR_TABLE().Array('NUME_ORDRE','FREQ')
data2 = REPEXP2.EXTR_TABLE().Array('NUME_ORDRE','MAC_EXP')


parametres =[['EP__',0.25,0.1,1.0],['MP__',3.0E4,2.E4,7.E4]]

calcul = [['REPONSE1','NUME_ORDRE','FREQ'],['REPONSE2','NUME_ORDRE','MAC']]

experience= [NP.array(data1), NP.array(data2)]

poids =NP.array([3.0, 1.0])

# LANCEMENT DE L'IDENTIFICATION

RESU=MACR_RECAL(
         UNITE_ESCL       =3,
         RESU_EXP         =experience,
         LIST_PARA        =parametres,
         RESU_CALC        =calcul,
         LIST_POIDS       =poids,
         METHODE          ='LEVENBERG',

         CALCUL_ESCLAVE=_F(
             LANCEMENT   = 'DISTRIBUTION',
             MODE        = 'BATCH',
                   ),
         DYNAMIQUE =_F(
              MODE_EXP='MODMES',
              MODE_CALC='MODNUM',
              APPARIEMENT_MANUEL='NON',
                               ),
)  ;


# On cree une liste bidon pour pouvoir
# definir une fonction testable par TEST_RESU
BIDON=DEFI_LIST_REEL(DEBUT=1.,
                     INTERVALLE=_F(JUSQU_A = 2., NOMBRE=1));

OPTIM=DEFI_FONCTION(NOM_PARA='INST',
                    VALE_PARA=BIDON,
                    VALE_FONC=RESU);

TEST_FONCTION(VALEUR=(_F(VALE_CALC=0.50295095,
                         VALE_REFE=0.5,
                         VALE_PARA=1.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=0.05,
                         FONCTION=OPTIM,),
                      _F(VALE_CALC=48193.69,
                         VALE_REFE=5.E4,
                         VALE_PARA=2.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=0.05,
                         FONCTION=OPTIM,),
                      ),
              )

FIN()
