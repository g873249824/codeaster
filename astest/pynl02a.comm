# TITRE STAT_NON_LINE EN COMMANDES ECLATEES POUR UN CALCUL ELASTO-PLASTIQUE
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),PAR_LOT='NON',
DEBUG=_F(SDVERI='OUI'))

# MODELISATION A : COMPORTEMENT VMIS_ECMI_TRAC AVEC PLUSIEURS PAS DE TEMPS

import numpy as NP

#=========================================================
#          DEFINITION DE L'ETUDE
#=========================================================

PRE_GMSH();

MA=LIRE_MAILLAGE();

MA=DEFI_GROUP(reuse =MA,
              MAILLAGE=MA,
              CREA_GROUP_MA=(_F(NOM='BORDINF',
                                GROUP_MA='GM3',),
                             _F(NOM='BORDSUP',
                                GROUP_MA='GM2',),
                             _F(NOM='CUBE',
                                GROUP_MA='GM1',),),);

MO=AFFE_MODELE(MAILLAGE=MA,
               AFFE=_F(GROUP_MA=('CUBE','BORDINF','BORDSUP'),
                       PHENOMENE='MECANIQUE',
                       MODELISATION='3D',),);

FTRACTUB=DEFI_FONCTION(NOM_PARA='EPSI',
                       VALE=(0.078667E-02,  174.28,
                             0.109580E-02,  238.51,
                             0.188500E-02,  280.76,
                             0.291830E-02,  294.46,
                             0.393670E-02,  306.02,
                             0.495080E-02,  314.34,
                             0.596830E-02,  322.62,
                             0.699080E-02,  330.22,
                             0.802000E-02,  335.56,
                             0.904500E-02,  340.47,
                             1.007100E-02,  345.42,
                             1.108800E-02,  349.62,
                             1.210100E-02,  354.02,
                             1.313300E-02,  358.22,
                             1.415300E-02,  362.53,
                             1.516800E-02,  366.65,
                             1.619000E-02,  370.73,
                             1.720400E-02,  374.53,
                             1.822300E-02,  378.29,
                             1.923300E-02,  382.21,),
                       PROL_DROITE='LINEAIRE',
                       PROL_GAUCHE='LINEAIRE',);

MAT=DEFI_MATERIAU(ELAS=_F(E=2.213E5,NU=0.3,),
                  TRACTION=_F(SIGM=FTRACTUB,),
                  PRAGER  =_F(C=2200,),);


CHMAT=AFFE_MATERIAU(MAILLAGE=MA,
                    AFFE=_F(TOUT='OUI',
                            MATER=MAT,),);

CHARB=AFFE_CHAR_MECA(MODELE=MO,
                      DDL_IMPO=(_F(GROUP_MA='BORDINF',
                                   DY=0.,
                                   DX=0.,
                                   DZ=0.,),
                                _F(GROUP_MA='BORDSUP',
                                   DZ=1.e-2,
                                   ),),);

RAMPE=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0., 0.,
                          1., 1.));

LIST=DEFI_LIST_REEL(DEBUT=0.0,
                    INTERVALLE=_F(JUSQU_A=1.0,
                                  NOMBRE=2,),);

# STAT_NON_LINE DE REFERENCE
SOLUT=STAT_NON_LINE(MODELE=MO,
                    CHAM_MATER=CHMAT,
                    EXCIT=_F(CHARGE=CHARB,FONC_MULT=RAMPE),
                    COMPORTEMENT=_F(RELATION='VMIS_ECMI_TRAC',),
                    NEWTON=_F(REAC_INCR=1.,
                              PREDICTION='ELASTIQUE',
                              MATRICE='TANGENTE',
                              REAC_ITER=1,),
                    INCREMENT=_F(LIST_INST=LIST,),
                    INFO=1);

# boucle sur les pas de temps
pred = 'elastique'
l_inst = LIST.Valeurs()
for i_inst in range(1,len(l_inst)) :
   inst = l_inst[i_inst]
   print ' '
   print '        ####################################'
   print '             instant de calcul ',inst
   print '        ####################################'
   print ' '


   # creation du NUME_DDL
   if i_inst == 1 :

      # matrice elementaire tangente (sans lagranges)
      MT_EL=CALC_MATR_ELEM(OPTION='RIGI_MECA',
                           MODELE=MO,
                           CHAM_MATER=CHMAT);

      # matrice elementaire complete
      M_EL=CALC_MATR_ELEM(OPTION='RIGI_MECA',
                          MODELE=MO,
                          CHAM_MATER=CHMAT,
                          CHARGE=CHARB,);

      # nume ddl complet (il ne doit pas changer entre 2 instants)
      NU=NUME_DDL(MATR_RIGI=M_EL,);

   #=========================================================
   #  MISE A JOUR DES CHAMPS OU INITIALISATION (1ER INSTANT)
   #=========================================================

   if i_inst == 1 :

      # creer un cham_no complet a 0, mais le DESC(2) vaut 8 au lieu de 1 pour DU
#       U=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',
#                    OPERATION='AFFE',
#                    MAILLAGE=MA,
#                    NUME_DDL=NU,
#                    AFFE=_F(TOUT='OUI',
#                            NOM_CMP=('DX','DY','DZ'),
#                            VALE=(0.,0.,0.),
#                            ),);
#
#       U=CREA_CHAMP(OPERATION='COMB',
#                    TYPE_CHAM='NOEU_DEPL_R',
#                    COMB=(_F(CHAM_GD=DU, COEF_R=0.),
#                          _F(CHAM_GD=DU,   COEF_R=0.),),)

#     EN FAIT, ON NE PEUT PAS CREER LE CHAMP U ICI CAR SON PROFIL SERAIT MAUVAIS
#     ON LE FERA APRES LA PREDICTION DU 1ER PAS DE TEMPS


      SIGMA=CREA_CHAMP(TYPE_CHAM='ELGA_SIEF_R',
                      OPERATION='AFFE',
                      MODELE=MO,
                      AFFE=_F(TOUT='OUI',
                              NOM_CMP=('SIXX','SIYY','SIZZ',
                                       'SIXY','SIYZ','SIXZ',),
                              VALE=(0.,0.,0.,0.,0.,0.,),
                              ),);

      VARI=CREA_CHAMP(OPERATION='AFFE', TYPE_CHAM='ELGA_VARI_R', MODELE=MO,  PROL_ZERO='OUI',
                       AFFE=_F(TOUT='OUI', NOM_CMP= 'V8', VALE = 0.)
                       )

   else :

      # DEPLACEMENTS : U = U + DELTA_U
      U=CREA_CHAMP(reuse=U,
                   OPERATION='COMB',
                   TYPE_CHAM='NOEU_DEPL_R',
                   COMB=(_F(CHAM_GD=U, COEF_R=1.),
                         _F(CHAM_GD=DU,COEF_R=1.),),)

      DETRUIRE(CONCEPT=_F(NOM=DELTA_U),INFO=1)
      DETRUIRE(CONCEPT=_F(NOM=(SIGMA,VARI),),INFO=1)

      SIG_TEMP=EXTR_TABLE(TYPE_RESU='CHAM_GD_SDASTER',
                          TABLE=CONT,
                          NOM_PARA='NOM_SD',
                          FILTRE=_F(NOM_PARA='NOM_OBJET',
                                    VALE_K='SIEF_ELGA'),)

      SIGMA=CREA_CHAMP(TYPE_CHAM='ELGA_SIEF_R',
                       OPERATION='ASSE',
                       MODELE   =MO,
                       PROL_ZERO='OUI',
                       ASSE  = _F(TOUT       ='OUI',
                                  CHAM_GD    =SIG_TEMP));

      VAR_TEMP=EXTR_TABLE(TYPE_RESU='CHAM_GD_SDASTER',
                       TABLE=CONT,
                       NOM_PARA='NOM_SD',
                       FILTRE=_F(NOM_PARA='NOM_OBJET',
                                 VALE_K='VARI_ELGA'),)

      VARI=CREA_CHAMP(TYPE_CHAM='ELGA_VARI_R',
                      OPERATION='ASSE',
                      MODELE   =MO,
                      PROL_ZERO='OUI',
                      ASSE  = _F(TOUT       ='OUI',
                                 CHAM_GD    =VAR_TEMP));

      DETRUIRE(CONCEPT=_F(NOM=(SIG_TEMP,VAR_TEMP),),INFO=1)


      # STOCKAGE DE LA CHARGE DU PAS DE TEMPS PRECEDENT
      CHARB_PR=CREA_CHAMP(OPERATION='COMB',
                          TYPE_CHAM='NOEU_DEPL_R',
                          COMB=_F(CHAM_GD=CHARB_AS, COEF_R=1.),)

   #=========================================================
   #               PREDICTION
   #=========================================================

   # pour le premier pas de temps, prediction elastique forcee
   if i_inst == 1 :

      # matrice assemblee tangente (sans lagranges)
      MT_AS=ASSE_MATRICE(MATR_ELEM=MT_EL,
                         NUME_DDL=NU,);

      # matrice assemblee complete
      ME_AS=ASSE_MATRICE(MATR_ELEM=M_EL,
                         NUME_DDL=NU,);

      # matrice assemblee des lagranges (par soustraction)
      ML_AS=COMB_MATR_ASSE(COMB_R=(_F(MATR_ASSE = ME_AS, COEF_R= 1.),
                                   _F(MATR_ASSE = MT_AS,COEF_R=-1.),),)

      ME_AS=FACTORISER(reuse =ME_AS,
                       MATR_ASSE=ME_AS);

   DETRUIRE(OBJET=_F(CHAINE='CHARB_AS'),INFO=1)

   # charge elementaire de blocage
   CHARB_EL=CALC_VECT_ELEM(OPTION='CHAR_MECA',INST = inst,CHARGE=CHARB,);

   # charge assemblee : attention : ca ne doit etre que des LAGR
   CHARB_AS=ASSE_VECTEUR(VECT_ELEM=CHARB_EL,NUME_DDL=NU,);

   DETRUIRE(CONCEPT=_F(NOM=CHARB_EL),INFO=1)

   # multiplication de la charge par la rampe
   CHARB_AS=CREA_CHAMP(reuse=CHARB_AS,
                       OPERATION='COMB',
                       TYPE_CHAM='NOEU_DEPL_R',
                       COMB=_F(CHAM_GD=CHARB_AS, COEF_R=RAMPE(inst)))

   # construction du second membre
   if i_inst == 1 :
      F_AS=CREA_CHAMP(OPERATION='COMB',
                      TYPE_CHAM='NOEU_DEPL_R',
                      COMB=_F(CHAM_GD=CHARB_AS, COEF_R=1.),)
   else :

      DETRUIRE(CONCEPT=_F(NOM=F_AS),INFO=1)
      F_AS=CREA_CHAMP(OPERATION='COMB',
                      TYPE_CHAM='NOEU_DEPL_R',
                      COMB=(_F(CHAM_GD=CHARB_AS, COEF_R=1.),
                            _F(CHAM_GD=CHARB_PR, COEF_R=-1.),
                            _F(CHAM_GD=FORIN_AS, COEF_R=-1.),
                            _F(CHAM_GD=BTLA_AS,  COEF_R=-1.),
                            ),)

   DETRUIRE(OBJET=_F(CHAINE='DU'),INFO=1)

   if i_inst == 1 or pred == 'elastique' :
      # prediction avec la matrice elastique
      DU=RESOUDRE(MATR=ME_AS,CHAM_NO=F_AS,);
   else :
      # prediction avec la matrice du pas de temps precedent
      DU=RESOUDRE(MATR=M_AS,CHAM_NO=F_AS,);


   # initialisation de U A PARTIR DU PROFIL DE DU
   if i_inst == 1 :
      U=CREA_CHAMP(OPERATION='COMB',
                   TYPE_CHAM='NOEU_DEPL_R',
                   COMB=_F(CHAM_GD=DU, COEF_R=0.),)

   # creation du DELTA_U = (Ucourant - Uequilibre) = dU(pred)
   DELTA_U=CREA_CHAMP(OPERATION='COMB',
                      TYPE_CHAM='NOEU_DEPL_R',
                      COMB=_F(CHAM_GD=DU, COEF_R=1.),)

   DETRUIRE(CONCEPT=_F(NOM=(MT_EL,MT_AS,F_AS)),INFO=1)
   DETRUIRE(OBJET=_F(CHAINE='M_AS'),INFO=1)

   #=========================================================
   #               BOUCLE DE NEWTON
   #=========================================================

   NbIterNewtonMax = 10
   ResiGlobRela = 1.e-6
   Residu  = NP.zeros(NbIterNewtonMax+1)
   ResiduX = NP.zeros(NbIterNewtonMax+1)
   Conv    = NP.zeros(NbIterNewtonMax+1)

   for IterNewton in range(1,NbIterNewtonMax+1) :


      #=========================================================
      #           INTEGRATION DE LA LOI DE COMPT
      #=========================================================

      # remarque la destruction du container 'CONT ne detruit pas les champs de la table...
      # ce qui augmente leur numero  a chaque fois, et declanche les erreurs de verif SD
      DETRUIRE(OBJET=_F(CHAINE='CONT'),INFO=1)

      CONT=CALCUL(OPTION=('COMPORTEMENT','FORC_INTE_ELEM','MATR_TANG_ELEM'),
                  MODELE=MO,
                  CHAM_MATER=CHMAT,
                  INCREMENT=_F(LIST_INST=LIST,
                               NUME_ORDRE=i_inst+1),
                  EXCIT=_F(CHARGE=CHARB,FONC_MULT=RAMPE),
                  INCR_DEPL=DELTA_U,
                  DEPL=U,
                  SIGM=SIGMA,
                  VARI=VARI,
                  COMPORTEMENT=_F(RELATION='VMIS_ECMI_TRAC',),
                  INFO=2,);

      #=========================================================
      #   VERIFICTION DU CODE RETOUR DE L'INTEGRATION DE LA LC
      #=========================================================

      CODE=EXTR_TABLE(TYPE_RESU='CHAM_ELEM',
                       TABLE=CONT,
                       NOM_PARA='NOM_SD',
                       FILTRE=_F(NOM_PARA='NOM_OBJET',
                                 VALE_K='CODE_RETOUR_INTE'),)
      if max(CODE.EXTR_COMP("IRET",[]).valeurs) > 0 :
         print 'echec d integration de la loi de comportement'
         FIN()


      DETRUIRE(CONCEPT=_F(NOM=CODE),INFO=1)


      #=========================================================
      #   MATRICE TANGENTE
      #=========================================================

      # matrice elementaire tangente
      MT_EL=EXTR_TABLE(TYPE_RESU='MATR_ELEM_DEPL_R',
                       TABLE=CONT,
                       NOM_PARA='NOM_SD',
                       FILTRE=_F(NOM_PARA='NOM_OBJET',
                                 VALE_K='MATR_TANG_ELEM'),)

      # matrice assemblee tangente
      MT_AS=ASSE_MATRICE(MATR_ELEM=MT_EL,
                         NUME_DDL=NU,);

      # matrice assemblee complete
      M_AS=COMB_MATR_ASSE(COMB_R=(_F(MATR_ASSE = MT_AS,COEF_R= 1.),
                                  _F(MATR_ASSE = ML_AS,COEF_R= 1.),),)

      M_AS=FACTORISER(reuse =M_AS,
                       MATR_ASSE=M_AS,);

      #=========================================================
      #   SECONDS MEMBRES et RESIDU
      #=========================================================

      # forces internes elementaires
      FORIN_EL=EXTR_TABLE(TYPE_RESU='VECT_ELEM_DEPL_R',
                           TABLE=CONT,
                           NOM_PARA='NOM_SD',
                           FILTRE=_F(NOM_PARA='NOM_OBJET',
                                     VALE_K='FORC_INTE_ELEM'),)

      DETRUIRE(OBJET=_F(CHAINE='FORIN_AS'),INFO=1)

      # forces internes assemblees
      FORIN_AS=ASSE_VECTEUR(VECT_ELEM=FORIN_EL,
                            NUME_DDL=NU,);

      DETRUIRE(CONCEPT=_F(NOM=FORIN_EL),INFO=1)

      # Bt.La elem
      BTLA_EL=EXTR_TABLE(TYPE_RESU='VECT_ELEM_DEPL_R',
                           TABLE=CONT,
                           NOM_PARA='NOM_SD',
                           FILTRE=_F(NOM_PARA='NOM_OBJET',
                                     VALE_K='FORC_DIRI_ELEM'),)

      DETRUIRE(OBJET=_F(CHAINE='BTLA_AS'),INFO=1)

      # Bt.La assemblee
      BTLA_AS=ASSE_VECTEUR(VECT_ELEM=BTLA_EL,
                           NUME_DDL=NU,);

      DETRUIRE(CONCEPT=_F(NOM=BTLA_EL),INFO=1)

      # f_v : sommes des 2nds membres
      F_AS=CREA_CHAMP(OPERATION='COMB',
                      TYPE_CHAM='NOEU_DEPL_R',
                      COMB=(_F(CHAM_GD=FORIN_AS, COEF_R=-1.),
                            _F(CHAM_GD=BTLA_AS,  COEF_R=-1.),),)

      RESB=CREA_CHAMP(OPERATION='COMB',
                      TYPE_CHAM='NOEU_DEPL_R',
                      COMB=(_F(CHAM_GD=CHARB_AS, COEF_R= 1.),
                            _F(CHAM_GD=BTLA_AS, COEF_R=-1.),),)

      tmp_x = F_AS.EXTR_COMP('DX',[]).valeurs
      tmp_y = F_AS.EXTR_COMP('DY',[]).valeurs
      tmp_z = F_AS.EXTR_COMP('DZ',[]).valeurs

      residu_haut = max( max(abs(tmp_x)) , max(abs(tmp_y)) , max(abs(tmp_z)) )

      tmp_x = RESB.EXTR_COMP('DX',[]).valeurs
      tmp_y = RESB.EXTR_COMP('DY',[]).valeurs
      tmp_z = RESB.EXTR_COMP('DZ',[]).valeurs
      DETRUIRE(CONCEPT=_F(NOM=RESB),INFO=1)

      residu_bas = max( max(abs(tmp_x)) , max(abs(tmp_y)) , max(abs(tmp_z)) )

      Residu[IterNewton-1]  = residu_haut / residu_bas
      ResiduX[IterNewton-1] = residu_haut

      print 'RESI_GLOB_RELA et RESI_GLOB_MAXI ',Residu[IterNewton-1],ResiduX[IterNewton-1]

      # estimation de la convergence
      if Residu[IterNewton-1] <= ResiGlobRela :
         Conv[IterNewton-1] = 1
         break
      else :
         Conv[IterNewton-1] = 0

      #=========================================================
      #   resolution M_AS . DU = FEXT - FORIN_AS - BTLA_AS
      #=========================================================

      DETRUIRE(CONCEPT=_F(NOM=DU),INFO=1)
      DU=RESOUDRE(MATR=M_AS,
                  CHAM_NO=F_AS,);

      # somme en python DELTA_U = DELTA_U + DU
      DELTA_U=CREA_CHAMP(reuse=DELTA_U,
                         OPERATION='COMB',
                         TYPE_CHAM='NOEU_DEPL_R',
                         COMB=(_F(CHAM_GD=DELTA_U, COEF_R=1.),
                               _F(CHAM_GD=DU,      COEF_R=1.),),)

      DETRUIRE(CONCEPT=_F(NOM=(MT_EL,MT_AS,M_AS,F_AS),),INFO=1)

   print 'instant ',inst
   print 'IterNewton | Resi_Glob_rela   | Resi_Glob_Maxi  | Convergence'
   for i in range(0,IterNewton) :
       print '     %d     |   %e   |   %e  |    %d ' %(i,Residu[i],ResiduX[i],Conv[i])

   if Conv[IterNewton-1] != 1 :
      print 'echec de la convergence des iteration de Newton'
      FIN()





#=========================================================
#          DETERMINATION DE LA REFERENCE
#=========================================================

# ON EXTRAIT LES CHAMPS A TESTER au dernier instant
SIG_REF=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='ELGA_SIEF_R',
                   NOM_CHAM='SIEF_ELGA', RESULTAT=SOLUT,
                   INST=1.
                    )

VAR_REF=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='ELGA_VARI_R',
                   NOM_CHAM='VARI_ELGA', RESULTAT=SOLUT,
                   INST=1.
                    )


#=========================================================
#          EXTRACTION DES CHAMPS CALCULES
#=========================================================

DETRUIRE(CONCEPT=_F(NOM=(SIGMA,VARI),),INFO=1)

SIG_TEMP=EXTR_TABLE(TYPE_RESU='CHAM_GD_SDASTER',
                    TABLE=CONT,
                    NOM_PARA='NOM_SD',
                    FILTRE=_F(NOM_PARA='NOM_OBJET',
                              VALE_K='SIEF_ELGA'),)

SIGMA=CREA_CHAMP(TYPE_CHAM='ELGA_SIEF_R',
                 OPERATION='ASSE',
                 MODELE   =MO,
                 PROL_ZERO='OUI',
                 ASSE  = _F(TOUT       ='OUI',
                            CHAM_GD    =SIG_TEMP));

VAR_TEMP=EXTR_TABLE(TYPE_RESU='CHAM_GD_SDASTER',
                 TABLE=CONT,
                 NOM_PARA='NOM_SD',
                 FILTRE=_F(NOM_PARA='NOM_OBJET',
                           VALE_K='VARI_ELGA'),)

VARI=CREA_CHAMP(TYPE_CHAM='ELGA_VARI_R',
                OPERATION='ASSE',
                MODELE   =MO,
                PROL_ZERO='OUI',
                ASSE  = _F(TOUT       ='OUI',
                           CHAM_GD    =VAR_TEMP));

DETRUIRE(CONCEPT=_F(NOM=(SIG_TEMP,VAR_TEMP),),INFO=1)

#=========================================================
#            REALISATION DES TESTS
#=========================================================

# DIF_SIG = SIG_REF - SIGM
DIF_SIG=CREA_CHAMP(OPERATION='ASSE',
                   MODELE=MO,
                   TYPE_CHAM='ELGA_SIEF_R',
                   ASSE=(_F(CHAM_GD=SIG_REF,
                            TOUT='OUI',
                            CUMUL='OUI',
                            COEF_R=1.),
                         _F(CHAM_GD=SIGMA,
                            TOUT='OUI',
                            CUMUL='OUI',
                            COEF_R=-1.),
                        ))


# DIF_VAR = VAR_REF - VARI
DIF_VAR=CREA_CHAMP(OPERATION='ASSE',
                   MODELE=MO,
                   TYPE_CHAM='ELGA_VARI_R',
                   ASSE=(_F(CHAM_GD=VAR_REF,
                            TOUT='OUI',
                            CUMUL='OUI',
                            COEF_R=1.),
                         _F(CHAM_GD=VARI,
                            TOUT='OUI',
                            CUMUL='OUI',
                            COEF_R=-1.),
                        ))

TEST_RESU(CHAM_ELEM=(_F(CRITERE='ABSOLU',
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=1.E-08,
                        TYPE_TEST='MIN',
                        CHAM_GD=DIF_SIG,
                        VALE_CALC= 6.25277607E-13,
                        VALE_REFE=0.0,
                        VALE_ABS='OUI',),
                     _F(CRITERE='ABSOLU',
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=1.E-08,
                        TYPE_TEST='MAX',
                        CHAM_GD=DIF_SIG,
                        VALE_CALC= 6.82121026E-13,
                        VALE_REFE=0.0,
                        VALE_ABS='OUI',),
                     _F(CRITERE='ABSOLU',
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=1.E-08,
                        TYPE_TEST='MIN',
                        CHAM_GD=DIF_VAR,
                        VALE_CALC= 5.32907052E-15,
                        VALE_REFE=0.0,
                        VALE_ABS='OUI',),
                     _F(CRITERE='ABSOLU',
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=1.E-08,
                        TYPE_TEST='MAX',
                        CHAM_GD=DIF_VAR,
                        VALE_CALC= 1.06581410E-14,
                        VALE_REFE=0.0,
                        VALE_ABS='OUI',),
                     ),
          )

IMPR_RESU(FORMAT='GMSH',UNITE=37,
          RESU=_F(RESULTAT=SOLUT,NOM_CHAM='DEPL',TYPE_CHAM='VECT_2D',NOM_CMP=('DX','DY')),);




FIN();
