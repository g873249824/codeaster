# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2019 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),ERREUR=_F(ERREUR_F='EXCEPTION',),
IGNORE_ALARM=('ELEMENTS4_80'),DEBUG=_F(SDVERI='OUI',HIST_ETAPE='OUI'))

#------------------------------------------------------------------------
# Divers parametres
#------------------------------------------------------------------------
P_Gravite  = 9.81
Pres_Int = 100e6
Larg_ancr = 0.5
Long_ancr = 1.5
Nb_cab_hori = 20
Nb_cab_vert = 20
ECYL=0.6
EANCR=0.1
EANCR_OP=Long_ancr

#------------------------------------------------------------------------
# B Beton
#------------------------------------------------------------------------
B_E     = 4.E10     # Module de Young
B_Nu    = 0.20      # Coef. de Poisson
B_Rho   = 2500.     # Masse volumique
# Liste des groupes a prendre en compte comme du beton
l_beton = ['CYL','ANCR','ANCR_OP']

#------------------------------------------------------------------------
# Acier cables de precontrainte
#------------------------------------------------------------------------
A_E           = 1.93E11     # Module de Young
A_Nu          = 0.0         # Coef. de Poisson
A_Rho         = 7850.       # Masse volumique
A_F_PRG       = 1.94E9     # Contrainte fprg

d_tension = {
       'CH' : 3.75E6,
       'CV' : 3.75E6,
            }

d_aire = {
       'CH' : 0.00555,
       'CV' : 0.00555,
         }

#------------------------------------------------------------------------
# Lecture du maillage
#------------------------------------------------------------------------
MAIL=LIRE_MAILLAGE(FORMAT='MED', UNITE=20);

l_cable=[]
for i in range(1,Nb_cab_hori+1):
    l_cable.append('CH_%02i'%i)
for i in range(1,Nb_cab_vert+1):
    l_cable.append('CV_%02i'%i)

MODELE=AFFE_MODELE(
                 MAILLAGE=MAIL,
                 AFFE=(
                       _F( GROUP_MA = l_beton,
                            PHENOMENE = 'MECANIQUE',
                            MODELISATION = 'Q4GG'),
                       _F( GROUP_MA = l_cable,
                            PHENOMENE = 'MECANIQUE',
                            MODELISATION = 'BARRE'),
                       )
                   )

#------------------------------------------------------------------------
# Defnition des materiaux et affectation des materiaux
#------------------------------------------------------------------------
# Beton
#------------------------------------------------------------------------
d_beton = {}
d_elas = {'RHO':B_Rho,}
d_elas['E'] = B_E
d_elas['NU'] = B_Nu
d_beton['ELAS'] = _F(**d_elas)

MATBETON=DEFI_MATERIAU( BPEL_BETON=_F(),
                       **d_beton
                      )

d_affe_materiau = {}
d_affe_materiau['AFFE'] = []

d_affe_materiau['AFFE'].append(_F(GROUP_MA = l_beton, MATER = MATBETON,),)

# Acier
#------------------------------------------------------------------------
d_acier = {}
d_elas = {'RHO':A_Rho,}
d_elas['E'] = A_E
d_elas['NU'] = A_Nu
d_acier['ELAS'] = _F(**d_elas)

MATACIER=DEFI_MATERIAU( BPEL_ACIER=_F(),
                       **d_acier
                      )

d_affe_materiau['AFFE'].append(_F(GROUP_MA = l_cable, MATER = MATACIER,),)

CHMATER=AFFE_MATERIAU(MAILLAGE=MAIL,
                       **d_affe_materiau)

#------------------------------------------------------------------------
d_cara_elem = {}
l_cara = []


for nom in l_cable:
        prefix = nom.split('_')[0]
        l_cara.append(_F(GROUP_MA = nom,
                         SECTION='GENERALE',
                         CARA='A',
                         VALE=(d_aire[prefix],)),)

d_cara_elem['BARRE'] = l_cara

if len(d_cara_elem):
  CARAELE=AFFE_CARA_ELEM(MODELE=MODELE,
                     COQUE=(_F( GROUP_MA = 'CYL',
                               EPAIS = ECYL,
                               COQUE_NCOU=1,
                               MODI_METRIQUE = 'NON',
                               VECTEUR=(0.,0.,1.),),
                              _F( GROUP_MA = 'ANCR',
                               EPAIS = EANCR,
                               COQUE_NCOU=1,
                               MODI_METRIQUE = 'NON',
                               VECTEUR=(0.,0.,1.),),
                              _F( GROUP_MA = 'ANCR_OP',
                               EPAIS = EANCR_OP,
                               COQUE_NCOU=1,
                               MODI_METRIQUE = 'NON',
                               VECTEUR=(0.,0.,1.),),
                           ),
                      **d_cara_elem
                     )

#------------------------------------------------------------------------
# Conditions aux limites et chargement
#------------------------------------------------------------------------
l_excit_encast = []

d_affe_char_meca = {}
d_affe_char_meca['DDL_IMPO'] = _F(DX=0., DY=0., DZ=0., DRX=0., DRY=0., DRZ=0., GROUP_NO = 'ENCAST')

CHARBLOQ=AFFE_CHAR_MECA(MODELE=MODELE,
                        **d_affe_char_meca)

l_excit_encast.append(_F(CHARGE=CHARBLOQ))

CHARPRES = AFFE_CHAR_MECA(MODELE = MODELE,
                          FORCE_COQUE = _F(GROUP_MA='CYL', PRES=Pres_Int,),)

#------------------------------------------------------------------------
# Definition des cables
#------------------------------------------------------------------------
l_group_cable = ['CV','CH']
d_defi_cable = {}

for prefix in l_group_cable :
    d_defi_cable[prefix]=[]

l_group_modele = []
for nom_cable in l_cable:
  l_group_modele.append(nom_cable)

for group_ma in l_cable:
    group_ma_prefix = group_ma.split('_')[0]
    nom_group_ma = group_ma.strip()
    nom_noeud_debut = nom_group_ma + '_A'
    nom_noeud_fin = nom_group_ma + '_B'
    defi_cable = _F(GROUP_MA = nom_group_ma,
                        GROUP_NO_ANCRAGE = (nom_noeud_debut,nom_noeud_fin),
                   )
    d_defi_cable[group_ma_prefix].append(defi_cable)

l_tor = {}
l_cable_bp = []
l_cable_bp_cine = []
i = -1

for prefix in l_group_cable:
    i+=1
    l_tor[i] = DEFI_CABLE_BP(MODELE       = MODELE,
                             CHAM_MATER     = CHMATER,
                             CARA_ELEM      = CARAELE,
                             GROUP_MA_BETON = ('CYL','ANCR_OP',),
                             TYPE_ANCRAGE   = ('ACTIF','ACTIF'),
                             TENSION_INIT   = d_tension[prefix],
                             RECUL_ANCRAGE  = 0.0,
                             DEFI_CABLE     = d_defi_cable[prefix],
                             )

    l_cable_bp.append(l_tor[i])
    l_cable_bp_cine.append(_F(CABLE_BP=l_tor[i],
                              SIGM_BPEL='NON',
                              RELA_CINE='OUI',))


CINE_CAB = AFFE_CHAR_MECA(MODELE=MODELE,
                          RELA_CINE_BP=l_cable_bp_cine,
                         )

#------------------------------------------------------------------------
# Calculs
#------------------------------------------------------------------------

# Chargement 1 : precontrainte de tous les cables
#------------------------------------------------------------------------
LINST = DEFI_LIST_REEL (DEBUT = 0.0,
                        INTERVALLE =(_F(JUSQU_A= 1.0, PAS= 0.5,),),
                       );

RES1 =  CALC_PRECONT(MODELE=MODELE,
                     CHAM_MATER=CHMATER,
                     CARA_ELEM=CARAELE,
                     COMPORTEMENT=(_F( RELATION = 'ELAS',DEFORMATION = 'GROT_GDEP',
                                    GROUP_MA=l_beton,),
                                _F( RELATION = 'ELAS',DEFORMATION = 'PETIT_REAC',
                                    GROUP_MA =l_cable,),),
                     EXCIT=l_excit_encast,
                     CABLE_BP   = tuple(l_cable_bp),
                     INCREMENT=_F(LIST_INST = LINST,
                                  INST_INIT  = 0.0,
                                  INST_FIN  = 1.0, ),);

#------------------------------------------------------------------------
# Calcul DYNA_NON_LINE
#------------------------------------------------------------------------
FONCCB3=DEFI_FONCTION(NOM_PARA='INST',
                     VALE=(1.0, 0.0,
                           1.001, 1.0,
                           2.0, 1.0,
                           ),
                     PROL_DROITE='CONSTANT',
                     PROL_GAUCHE='CONSTANT',
                     );

l_excit_dyna_non_line = []
l_excit_dyna_non_line.append(_F(CHARGE=CHARBLOQ,))
l_excit_dyna_non_line.append(_F(CHARGE=CINE_CAB,))
l_excit_dyna_non_line.append(_F(CHARGE=CHARPRES, FONC_MULT=FONCCB3))

LINST2 = DEFI_LIST_REEL (DEBUT = 1.0,
                        INTERVALLE =(_F(JUSQU_A= 1.001, PAS= 0.00001,),),
                       );

RES2 = DYNA_NON_LINE(ETAT_INIT=_F(EVOL_NOLI=RES1),
                     MODELE=MODELE,
                     CHAM_MATER=CHMATER,
                     CARA_ELEM=CARAELE,
                     MASS_DIAG='OUI',
                     SCHEMA_TEMPS=_F(SCHEMA='DIFF_CENT',FORMULATION='ACCELERATION'),
                     EXCIT=l_excit_dyna_non_line,
                     COMPORTEMENT=(_F(RELATION='ELAS',GROUP_MA=l_beton,DEFORMATION='GROT_GDEP',),
                                _F(RELATION='ELAS',GROUP_MA=l_cable,DEFORMATION='PETIT_REAC',),
                               ),
                     INCREMENT   =_F(LIST_INST=LINST2,
                                     INST_INIT  = 1.0),
                     );

#------------------------------------------------------------------------
# Calcul CALC_EUROPLEXUS
#------------------------------------------------------------------------

FONCCB2=DEFI_FONCTION(NOM_PARA='INST',
                     VALE=(0.0, 0.0,
                           0.001, 1.0,
                           10.0, 1.0,
                           ),
                     PROL_DROITE='CONSTANT',
                     PROL_GAUCHE='CONSTANT',
                     );

l_excit_europlexus = []
l_excit_europlexus.append(_F(CHARGE=CHARBLOQ,))
l_excit_europlexus.append(_F(CHARGE=CINE_CAB,))
l_excit_europlexus.append(_F(CHARGE=CHARPRES, FONC_MULT=FONCCB2))

CALC_EUROPLEXUS(ETAT_INIT=_F(RESULTAT=RES1,CONTRAINTE='OUI',EQUILIBRE='OUI'),
                COMPORTEMENT =(_F(
                             RELATION = 'ELAS',
                             GROUP_MA = l_cable,
                               ),
                             _F(
                             RELATION = 'ELAS',
                             GROUP_MA = l_beton,
                               ),
                            ),
                EXCIT   =l_excit_europlexus,
                CALCUL = _F(TYPE_DISCRETISATION  ='UTIL',
                            INST_INIT = 0.0,
                            INST_FIN  = 0.001,
                            NMAX      = 10000,
                            PASFIX    = 1e-5,
                            ),
                OBSERVATION = _F(PAS_NBRE=1,
                                 TOUT_GROUP_NO = 'OUI',
                                 TOUT_GROUP_MA = 'OUI',
                                 NOM_CHAM = ('DEPL','VITE','ACCE'),
                                 ),
                ARCHIVAGE   = _F(PAS_NBRE=50,),
                # ARCHIVAGE   = _F(PAS_NBRE=1,),
# !!! Changer le pas d'archivage pour une plus grande precision sur le trace de la courbe du resultat de calc_europlexus !!!
                    );

TEST_RESU(RESU=_F(NUME_ORDRE=0,
                  GROUP_NO='NREF_CYL',
                  RESULTAT=RES2,
                  NOM_CHAM='DEPL',
                  NOM_CMP='DY',
                  VALE_CALC=-0.00149171629532,
                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=50,
                  GROUP_NO='NREF_CYL',
                  RESULTAT=RES2,
                  NOM_CHAM='DEPL',
                  NOM_CMP='DY',
                  VALE_CALC=-0.000144254880287,
                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=100,
                  GROUP_NO='NREF_CYL',
                  RESULTAT=RES2,
                  NOM_CHAM='DEPL',
                  NOM_CMP='DY',
                  VALE_CALC=0.00927115873819,
                  CRITERE='RELATIF',
                  ),
          )

# Contrainte NXX dans la Maille de reference sur le cylindre
#------------------------------------------------------------------------
TEST_RESU(RESU=_F(NUME_ORDRE=0,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='NXX',
                  VALE_CALC=-298115.503936,
                  CRITERE='RELATIF',
                  MAILLE='M6852',),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=50,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='NXX',
                  VALE_CALC=12143.1462118,
                  CRITERE='RELATIF',
                  MAILLE='M6852',),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=100,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='NXX',
                  VALE_CALC=2183571.35963,
                  CRITERE='RELATIF',
                  MAILLE='M6852',),
          )

# Contrainte NYY dans la Maille de reference sur le cylindre
#------------------------------------------------------------------------
TEST_RESU(RESU=_F(NUME_ORDRE=0,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='NYY',
                  VALE_CALC=-1671586.18169,
                  CRITERE='RELATIF',
                  MAILLE='M6852',),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=50,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='NYY',
                  VALE_CALC=-115744.447862,
                  CRITERE='RELATIF',
                  MAILLE='M6852',),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=100,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='NYY',
                  VALE_CALC=10770364.4408,
                  CRITERE='RELATIF',
                  MAILLE='M6852',),
          )

# Contrainte N dans la Maille de reference d'un cable
#------------------------------------------------------------------------
TEST_RESU(RESU=_F(NUME_ORDRE=0,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='N',
                  REFERENCE ='ANALYTIQUE',
                  VALE_REFE= 3750000.0,
                  VALE_CALC= 3749979.33652,
                  CRITERE='RELATIF',
                  MAILLE='M2803',),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=50,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='N',
                  VALE_CALC=3808797.87598,
                  CRITERE='RELATIF',
                  MAILLE='M2803',),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=100,
                  POINT=1,
                  RESULTAT=RES2,
                  NOM_CHAM='SIEF_ELGA',
                  NOM_CMP='N',
                  VALE_CALC=4229204.64926 ,
                  CRITERE='RELATIF',
                  MAILLE='M2803',),
          )

TEST_FICHIER(FICHIER='./REPE_OUT/commandes_study.epx',
             EXPR_IGNORE='REPE_OUT',
             NB_VALE=58,
             NB_VALE_I=331,
             VALE_CALC=2.3290001036e+11,
             VALE_CALC_I=136913,
             VALE_CALC_K='828394fc9382ad1aa88266abba79883b')

FIN();
