# MODIF  DATE 14/11/2011   AUTEUR BOYERE E.BOYERE 
# TITRE TEST EN ARRET CPU DE DYNA_VIBRA(BASE_CALCUL='GENE')
# erreu09c.para = tps_job 110 mem_job 100Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
DEBUT(CODE=_F(NOM='ERREU09C', NIV_PUB_WEB='INTERNET', VISU_EFICAS='NON',),PAR_LOT='NON')

import re
fmt_raison='-'*80+"""

   Exception interceptee
   Raison : %s

"""+'-'*80+'\n'

##########################################
# PETITE BOUCLE POUR FAIRE PERDRE DU TEMPS
# SUR DEUX PETITES MINUTES (95 s)
dur=95.


from time import clock
t1=clock()
t2=clock()

while (t2-t1) < dur :
      c=sqrt(5.)*3./6.
      t2=clock()


##########################################

tfin = 300.;

pdt = 0.01;

k = (((0.5 * pi) * 2.0) ** 2);

m = 1.0;

dinit = 1.0;

ainit = (-(k) / m);


MAIL=LIRE_MAILLAGE();

MODELE=AFFE_MODELE(MAILLAGE=MAIL,
                   AFFE=_F(GROUP_MA='N',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='DIS_T',),);

ACIER=DEFI_MATERIAU(ELAS=_F(E=2.0E11,
                            NU=0.3,
                            RHO=7800.0,),);

CHMAT=AFFE_MATERIAU(MAILLAGE=MAIL,
                    AFFE=_F(GROUP_MA='N',
                            MATER=ACIER,),);

CARELEM=AFFE_CARA_ELEM(MODELE=MODELE,
                       DISCRET=(_F(CARA='K_T_D_N',
                                   GROUP_MA='N',
                                   VALE=(k,0.,0.,),),
                                _F(CARA='M_T_D_N',
                                   GROUP_MA='N',
                                   VALE=m,),),);

# CONDITIONS AUX LIMITES 

BLOQUAGE=AFFE_CHAR_MECA(MODELE=MODELE,
                        DDL_IMPO=_F(GROUP_NO='N',
                                    DY=0.,
                                    DZ=0.,),);


MACRO_MATR_ASSE(MODELE=MODELE,
                CHAM_MATER=CHMAT,
                CARA_ELEM=CARELEM,
                CHARGE=BLOQUAGE,
                NUME_DDL=CO('NUMEDDL'),
                MATR_ASSE=(_F(MATRICE=CO('RIGIDITE'),
                              OPTION='RIGI_MECA',),
                           _F(MATRICE=CO('MASSE'),
                              OPTION='MASS_MECA',),
                           _F(MATRICE=CO('MASDIAG'),
                              OPTION='MASS_MECA_DIAG',),),);


MODES=MODE_ITER_SIMULT(MATR_A=RIGIDITE,
                       MATR_B=MASSE,
                       METHODE='QZ',
                       CALC_FREQ=_F(OPTION='TOUT',),);

MACRO_PROJ_BASE(BASE=MODES,
                STOCKAGE='DIAG',
                MATR_ASSE_GENE=(_F(MATRICE=CO('MAGE'),
                                   MATR_ASSE=MASSE,),
                                _F(MATRICE=CO('RIGE'),
                                   MATR_ASSE=RIGIDITE,),),)

is_ok = 0
try :
     TRANSMR=DYNA_VIBRA(TYPE_CALCUL='TRAN',BASE_CALCUL='GENE',
                        SCHEMA_TEMPS=_F(SCHEMA='EULER',),
                        MATR_MASS=MAGE,
                        MATR_RIGI=RIGE,
                        INCREMENT=_F(INST_FIN=tfin, PAS=pdt,),);
except aster.ArretCPUError, err:
   print fmt_raison % str(err)
   # on verifie que l'erreur fatale est bien celle que l'on attendait :
   # arret en temps CPU
   if err.id_message == "ALGORITH16_77":
      is_ok = 1

# TEST_RESU
TAB1=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                       _F(PARA='BOOLEEN',LISTE_I=is_ok,),),)

TEST_TABLE(TABLE=TAB1,
           FILTRE=_F(NOM_PARA='TEST',VALE_K='VALEUR  ',),
           NOM_PARA='BOOLEEN',
           VALE_I=1,
           REFERENCE='ANALYTIQUE',)

FIN();


