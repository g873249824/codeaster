# ======================================================================
# COPYRIGHT (C) 1991 - 2017  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#
import aster

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',
              VISU_EFICAS='NON',),
      IGNORE_ALARM='SUPERVIS_1',
      PAR_LOT='NON',
      DEBUG=_F(SDVERI='OUI'))

# ------------------------------------------------------------------------
# MATERIAU
# ------------------------------------------------------------------------

K = 516.2E6
G = 238.2E6
YOUNG   = 9.*K*G /(3.*K+G)
POISSON = (3.*K-2.*G) /(6.*K+2.*G)

UN_SUR_K_EAU =  1.E-12
K_EAU        = 1./UN_SUR_K_EAU


MATE1=DEFI_MATERIAU(ELAS=_F(E=YOUNG, NU=POISSON, RHO=2500., ALPHA=0.),
                    HUJEUX=_F(N        = 0.4,
                              BETA     = 24.,
                              D        = 2.5,
                              B        = 0.2,
                              PHI      = 33.,
                              ANGDIL   = 33.,
                              PCO      = -1.E6,
                              PREF     = -1.E6,
                              AMON     = 0.008,
                              ACYC     = 0.0001,
                              CMON     = 0.2,
                              CCYC     = 0.1,
                              RD_ELA   = 0.005,
                              RI_ELA   = 0.001,
                              RHYS     = 0.05,
                              RMOB     = 0.9,
                              XM       = 1.,
                              RD_CYC   = 0.005,
                              RI_CYC   = 0.001,
                              DILA     = 1.0,),)

# ------------------------------------------------------------------------
# DISCRETISATION EN TEMPS
# ------------------------------------------------------------------------

NB_INST  = 25
NB_CYCLE = 10

RLIST = DEFI_LIST_REEL(DEBUT = 0.,
                       INTERVALLE = [_F(JUSQU_A=10.*(k+1), NOMBRE=NB_INST,) \
                                     for k in xrange(4*NB_CYCLE)],
                       )

DLIST = DEFI_LIST_INST(DEFI_LIST = _F(LIST_INST = RLIST),
                       ECHEC=_F(SUBD_METHODE = 'MANUEL',
                                SUBD_PAS     = 10,
                                SUBD_NIVEAU  = 10,),
                       )

# ------------------------------------------------------------------------
# CHARGEMENT, cf comp012a :  CALC_ESSAI_GEOMECA / ESSAI_TND_C
# -> choisi de sorte a faire planter le calcul
# ------------------------------------------------------------------------

PRES_CONF   = -2.5E+4
SIGM_IMPOSE =  1.5E+4

char1_absc = [0.] + [10.*(2*k+1) for k in xrange(2*NB_CYCLE)] + [10.*(4*NB_CYCLE)]
char1_ordo = [PRES_CONF] + [PRES_CONF+SIGM_IMPOSE*(-1)**k \
             for k in xrange(2*NB_CYCLE)] + [PRES_CONF]

CHAR1 = DEFI_FONCTION(NOM_PARA = 'INST',
                        ABSCISSE = char1_absc,
                        ORDONNEE = char1_ordo,
                        )

CHAR2 = DEFI_FONCTION(NOM_PARA = 'INST',
                        VALE = (0.              , PRES_CONF,
                                10.*(4*NB_CYCLE), PRES_CONF,),)

# ------------------------------------------------------------------------
# CALCUL + LEVEE D'EXCEPTION NonConvergenceError
# SIMU_POINT_MAT / SUPPORT='POINT' = CALC_POINT_MAT
# ------------------------------------------------------------------------

is_ok = 0
try:
  EVOPTMAT = SIMU_POINT_MAT(
             SUPPORT='POINT',
             COMPORTEMENT=_F(RELATION='HUJEUX',
                          ITER_INTE_MAXI=20,
                          RESI_INTE_RELA=1.E-8,
                          ALGO_INTE = 'SPECIFIQUE',
                          ITER_INTE_PAS = -5,),
             CONVERGENCE=_F(RESI_GLOB_RELA = 1.E-6,
                            ITER_GLOB_MAXI = 20,),
             MATER=MATE1,
             INCREMENT=_F(LIST_INST=DLIST,
                          INST_INIT=0.,
                          INST_FIN =10.*(4*NB_CYCLE),),
             NEWTON=_F(MATRICE='TANGENTE', REAC_ITER=1,),
             ARCHIVAGE=_F(LIST_INST=RLIST,),
             VECT_IMPO=(_F(NUME_LIGNE=1,VALE=CHAR2),
                        _F(NUME_LIGNE=2,VALE=CHAR2),
                        _F(NUME_LIGNE=3,VALE=CHAR1),),
             MATR_C1=(  _F(NUME_LIGNE=1,NUME_COLONNE=1,VALE=1.),
                        _F(NUME_LIGNE=2,NUME_COLONNE=2,VALE=1.),
                        _F(NUME_LIGNE=3,NUME_COLONNE=3,VALE=1.),),
             MATR_C2=(  _F(NUME_LIGNE=1,NUME_COLONNE=1,VALE=K_EAU),
                        _F(NUME_LIGNE=1,NUME_COLONNE=2,VALE=K_EAU),
                        _F(NUME_LIGNE=1,NUME_COLONNE=3,VALE=K_EAU),
                        _F(NUME_LIGNE=2,NUME_COLONNE=1,VALE=K_EAU),
                        _F(NUME_LIGNE=2,NUME_COLONNE=2,VALE=K_EAU),
                        _F(NUME_LIGNE=2,NUME_COLONNE=3,VALE=K_EAU),
                        _F(NUME_LIGNE=3,NUME_COLONNE=1,VALE=K_EAU),
                        _F(NUME_LIGNE=3,NUME_COLONNE=2,VALE=K_EAU),
                        _F(NUME_LIGNE=3,NUME_COLONNE=3,VALE=K_EAU),),
             SIGM_INIT= _F(SIXX=PRES_CONF,
                           SIYY=PRES_CONF,
                           SIZZ=PRES_CONF,),
                        )
except aster.NonConvergenceError,err:
  if err.id_message == "MECANONLINE9_7":
    is_ok = 1

# ------------------------------------------------------------------------
# TEST DU BON DEROULEMENT DE LA LEVEE D'EXCEPTION
# ------------------------------------------------------------------------

TAB1=CREA_TABLE(LISTE=(_F(PARA='TEST',TYPE_K='K8',LISTE_K='VALEUR  ',),
                     _F(PARA='BOOLEEN',LISTE_I=is_ok,),
                     ),
               )
TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TAB1,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='VALEUR  ',),
           )

FIN();
