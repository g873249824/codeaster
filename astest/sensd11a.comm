# MODIF  DATE 31/05/2011   AUTEUR NISTOR I.NISTOR 
# TITRE SENSIBILITE ELEMENT DISCRET (K_T_D_N, M_T_D_N)
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# DERIVATION SUR LE MODE, SUR LA REPONSE TRANSITOIRE
#            ET SUR LA REPONSE HARMONIQUE

DEBUT(CODE=_F(NOM='SENSD11A', NIV_PUB_WEB='INTERNET', VISU_EFICAS='NON'), DEBUG=_F(SDVERI='NON'))

POUTRE=LIRE_MAILLAGE( )

POUTRE=DEFI_GROUP( reuse=POUTRE,   MAILLAGE=POUTRE,
  CREA_GROUP_MA=_F(  NOM = 'TOUT', TOUT = 'OUI'))

MODELE=AFFE_MODELE(   MAILLAGE=POUTRE,
                         AFFE=_F( TOUT = 'OUI', PHENOMENE = 'MECANIQUE',
                        MODELISATION = 'DIS_T'))

k1 = 4.*pi*pi
m1 = 100.
c1 = 4.e-1*pi  # amortissement reduit de 0.01

k2 = 1.e10

#          K      M
sensible=[ k1,k2, m1,]

n=len(sensible)
PS=[None]*n

for i in range(n):
    PS[i]=DEFI_PARA_SENSI(VALE=sensible[i])

CHAMPCAR=AFFE_CARA_ELEM(MODELE=MODELE,
                        DISCRET=(_F(GROUP_MA = 'TOUT',
                                    CARA = 'K_T_D_N', VALE_F = (PS[0], PS[1], PS[1],)), # on doit tout mettre en parametre sensible
                                 _F(GROUP_MA = 'TOUT',
                                    CARA = 'M_T_D_N', VALE_F = PS[2]),
                                 _F(GROUP_MA = 'TOUT',
                                    CARA = 'A_T_D_N', VALE = (c1, c1, c1,),),),
                                )

RIGIELEM=CALC_MATR_ELEM( MODELE=MODELE, # CHARGE=CHARGE,
                         CARA_ELEM=CHAMPCAR,
                         OPTION='RIGI_MECA')

MASSELEM=CALC_MATR_ELEM(  MODELE=MODELE, # CHARGE=CHARGE,
                         CARA_ELEM=CHAMPCAR,
                         OPTION='MASS_MECA')

AMORELEM=CALC_MATR_ELEM(  MODELE=MODELE, # CHARGE=CHARGE,
                         CARA_ELEM=CHAMPCAR,
                         OPTION='AMOR_MECA')

NUMEROTA=NUME_DDL(   MATR_RIGI=RIGIELEM )

MATRRIGI=ASSE_MATRICE(MATR_ELEM=RIGIELEM,NUME_DDL=NUMEROTA)

MATRMASS=ASSE_MATRICE(MATR_ELEM=MASSELEM,NUME_DDL=NUMEROTA)

MATRAMOR=ASSE_MATRICE(MATR_ELEM=AMORELEM,NUME_DDL=NUMEROTA)

def sqrt(x):
    return x**.5

f1 = sqrt(k1/(4.*pi*pi*m1))
df1k1 = 1./(4.*pi*sqrt(m1*k1))
df1m1 = -f1/(2.*m1)

f1e = f1*(1.+1.e-4)

MODES=MODE_ITER_SIMULT(  MATR_A=MATRRIGI,  MATR_B=MATRMASS,
                         SENSIBILITE=(PS[0],PS[2],), CARA_ELEM=CHAMPCAR,
                         CALC_FREQ=_F( OPTION = 'CENTRE',
                         NMAX_FREQ = 1,
                         FREQ = ( f1e, )),
                      )

TEST_RESU(RESU=(
                _F(RESULTAT=MODES, NUME_ORDRE=1, PARA='FREQ',
                   VALE=f1, CRITERE='RELATIF', PRECISION=1.E-4,
                   REFERENCE='ANALYTIQUE',),
                ),);

TEST_RESU(RESU=(
                _F(RESULTAT=MODES, NUME_ORDRE=1, PARA='FREQ',
                   VALE=df1k1, CRITERE='RELATIF', PRECISION=1.E-5,
                   SENSIBILITE=PS[0],
                   REFERENCE='ANALYTIQUE',),
                _F(RESULTAT=MODES, NUME_ORDRE=1, PARA='FREQ',
                   VALE=df1m1, CRITERE='RELATIF', PRECISION=1.E-5,
                   SENSIBILITE=PS[2],
                   REFERENCE='ANALYTIQUE',),
                ),);

# test DYNA_LINE_TRAN / DYNA_LINE_HARM

I_DEBUT = 0.
I_FIN = 1.

fext = 1.

CHF=AFFE_CHAR_MECA(MODELE=MODELE,
                    FORCE_NODALE=(_F(NOEUD='NO1',FX=fext),
                                  ),)

L_TEMPS=DEFI_LIST_REEL(DEBUT=I_DEBUT,
                       INTERVALLE=_F(JUSQU_A=I_FIN,NOMBRE=100))

FORCE = FORMULE(NOM_PARA='INST',VALE='sin(INST)')

FC = CALC_FONC_INTERP(FONCTION=FORCE,
                            LIST_PARA=L_TEMPS,
                            NOM_PARA = 'INST',
                            PROL_GAUCHE='CONSTANT',
                            PROL_DROITE='CONSTANT' )

F_DEBUT = 0.5*f1
F_FIN = 1.5*f1

L_FREQ=DEFI_LIST_REEL(DEBUT=F_DEBUT,
                      INTERVALLE=_F(JUSQU_A=F_FIN,NOMBRE=2))

DYTRN=DYNA_LINE_TRAN(MODELE=MODELE,CARA_ELEM = CHAMPCAR,
                    MATR_MASS=MATRMASS, MATR_RIGI=MATRRIGI,
                    INCREMENT=_F(LIST_INST=L_TEMPS,),
                    SCHEMA_TEMPS=_F(SCHEMA='NEWMARK',),
                    EXCIT=(
                           _F(FONC_MULT=FC,CHARGE=CHF),
                           ),
                    SENSIBILITE=(PS[0],PS[2],),
                    )

DYHAN=DYNA_LINE_HARM(MODELE=MODELE,CARA_ELEM=CHAMPCAR,
                           MATR_MASS=MATRMASS, MATR_RIGI=MATRRIGI,
                           MATR_AMOR=MATRAMOR, LIST_FREQ=L_FREQ,
                           TOUT_CHAM='OUI',
                           SENSIBILITE=(PS[0],PS[2],),
                           EXCIT=(_F(COEF_MULT_C=1.+0.j,CHARGE=CHF),)
                     )

omega2 = k1/m1
omega = sqrt(omega2)
omega2ext = 1.
omegaext = sqrt(omega2ext)
x_fin = fext*(sin(omegaext*I_FIN) - sin(omega*I_FIN)*omegaext/omega)/(m1*(omega2-omega2ext))
dx_dk1 = omegaext*(sin(omega*I_FIN)/omega - I_FIN*cos(omega*I_FIN))/(2.*m1*k1*(omega2-omega2ext))
dx_dk2 = (sin(omegaext*I_FIN) - sin(omega*I_FIN)*omegaext/omega)/(m1*m1*(omega2-omega2ext)*(omega2-omega2ext))
dx_dk = fext*(dx_dk1 - dx_dk2)
dx_dm1 = (I_FIN*cos(omega*I_FIN) - sin(omega*I_FIN)/omega)/(2.*m1*m1*(omega2-omega2ext))
dx_dm2 = omegaext*(sin(omegaext*I_FIN) - sin(omega*I_FIN)*omegaext/omega)/(m1*m1*(omega2-omega2ext)*(omega2-omega2ext))
dx_dm = fext*omegaext*(dx_dm1 + dx_dm2)

omega2_fin = (2.*pi*F_FIN)*(2.*pi*F_FIN)
x_fr1 = fext/(k1-omega2_fin*m1+(1.j)*c1)
dx_fr1_dk = -x_fr1/(k1-omega2_fin*m1+(1.j)*c1)
dx_fr1_dm = x_fr1*omega2_fin/(k1-omega2_fin*m1+(1.j)*c1)

TEST_RESU(RESU=(
                _F(RESULTAT=DYTRN,INST = I_FIN,
                   NOM_CHAM='DEPL',NOEUD='NO1',
                   CRITERE='RELATIF',PRECISION=5.E-4,
                   NOM_CMP='DX',VALE=(x_fin,),REFERENCE='ANALYTIQUE',),
               ),);

TEST_RESU(RESU=(
                _F(RESULTAT=DYTRN,INST = I_FIN,
                   SENSIBILITE=(PS[0]),
                   NOM_CHAM='DEPL',NOEUD='NO1',
                   CRITERE='RELATIF',PRECISION=5.E-4,
                   NOM_CMP='DX',VALE=(dx_dk,),REFERENCE='ANALYTIQUE'),
                _F(RESULTAT=DYTRN,INST = I_FIN,
                   SENSIBILITE=(PS[2]),
                   NOM_CHAM='DEPL',NOEUD='NO1',
                   CRITERE='RELATIF',PRECISION=5.E-4,
                   NOM_CMP='DX',VALE=(dx_dm,),REFERENCE='ANALYTIQUE'),
               ),);

TEST_RESU(RESU=(
                _F(RESULTAT=DYHAN,FREQ = F_FIN,
                   NOM_CHAM='DEPL',NOEUD='NO1',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DX',VALE_C=(x_fr1,),REFERENCE='ANALYTIQUE'),
               ),);

TEST_RESU(RESU=(
                _F(RESULTAT=DYHAN,FREQ = F_FIN,
                   SENSIBILITE=(PS[0]),
                   NOM_CHAM='DEPL',NOEUD='NO1',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DX',VALE_C=(dx_fr1_dk,),REFERENCE='ANALYTIQUE'),
                _F(RESULTAT=DYHAN,FREQ = F_FIN,
                   SENSIBILITE=(PS[2]),
                   NOM_CHAM='DEPL',NOEUD='NO1',
                   CRITERE='RELATIF',PRECISION=5.E-3,
                   NOM_CMP='DX',VALE_C=(dx_fr1_dm,),REFERENCE='ANALYTIQUE'),
               ),);

FIN()
#
