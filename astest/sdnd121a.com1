POURSUITE(CODE=_F(NOM = 'SDND121A',),);

from Numeric import array, Float, zeros, nonzero, sqrt, sum, cumsum, sin, pi
# import cmath (pour calculer la solution analytique quand numpy est installe)

############################################################
################  Bilan energetique  #######################
############################################################
tmpd = aster.getvectjev('D_EULER            .VALE        ');
t = array(tmpd[0:len(tmpd)/2])
fext = Fa*sin(2*pi*f*t)  # formule qui definit le chargement exterieur

# Euler:
d_euler = array(tmpd[len(tmpd)/2:len(tmpd)])
del tmpd

tmpv = aster.getvectjev('V_EULER            .VALE        ');
v_euler = array(tmpv[len(tmpv)/2:len(tmpv)])
del tmpv

tmpa = aster.getvectjev('A_EULER            .VALE        ');
a_euler = array(tmpa[len(tmpa)/2:len(tmpa)])
del tmpa

# tmpf = aster.getvectjev('FC_EULER           .VALE        ');
# fchoc_euler = array(tmpf[len(tmpf)/2:len(tmpf)])
# del tmpf

E_pot_euler = 1./2 * k_rappel * d_euler**2
E_cin_euler = 1./2 * m * v_euler**2
E_choc_euler = 1./2 * kn_choc * (((d_euler-jeu_choc)+abs(d_euler-jeu_choc))/2)**2
E_tot_euler = E_pot_euler + E_cin_euler + E_choc_euler
# Pour Euler, il faut utiliser v(i+1/2) pour le travail des forces
v_euler12 = zeros(len(v_euler), Float)
v_euler12[0:len(v_euler12)-1] = 1./2*(v_euler[0:len(v_euler)-1]+ v_euler[1:len(v_euler)])
v_euler12[len(v_euler12)-1] = v_euler[len(v_euler)-1] + a_euler[len(a_euler)-1]*pdt*pas_archi/2
E_inj_euler = cumsum(fext*v_euler12*pdt*pas_archi)
err_globale_E_euler = sqrt( sum((E_inj_euler-E_tot_euler)**2) / sum(E_inj_euler**2) ) *100

#-------

# Adapt:
tmpd = aster.getvectjev('D_ADAPT            .VALE        ');
t = array(tmpd[0:len(tmpd)/2])
d_adapt = array(tmpd[len(tmpd)/2:len(tmpd)])
del tmpd

tmpv = aster.getvectjev('V_ADAPT            .VALE        ');
v_adapt = array(tmpv[len(tmpv)/2:len(tmpv)])
del tmpv

tmpa = aster.getvectjev('A_ADAPT            .VALE        ');
a_adapt = array(tmpa[len(tmpa)/2:len(tmpa)])
del tmpa

# tmpf = aster.getvectjev('FC_ADAPT           .VALE        ');
# fchoc_adapt = array(tmpf[len(tmpf)/2:len(tmpf)])
# del tmpf

E_pot_adapt = 1./2 * k_rappel * d_adapt**2
E_cin_adapt = 1./2 * m * v_adapt**2
E_choc_adapt = 1./2 * kn_choc * (((d_adapt-jeu_choc)+abs(d_adapt-jeu_choc))/2)**2
E_tot_adapt = E_pot_adapt + E_cin_adapt + E_choc_adapt
E_inj_adapt = cumsum(fext*v_adapt*pdt*pas_archi)
err_globale_E_adapt = sqrt( sum((E_inj_adapt-E_tot_adapt)**2) / sum(E_inj_adapt**2) ) *100
#####################################################################

############################################################
# Verification de la coherence entre la force de choc et la cinematique:
############################################################
tmpd = aster.getvectjev('D_ADAP2            .VALE        ');
d_adap2 = array(tmpd[len(tmpd)/2:len(tmpd)])
del tmpd

tmpf = aster.getvectjev('FC_ADAP2           .VALE        ');
fchoc_adap2 = array(tmpf[len(tmpf)/2:len(tmpf)])
del tmpf

fchoc_cine = kn_choc * (((d_adap2-jeu_choc)+abs(d_adap2-jeu_choc))/2)
err_globale_F_adap2 = sqrt( sum((fchoc_adap2-fchoc_cine)**2) / sum(fchoc_cine**2) ) *100
print 'err_globale_F_adap2', err_globale_F_adap2
#####################################################################

############################################################
# Recherche des instants d'entree de contact
############################################################
N=len(t)
   # Pour Euler:
dchoc_euler = d_euler>=jeu_choc
diff_euler = zeros(N)
diff_euler[1:len(diff_euler)] = dchoc_euler[1:N]-dchoc_euler[0:N-1]
in_euler = diff_euler>=1
in2_euler = nonzero(in_euler)
out_euler = diff_euler<=-1
out2_euler = nonzero(out_euler)

t_inout_euler = []
for i in in2_euler:
   t_inout_euler.append(t[i])
for i in out2_euler:
   t_inout_euler.append(t[i])
t_inout_euler.sort()

   # Pour Differences centrees:
dchoc_adapt = d_adapt>=jeu_choc
diff_adapt = zeros(N)
diff_adapt[1:len(diff_adapt)] = dchoc_adapt[1:N]-dchoc_adapt[0:N-1]
in_adapt = diff_adapt>=1
in2_adapt = nonzero(in_adapt)
out_adapt = diff_adapt<=-1
out2_adapt = nonzero(out_adapt)

t_inout_adapt = []
for i in in2_adapt:
   t_inout_adapt.append(t[i])
for i in out2_adapt:
   t_inout_adapt.append(t[i])
t_inout_adapt.sort()


# Instants d'entrees et sorties de contact pour la solution quasi-analytique
# (a 10^-9 s pres) :
INCLUDE(UNITE=60);

# Test du bilan energetique :
TEMPSFIN = DEFI_LIST_REEL(VALE=duree,);

ERRE_eul= DEFI_LIST_REEL(VALE=err_globale_E_euler,);
E_E_eul = DEFI_FONCTION(NOM_PARA='INST',
                        VALE_PARA=TEMPSFIN,
                        VALE_FONC=ERRE_eul,);

ERRE_ada= DEFI_LIST_REEL(VALE=err_globale_E_adapt,);
E_E_ada = DEFI_FONCTION(NOM_PARA='INST',
                        VALE_PARA=TEMPSFIN,
                        VALE_FONC=ERRE_ada,);

TEST_FONCTION ( VALEUR =(_F(FONCTION = E_E_eul,
                            PRECISION = 1.E-1,
                            VALE_PARA = duree,
                            REFERENCE = 'ANALYTIQUE',
                            VALE_REFE = 0.,
                            CRITERE='ABSOLU',
                            ),),);

TEST_FONCTION ( VALEUR =(_F(FONCTION = E_E_ada,
                            PRECISION = 1.E-1,
                            VALE_PARA = duree,
                            REFERENCE = 'ANALYTIQUE',
                            VALE_REFE = 0.,
                            CRITERE='ABSOLU',
                            ),),);


# Test de la coherence entre force de choc et cinematique :
ERRF_ada= DEFI_LIST_REEL(VALE=err_globale_F_adap2,);
E_F_ada = DEFI_FONCTION(NOM_PARA='INST',
                        VALE_PARA=TEMPSFIN,
                        VALE_FONC=ERRF_ada,);

TEST_FONCTION ( VALEUR =(_F(FONCTION = E_F_ada,
                            PRECISION = 1.E-8,
                            VALE_PARA = duree,
                            REFERENCE = 'ANALYTIQUE',
                            VALE_REFE = 0.,
                            CRITERE='ABSOLU',
                            ),),);


# Test des instants d'entree et sortie de contact :
tio_eul = DEFI_LIST_REEL(VALE=t_inout_euler,);
tio_eulb= DEFI_FONCTION(NOM_PARA='INST',
                        VALE_PARA=tio_eul,
                        VALE_FONC=tio_eul,);

for i in range(0,len(t_inout_euler)):
   TEST_FONCTION ( VALEUR =(_F(FONCTION = tio_eulb,
                               PRECISION = 1.2E-5,
                               VALE_PARA = t_inout_euler[i],
                               REFERENCE = 'ANALYTIQUE',
                               VALE_REFE = t_inout_analyique[i],
                               CRITERE='ABSOLU',
                               ),),);


tio_ada = DEFI_LIST_REEL(VALE=t_inout_adapt,);
tio_adab= DEFI_FONCTION(NOM_PARA='INST',
                        VALE_PARA=tio_ada,
                        VALE_FONC=tio_ada,);

for i in range(0,len(t_inout_adapt)):
   TEST_FONCTION ( VALEUR =(_F(FONCTION = tio_adab,
                               PRECISION = 1.2E-5,
                               VALE_PARA = t_inout_adapt[i],
                               REFERENCE = 'ANALYTIQUE',
                               VALE_REFE = t_inout_analyique[i],
                               CRITERE='ABSOLU',
                               ),),);


# Ce qui suit est en attente du module numpy

# #####################################################################
# # Calcul de la solution quasi-analytique (elle est analytique par
# # morceaux, les instants d'entree et sortie de choc sont determines
# # numeriquement a 10^-9 s pres) :
# #####################################################################
# c_rappel=0. # amortissement au noeud de rappel (pour un probleme plus general)
# INCLUDE(UNITE=61);
# INCLUDE(UNITE=62);
# 
# err_globale_D_euler = sqrt( sum((d_euler-D)**2) / sum(D**2) ) *100
# err_globale_V_euler = sqrt( sum((v_euler-V)**2) / sum(V**2) ) *100
# err_globale_A_euler = sqrt( sum((a_euler-A)**2) / sum(A**2) ) *100
# 
# err_globale_D_adapt = sqrt( sum((d_adapt-D)**2) / sum(D**2) ) *100
# err_globale_V_adapt = sqrt( sum((v_adapt-V)**2) / sum(V**2) ) *100
# err_globale_A_adapt = sqrt( sum((a_adapt-A)**2) / sum(A**2) ) *100
# 
# 
# TEMPSFIN = DEFI_LIST_REEL(VALE=duree,);
# 
# ERRE_eul= DEFI_LIST_REEL(VALE=err_globale_E_euler,);
# E_E_eul = DEFI_FONCTION(NOM_PARA='INST',
#                         VALE_PARA=TEMPSFIN,
#                         VALE_FONC=ERRE_eul,);
# 
# ERRD_eul= DEFI_LIST_REEL(VALE=err_globale_D_euler,);
# E_D_eul = DEFI_FONCTION(NOM_PARA='INST',
#                         VALE_PARA=TEMPSFIN,
#                         VALE_FONC=ERRD_eul,);
# 
# ERRV_eul= DEFI_LIST_REEL(VALE=err_globale_V_euler,);
# E_V_eul = DEFI_FONCTION(NOM_PARA='INST',
#                         VALE_PARA=TEMPSFIN,
#                         VALE_FONC=ERRV_eul,);
# 
# ERRA_eul= DEFI_LIST_REEL(VALE=err_globale_A_euler,);
# E_A_eul = DEFI_FONCTION(NOM_PARA='INST',
#                         VALE_PARA=TEMPSFIN,
#                         VALE_FONC=ERRA_eul,);
# 
# ERRE_ada= DEFI_LIST_REEL(VALE=err_globale_E_adapt,);
# E_E_ada = DEFI_FONCTION(NOM_PARA='INST',
#                         VALE_PARA=TEMPSFIN,
#                         VALE_FONC=ERRE_ada,);
# 
# ERRD_ada= DEFI_LIST_REEL(VALE=err_globale_D_adapt,);
# E_D_ada = DEFI_FONCTION(NOM_PARA='INST',
#                         VALE_PARA=TEMPSFIN,
#                         VALE_FONC=ERRD_ada,);
# 
# ERRV_ada= DEFI_LIST_REEL(VALE=err_globale_V_adapt,);
# E_V_ada = DEFI_FONCTION(NOM_PARA='INST',
#                         VALE_PARA=TEMPSFIN,
#                         VALE_FONC=ERRV_ada,);
# 
# ERRA_ada= DEFI_LIST_REEL(VALE=err_globale_A_adapt,);
# E_A_ada = DEFI_FONCTION(NOM_PARA='INST',
#                         VALE_PARA=TEMPSFIN,
#                         VALE_FONC=ERRA_ada,);
# 
# TEST_FONCTION ( VALEUR =(_F(FONCTION = E_E_eul,
#                             PRECISION = 1.2E-1,
#                             VALE_PARA = duree,
#                             REFERENCE = 'ANALYTIQUE',
#                             VALE_REFE = 0.,
#                             CRITERE='ABSOLU',
#                             ),),);
# 
# TEST_FONCTION ( VALEUR =(_F(FONCTION = E_D_eul,
#                             PRECISION = 1.E-2,
#                             VALE_PARA = duree,
#                             REFERENCE = 'ANALYTIQUE',
#                             VALE_REFE = 0.,
#                             CRITERE='ABSOLU',
#                             ),),);
# 
# TEST_FONCTION ( VALEUR =(_F(FONCTION = E_V_eul,
#                             PRECISION = 2.E-1,
#                             VALE_PARA = duree,
#                             REFERENCE = 'ANALYTIQUE',
#                             VALE_REFE = 0.,
#                             CRITERE='ABSOLU',
#                             ),),);
# 
# TEST_FONCTION ( VALEUR =(_F(FONCTION = E_A_eul,
#                             PRECISION = 4.E-1,
#                             VALE_PARA = duree,
#                             REFERENCE = 'ANALYTIQUE',
#                             VALE_REFE = 0.,
#                             CRITERE='ABSOLU',
#                             ),),);
# 
# TEST_FONCTION ( VALEUR =(_F(FONCTION = E_E_ada,
#                             PRECISION = 5.E-2,
#                             VALE_PARA = duree,
#                             REFERENCE = 'ANALYTIQUE',
#                             VALE_REFE = 0.,
#                             CRITERE='ABSOLU',
#                             ),),);
# 
# TEST_FONCTION ( VALEUR =(_F(FONCTION = E_D_ada,
#                             PRECISION = 1.E-2,
#                             VALE_PARA = duree,
#                             REFERENCE = 'ANALYTIQUE',
#                             VALE_REFE = 0.,
#                             CRITERE='ABSOLU',
#                             ),),);
# 
# TEST_FONCTION ( VALEUR =(_F(FONCTION = E_V_ada,
#                             PRECISION = 4.E-2,
#                             VALE_PARA = duree,
#                             REFERENCE = 'ANALYTIQUE',
#                             VALE_REFE = 0.,
#                             CRITERE='ABSOLU',
#                             ),),);
# 
# TEST_FONCTION ( VALEUR =(_F(FONCTION = E_A_ada,
#                             PRECISION = 4.E-1,
#                             VALE_PARA = duree,
#                             REFERENCE = 'ANALYTIQUE',
#                             VALE_REFE = 0.,
#                             CRITERE='ABSOLU',
#                             ),),);

FIN();
