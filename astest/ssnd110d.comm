# MODIF  DATE 18/02/2013   AUTEUR LEFEBVRE J-P.LEFEBVRE 
# TITRE VALIDATION MONOCRISTAL LOI DD_CC_IRRA THERMIQUE + A-THERMIQUE
# ssnd110d.para = tps_job 300 mem_job 512Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NOM='SSND110D',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'));


from numpy.linalg import norm
from numpy import *

TEMP=250.0

E=(236-0.0459*TEMP)*1.e9  # Pa
Nu=0.35
MU=E/2./(1.+Nu)

tau_f  = 20.e6    # Pa
tau_0  = 363.e6   # Pa
rho_ini= 1.E11    # en m**-2
y_at   = 1.e-9    # m
N      = 20.
gamma0 = 1.E-3    # s**-1
GH     = 1.e11    # s**-1
b      = 2.48e-10 # m
DeltaG0= 0.84     # eV  
epsi_1 = 1.e-5    # s**-1
D      = 10.e-9   # m
beta   = 0.2
d_lat  = 1.
K_f    = 30.
K_self = 100.
k      = 8.62E-5  # "Constante de Boltzmann, en eV/K" 

l_c = 500.*b*(TEMP/300.)**2


a_coli=0.7
a_ncol=0.1
a_self=0.1024
alpha_self=sqrt(a_self)

RHO_0  = rho_ini    # en m**-2

ACIERDD=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=Nu,
                            ALPHA=0.),
                      MONO_DD_CC_IRRA=_F(
                                    B       =b,
                                    GH       =GH,
                                    DELTAG0 =DeltaG0,
                                    TAU_0   =tau_0,
                                    TAU_F   =tau_f,
                                    GAMMA0  =gamma0,
                                    N       =N,
                                    RHO_MOB =rho_ini,
                                    D       =D,
                                    BETA    =beta,
                                    D_LAT   =d_lat,
                                    Y_AT    =y_at,
                                    K_F     =K_f,
                                    K_SELF  =K_self,
                                    K_BOLTZ =k,
                                    H1      =a_self,
                                    H2      =a_coli,
                                    H3      =a_ncol,
                                    H4      =a_ncol,
                                    H5      =a_ncol,
                                    H6      =a_ncol,
                                    DELTA1=0.,
                                    DELTA2=0.,
                                    A_IRRA=0.3,
                                    XI_IRRA=4.,
                                    DEPDT=1.E-4,
                                     ),
                    );

# DD_CC
COMPORDD=DEFI_COMPOR(MONOCRISTAL=_F(MATER=ACIERDD,
                                    ECOULEMENT='MONO_DD_CC_IRRA',
                                    ELAS='ELAS',
                                    FAMI_SYST_GLIS='CUBIQUE1',
                                    ),);



# LOI DE COMPORTEMENT DD_CC en Explicite
LISTARCH=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=1.,
                                      NOMBRE=100,),
                                  ),
                      );

LINSTDD=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=1.,
                                      NOMBRE=1000,),
                                  ),
                      );

LIS2DD=DEFI_LIST_INST(INFO=1,
                        DEFI_LIST=_F(LIST_INST=LINSTDD),
                        ECHEC=_F(SUBD_NIVEAU=20,
                                 SUBD_PAS=10),
                        );

# vecteurs direction de chargement
l_orient=[[0.,0.,1.],[0.,1.,1.],[1.,1.,1.],[1.,5.,9.],[0.,1.,2.],[-1.,2.,5.]]
l_norm=[l_orient[i]/norm(l_orient[i],2) for i in range(0,len(l_orient))]

# parametres de chargement
# numero du vecteur de chargement

ori = 3
SIGMA0=100.e6

##chargement
S1=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][0]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S2=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][1]*l_norm[ori][1]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S3=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][2]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S4=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][1]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S5=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S6=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][1]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);


# densites de dislocation initiales : variables internes de 0 a 44
avari = zeros(57+12)
for i in range(12):
  avari[6+i*3]=RHO_0
for i in range(12):
  avari[6+12*3+i]=RHO_0

lvari=list(avari)

TIMP=DEFI_FONCTION(
                      NOM_PARA='INST',  NOM_RESU='TEMP',
                       VALE=(  0. , TEMP, 1. , TEMP)
                        )

EXPLDD=SIMU_POINT_MAT(INFO=1,
                      MATER=ACIERDD,
                      COMP_INCR=(_F(RELATION='MONOCRISTAL',
                                    COMPOR=COMPORDD,
                                    ALGO_INTE='RUNGE_KUTTA',
                                    ITER_INTE_MAXI=100,
                                    TOUT='OUI',),),
                      INCREMENT=(_F(LIST_INST=LIS2DD,),),
                      NEWTON=(_F(PREDICTION='EXTRAPOLE',
                                 MATRICE='ELASTIQUE',
                                 ),),
                      CONVERGENCE=(_F( ITER_GLOB_MAXI=100,),),
                      VARI_INIT=_F(VALE=lvari,
                                  ),
                      SIGM_IMPOSE=(
                                   _F(SIXX=S1,SIYY=S2,SIZZ=S3,SIXY=S4,SIXZ=S5,SIYZ=S6),
                                  ),
                      ARCHIVAGE=_F(LIST_INST=LISTARCH),
                      SUPPORT='POINT',
                      AFFE_VARC=_F(  NOM_VARC='TEMP',
                                     VALE_FONC=TIMP,
                                     VALE_REF=TEMP),
                       );


rhoini=DEFI_CONSTANTE(VALE=RHO_0)

epsXX=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='EPXX',
                   INTERPOL='LIN');

epsYY=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='EPYY',
                   INTERPOL='LIN');

epsZZ=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='EPZZ',
                   INTERPOL='LIN');

epsXY=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='EPXY',
                   INTERPOL='LIN');

epsXZ=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='EPXZ',
                   INTERPOL='LIN');

epsYZ=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='EPYZ',
                   INTERPOL='LIN');


sigXX=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='SIXX',
                   INTERPOL='LIN');

sigYY=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='SIYY',
                   INTERPOL='LIN');

sigZZ=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='SIZZ',
                   INTERPOL='LIN');

sigXY=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='SIXY',
                   INTERPOL='LIN');

sigXZ=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='SIXZ',
                   INTERPOL='LIN');

sigYZ=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='SIYZ',
                   INTERPOL='LIN');


epsDIR=CALC_FONCTION(COMB=(_F(FONCTION = epsXX,
                              COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = epsYY,
                              COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = epsZZ,
                              COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = epsXY,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = epsXZ,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = epsYZ,
                              COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ),
                    );


sigDIR=CALC_FONCTION(COMB=(_F(FONCTION = sigXX,
                              COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = sigYY,
                              COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = sigZZ,
                              COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = sigXY,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = sigXZ,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = sigYZ,
                              COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ),
                    );


IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F(FONCTION=epsDIR,
                       COULEUR= 0,
                       LEGENDE= 'Edir',),),
            UNITE=28,
            TITRE='Edir = f(INST)');

IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F(FONC_X=epsDIR,
                        FONC_Y=sigDIR,
                        COULEUR= 0,
                        LEGENDE= 'SIGdir',),),
            UNITE=29,
            TITRE='SIGdir = f(Edir)');

gamma=[None]*13
rho=[None]*13

system=['', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']

for i in range(1,13):
    
    
    gamma[i]=RECU_FONCTION(TABLE=EXPLDD,
                         PARA_X='INST',
                        PARA_Y='V'+str(8+3*(i-1)),
                        INTERPOL='LIN');
    
    rho[i]=RECU_FONCTION(TABLE=EXPLDD,
                         PARA_X='INST',
                        PARA_Y='V'+str(7+3*(i-1)),
                        INTERPOL='LIN');

              
    IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE='',
                LEGENDE_X='\\f{Symbol}e\\f{}\sll',
                LEGENDE_Y='\\f{Symbol}r',
                COURBE=(
                        _F(FONC_X=epsDIR,
                           FONC_Y=rho[i],
                           COULEUR = i,
                           MARQUEUR = 0,
                           LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
                UNITE=30,);
              
    IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE='',
                LEGENDE_X='\\f{Symbol}e\\f{}\sll',
                LEGENDE_Y='\\f{Symbol}g',
                COURBE=(
                        _F(FONC_X=epsDIR,
                           FONC_Y=gamma[i],
                           COULEUR= i,
                           MARQUEUR = 0,
                           LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
                UNITE=31,);

EVIXX=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='V1',
                   INTERPOL='LIN');
                   
EVIZZ=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='V3',
                   INTERPOL='LIN');
                   
EVIXY=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='V4',
                   INTERPOL='LIN');
                   
EVIYZ=RECU_FONCTION(TABLE=EXPLDD,
                   PARA_X='INST',
                   PARA_Y='V6',
                   INTERPOL='LIN');
                   


# DD_CFC  en IMPLICITE

COMPODDI=DEFI_COMPOR(MONOCRISTAL=_F(MATER=ACIERDD,
                                    ECOULEMENT='MONO_DD_CC_IRRA',
                                    ELAS='ELAS',
                                    FAMI_SYST_GLIS='CUBIQUE1',
                                    ),
                                    );

LINSTDDI=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=1.,
                                      NOMBRE=500,),
                                  ),
                      );

LIS2DDI=DEFI_LIST_INST(INFO=1,
                        DEFI_LIST=_F(LIST_INST=LINSTDDI),
                        ECHEC=_F(SUBD_NIVEAU=20,
                                 SUBD_PAS=10),
                        );
IMPLDD=SIMU_POINT_MAT(INFO=1,
                      MATER=ACIERDD,
                      COMP_INCR=(_F(RELATION='MONOCRISTAL',
                                    COMPOR=COMPODDI,
                                    ALGO_INTE='NEWTON_PERT',
                                    ITER_INTE_MAXI=100,
                                    TOUT='OUI',),),
                      INCREMENT=(_F(LIST_INST=LIS2DDI,),),
                      NEWTON=(_F(REAC_ITER=1,
                                 PREDICTION='EXTRAPOLE',
                                 ),),
                      CONVERGENCE=(_F(ITER_GLOB_MAXI=10,),),
                      VARI_INIT=_F(VALE=lvari,
                                  ),
                      SIGM_IMPOSE=(
                                   _F(SIXX=S1,SIYY=S2,SIZZ=S3,SIXY=S4,SIXZ=S5,SIYZ=S6),
                                  ),
                      ARCHIVAGE=_F(LIST_INST=LISTARCH),
                      SUPPORT='POINT',
                      AFFE_VARC=_F(  NOM_VARC='TEMP',
                                     VALE_FONC=TIMP,
                                     VALE_REF=TEMP),
                       );


gammi=[None]*13
rhoi=[None]*13


for i in range(1,13):
    
    
    gammi[i]=RECU_FONCTION(TABLE=IMPLDD,
                         PARA_X='INST',
                        PARA_Y='V'+str(8+3*(i-1)),
                        INTERPOL='LIN');
    
    rhoi[i]=RECU_FONCTION(TABLE=IMPLDD,
                         PARA_X='INST',
                        PARA_Y='V'+str(7+3*(i-1)),
                        INTERPOL='LIN');

              
    IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE='',
                LEGENDE_X='\\f{Symbol}e\\f{}\sll',
                LEGENDE_Y='\\f{Symbol}r',
                COURBE=(
                        _F(FONC_X=epsDIR,
                           FONC_Y=rhoi[i],
                           COULEUR = i,
                           MARQUEUR = 0,
                           LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
                UNITE=30,);
              
    IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE='',
                LEGENDE_X='\\f{Symbol}e\\f{}\sll',
                LEGENDE_Y='\\f{Symbol}g',
                COURBE=(
                        _F(FONC_X=epsDIR,
                           FONC_Y=gammi[i],
                           COULEUR= i,
                           MARQUEUR = 0,
                           LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
                UNITE=31,);
                
EVIiXX=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='V1',
                   INTERPOL='LIN');
                   

EVIiZZ=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='V3',
                   INTERPOL='LIN');
                   
EVIiXY=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='V4',
                   INTERPOL='LIN');
                   
EVIiYZ=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='V6',
                   INTERPOL='LIN');
                   


# tests explicite et implicite

# densites de dislocation

sys1=8
sys2=5

TEST_FONCTION(VALEUR=_F(VALE_CALC=1.00044000000E11,
                        TOLE_MACHINE=1.E-3,
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=rho_8,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=100044586726.0,
                        VALE_REFE=1.00004400000E11,
                        VALE_PARA=1.0,
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=5.0000000000000001E-3,
                        NOM_PARA='INST',
                        FONCTION=rhoi_8,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=1.00020000000E11,
                        TOLE_MACHINE=1.E-3,
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=rho_5,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=100020533357.0,
                        VALE_REFE=1.00020000000E11,
                        VALE_PARA=1.0,
                        REFERENCE='AUTRE_ASTER',
                        NOM_PARA='INST',
                        FONCTION=rhoi_5,),
              )

# glissement plastiques

TEST_FONCTION(VALEUR=_F(VALE_CALC=2.2533609999999999E-07,
                        TOLE_MACHINE=1.E-3,
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=gamma_8,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=2.2774783119e-07,
                        VALE_REFE=2.2533609999999999E-07,
                        VALE_PARA=1.0,
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=0.02,
                        NOM_PARA='INST',
                        FONCTION=gammi_8,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-1.03769844535e-07,
                        VALE_REFE=-1.0377E-07,
                        VALE_PARA=1.0,
                        REFERENCE='NON_DEFINI',
                        PRECISION=2.E-3,
                        NOM_PARA='INST',
                        FONCTION=gamma_5,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-1.04883522186e-07,
                        VALE_REFE=-1.0377E-07,
                        VALE_PARA=1.0,
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=0.02,
                        NOM_PARA='INST',
                        FONCTION=gammi_5,),
              )

# deformation viscoplastique globale

TEST_FONCTION(VALEUR=_F(VALE_CALC=-1.3484200000000001E-07,
                        TOLE_MACHINE=1.E-3,
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=EVIXX,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-1.36287770317e-07,
                        VALE_REFE=-1.3484200000000001E-07,
                        VALE_PARA=1.0,
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=0.050000000000000003,
                        NOM_PARA='INST',
                        FONCTION=EVIiXX,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=1.34505E-07,
                        TOLE_MACHINE=1.E-3,
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=EVIZZ,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=1.35946120727e-07,
                        VALE_REFE=1.34505E-07,
                        VALE_PARA=1.0,
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=0.02,
                        NOM_PARA='INST',
                        FONCTION=EVIiZZ,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=3.5169259999999999E-08,
                        TOLE_MACHINE=1.E-3,
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=EVIXY,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=3.55451065788e-08,
                        VALE_REFE=3.5169259999999999E-08,
                        VALE_PARA=1.0,
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=0.02,
                        NOM_PARA='INST',
                        FONCTION=EVIiXY,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=9.5339829999999997E-08,
                        TOLE_MACHINE=1.E-3,
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        FONCTION=EVIYZ,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=9.63619372623e-08,
                        VALE_REFE=9.5339829999999997E-08,
                        VALE_PARA=1.0,
                        REFERENCE='AUTRE_ASTER',
                        PRECISION=0.02,
                        NOM_PARA='INST',
                        FONCTION=EVIiYZ,),
              )

FIN()
                   
