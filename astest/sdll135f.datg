# -*- coding: utf-8 -*-

###
### This file is generated automatically by SALOME v6.4.0 with dump python functionality
###

import sys
import salome
salome.salome_init()
salome.salome_init()
theStudy = salome.myStudy
import salome_notebook
notebook = salome_notebook.notebook

#############Chemin pour l'export du maillage resultat############
ExportPATH="/home/PHIMECA/maillages/"
##################################################################

###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
geompy = geomBuilder.New(salome.myStudy)
import math
import SALOMEDS


O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
A = geompy.MakeVertex(0, 0, 0)
Circle_1 = geompy.MakeCircle(A, OX, 0.155)
Tuyau = geompy.MakePrismVecH(Circle_1, OX, 1)
[Encas] = geompy.SubShapes(Tuyau, [6])
[Libre] = geompy.SubShapes(Tuyau, [7])
Auto_group_for_SubMesh_1 = geompy.CreateGroup(Tuyau, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_SubMesh_1, [Encas, Libre])
Auto_group_for_SubMesh_2 = geompy.CreateGroup(Tuyau, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_SubMesh_2, [Encas, Libre])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( A, 'A' )
geompy.addToStudy( Circle_1, 'Circle_1' )
geompy.addToStudy( Tuyau, 'Tuyau' )
geompy.addToStudyInFather( Tuyau, Encas, 'Encas' )
geompy.addToStudyInFather( Tuyau, Libre, 'Libre' )
geompy.addToStudyInFather( Tuyau, Auto_group_for_SubMesh_1, 'Auto_group_for_SubMesh_1' )
geompy.addToStudyInFather( Tuyau, Auto_group_for_SubMesh_2, 'Auto_group_for_SubMesh_2' )

###
### SMESH component
###

import SMESH
from salome.smesh import smeshBuilder
smesh = smeshBuilder.New(salome.myStudy)
from salome.StdMeshers import StdMeshersBuilder

smeshObj_1 = smesh.Mesh(Tuyau)
Regular_1D = smeshObj_1.Segment()
Nb_Seg_500 = Regular_1D.NumberOfSegments(500)
Nb_Seg_500.SetDistrType( 0 )
Quadrangle_2D = smeshObj_1.Quadrangle()
Regular_1D_1 = smeshObj_1.Segment(geom=Auto_group_for_SubMesh_1)
Nb_Seg_25 = Regular_1D_1.NumberOfSegments(25)
Nb_Seg_25.SetDistrType( 0 )
isDone = smeshObj_1.Compute()
smeshObj_2 = smeshObj_1.GroupOnGeom(Tuyau,'Tuyau',SMESH.FACE)
smeshObj_3 = smeshObj_1.GroupOnGeom(Encas,'Encas',SMESH.EDGE)
smeshObj_4 = smeshObj_1.GroupOnGeom(Libre,'Libre',SMESH.EDGE)
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
nodeID = smeshObj_1.AddNode( 0, 0, 0 )
smeshObj_5 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'Point_A' )
nbAdd = smeshObj_5.Add( [ 12526 ] )
smeshObj_5.SetColor( SALOMEDS.Color( 0.333333, 1, 1 ))
smesh.SetName(smeshObj_1, 'Tuyau')
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
elem0d = smeshObj_1.Add0DElement( 12526 )
smeshObj_6 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'POI_A' )
nbAdd = smeshObj_6.Add( [ 12526 ] )
smeshObj_1.RemoveGroup( smeshObj_6 )
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
coincident_nodes_on_part = smeshObj_1.FindCoincidentNodesOnPart( smeshObj_1, 1e-05, [  ] )
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
smesh.SetName(smeshObj_1, 'Tuyau')
smesh.SetName(smeshObj_1, 'Tuyau')
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
elem0d = smeshObj_1.Add0DElement( 12526 )
smesh.SetName(smeshObj_1, 'Tuyau')
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
isDone = smeshObj_1.Compute()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
[ smeshObj_7 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_2, smeshObj_3, smeshObj_4, smeshObj_5 ] = smeshObj_1.GetGroups()
coincident_nodes_on_part = smeshObj_1.FindCoincidentNodesOnPart( smeshObj_1, 1e-05, [  ] )
coincident_nodes_on_part = smeshObj_1.FindCoincidentNodesOnPart( smeshObj_1, 1e-05, [  ] )
Tuyau_1 = smesh.Mesh(Tuyau)
status = Tuyau_1.AddHypothesis(Nb_Seg_500)
Regular_1D_2 = Tuyau_1.Segment()
Quadrangle_2D_1 = Tuyau_1.Quadrangle()
Regular_1D_3 = Tuyau_1.Segment(geom=Auto_group_for_SubMesh_2)
status = Tuyau_1.AddHypothesis(Nb_Seg_25,Auto_group_for_SubMesh_2)
status = smeshObj_1.RemoveHypothesis(Regular_1D,Auto_group_for_SubMesh_1)
status = smeshObj_1.RemoveHypothesis(Nb_Seg_25,Auto_group_for_SubMesh_1)
smeshObj_1.RemoveGroup( smeshObj_2 )
smeshObj_1.RemoveGroup( smeshObj_4 )
smeshObj_1.RemoveGroup( smeshObj_3 )
smeshObj_1.RemoveGroup( smeshObj_5 )
smeshObj_1.GetMesh().RemoveSubMesh( smeshObj_7 )
status = smeshObj_1.RemoveHypothesis(Quadrangle_2D)
status = smeshObj_1.RemoveHypothesis(Regular_1D)
status = smeshObj_1.RemoveHypothesis(Nb_Seg_500)
isDone = Tuyau_1.Compute()
Tuyau_2 = Tuyau_1.GroupOnGeom(Tuyau,'Tuyau',SMESH.FACE)
Encas_1 = Tuyau_1.GroupOnGeom(Encas,'Encas',SMESH.EDGE)
Libre_1 = Tuyau_1.GroupOnGeom(Libre,'Libre',SMESH.EDGE)
[ Tuyau_2, Encas_1, Libre_1 ] = Tuyau_1.GetGroups()
nodeID = Tuyau_1.AddNode( 0, 0, 0 )
Point_A = Tuyau_1.CreateEmptyGroup( SMESH.NODE, 'Point_A' )
nbAdd = Point_A.Add( [ 12526 ] )
[ Tuyau_2, Encas_1, Libre_1, Point_A ] = Tuyau_1.GetGroups()
elem0d = Tuyau_1.Add0DElement( 12526 )
[ Tuyau_2, Encas_1, Libre_1, Point_A ] = Tuyau_1.GetGroups()
[ SubMesh_2 ] = Tuyau_1.GetMesh().GetSubMeshes()
[ Tuyau_2, Encas_1, Libre_1, Point_A ] = Tuyau_1.GetGroups()
[ SubMesh_2 ] = Tuyau_1.GetMesh().GetSubMeshes()
smesh.SetName(Tuyau_1, 'Tuyau')

smeshObj_7 = Regular_1D_1.GetSubMesh()
SubMesh_2 = Regular_1D_3.GetSubMesh()

## some objects were removed
aStudyBuilder = theStudy.NewBuilder()
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_1.GetMesh()))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_2))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_3))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_4))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_5))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_6))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_7))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
## set object names
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Nb_Seg_500, 'Nb. Seg=500')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Nb_Seg_25, 'Nb. Seg=25')
smesh.SetName(Tuyau_1.GetMesh(), 'Tuyau')
smesh.SetName(Tuyau_2, 'Tuyau')
smesh.SetName(Encas_1, 'Encas')
smesh.SetName(Libre_1, 'Libre')
smesh.SetName(Point_A, 'Point_A')
smesh.SetName(SubMesh_2, 'SubMesh_2')


########Export du maillage au format MMED########
Tuyau_1.ExportMED( r''+ExportPATH+'sdll135f.mmed'+'', 0, SMESH.MED_V2_2 , 1 )


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser(1)
