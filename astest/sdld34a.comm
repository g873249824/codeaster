# MODIF  DATE 28/06/2011   AUTEUR COURTOIS M.COURTOIS 
# TITRE LACHER D'UN SIMPLE MASSE-RESSORT
# sdld34a.para = tps_job 60 mem_job 32Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NOM='SDLD34A',
              NIV_PUB_WEB='INTERNET',
              VISU_EFICAS='OUI',),);

# MISE EN DONNEES
tfin = 3.0;

pdt = 0.01;

k = (((0.5 * pi) * 2.0) ** 2);

m = 1.0;

dinit = 1.0;

ainit = (-(k) / m);


MAIL=LIRE_MAILLAGE();

MODELE=AFFE_MODELE(MAILLAGE=MAIL,
                   AFFE=_F(GROUP_MA='N',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='DIS_T',),);

ACIER=DEFI_MATERIAU(ELAS=_F(E=2.0E11,
                            NU=0.3,
                            RHO=7800.0,),);

CHMAT=AFFE_MATERIAU(MAILLAGE=MAIL,
                    AFFE=_F(GROUP_MA='N',
                            MATER=ACIER,),);

CARELEM=AFFE_CARA_ELEM(MODELE=MODELE,
                       DISCRET=(_F(CARA='K_T_D_N',
                                   GROUP_MA='N',
                                   VALE=(k,0.,0.,),),
                                _F(CARA='M_T_D_N',
                                   GROUP_MA='N',
                                   VALE=m,),),);

# CONDITIONS AUX LIMITES 

BLOQUAGE=AFFE_CHAR_MECA(MODELE=MODELE,
                        DDL_IMPO=_F(GROUP_NO='N',
                                    DY=0.,
                                    DZ=0.,),);

#MATRICES ASSEMBLEES K, M

MACRO_MATR_ASSE(MODELE=MODELE,
                CHAM_MATER=CHMAT,
                CARA_ELEM=CARELEM,
                CHARGE=BLOQUAGE,
                NUME_DDL=CO('NUMEDDL'),
                MATR_ASSE=(_F(MATRICE=CO('RIGIDITE'),
                              OPTION='RIGI_MECA',),
                           _F(MATRICE=CO('MASSE'),
                              OPTION='MASS_MECA',),
                           _F(MATRICE=CO('MASDIAG'),
                              OPTION='MASS_MECA_DIAG',),),);

LINST=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=_F(JUSQU_A=tfin,
                                   PAS=pdt,),);

DEPLINI=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',
                   NUME_DDL=NUMEDDL,
                   OPERATION='AFFE',
                   MODELE=MODELE,
                   AFFE=_F(GROUP_NO='N',
                           NOM_CMP='DX',
                           VALE=dinit,),);

TRANSI=DYNA_LINE_TRAN(MODELE=MODELE,
                      MATR_MASS=MASSE,
                      MATR_RIGI=RIGIDITE,
                      SCHEMA_TEMPS=_F(SCHEMA='NEWMARK',), 
                      ETAT_INIT=_F(DEPL=DEPLINI,),
                      SOLVEUR=_F(METHODE='LDLT',),
#                      INCREMENT=_F(LIST_INST=LINST,),);
                      INCREMENT=_F(PAS=pdt,
                                   INST_FIN=tfin,),);

DX_DIS2=RECU_FONCTION(RESULTAT=TRANSI,
                      NOM_CHAM='DEPL',
                      NOM_CMP='DX',
                      GROUP_NO='N',);

TRANSX=DYNA_LINE_TRAN(MODELE=MODELE,
                      MATR_MASS=MASDIAG,
                      MATR_RIGI=RIGIDITE,
                      SCHEMA_TEMPS=_F(SCHEMA='DIFF_CENTRE',), 
                      ETAT_INIT=_F(DEPL=DEPLINI,),
                      SOLVEUR=_F(METHODE='LDLT',),
                      INCREMENT=_F(PAS=pdt,
                                   INST_FIN=tfin,),);

DXXDIS2=RECU_FONCTION(RESULTAT=TRANSX,
                      NOM_CHAM='DEPL',
                      NOM_CMP='DX',
                      GROUP_NO='N',);

MODES=MODE_ITER_SIMULT(MATR_A=RIGIDITE,
                       MATR_B=MASSE,
                       METHODE='QZ',
                       CALC_FREQ=_F(OPTION='TOUT',),);

MACRO_PROJ_BASE(BASE=MODES,
                STOCKAGE='DIAG',
                MATR_ASSE_GENE=(_F(MATRICE=CO('MAGE'),
                                   MATR_ASSE=MASSE,),
                                _F(MATRICE=CO('RIGE'),
                                   MATR_ASSE=RIGIDITE,),),
                VECT_ASSE_GENE=_F(VECTEUR=CO('DIGE'),
                                  TYPE_VECT='DEPL',
                                  VECT_ASSE=DEPLINI,),);

TRANSMO=DYNA_TRAN_MODAL(SCHEMA_TEMPS=_F(SCHEMA='EULER',),
                        MATR_MASS=MAGE,
                        MATR_RIGI=RIGE,
                        ETAT_INIT=_F(DEPL=DIGE,),
                        INCREMENT=_F(INST_FIN=tfin,
                                     PAS=pdt,),);

DXGEDIS2=RECU_FONCTION(RESU_GENE=TRANSMO,
                       NOM_CHAM='DEPL',
                       NOM_CMP='DX',
                       GROUP_NO='N',);

DXGEMO=RECU_FONCTION(RESU_GENE=TRANSMO,
                     NOM_CHAM='DEPL',
                     NUME_CMP_GENE=1,)

TEST_FONCTION(VALEUR=(_F(FONCTION=DX_DIS2,
                         VALE_PARA=2,
                         VALE_REFE=1,
                         PRECISION=1E-6,
                         REFERENCE='ANALYTIQUE',),
                      _F(FONCTION=DXXDIS2,
                         VALE_PARA=2,
                         VALE_REFE=1,
                         PRECISION=1E-6,
                         REFERENCE='ANALYTIQUE',),
                      _F(FONCTION=DXGEDIS2,
                         VALE_PARA=2,
                         VALE_REFE=1,
                         PRECISION=1E-4,
                         REFERENCE='ANALYTIQUE',),
                      _F(FONCTION=DXGEMO,
                         VALE_PARA=2,
                         VALE_REFE=1,
                         PRECISION=1E-4,
                         REFERENCE='ANALYTIQUE',),),);

IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=29,
              COURBE=(_F(FONCTION=DX_DIS2,
                         MARQUEUR=0,),
                      _F(FONCTION=DXXDIS2,
                         MARQUEUR=0,),
                      _F(FONCTION=DXGEDIS2,
                         MARQUEUR=0,),
                      _F(FONCTION=DXGEMO,
                         MARQUEUR=0,),),);

FIN();
