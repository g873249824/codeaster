# -*- coding: iso-8859-1 -*-

###
### This file is generated automatically by SALOME v6.4.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
theStudy = salome.myStudy

import salome_notebook
notebook = salome_notebook.notebook
sys.path.insert( 0, r'/home/C29256/DATA/source/restitution/cas-tests')

import iparameters
ipar = iparameters.IParameters(salome.myStudy.GetCommonParameters("Interface Applicative", 1))

from smesh import *
import time


def creation_elements_interface_3D(maillage, groupMa_1, groupMa_2, nom_interface):
   """Cette fonction modifie un maillage 3D en y ajoutant des éléments
   d'interface PENTA6 et HEXA8 d'épaisseur nulle entre les deux groupes de mailles
   spécifiés. Ces éléments sont rassemblés dans le groupe de mailles nom_interface.
   
   En l'état, cette fonction est prévue pour fonctionner sur des maillages
   linéaires. D'autre part, l'interface traitée doit être régulière, c'est à dire
   sans angles (le cas où plusieurs faces d'un élément sont sur l'interface n'est
   pas traité).
   
   Le premier groupe de maille doit être un groupe de mailles volumiques. Le second
   peut être un groupe de mailles volumiques, ou surfaciques. Dans ce dernier cas,
   les éléments cohésifs sont créés au bord du maillage volumique.
   
   L'ordre des groupes de mailles est important : il détermine
   l'orientation des éléments d'interface. On prendra donc garde à choisir
   une normale orientée de groupMa_1 vers groupMa_2."""
   
   
   # -- informations préliminaires
   print "Nombre de noeuds du maillage initial :",maillage.NbNodes()
   print "Traitement du maillage ..."
   
   
   # -- récupération des groupes de mailles
   t1 = time.time()
   print "Étape de recensement des groupes de mailles"
   listAllGroup = maillage.GetGroups()
   nbAllGroups=len(listAllGroup)

   listAllGroupVolume = []
   listAllGroupFace = []
   for i in xrange(nbAllGroups):
      if str(listAllGroup[i].GetType())=="VOLUME" :
         listAllGroupVolume.append(listAllGroup[i])
      if str(listAllGroup[i].GetType())=="FACE" :
         listAllGroupFace.append(listAllGroup[i])
   nbAllGroupVolume = len(listAllGroupVolume)
   nbAllGroupFace   = len(listAllGroupFace)

   verif_1 = False
   verif_2 = False
   create_group = True
   is_face = 0
   for j in xrange(nbAllGroupVolume):
      if (groupMa_1==listAllGroupVolume[j].GetName()) :
         verif_1 = True
         volume_1 = listAllGroupVolume[j]
      if (groupMa_2==listAllGroupVolume[j].GetName()) :
         verif_2 = True
         volume_2 = listAllGroupVolume[j]
      if (nom_interface==listAllGroupVolume[j].GetName()) :
         create_group = False
         interface = listAllGroupVolume[j]
   if not verif_1 :
      print "Erreur : Le premier groupe de mailles doit être un groupe de mailles volumiques"
      assert False
   if not verif_2 :
      for j in xrange(nbAllGroupFace):
         if (groupMa_2==listAllGroupFace[j].GetName()) :
            verif_2 = True
            is_face = 2
            volume_2 = listAllGroupFace[j]
   if not (verif_1 and verif_2):
      print "Erreur : On n'a pas trouvé les groupes de mailles spécifiés"
      assert False


   # -- détection des noeuds appartenant à l'intersection
   t2 = time.time()
   print "Durée écoulée :", t2-t1, "s"
   print "Étape de calcul des intersections"
   gr_noeuds_volume_1 = maillage.GetMesh().CreateDimGroup([volume_1], SMESH.NODE, "GN_1")
   id_noeuds_volume_1 = gr_noeuds_volume_1.GetListOfID()
   
   gr_noeuds_volume_2 = maillage.GetMesh().CreateDimGroup([volume_2], SMESH.NODE, "GN_2")
   id_noeuds_volume_2 = gr_noeuds_volume_2.GetListOfID()

   gr_noeuds_inter = maillage.GetMesh().IntersectListOfGroups([gr_noeuds_volume_1,gr_noeuds_volume_2], "GN_inter")
   id_noeuds_inter = gr_noeuds_inter.GetListOfID()


   # -- traitement des groupes de mailles de dimension inférieure
   t3 = time.time()
   print "Durée écoulée :", t3-t2, "s"
   print "Étape de traitement des mailles de dimension inférieure"
   list_edge = maillage.GetMesh().GetElementsByType(EDGE)
   edge_2 = []
   seg_to_remove = []
   #  on vérifie que le maillage est linéaire
   if len(maillage.GetElemNodes(list_edge[0])) != 2 :
      print "Erreur : Ce script ne peut traiter que des maillages linéaires"
      assert False
   for seg2 in list_edge:
      idNoeuds = maillage.GetElemNodes(seg2)
      noeuds_communs_inter = set(idNoeuds) & set(id_noeuds_inter)
      if len(noeuds_communs_inter) == 2 :
         if (is_face == 0) :
            seg_to_remove.append(seg2)
         elif is_face == 2 :
            edge_2.append(seg2)
      elif len(noeuds_communs_inter) == 1 :
         noeuds_communs_2 = set(idNoeuds) & set(id_noeuds_volume_2)
         if len(noeuds_communs_2) == 2 :
            edge_2.append(seg2)
   maillage.RemoveElements(seg_to_remove)
   edge_2 = maillage.MakeGroupByIds("edge_2", EDGE, edge_2)
   
   list_face = maillage.GetMesh().GetElementsByType(FACE)
   face_2 = []
   face_to_remove = []
   for face in list_face:
      idNoeuds = maillage.GetElemNodes(face)
      nbNoeuds = len(idNoeuds)
      noeuds_communs_inter = set(idNoeuds) & set(id_noeuds_inter)
      if len(noeuds_communs_inter) == nbNoeuds :
         if (is_face == 0) :
            face_to_remove.append(face)
         elif is_face == 2 :
            face_2.append(face)
      elif len(noeuds_communs_inter) >= 1 :
         noeuds_communs_2 = set(idNoeuds) & set(id_noeuds_volume_2)
         if len(noeuds_communs_2) == nbNoeuds :
            face_2.append(face)
   maillage.RemoveElements(face_to_remove)
   face_2 = maillage.MakeGroupByIds("face_2", FACE, face_2)


   # -- doublage des noeuds appartenant à l'interface
   t4 = time.time()
   print "Durée écoulée :", t4-t3, "s"
   print "Étape de doublage des noeuds"
   noeuds_avant = set(maillage.GetNodesId())
   code_retour = maillage.DoubleNodeGroups([gr_noeuds_inter],[volume_2, face_2, edge_2])
   #print code_retour
   noeuds_apres = set(maillage.GetNodesId())
   nouveauxNoeuds = noeuds_apres - noeuds_avant
   listNouveauxNoeuds = list(nouveauxNoeuds)
   listNouveauxNoeuds.sort()
   
   tableauCorrespondance = {}
   for k in xrange(len(id_noeuds_inter)):
      tab1 = maillage.GetNodeXYZ(listNouveauxNoeuds[k])
      tab2 = maillage.GetNodeXYZ(id_noeuds_inter[k])
      assert (tab1 == tab2)
      assert not tableauCorrespondance.has_key(id_noeuds_inter[k])
      tableauCorrespondance[id_noeuds_inter[k]] = listNouveauxNoeuds[k]


   # -- création des mailles d'interface
   t5 = time.time()
   print "Durée écoulée :", t5-t4, "s"
   print "Étape de création des mailles d'interface"
   if create_group :
      interface = maillage.CreateEmptyGroup(SMESH.VOLUME, nom_interface)
   #bad_elements = maillage.CreateEmptyGroup(SMESH.VOLUME, "BAD_ELEMENTS")
   group1 = volume_1.GetListOfID()
   nPenta = 0
   nHexa  = 0
   nBad   = 0
   for element_volume in group1:
      idNoeuds = maillage.GetElemNodes(element_volume)
      interMailleVolume = set(idNoeuds) & set(id_noeuds_inter)
      if len(interMailleVolume) == 3:            # on ajoute un PENTA6
         listInter = list(interMailleVolume)
         coor_1    = maillage.GetNodeXYZ(listInter[0])
         coor_2    = maillage.GetNodeXYZ(listInter[1])
         coor_3    = maillage.GetNodeXYZ(listInter[2])
         bary_volu = maillage.BaryCenter(element_volume)
         bary_face = [(coor_1[0]+coor_2[0]+coor_3[0])/3., (coor_1[1]+coor_2[1]+coor_3[1])/3., (coor_1[2]+coor_2[2]+coor_3[2])/3.]
         prod_vect = []
         prod_vect.append((coor_3[1]-coor_2[1])*(coor_1[2]-coor_2[2]) - (coor_3[2]-coor_2[2])*(coor_1[1]-coor_2[1]))
         prod_vect.append((coor_3[2]-coor_2[2])*(coor_1[0]-coor_2[0]) - (coor_3[0]-coor_2[0])*(coor_1[2]-coor_2[2]))
         prod_vect.append((coor_3[0]-coor_2[0])*(coor_1[1]-coor_2[1]) - (coor_3[1]-coor_2[1])*(coor_1[0]-coor_2[0]))
         orientation = prod_vect[0]*(bary_face[0]-bary_volu[0]) + prod_vect[1]*(bary_face[1]-bary_volu[1]) + prod_vect[2]*(bary_face[2]-bary_volu[2])
         if (orientation > 0.):
            n1 = listInter[2]
            n2 = listInter[1]
            n3 = listInter[0]
            n4 = tableauCorrespondance[n1]
            n5 = tableauCorrespondance[n2]
            n6 = tableauCorrespondance[n3]
         else :
            n1 = listInter[0]
            n2 = listInter[1]
            n3 = listInter[2]
            n4 = tableauCorrespondance[n1]
            n5 = tableauCorrespondance[n2]
            n6 = tableauCorrespondance[n3]
         id1= maillage.AddVolume([n1,n2,n3,n4,n5,n6])
         nbAdd = interface.Add([id1])
         nPenta += 1
      elif len(interMailleVolume) == 4:        # on ajoute un HEXA8
         #print "Ajout HEXA8 pour la maille:", element_volume
         #print "Noeuds concernés :", idNoeuds
         if len(idNoeuds) == 5:                # c'est une pyramide, et l'interface est la base carrée
            listInter = list(interMailleVolume)
            n1 = idNoeuds[3]
            n2 = idNoeuds[2]
            n3 = idNoeuds[1]
            n4 = idNoeuds[0]
            n5 = tableauCorrespondance[n1]
            n6 = tableauCorrespondance[n2]
            n7 = tableauCorrespondance[n3]
            n8 = tableauCorrespondance[n4]
            id1= maillage.AddVolume([n1,n2,n3,n4,n5,n6,n7,n8])
            nbAdd = interface.Add([id1])
            nHexa += 1
         elif len(idNoeuds) == 8:              # c'est un HEXA8, et il faut orienter proprement l'interface
            listInter = list(interMailleVolume)
            num_locale = [idNoeuds.index(listInter[0]), idNoeuds.index(listInter[1]), idNoeuds.index(listInter[2]), idNoeuds.index(listInter[3])]
            num_locale.sort()
            if num_locale == [0,1,2,3] :
               n1 = idNoeuds[3]
               n2 = idNoeuds[2]
               n3 = idNoeuds[1]
               n4 = idNoeuds[0]
            elif num_locale == [0,1,4,5] :
               n1 = idNoeuds[0]
               n2 = idNoeuds[1]
               n3 = idNoeuds[5]
               n4 = idNoeuds[4]
            elif num_locale == [1,2,5,6] :
               n1 = idNoeuds[1]
               n2 = idNoeuds[2]
               n3 = idNoeuds[6]
               n4 = idNoeuds[5]
            elif num_locale == [2,3,6,7] :
               n1 = idNoeuds[2]
               n2 = idNoeuds[3]
               n3 = idNoeuds[7]
               n4 = idNoeuds[6]
            elif num_locale == [0,3,4,7] :
               n1 = idNoeuds[3]
               n2 = idNoeuds[0]
               n3 = idNoeuds[4]
               n4 = idNoeuds[7]
            elif num_locale == [4,5,6,7] :
               n1 = idNoeuds[4]
               n2 = idNoeuds[5]
               n3 = idNoeuds[6]
               n4 = idNoeuds[7]
            else : assert False
            n5 = tableauCorrespondance[n1]
            n6 = tableauCorrespondance[n2]
            n7 = tableauCorrespondance[n3]
            n8 = tableauCorrespondance[n4]
            id1= maillage.AddVolume([n1,n2,n3,n4,n5,n6,n7,n8])
            nbAdd = interface.Add([id1])
            nHexa += 1
         elif len(idNoeuds) == 6:              # c'est un PENTA6, et il faut orienter proprement l'interface
            listInter = list(interMailleVolume)
            num_locale = [idNoeuds.index(listInter[0]), idNoeuds.index(listInter[1]), idNoeuds.index(listInter[2]), idNoeuds.index(listInter[3])]
            num_locale.sort()
            if num_locale == [0,1,3,4] :
               n1 = idNoeuds[0]
               n2 = idNoeuds[1]
               n3 = idNoeuds[4]
               n4 = idNoeuds[3]
            elif num_locale == [1,2,4,5] :
               n1 = idNoeuds[1]
               n2 = idNoeuds[2]
               n3 = idNoeuds[5]
               n4 = idNoeuds[4]
            elif num_locale == [0,2,3,5] :
               n1 = idNoeuds[0]
               n2 = idNoeuds[3]
               n3 = idNoeuds[5]
               n4 = idNoeuds[2]
            else : raise AssertionError
            n5 = tableauCorrespondance[n1]
            n6 = tableauCorrespondance[n2]
            n7 = tableauCorrespondance[n3]
            n8 = tableauCorrespondance[n4]
            id1= maillage.AddVolume([n1,n2,n3,n4,n5,n6,n7,n8])
            nbAdd = interface.Add([id1])
            nHexa += 1
         else :
            #nbBad = bad_elements.Add([element_volume])
            nBad += 1
      elif len(interMailleVolume) >= 5 :
         #nbBad = bad_elements.Add([element_volume])
         nBad += 1

   
   # -- dernières opérations
   t6 = time.time()
   print "Durée écoulée :", t6-t5, "s"

   maillage.RemoveGroup(gr_noeuds_inter)
   maillage.RemoveGroup(gr_noeuds_volume_1)
   maillage.RemoveGroup(gr_noeuds_volume_2)
   maillage.RemoveGroup(edge_2)
   maillage.RemoveGroup(face_2)
   salome.sg.updateObjBrowser(0)
   
   
   # -- retour
   print "##################################"
   print "Opération terminée"
   if (nPenta + nHexa) >= 1 :
      print "On a créé", nPenta, "PENTA6 et", nHexa, "HEXA8 dans le groupe", interface.GetName()
      if nBad >= 1:
         print "Attention : Certaines mailles semblent avoir plusieurs côtés sur l'interface"
         print "Ce cas de figure n'est pas proprement traité par le script"
         print "Nombre de mailles problématiques :", nBad
      print "Nombre de noeuds au final :",maillage.NbNodes()
   else :
      print "Attention : Aucune maille d'interface n'a été créée"
   
   return

#Set up visual properties:
ipar.setProperty("AP_ACTIVE_VIEW", "VTKViewer_0_0")
ipar.setProperty("AP_WORKSTACK_INFO", "000000010000000000000002010000000100000586000000040000000200000002000000080000001a004f00430043005600690065007700650072005f0030005f00300000000102000000080000001a00560054004b005600690065007700650072005f0030005f00300000000202")
ipar.setProperty("AP_ACTIVE_MODULE", "Mesh")
ipar.setProperty("AP_SAVEPOINT_NAME", "GUI state: 1")
#Set up lists:
# fill list AP_VIEWERS_LIST
ipar.append("AP_VIEWERS_LIST", "OCCViewer_1")
ipar.append("AP_VIEWERS_LIST", "VTKViewer_2")
# fill list OCCViewer_1
ipar.append("OCCViewer_1", "OCC scene:3 - viewer:1")
ipar.append("OCCViewer_1", "scale=1.261625580807e+03*centerX=2.363981411840e-01*centerY=2.736842443562e-01*projX=2.791970372200e-01*projY=-9.043461680412e-01*projZ=3.228110969067e-01*twist=7.591130138238e-02*atX=-2.900755405426e-01*atY=1.018336176872e+00*atZ=-3.588819503784e-01*eyeX=-2.875387841402e-01*eyeY=1.010119377888e+00*eyeZ=-3.559489209845e-01*scaleX=1.000000000000e+00*scaleY=1.000000000000e+00*scaleZ=1.000000000000e+00*isVisible=1*size=1.00*gtIsVisible=0*gtDrawNameX=1*gtDrawNameY=1*gtDrawNameZ=1*gtNameX=X*gtNameY=Y*gtNameZ=Z*gtNameColorRX=255*gtNameColorGX=0*gtNameColorBX=0*gtNameColorRY=0*gtNameColorGY=255*gtNameColorBY=0*gtNameColorRZ=0*gtNameColorGZ=0*gtNameColorBZ=255*gtDrawValuesX=1*gtDrawValuesY=1*gtDrawValuesZ=1*gtNbValuesX=3*gtNbValuesY=3*gtNbValuesZ=3*gtOffsetX=2*gtOffsetY=2*gtOffsetZ=2*gtColorRX=255*gtColorGX=0*gtColorBX=0*gtColorRY=0*gtColorGY=255*gtColorBY=0*gtColorRZ=0*gtColorGZ=0*gtColorBZ=255*gtDrawTickmarksX=1*gtDrawTickmarksY=1*gtDrawTickmarksZ=1*gtTickmarkLengthX=5*gtTickmarkLengthY=5*gtTickmarkLengthZ=5")
# fill list VTKViewer_2
ipar.append("VTKViewer_2", "VTK scene:1 - viewer:1")
ipar.append("VTKViewer_2", """<?xml version="1.0"?>
<ViewState>
    <Position X="6.68172" Y="-3.02653" Z="2.20517"/>
    <FocalPoint X="0.0583055" Y="0.386331" Z="0.0481773"/>
    <ViewUp X="-0.252937" Y="0.116164" Z="0.960484"/>
    <ViewScale Parallel="0.340486" X="1" Y="1" Z="1"/>
    <DisplayCubeAxis Show="0"/>
    <GraduatedAxis Axis="X">
        <Title isVisible="1" Text="X" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Y">
        <Title isVisible="1" Text="Y" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Z">
        <Title isVisible="1" Text="Z" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <Trihedron isShown="1" Size="105"/>
</ViewState>
""")
# fill list AP_MODULES_LIST
ipar.append("AP_MODULES_LIST", "Geometry")
ipar.append("AP_MODULES_LIST", "Mesh")


###
### GEOM component
###

import GEOM
import geompy
import math
import SALOMEDS


geompy.init_geom(theStudy)

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Beton = geompy.MakeBoxDXDYDZ(0.2, 1, 0.2)
Plan_armatures = geompy.MakePlane(O, OZ, 3)
geompy.TranslateDXDYDZ(Plan_armatures, 0, 0, 0.1)
SYSTEME = geompy.MakePartition([Beton], [Plan_armatures], [], [], geompy.ShapeType["SOLID"], 0, [], 0)
listSubShapeIDs = geompy.SubShapeAllIDs(SYSTEME, geompy.ShapeType["SOLID"])
ARMATU = geompy.CreateGroup(SYSTEME, geompy.ShapeType["FACE"])
geompy.UnionIDs(ARMATU, [21])
B_GAUC = geompy.CreateGroup(SYSTEME, geompy.ShapeType["FACE"])
geompy.UnionIDs(B_GAUC, [4, 38])
B_DROI = geompy.CreateGroup(SYSTEME, geompy.ShapeType["FACE"])
geompy.UnionIDs(B_DROI, [58, 34])
B_FOND = geompy.CreateGroup(SYSTEME, geompy.ShapeType["FACE"])
geompy.UnionIDs(B_FOND, [55, 26])
BETON = geompy.CreateGroup(SYSTEME, geompy.ShapeType["SOLID"])
geompy.UnionIDs(BETON, [2, 36])
B_BAS = geompy.CreateGroup(SYSTEME, geompy.ShapeType["SOLID"])
geompy.UnionIDs(B_BAS, [2])
A_GAUC = geompy.CreateGroup(SYSTEME, geompy.ShapeType["EDGE"])
geompy.UnionIDs(A_GAUC, [9])
A_DROI = geompy.CreateGroup(SYSTEME, geompy.ShapeType["EDGE"])
geompy.UnionIDs(A_DROI, [25])
A_FOND = geompy.CreateGroup(SYSTEME, geompy.ShapeType["EDGE"])
geompy.UnionIDs(A_FOND, [23])
BOUT = geompy.CreateGroup(SYSTEME, geompy.ShapeType["EDGE"])
geompy.UnionIDs(BOUT, [19])
B_BOUT = geompy.CreateGroup(SYSTEME, geompy.ShapeType["FACE"])
geompy.UnionIDs(B_BOUT, [14, 45])
SEG_L = geompy.CreateGroup(SYSTEME, geompy.ShapeType["EDGE"])
geompy.UnionIDs(SEG_L, [9, 25, 13, 42, 33, 54])
geomObj_1 = geompy.GetSubShape(SYSTEME, [4])
geomObj_2 = geompy.GetSubShape(SYSTEME, [58])
geomObj_3 = geompy.GetSubShape(SYSTEME, [55])
geomObj_4 = geompy.GetSubShape(SYSTEME, [2])
geomObj_5 = geompy.GetSubShape(SYSTEME, [14])
geomObj_6 = geompy.GetSubShape(SYSTEME, [9])
SEG_V = geompy.CreateGroup(SYSTEME, geompy.ShapeType["EDGE"])
geompy.UnionIDs(SEG_V, [16, 47, 40, 6, 44, 28, 57, 11])
geomObj_7 = geompy.GetSubShape(SYSTEME, [4])
geomObj_8 = geompy.GetSubShape(SYSTEME, [58])
geomObj_9 = geompy.GetSubShape(SYSTEME, [55])
geomObj_10 = geompy.GetSubShape(SYSTEME, [2])
geomObj_11 = geompy.GetSubShape(SYSTEME, [14])
geomObj_12 = geompy.GetSubShape(SYSTEME, [9])
geomObj_13 = geompy.GetSubShape(SYSTEME, [16])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Beton, 'Beton' )
geompy.addToStudy( Plan_armatures, 'Plan_armatures' )
geompy.addToStudy( SYSTEME, 'SYSTEME' )
geompy.addToStudyInFather( SYSTEME, ARMATU, 'ARMATU' )
geompy.addToStudyInFather( SYSTEME, B_GAUC, 'B_GAUC' )
geompy.addToStudyInFather( SYSTEME, B_DROI, 'B_DROI' )
geompy.addToStudyInFather( SYSTEME, B_FOND, 'B_FOND' )
geompy.addToStudyInFather( SYSTEME, BETON, 'BETON' )
geompy.addToStudyInFather( SYSTEME, B_BAS, 'B_BAS' )
geompy.addToStudyInFather( SYSTEME, A_GAUC, 'A_GAUC' )
geompy.addToStudyInFather( SYSTEME, A_DROI, 'A_DROI' )
geompy.addToStudyInFather( SYSTEME, A_FOND, 'A_FOND' )
geompy.addToStudyInFather( SYSTEME, BOUT, 'BOUT' )
geompy.addToStudyInFather( SYSTEME, B_BOUT, 'B_BOUT' )
geompy.addToStudyInFather( SYSTEME, SEG_L, 'SEG_L' )
geompy.addToStudyInFather( SYSTEME, SEG_V, 'SEG_V' )

### Store presentation parameters of displayed objects
import iparameters
ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "GEOM", 1))

#Set up entries:
# set up entry GEOM_5 (Beton) parameters
objId = geompy.getObjectID(Beton)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_6 (Plan_armatures) parameters
objId = geompy.getObjectID(Plan_armatures)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7 (SYSTEME) parameters
objId = geompy.getObjectID(SYSTEME)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:10 (A_DROI) parameters
objId = geompy.getObjectID(A_DROI)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:11 (A_FOND) parameters
objId = geompy.getObjectID(A_FOND)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:12 (BOUT) parameters
objId = geompy.getObjectID(BOUT)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:13 (B_BOUT) parameters
objId = geompy.getObjectID(B_BOUT)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:14 (SEG_L) parameters
objId = geompy.getObjectID(SEG_L)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:15 (SEG_V) parameters
objId = geompy.getObjectID(SEG_V)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:3 (ARMATU) parameters
objId = geompy.getObjectID(ARMATU)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:4 (B_GAUC) parameters
objId = geompy.getObjectID(B_GAUC)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:5 (B_DROI) parameters
objId = geompy.getObjectID(B_DROI)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:6 (B_FOND) parameters
objId = geompy.getObjectID(B_FOND)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:7 (BETON) parameters
objId = geompy.getObjectID(BETON)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:8 (B_BAS) parameters
objId = geompy.getObjectID(B_BAS)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")
# set up entry GEOM_7:9 (A_GAUC) parameters
objId = geompy.getObjectID(A_GAUC)
ipar.setParameter(objId, "OCCViewer_0_Visibility", "On")
ipar.setParameter(objId, "OCCViewer_0_Color", "1:1:0")

###
### SMESH component
###

import smesh, SMESH, SALOMEDS

smesh.SetCurrentStudy(theStudy)
import BLSURFPlugin
import GHS3DPlugin
import StdMeshers
Maillage_libre = smesh.Mesh(SYSTEME)
BLSURF = Maillage_libre.Triangle(algo=smesh.BLSURF)
BLSURF_Parameters_1 = BLSURF.Parameters()
BLSURF_Parameters_1.SetPhySize( 0.05 )
GHS3D_3D = Maillage_libre.Tetrahedron(algo=smesh.GHS3D)
isDone = Maillage_libre.Compute()
BLSURF_Parameters_1.SetSizeMap(BOUT, '0.01' )
BLSURF_Parameters_1.SetSizeMap(BOUT, 'def f(t): return 0.01' )
isDone = Maillage_libre.Compute()
ARMATU_1 = Maillage_libre.GroupOnGeom(ARMATU,'ARMATU',SMESH.FACE)
B_GAUC_1 = Maillage_libre.GroupOnGeom(B_GAUC,'B_GAUC',SMESH.FACE)
B_DROI_1 = Maillage_libre.GroupOnGeom(B_DROI,'B_DROI',SMESH.FACE)
B_FOND_1 = Maillage_libre.GroupOnGeom(B_FOND,'B_FOND',SMESH.FACE)
BETON_1 = Maillage_libre.GroupOnGeom(BETON,'BETON',SMESH.VOLUME)
B_BAS_1 = Maillage_libre.GroupOnGeom(B_BAS,'B_BAS',SMESH.VOLUME)
A_GAUC_1 = Maillage_libre.GroupOnGeom(A_GAUC,'A_GAUC',SMESH.EDGE)
A_DROI_1 = Maillage_libre.GroupOnGeom(A_DROI,'A_DROI',SMESH.EDGE)
A_FOND_1 = Maillage_libre.GroupOnGeom(A_FOND,'A_FOND',SMESH.EDGE)
BOUT_1 = Maillage_libre.GroupOnGeom(BOUT,'BOUT',SMESH.EDGE)
B_BOUT_1 = Maillage_libre.GroupOnGeom(B_BOUT,'B_BOUT',SMESH.FACE)
LIGNES = Maillage_libre.GroupOnGeom(SEG_L,'LIGNES',SMESH.EDGE)
smeshObj_1 = smesh.Mesh(SYSTEME)
Regular_1D = smeshObj_1.Segment()
Local_Length_1 = Regular_1D.LocalLength(0.03)
Local_Length_1.SetPrecision( 1e-07 )
Quadrangle_2D = smeshObj_1.Quadrangle()
isDone = smeshObj_1.Compute()
smeshObj_2 = smesh.CreateHypothesis('QuadrangleParams')
Local_Length_1.SetLength( 0.02 )
Local_Length_1.SetPrecision( 1e-07 )
isDone = smeshObj_1.Compute()
Hexa_3D = smesh.CreateHypothesis('Hexa_3D')
status = smeshObj_1.AddHypothesis(Hexa_3D)
isDone = smeshObj_1.Compute()
Local_Length_1.SetLength( 0.03 )
Local_Length_1.SetPrecision( 1e-07 )
Regular_1D_1 = smeshObj_1.Segment(geom=SEG_L)
Start_and_End_Length = Regular_1D_1.StartEndLength(0.01,0.2,[  ])
isDone = smeshObj_1.Compute()
Start_and_End_Length.SetStartLength( 0.01 )
Start_and_End_Length.SetEndLength( 0.2 )
Start_and_End_Length.SetReversedEdges( [ 9, 25 ] )
isDone = smeshObj_1.Compute()
Start_and_End_Length.SetStartLength( 0.005 )
Start_and_End_Length.SetEndLength( 0.1 )
Start_and_End_Length.SetReversedEdges( [ 9, 25 ] )
isDone = smeshObj_1.Compute()
Regular_1D_2 = smeshObj_1.Segment(geom=SEG_V)
Start_and_End_Length_1 = Regular_1D_2.StartEndLength(0.01,0.05,[  ])
isDone = smeshObj_1.Compute()
Start_and_End_Length_1.SetStartLength( 0.01 )
Start_and_End_Length_1.SetEndLength( 0.05 )
Start_and_End_Length_1.SetReversedEdges( [ 6, 28, 16, 11 ] )
isDone = smeshObj_1.Compute()
Local_Length_1.SetLength( 0.2 )
Local_Length_1.SetPrecision( 1e-07 )
isDone = smeshObj_1.Compute()
Start_and_End_Length_1.SetStartLength( 0.005 )
Start_and_End_Length_1.SetEndLength( 0.03 )
Start_and_End_Length_1.SetReversedEdges( [ 6, 28, 16, 11 ] )
isDone = smeshObj_1.Compute()
[ smeshObj_3, smeshObj_4 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_3, smeshObj_4 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
BLSURF_Parameters_1.SetSizeMap(BOUT, '0.01' )
BLSURF_Parameters_1.SetPhySize( 0.1 )
BLSURF_Parameters_1.SetSizeMap(BOUT, 'def f(t): return 0.01' )
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
isDone = Maillage_libre.Compute()
BLSURF_Parameters_1.SetSizeMap(BOUT, '0.01' )
BLSURF_Parameters_1.SetGradation( 1.2 )
BLSURF_Parameters_1.SetSizeMap(BOUT, 'def f(t): return 0.01' )
isDone = Maillage_libre.Compute()
ARMATU_1.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
smeshObj_5 = smeshObj_1.GroupOnGeom(ARMATU,'ARMATU',SMESH.FACE)
smeshObj_6 = smeshObj_1.GroupOnGeom(B_GAUC,'B_GAUC',SMESH.FACE)
smeshObj_7 = smeshObj_1.GroupOnGeom(B_DROI,'B_DROI',SMESH.FACE)
smeshObj_8 = smeshObj_1.GroupOnGeom(B_FOND,'B_FOND',SMESH.FACE)
smeshObj_9 = smeshObj_1.GroupOnGeom(BETON,'BETON',SMESH.VOLUME)
smeshObj_10 = smeshObj_1.GroupOnGeom(B_BAS,'B_BAS',SMESH.VOLUME)
smeshObj_11 = smeshObj_1.GroupOnGeom(A_GAUC,'A_GAUC',SMESH.EDGE)
smeshObj_12 = smeshObj_1.GroupOnGeom(A_DROI,'A_DROI',SMESH.EDGE)
smeshObj_13 = smeshObj_1.GroupOnGeom(A_FOND,'A_FOND',SMESH.EDGE)
smeshObj_14 = smeshObj_1.GroupOnGeom(BOUT,'BOUT',SMESH.EDGE)
smeshObj_15 = smeshObj_1.GroupOnGeom(B_BOUT,'B_BOUT',SMESH.FACE)
smeshObj_16 = smeshObj_1.GroupOnGeom(SEG_L,'SEG_L',SMESH.EDGE)
smeshObj_17 = smeshObj_1.GroupOnGeom(SEG_V,'SEG_V',SMESH.EDGE)
smeshObj_5.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
Maillage_libre.ConvertToQuadratic( 1 )
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
smeshObj_1.ConvertToQuadratic( 1 )
[ smeshObj_5, smeshObj_6, smeshObj_7, smeshObj_8, smeshObj_9, smeshObj_10, smeshObj_11, smeshObj_12, smeshObj_13, smeshObj_14, smeshObj_15, smeshObj_16, smeshObj_17 ] = smeshObj_1.GetGroups()
[ smeshObj_3, smeshObj_4 ] = smeshObj_1.GetMesh().GetSubMeshes()
[ smeshObj_5, smeshObj_6, smeshObj_7, smeshObj_8, smeshObj_9, smeshObj_10, smeshObj_11, smeshObj_12, smeshObj_13, smeshObj_14, smeshObj_15, smeshObj_16, smeshObj_17 ] = smeshObj_1.GetGroups()
[ smeshObj_3, smeshObj_4 ] = smeshObj_1.GetMesh().GetSubMeshes()
BLSURF_Parameters_1.SetSizeMap(BOUT, '0.02' )
BLSURF_Parameters_1.SetSizeMap(BOUT, 'def f(t): return 0.02' )
isDone = Maillage_libre.Compute()
Maillage_libre.Clear()
isDone = Maillage_libre.Compute()
BLSURF_Parameters_1.SetSizeMap(BOUT, '0.015' )
BLSURF_Parameters_1.SetSizeMap(BOUT, 'def f(t): return 0.015' )
isDone = Maillage_libre.Compute()
Maillage_libre.ConvertToQuadratic( 1 )
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
BLSURF_Parameters_1.SetSizeMap(BOUT, '0.02' )
BLSURF_Parameters_1.SetSizeMap(BOUT, 'def f(t): return 0.02' )
Maillage_libre.Clear()
isDone = Maillage_libre.Compute()
Maillage_libre.ConvertToQuadratic( 1 )
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
[ ARMATU_1, B_GAUC_1, B_DROI_1, B_FOND_1, BETON_1, B_BAS_1, A_GAUC_1, A_DROI_1, A_FOND_1, BOUT_1, B_BOUT_1, LIGNES ] = Maillage_libre.GetGroups()
status = smeshObj_1.RemoveHypothesis(Regular_1D,SEG_V)
status = smeshObj_1.RemoveHypothesis(Start_and_End_Length_1,SEG_V)
status = smeshObj_1.RemoveHypothesis(Regular_1D,SEG_L)
status = smeshObj_1.RemoveHypothesis(Start_and_End_Length,SEG_L)
smeshObj_1.RemoveGroup( smeshObj_10 )
smeshObj_1.RemoveGroup( smeshObj_9 )
smeshObj_1.RemoveGroup( smeshObj_15 )
smeshObj_1.RemoveGroup( smeshObj_8 )
smeshObj_1.RemoveGroup( smeshObj_7 )
smeshObj_1.RemoveGroup( smeshObj_6 )
smeshObj_1.RemoveGroup( smeshObj_5 )
smeshObj_1.RemoveGroup( smeshObj_17 )
smeshObj_1.RemoveGroup( smeshObj_16 )
smeshObj_1.RemoveGroup( smeshObj_14 )
smeshObj_1.RemoveGroup( smeshObj_13 )
smeshObj_1.RemoveGroup( smeshObj_12 )
smeshObj_1.RemoveGroup( smeshObj_11 )
smeshObj_1.GetMesh().RemoveSubMesh( smeshObj_4 )
smeshObj_1.GetMesh().RemoveSubMesh( smeshObj_3 )
status = smeshObj_1.RemoveHypothesis(Hexa_3D)
status = smeshObj_1.RemoveHypothesis(Quadrangle_2D)
status = smeshObj_1.RemoveHypothesis(Regular_1D)
status = smeshObj_1.RemoveHypothesis(Local_Length_1)
Maillage_libre.ConvertFromQuadratic()
smeshObj_3 = Regular_1D_1.GetSubMesh()
smeshObj_4 = Regular_1D_2.GetSubMesh()

## some objects were removed
aStudyBuilder = theStudy.NewBuilder()
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_1.GetMesh()))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_2))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_3))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_4))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_5))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_6))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_7))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_8))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_9))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_10))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_11))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_12))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_13))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_14))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_15))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_16))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_17))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
## set object names
smesh.SetName(Maillage_libre.GetMesh(), 'Maillage_libre')
smesh.SetName(BLSURF.GetAlgorithm(), 'BLSURF')
smesh.SetName(BLSURF_Parameters_1, 'BLSURF Parameters_1')
smesh.SetName(GHS3D_3D.GetAlgorithm(), 'GHS3D_3D')
smesh.SetName(ARMATU_1, 'ARMATU')
smesh.SetName(B_GAUC_1, 'B_GAUC')
smesh.SetName(B_DROI_1, 'B_DROI')
smesh.SetName(B_FOND_1, 'B_FOND')
smesh.SetName(BETON_1, 'BETON')
smesh.SetName(B_BAS_1, 'B_BAS')
smesh.SetName(A_GAUC_1, 'A_GAUC')
smesh.SetName(A_DROI_1, 'A_DROI')
smesh.SetName(A_FOND_1, 'A_FOND')
smesh.SetName(BOUT_1, 'BOUT')
smesh.SetName(B_BOUT_1, 'B_BOUT')
smesh.SetName(LIGNES, 'LIGNES')
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Local_Length_1, 'Local Length_1')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Hexa_3D, 'Hexa_3D')
smesh.SetName(Start_and_End_Length, 'Start and End Length_1')
smesh.SetName(Start_and_End_Length_1, 'Start and End Length_2')

### Store presentation parameters of displayed objects
import iparameters
ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "SMESH", 1))

#Set up entries:
# set up entry SMESH_3 (Maillage_libre) parameters
ipar.setParameter("SMESH_3", "VTKViewer_0_Visibility", "On")
ipar.setParameter("SMESH_3", "VTKViewer_0_Representation", "2")
ipar.setParameter("SMESH_3", "VTKViewer_0_IsShrunk", "0")
ipar.setParameter("SMESH_3", "VTKViewer_0_Entities", "e:1:f:1:v:1")
ipar.setParameter("SMESH_3", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:-100:edge:0:0.666667:1:node:1:0:0:outline:0:0.27451:0")
ipar.setParameter("SMESH_3", "VTKViewer_0_Sizes", "line:1:shrink:0.75")
ipar.setParameter("SMESH_3", "VTKViewer_0_PointMarker", "std:1:9")
ipar.setParameter("SMESH_3", "VTKViewer_0_Opacity", "1")
ipar.setParameter("SMESH_3", "VTKViewer_0_ClippingPlane", "Off")

# Création des éléments d'interface

creation_elements_interface_3D(Maillage_libre, "B_BAS", "ARMATU", "CZM_BA")

Maillage_libre.ConvertToQuadratic( 1 )


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser(1)
  iparameters.getSession().restoreVisualState(1)
