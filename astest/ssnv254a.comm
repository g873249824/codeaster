# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------


# CAS_TEST__: GTN002a: TRACTION UNIAXIAL
# ----------------------------------------------------------------------
# GEOMETRIE           : BARREAU
# MODELISATION        : 3D_GRAD_VARI
# MAILLAGE            : MED (ISSU DE SALOME)
# CL ET CHARGEMENT    : TRACTION UNIAXIAL
# LOI D'ENDOMMAGEMENT : GTN NON LOCAL A 3 CHAMPS
# ----------------------------------------------------------------------
# i = [|0,20|], j = [|0,9|]
# GROUPES DE NOEUDS: F_Couche_i, F_Element_j, Fixe, V_Bar3D
# GROUPES DE MAILLES: V_Element_j, V_Bar3D
# ----------------------------------------------------------------------

DEBUT(PAR_LOT='NON',CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'))

import math
import numpy as np

# -------------------------------------------------------------------------
# PARAMETRES
# -------------------------------------------------------------------------
# NOMBRE DU PAS DE CALCUL
nb_pas = 1000

# NOMBRE DU PAS D'ARCHIVAGE 
nb_arch = 100

# INSTANT DE FIN <= DERNIER INSTANT DE CALCUL
inst_fin = 0.800 # max=0.871


# DERNIER INSTANT
inst_total = 1.00

# NOMBRE DE COUCHES
nbc = 10

# CAS DPLAN-LIKE
alpha = 0
beta = 5

# LONGEUR DE CHAQUE BRIQUE
lx = 1
ly = 1
lz = nbc

 
# LISTE
ACIER = nbc*[None] 

# -------------------------------------------------------------------------
# OBJET ASTER
# -------------------------------------------------------------------------
# LECTURE DU MAILLAGE
MAIL=LIRE_MAILLAGE(FORMAT='MED', UNITE=20)

# AFFECTATION DU MODELE
MODE=AFFE_MODELE(MAILLAGE = MAIL,
           AFFE     = _F(TOUT         = 'OUI',
                   PHENOMENE    = 'MECANIQUE',
                          MODELISATION = '3D_GRAD_VARI',
                               ),
                 )                   

# MODELISATION DU MATERIAU 20 MnMoNi 5-5  (MAQUETTE)  
f_0 = 2e-4; 
for i in range(nbc):
    f0 = f_0 + i*f_0
    ACIER[i] = DEFI_MATERIAU(ELAS       = _F(E=190000, NU=0.3),
                       ECRO_NL    = _F(R0 = 488.361123569,
                             RH = 0,
                             R1 = 57.1333673502,
                             GAMMA_1 = 8613.0,
                             R2 = 238.731127339,
                             GAMMA_2 = 10.386585592,
                             ),
                               GTN_ASTER = _F(Q1 = 1.5,
                                              Q2 = 1.07,
                                             PORO_INI = f0,
                                              PORO_COA = 0.05, 
                                             COAL_ACC = 3,
                                             NUCL_POR = 0.0,
                                             NUCL_PLA = 0.6,
                                             NUCL_DEV = 0.01,
                             ), 
                     NON_LOCAL = _F(C_GRAD_VARI = 1,
                            PENA_LAGR   =5000,),  
                               )
 

#-----------------------------------------------------------
# AFFECTATION DES MATERIAUX 
#-----------------------------------------------------------

affe_mater = []
for i in range (nbc):
  mon_dico = {}
  mon_dico['GROUP_MA'] = ['V_Element_'+str(i)]
  mon_dico['MATER'] = [ACIER[i]]
  affe_mater.append(mon_dico)


MATE = AFFE_MATERIAU (MAILLAGE = MAIL,
                        AFFE = affe_mater)


#-----------------------------------------------------------
# CONDITIONS AUX LIMITES ET CHARGEMENT 
#-------------------------------------------------------------
#Liste_Couche = ['F_Couche_' + str(i) for i in range(0,2*nbc+1)] 
Liaison_uni = []
for i in range (2*nbc+1):
  mon_dico = {}
  mon_dico['GROUP_NO'] = ['F_Couche_'+str(i)]
  mon_dico['DDL'] = ['DZ']
  Liaison_uni.append(mon_dico)


CL = AFFE_CHAR_MECA(MODELE    = MODE,
                    DDL_IMPO = _F(GROUP_NO = 'Fixe',  DZ = 0), # eviter le mouvement rigid
                    LIAISON_UNIF = Liaison_uni,)
    

DEFX = DEFI_FONCTION(NOM_PARA = 'X',
                     VALE = (0,0,lx,beta),)

DEFY = DEFI_FONCTION(NOM_PARA = 'Y',
                     VALE = (0,0,ly,beta*alpha),)

CHARGE = AFFE_CHAR_MECA_F(MODELE    = MODE,
                          DDL_IMPO = _F(GROUP_NO = 'V_Bar3D',  DX = DEFX, DY = DEFY),)


# LISTE DES INSTANTS DE CALCUL
REEL_CAL = DEFI_LIST_REEL(DEBUT      = 0,
                          INTERVALLE = _F(JUSQU_A=inst_total, NOMBRE=nb_pas),)
                          
INST_CAL = DEFI_LIST_INST(DEFI_LIST = _F(LIST_INST=REEL_CAL),METHODE='AUTO')

REEL_ARC = DEFI_LIST_REEL(DEBUT      = 0,
                          INTERVALLE = _F(JUSQU_A=inst_total, NOMBRE=nb_arch),)

FONC = DEFI_FONCTION(NOM_PARA = 'INST',
                     VALE     = (0.0, 0.0 ,inst_total, 1.0),
                     PROL_DROITE = 'LINEAIRE',)


# CALCUL NON LINEAIRE

RESU = STAT_NON_LINE (MODELE       = MODE,
                CHAM_MATER   = MATE ,
                EXCIT        = (_F(CHARGE = CL),
                                _F(CHARGE = CHARGE, FONC_MULT=FONC),),
                    COMPORTEMENT = _F(TOUT = 'OUI', RELATION='GTN_ASTER', DEFORMATION='GDEF_LOG'),
                      INCREMENT    = _F(LIST_INST = INST_CAL, INST_FIN=inst_fin),
                      CONVERGENCE  = _F(ITER_GLOB_MAXI= 20,
                    RESI_GLOB_MAXI=1.E-3,
                    ),
                      NEWTON       = _F(MATRICE='TANGENTE',REAC_ITER=1),
                      SOLVEUR      = _F(METHODE='MUMPS', PCENT_PIVOT=20, MATR_DISTRIBUEE='OUI',),
                      ARCHIVAGE    = _F(LIST_INST=REEL_ARC),
              ) 

# COORDONNEES DES POINTS DE GAUSS

COOR = CALC_CHAM_ELEM(MODELE = MODE,
                OPTION = 'COOR_ELGA',)

COORX = COOR.EXTR_COMP('X',['V_Bar3D']).valeurs
COORY = COOR.EXTR_COMP('Y',['V_Bar3D']).valeurs
COORZ = COOR.EXTR_COMP('Z',['V_Bar3D']).valeurs

    # PREMIER POINT A TESTER: PG LE PLUS ELOIGNE DE L'ORIGINE j
    # DEUXIEME POINT A TESTER: PG LE PLUS PROCHE DE L'ORIGINE k
for i in range (len(COORX)): 
    if(COORX[i]>0.5 and COORY[i]>0.5 and COORZ[i]>9.5):
        j = i
    if(COORX[i]<0.5 and COORY[i]<0.5 and COORZ[i]<0.5):
        k = i
    

#--------------------------------------------------------------------------------------------------------------- 
#------------------------------------------ TEST SUR SIXX-------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------- 
# ATTENTION: LA DISTRIBUTION DE SIXX N'EST PAS DU TOUT HOMOGENE!!! 

# INST1 = 0.50     (INST_TOTAL = 1.00)
SIGMA1 = CREA_CHAMP(TYPE_CHAM = 'ELGA_SIEF_R',
                 OPERATION = 'EXTR',
                   RESULTAT  = RESU,
                   NOM_CHAM  = 'SIEF_ELGA',
                   INST      = 0.50,
                   )

SIXX1 = SIGMA1.EXTR_COMP('SIXX',['V_Bar3D']).valeurs

SXX11 = CREA_TABLE(LISTE = (_F(PARA='SIXX',LISTE_R = SIXX1[j])))
SXX12 = CREA_TABLE(LISTE = (_F(PARA='SIXX',LISTE_R = SIXX1[k])))

TEST_TABLE(TABLE = SXX11,
       NOM_PARA = 'SIXX',
           TYPE_TEST = 'MAX',
           VALE_CALC= 731.186529182,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 7.310701e+02,
       PRECISION = 0.01,
           )
TEST_TABLE(TABLE = SXX12,
       NOM_PARA = 'SIXX',
           TYPE_TEST = 'MAX',
           VALE_CALC= 888.876496674,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 8.890125e+02,
       PRECISION = 0.01,
           )

# INST2 = 0.80     (INST_TOTAL = 1.00)
SIGMA2 = CREA_CHAMP(TYPE_CHAM = 'ELGA_SIEF_R',
                 OPERATION = 'EXTR',
                   RESULTAT  = RESU,
                   NOM_CHAM  = 'SIEF_ELGA',
                   INST      = 0.80,
                   )

SIXX2 = SIGMA2.EXTR_COMP('SIXX',['V_Bar3D']).valeurs

SXX21 = CREA_TABLE(LISTE = (_F(PARA='SIXX',LISTE_R = SIXX2[j])))
SXX22 = CREA_TABLE(LISTE = (_F(PARA='SIXX',LISTE_R = SIXX2[k])))

TEST_TABLE(TABLE = SXX21,
       NOM_PARA = 'SIXX',
           TYPE_TEST = 'MAX',
           VALE_CALC= 135.811791034,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 1.357807e+02,
       PRECISION = 0.01,
           )
TEST_TABLE(TABLE = SXX22,
       NOM_PARA = 'SIXX',
           TYPE_TEST = 'MAX',
           VALE_CALC= 860.730190549,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 8.609395e+02,
       PRECISION = 0.01,
           )


#--------------------------------------------------------------------------------------------------------------- 
#------------------------------------- TEST SUR VARIABLE INTERNE : k et f---------------------------------------
#--------------------------------------------------------------------------------------------------------------- 

###
### INST1 = 0.50     (INST_TOTAL = 1.00)
###

VI1 = CREA_CHAMP(TYPE_CHAM = 'ELGA_VARI_R',
               OPERATION = 'EXTR',
                 RESULTAT  = RESU,
                 NOM_CHAM  = 'VARI_ELGA',
                 INST      = 0.50,
                 )


#   VARIABLE D'ECROUISSAGE
V11 = VI1.EXTR_COMP('V1',['V_Bar3D']).valeurs
V111 = CREA_TABLE(LISTE = (_F(PARA='V1',LISTE_R = V11[j])))
V112 = CREA_TABLE(LISTE = (_F(PARA='V1',LISTE_R = V11[k])))

TEST_TABLE(TABLE = V111,
       NOM_PARA = 'V1',
           TYPE_TEST = 'MAX',
           VALE_CALC= 1.40893270529,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 1.407778e+00,
       PRECISION = 0.01,
           )
TEST_TABLE(TABLE = V112,
       NOM_PARA = 'V1',
           TYPE_TEST = 'MAX',
           VALE_CALC= 1.4416470896,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE=  1.437888e+00,
       PRECISION = 0.01,
           )

#  POROSITE
V12 = VI1.EXTR_COMP('V2',['V_Bar3D']).valeurs
V121 = CREA_TABLE(LISTE = (_F(PARA='V2',LISTE_R = V12[j])))
V122 = CREA_TABLE(LISTE = (_F(PARA='V2',LISTE_R = V12[k])))

TEST_TABLE(TABLE = V121,
       NOM_PARA = 'V2',
           TYPE_TEST = 'MAX',
           VALE_CALC= 0.0660171383687,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE=   6.601665e-02,
       PRECISION = 0.01,
           )
TEST_TABLE(TABLE = V122,
       NOM_PARA = 'V2',
           TYPE_TEST = 'MAX',
           VALE_CALC= 0.00770359174604,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE=  7.703500e-03,
       PRECISION = 0.01,
           )

###
### INST1 = 0.80     (INST_TOTAL = 1.00)
###

VI2 = CREA_CHAMP(TYPE_CHAM = 'ELGA_VARI_R',
               OPERATION = 'EXTR',
                 RESULTAT  = RESU,
                 NOM_CHAM  = 'VARI_ELGA',
                 INST      = 0.80,
                 )
    
#   VARIABLE D'ECROUISSAGE
V21 = VI2.EXTR_COMP('V1',['V_Bar3D']).valeurs
V211 = CREA_TABLE(LISTE = (_F(PARA='V1',LISTE_R = V21[j])))
V212 = CREA_TABLE(LISTE = (_F(PARA='V1',LISTE_R = V21[k])))

TEST_TABLE(TABLE = V211,
       NOM_PARA = 'V1',
           TYPE_TEST = 'MAX',
           VALE_CALC= 1.64494523591,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 1.643740e+00,
       PRECISION = 0.01,
           )
TEST_TABLE(TABLE = V212,
       NOM_PARA = 'V1',
           TYPE_TEST = 'MAX',
           VALE_CALC= 1.84823287175,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 1.843401e+00,
       PRECISION = 0.01,
           )

#  POROSITE
V22 = VI2.EXTR_COMP('V2',['V_Bar3D']).valeurs
V221 = CREA_TABLE(LISTE = (_F(PARA='V2',LISTE_R = V22[j])))
V222 = CREA_TABLE(LISTE = (_F(PARA='V2',LISTE_R = V22[k])))

TEST_TABLE(TABLE = V221,
       NOM_PARA = 'V2',
           TYPE_TEST = 'MAX',
           VALE_CALC= 0.215045413956,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 2.150436e-01,
       PRECISION = 0.01,
           )
TEST_TABLE(TABLE = V222,
       NOM_PARA = 'V2',
           TYPE_TEST = 'MAX',
           VALE_CALC= 0.0210435638384,
           REFERENCE= 'SOURCE_EXTERNE',
           VALE_REFE= 2.104307e-02,
       PRECISION = 0.01,
           )
FIN()
            