# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#       VALIDATION DU CALCUL MODAL AVEC X-FEM


# ON CALCULE ICI LA SOLUTION DE REFERENCE POUR SDLS120B, LA VALIDATION
# DU CALCUL MODAL AVEC X-FEM

DEBUT(CODE=_F(
              NIV_PUB_WEB='INTERNET',
              VISU_EFICAS='NON',),
      DEBUG=_F(SDVERI='OUI',),);

#----------------------------------------------
#                MAILLAGE : hexa_5_30_50.mgib
#----------------------------------------------

MAILLAG1=LIRE_MAILLAGE(INFO=1,FORMAT='MED',);

MAILLAG1=DEFI_GROUP(reuse =MAILLAG1,
                    MAILLAGE=MAILLAG1,
                    CREA_GROUP_NO=_F(GROUP_MA='SURF',),);

MAILLAG1=DEFI_GROUP(reuse =MAILLAG1,
                    MAILLAGE=MAILLAG1,
                    CREA_GROUP_MA=_F(NOM='BAS',
                                     UNION=('BAS_G','BAS_D'),),);
MAILLAG1=DEFI_GROUP(reuse =MAILLAG1,
                    MAILLAGE=MAILLAG1,
                    CREA_GROUP_MA=_F(NOM='HAUT',
                                     UNION=('HAUT_G','HAUT_D'),),);

MAILLAG1=DEFI_GROUP(reuse =MAILLAG1,
                    MAILLAGE=MAILLAG1,
                    CREA_GROUP_NO=_F(GROUP_MA='HAUT',),);

MAILLAG1=DEFI_GROUP(reuse =MAILLAG1,
                    MAILLAGE=MAILLAG1,
                    CREA_GROUP_NO=_F(GROUP_MA='BAS',),);



#----------------------------------------------
#                   MODELE ET FISSURE
#----------------------------------------------

MODELEIN=AFFE_MODELE(MAILLAGE=MAILLAG1,
                     AFFE=(_F(GROUP_MA='SURF',
                              PHENOMENE='MECANIQUE',
                              MODELISATION='D_PLAN',),
                           _F(GROUP_MA=('BAS','HAUT',),
                              PHENOMENE='MECANIQUE',
                              MODELISATION='D_PLAN',),
                              ),
                              );

MAILLAG1=MODI_MAILLAGE(reuse =MAILLAG1,
                       MAILLAGE=MAILLAG1,
                       ORIE_PEAU_2D=_F(GROUP_MA=('BAS','HAUT',),),);




#----------------------------------------------
#                   MATERIAU
#----------------------------------------------
E = 205000000000.0;

nu = 0.0;

rho = 7800.0;


ACIER=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=nu,
                            RHO=rho,),);

CHAMPMA1=AFFE_MATERIAU(MAILLAGE=MAILLAG1,
                       MODELE=MODELEIN,
                       AFFE=_F(TOUT='OUI',
                               MATER=ACIER,),);

#----------------------------------------------
#                   CHARGEMENTS
#----------------------------------------------
PRES = -10000000.0;




CH1=AFFE_CHAR_MECA(MODELE=MODELEIN,
                   DDL_IMPO=(_F(GROUP_NO='BAS',
                                DX=0.0,
                                DY=0.0,
                                ),
                        ),
                   );

CH2=AFFE_CHAR_MECA(MODELE=MODELEIN,
                   PRES_REP=_F(GROUP_MA=('HAUT',),
                               PRES=PRES,),);



#----------------------------------------------
#           CALCUL DES MATRICES ELEMENTAIRES
#----------------------------------------------

MELR=CALC_MATR_ELEM(OPTION='RIGI_MECA',
                    MODELE=MODELEIN,
                    CHAM_MATER=CHAMPMA1,
                    CHARGE=(CH1,CH2),);

MELM=CALC_MATR_ELEM(OPTION='MASS_MECA',
                    MODELE=MODELEIN,
                    CHAM_MATER=CHAMPMA1,
                    CHARGE=(CH1,CH2),);

#----------------------------------------------
#           ASSEMBLAGE DES MATRICES
#----------------------------------------------

NUM=NUME_DDL(MATR_RIGI=MELR,
             );

MATR=ASSE_MATRICE(MATR_ELEM=MELR,
                  NUME_DDL=NUM,);

MATM=ASSE_MATRICE(MATR_ELEM=MELM,
                  NUME_DDL=NUM,);

#---------------------------------------------
#          RESOLUTION DU PROBLEME STATIQUE
#---------------------------------------------

L_INS1=DEFI_LIST_REEL(DEBUT=0.0,INTERVALLE=_F(JUSQU_A=1.0,NOMBRE=1,),);

UTOT1=STAT_NON_LINE(MODELE=MODELEIN,
                   CHAM_MATER=CHAMPMA1,
                   EXCIT=(
                          _F(CHARGE=CH1,),
                          _F(CHARGE=CH2,),),
                   COMPORTEMENT=_F(RELATION='ELAS',
                                GROUP_MA='SURF',),
                   INCREMENT=_F(LIST_INST=L_INS1,
                                INST_FIN=1.0,),
                   NEWTON=_F(REAC_ITER=0,),
                   ARCHIVAGE=_F(CHAM_EXCLU='VARI_ELGA',),
                   INFO=1,);

# CALCUL DES CONTRAINTES ASSOCIEES

CONTR=CREA_CHAMP(TYPE_CHAM='ELGA_SIEF_R',
                 OPERATION='EXTR',
                 RESULTAT=UTOT1,
                 NOM_CHAM='SIEF_ELGA',
                 NUME_ORDRE=1,);

MELRG=CALC_MATR_ELEM(OPTION='RIGI_GEOM',
                     MODELE=MODELEIN,
                     SIEF_ELGA=CONTR,
                     );

MATRG=ASSE_MATRICE(MATR_ELEM=MELRG,
                   NUME_DDL=NUM,

                  );

MATRC=COMB_MATR_ASSE(COMB_R=(_F(MATR_ASSE=MATR,
                                COEF_R=1.0,),
                             _F(MATR_ASSE=MATRG,
                                COEF_R=1.0,),),);


#----------------------------------------------
#                   CALCUL MODAL
#----------------------------------------------


MODES=CALC_MODES(MATR_RIGI=MATRC,
                 OPTION='PLUS_PETITE',
                 CALC_FREQ=_F(NMAX_FREQ=8,
                              ),
                 MATR_MASS=MATM,
                 SOLVEUR_MODAL=_F(METHODE='SORENSEN',
                                  ),
                 )




TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  PARA='FREQ',
                  RESULTAT=MODES,
                  VALE_CALC=7.0058116959017003,

                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=2,
                  PARA='FREQ',
                  RESULTAT=MODES,
                  VALE_CALC=24.895488443236999,

                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=3,
                  PARA='FREQ',
                  RESULTAT=MODES,
                  VALE_CALC=41.820657587951999,

                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=4,
                  PARA='FREQ',
                  RESULTAT=MODES,
                  VALE_CALC=84.905811929687005,

                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=5,
                  PARA='FREQ',
                  RESULTAT=MODES,
                  VALE_CALC=106.17907847151,

                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=6,
                  PARA='FREQ',
                  RESULTAT=MODES,
                  VALE_CALC=134.29825130834999,

                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=7,
                  PARA='FREQ',
                  RESULTAT=MODES,
                  VALE_CALC=166.19857569601001,

                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=8,
                  PARA='FREQ',
                  RESULTAT=MODES,
                  VALE_CALC=181.04859855417001,

                  CRITERE='RELATIF',
                  ),
          )

IMPR_RESU(FORMAT='GMSH',
          RESU=_F(RESULTAT=MODES,
                  TYPE_CHAM='VECT_2D',
                  NOM_CMP=('DX','DY'),),);


FIN();
