# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2019 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',) );
#
mail0 = LIRE_MAILLAGE(FORMAT='MED', VERI_MAIL=_F(VERIF='OUI'),);
#
# Modification du maillage pour creer des mailles a un noeud pour
# placer les impedances sous la fondation du barrages.
#

mail=CREA_MAILLAGE(MAILLAGE=mail0,
                      CREA_POI1 =(
                                  _F(NOM_GROUP_MA = 'PBASE',
                                    NOEUD = 'N316'),
                                  _F(NOM_GROUP_MA = 'PFONDAT',
                                    GROUP_MA = 'SURFBAS2'),
                                  _F(NOM_GROUP_MA = 'PFLUSTR',
                                    GROUP_MA = 'IFLUSTR2'),
                                 ),
                     );
                   
mail=DEFI_GROUP(reuse =mail,
                MAILLAGE=mail,
                CREA_GROUP_NO=_F(NOM='ISOLSTR',
                                 GROUP_MA=('SURFBAS2'),
                                ),
               );
              
#
# Orientation des elements d interface.
#
mail=MODI_MAILLAGE( reuse=mail,
                    MAILLAGE=mail,
                    ORIE_NORM_COQUE=(_F( VECT_NORM = (0., 0., 1.,),
                                         NOEUD = 'N963',
                                         GROUP_MA = 'IFLUSOL2'),
                                     _F( VECT_NORM = (1., 0., 0.,),
                                         NOEUD = 'N221',
                                         GROUP_MA = 'IFLUSTR2'),
                                     _F( VECT_NORM = (0., 0., -1.,),
                                         NOEUD = 'N316',
                                         GROUP_MA = 'SURFBAS2'),
                                     _F( VECT_NORM = (0., 0., 1.,),
                                         NOEUD = 'N1043',
                                         GROUP_MA = 'SLIBREM2'),
                                    ),
                   );
modele=AFFE_MODELE( MAILLAGE= mail,
                      AFFE=( _F(GROUP_MA=( 'STRVOU2' ),
                                PHENOMENE= 'MECANIQUE',
                                MODELISATION= '3D'),
                             _F(GROUP_MA = 'PFONDAT',
                                PHENOMENE = 'MECANIQUE',
                                MODELISATION = 'DIS_T'),
                             _F(GROUP_MA = 'PFLUSTR',
                                PHENOMENE = 'MECANIQUE',
                                MODELISATION = 'DIS_T'),
                           ),
                      );
#
mat1= DEFI_MATERIAU( ELAS=_F( E= 3.6E+10,
                              RHO= 2400.,
                              NU= 0.2,
                            ),
                       ) ;
#
champmat = AFFE_MATERIAU( MAILLAGE= mail,
                            AFFE=_F( GROUP_MA= ('STRVOU2'),
                                   MATER= mat1 )
                           );
                           

fonz = DEFI_FONCTION (
NOM_PARA = 'Z',
PROL_GAUCHE = 'CONSTANT',
PROL_DROITE = 'CONSTANT',
INTERPOL = 'LIN',
VALE = (-72.,63000.,0., 0.,) );

cara_ele=AFFE_CARA_ELEM(MODELE=modele,
                        #INFO=2,
                        DISCRET=(_F(GROUP_MA='PFONDAT',
                                    REPERE='GLOBAL',
                                    CARA='M_T_D_N',
                                    VALE=(0.,)),
                                 _F(GROUP_MA='PFLUSTR',
                                    REPERE='GLOBAL',
                                    CARA='A_T_D_N',
                                    VALE=(0.,0.,0.,)),
                                 ),
                     RIGI_PARASOL=_F(
                      GROUP_MA = 'SURFBAS2', 
                      GROUP_MA_POI1 = 'PFONDAT',
                      COEF_GROUP = 1., NOEUD_CENTRE = 'N316',
                      CARA = ( 'K_T_D_N' ),
                      VALE = (  1.0E+20, 1.0E+20, 1.0E+20,),
                                    ),
                     MASS_AJOU=_F(
                                       FONC_GROUP=fonz,
                                       GROUP_MA='IFLUSTR2',
                                       GROUP_MA_POI1='PFLUSTR',
                                 ),     
                        );
                     
cond_lim = AFFE_CHAR_MECA( MODELE= modele,
                           DDL_IMPO=_F(
                                          GROUP_NO=('ISOLSTR',),
                                          DX= 0.,
                                          DY= 0.,
                                          DZ= 0.,
                                      ),
                          );                        

#
#========================================
# ETAPE 1: Calul des impedances de sols
# --------
#========================================
#

#
#
# Calcul des matrices et vecteurs elementaires
#----------------------------------------------
rigi_ele = CALC_MATR_ELEM( MODELE= modele ,
                           OPTION= 'RIGI_MECA',
                           CHAM_MATER= champmat,
                           #CHARGE= cond_lim,
                           CARA_ELEM=cara_ele,
                         );
#
mass_ele = CALC_MATR_ELEM( MODELE= modele ,
                           OPTION= 'MASS_MECA',
                           CHAM_MATER= champmat,
                           #CHARGE= cond_lim,
                           CARA_ELEM=cara_ele,
                         );
#
nume_ddl = NUME_DDL( MATR_RIGI= rigi_ele );
#
# Assemblage des matrices et vecteurs
#-------------------------------------
#
MATRIGI= ASSE_MATRICE( MATR_ELEM= rigi_ele, NUME_DDL= nume_ddl );
MATMASS= ASSE_MATRICE( MATR_ELEM= mass_ele, NUME_DDL= nume_ddl );
#
# Calcul de la masse du barrage voute
#-------------------------------------
#
mass_bar=POST_ELEM( MODELE= modele ,
                    INFO= 1,
                    CHAM_MATER= champmat,
                    CARA_ELEM=cara_ele,
                    MASS_INER=_F(TOUT='OUI'),
                   );
IMPR_TABLE(TABLE=mass_bar);
#
# calcul des modes
#------------------
#
#
#
mode_rig =CALC_MODES( MATR_RIGI= MATRIGI,
                      MATR_MASS= MATMASS,
                      OPTION   ='BANDE',
                      CALC_FREQ=_F( FREQ=(0.1, 10.) ),
                      VERI_MODE=_F( STOP_ERREUR='NON' ),
                      NORM_MODE=_F(),
                      FILTRE_MODE=_F( SEUIL=0.0003 ),
                      IMPRESSION=_F()
                     );
                       

TEST_RESU(RESU=(
    _F(   RESULTAT = mode_rig,        PARA = 'FREQ',
            CRITERE = 'RELATIF',
            NUME_ORDRE = 1,         VALE_CALC = 3.54590291033,
             ),
    _F(   RESULTAT = mode_rig,        PARA = 'FREQ',
            CRITERE = 'RELATIF',
            NUME_ORDRE = 2,         VALE_CALC = 3.6501523882,
             ),
    _F(   RESULTAT = mode_rig,        PARA = 'FREQ',
            CRITERE = 'RELATIF',
            NUME_ORDRE = 3,         VALE_CALC = 4.94233567539,
             ),
    _F(   RESULTAT = mode_rig,        PARA = 'FREQ',
            CRITERE = 'RELATIF',
            NUME_ORDRE = 4,         VALE_CALC = 6.04019437213,
             ),
                         ),
               );

# Test for computation without loads in statics (#28905)

stat = MECA_STATIQUE(MODELE     = modele,
                     CHAM_MATER = champmat,
                     CARA_ELEM  = cara_ele)



FIN( );
