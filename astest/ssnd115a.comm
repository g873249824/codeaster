# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),PAR_LOT='OUI');

pilote=''
#pilote='INTERACTIF'

ACIER=[None]*2
# parametres du materiau (304l)

YOUNG=184000.
POISSON=0.33

# valeurs recalees sur FRI15 a 0.1Hz
delta1__=0.00306184445749
delta2__=0.0154637840366

ACIER[0]=DEFI_MATERIAU(ELAS=_F(E=YOUNG,NU=POISSON),
                  CIN2_CHAB=_F(R_0=97.83,

                               R_I=97.830+270.5,
                               B=51.3,
                               C1_I=182392,
                               C2_I=16678.,
                               G1_0=3079.,
                               G2_0=178.7,
                               A_I=0.5818,
                               ),

                  CIN2_NRAD=_F(
                               DELTA1=delta1__,
                               DELTA2=delta2__,
                               ),
                   MEMO_ECRO=_F(
                                  MU = 10.,
                                  Q_M = 270.5,
                                  Q_0 = -86.2,
                                  ETA = 0.135,
                                ),
                   LEMAITRE=_F(N=6.84,
                               UN_SUR_K=1/156.9,
                               UN_SUR_M = 0.),

                               );


ncal=1
typcal= [None]*ncal
typcal[0]=['VISC_MEMO_NRAD','BRENT',0]
#typcal[1]=['VISC_CIN2_NRAD','BRENT',0]
#typcal[2]=['VMIS_MEMO_NRAD','BRENT',0]

delta= [None]*2
delta[0]=[delta1__,delta2__]
delta[1]=[1,1]

legende= [None]*ncal
for index,ical in enumerate(typcal) :
   legende[index]=ical[0]+'_'+ical[1]+'_delta1='+str( int(delta[ical[2]][0]*10000.)/10000.)+'_delta2='+str( int(delta[ical[2]][0]*10000.)/10000.)
print 'legende=',legende


# definition du chargement 3D
INCLUDE(UNITE=93)

#Discretisation du calcul
Ncal = ncal

RESU=[None]*Ncal

# liste de calcul, doit etre divisible par 4 (demi-cycles)
#npas_par_cycle1=360
npas_par_cycle1=48

temps_ca=DEFI_LIST_REEL(DEBUT=0,INTERVALLE=_F(JUSQU_A=tmax,NOMBRE=npas_par_cycle1*nbcycle1*nbcycle2),);

deflist=DEFI_LIST_INST(INFO=1,
                         DEFI_LIST=_F(LIST_INST=temps_ca,
                                      METHODE='MANUEL'),
                         ECHEC=_F(SUBD_NIVEAU=3,
                                  SUBD_PAS=6,
                                  SUBD_PAS_MINI=1.E-08,),
                         );

# valeurs de refence
sxxaref=(398.+413.)/2.
sxxmref=-5.
sxxmaxref=sxxmref+sxxaref
sxxminref=sxxmref-sxxaref

sxyaref=(237.+231.)/2.
sxymref=0.5
sxymaxref=sxymref+sxyaref
sxyminref=sxymref-sxyaref

for i in range(Ncal):
        RESU[i]=SIMU_POINT_MAT(INFO=1,
                   COMPORTEMENT=_F(RELATION=typcal[i][0],
                                ITER_INTE_MAXI=50,ITER_INTE_PAS=10,
                                ALGO_INTE=typcal[i][1]),
                   NEWTON=_F(MATRICE='TANGENTE',
                             REAC_ITER=1,),
                   CONVERGENCE=_F(ITER_GLOB_MAXI=100,),
                   MATER      = ACIER[typcal[i][2]],
                   INCREMENT=_F(LIST_INST=deflist,),
                   EPSI_IMPOSE=_F(EPXX=eps_xx,
                                  EPXY=eps_xy,
                                   ),
                   NB_VARI_TABLE=2,
                        );

        #IMPR_TABLE(TABLE=RESU[i]);

        # test des valeurs extremes

        TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='SIXX',
                     VALE_CALC=419.25775958219,
                     VALE_REFE=sxxmaxref,
                     PRECISION=0.05,
                     FILTRE=_F(NOM_PARA='SIXX',CRIT_COMP='MAXI'),
                     REFERENCE='SOURCE_EXTERNE',
                     );

        TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='SIXX',
                     VALE_CALC=-420.82581821439,
                     VALE_REFE=sxxminref,
                     PRECISION=0.03,
                     FILTRE=_F(NOM_PARA='SIXX',CRIT_COMP='MINI'),
                     REFERENCE='SOURCE_EXTERNE',
                     );
        TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='SIXY',
                     VALE_CALC=246.84487002456,
                     VALE_REFE=sxymaxref,
                     PRECISION=0.06,
                     FILTRE=_F(NOM_PARA='SIXY',CRIT_COMP='MAXI'),
                     REFERENCE='SOURCE_EXTERNE',
                     );

        TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='SIXY',
                     VALE_CALC=-245.82990052479,
                     VALE_REFE=sxyminref,
                     PRECISION=0.06,
                     FILTRE=_F(NOM_PARA='SIXY',CRIT_COMP='MINI'),
                     REFERENCE='SOURCE_EXTERNE',
                     );
# traces des courbes
courbes=[]
courbe1=[]
courbe2=[]
courbe3=[]
courbeder1=[]
courbeder2=[]
courbeder3=[]

sigxx=[None]*Ncal
sigxy=[None]*Ncal
sixy3=[None]*Ncal
epsxx=[None]*Ncal
epsxy=[None]*Ncal
gamm3=[None]*Ncal
sixxd=[None]*Ncal
sixyd=[None]*Ncal
s3xyd=[None]*Ncal

sixxm=[None]*Ncal
sixym=[None]*Ncal

tdebder=tmax-pas*npas0*nbcycle1
tfinder=tmax

tdern=[None]*Ncal

tmaxx=[None]*Ncal
tmixx=[None]*Ncal
tmaxy=[None]*Ncal
tmixy=[None]*Ncal

#resu=[None]*Ncal

for i in range(Ncal):
   sigxx[i]=RECU_FONCTION(TABLE=RESU[i],PARA_X='INST',PARA_Y='SIXX',INTERPOL='LIN');
   sigxy[i]=RECU_FONCTION(TABLE=RESU[i],PARA_X='INST',PARA_Y='SIXY',INTERPOL='LIN');
   sixy3[i]=CALC_FONCTION(COMB=_F(FONCTION=sigxy[i],COEF=sqrt(3.0),) )
   epsxx[i]=RECU_FONCTION(TABLE=RESU[i],PARA_X='INST',PARA_Y='EPXX',INTERPOL='LIN');
   epsxy[i]=RECU_FONCTION(TABLE=RESU[i],PARA_X='INST',PARA_Y='EPXY',INTERPOL='LIN');
   gamm3[i]=CALC_FONCTION(COMB=_F(FONCTION=epsxy[i],COEF=2./sqrt(3.0),) )
   sixxd[i]=RECU_FONCTION(TABLE=RESU[i],PARA_X='INST',PARA_Y='SIXX',INTERPOL='LIN',
                             FILTRE=(
                             _F(NOM_PARA='INST',CRIT_COMP='GE',VALE=tdebder),
                             _F(NOM_PARA='INST',CRIT_COMP='LE',VALE=tfinder),
                             ));

   sixyd[i]=RECU_FONCTION(TABLE=RESU[i],PARA_X='INST',PARA_Y='SIXY',INTERPOL='LIN',
                             FILTRE=(
                             _F(NOM_PARA='INST',CRIT_COMP='GE',VALE=tdebder),
                             _F(NOM_PARA='INST',CRIT_COMP='LE',VALE=tfinder),
                             ));
   s3xyd[i]=CALC_FONCTION(COMB=_F(FONCTION=sixyd[i],COEF=sqrt(3.0),) )
   tdern[i] = CALC_TABLE(TABLE=RESU[i],
                  ACTION=(
                          _F(OPERATION='FILTRE',
                             CRIT_COMP='GE',VALE=tdebder,
                             NOM_PARA='INST',),
                          _F(OPERATION='FILTRE',
                             CRIT_COMP='LE',VALE=tfinder,
                             NOM_PARA='INST',),
                             ),)

   tmaxx[i] = CALC_TABLE(TABLE=tdern[i],
                  ACTION=(
                          _F(OPERATION='FILTRE',
                             CRIT_COMP='MAXI',
                             NOM_PARA='SIXX',),
                             ),)
   tmixx[i] = CALC_TABLE(TABLE=tdern[i],
                  ACTION=(
                          _F(OPERATION='FILTRE',
                             CRIT_COMP='MINI',
                             NOM_PARA='SIXX',),
                             ),)
   tmaxy[i] = CALC_TABLE(TABLE=tdern[i],
                  ACTION=(
                          _F(OPERATION='FILTRE',
                             CRIT_COMP='MAXI',
                             NOM_PARA='SIXY',),
                             ),)
   tmixy[i] = CALC_TABLE(TABLE=tdern[i],
                  ACTION=(
                          _F(OPERATION='FILTRE',
                             CRIT_COMP='MINI',
                             NOM_PARA='SIXY',),
                             ),)

   dico={}
   dico['FONC_X']=sixxd[i]
   dico['FONC_Y']=s3xyd[i]
   dico['LEGENDE']=legende[i]
   dico['MARQUEUR']=0
   courbeder1.append(dico)

   dico={}
   dico['FONCTION']=sixxd[i]
   dico['LEGENDE']=legende[i]
   dico['MARQUEUR']=0
   courbeder2.append(dico)

   dico={}
   dico['FONCTION']=sixyd[i]
   dico['LEGENDE']=legende[i]
   dico['MARQUEUR']=0
   courbeder3.append(dico)

   dico={}
   dico['FONC_X']=sigxx[i]
   dico['FONC_Y']=sixy3[i]
   dico['LEGENDE']=legende[i]
   dico['MARQUEUR']=0
   courbes.append(dico)

   dico={}
   dico['FONCTION']=sigxx[i]
   dico['LEGENDE']=legende[i]
   dico['MARQUEUR']=0
   courbe1.append(dico)

   dico={}
   dico['FONCTION']=sigxy[i]
   dico['LEGENDE']=legende[i]
   dico['MARQUEUR']=0
   courbe2.append(dico)

   dic3={}
   dic3['FONCTION']=epsxx[i]
   dic3['LEGENDE']=legende[i]
   courbe3.append(dic3)
   dic3={}
   dic3['FONCTION']=gamm3[i]
   dic3['LEGENDE']=legende[i]
   courbe3.append(dic3)


# tau-sigma
DEFI_FICHIER(UNITE = 39,FICHIER = 'REPE_OUT/sigmaXY-sigmaXX-tout.agr');
IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE=pilote,UNITE=39,
                LEGENDE_X='SigmaXX',
                LEGENDE_Y='SigmaXY*sqrt(3)',
                COURBE=courbes,
                );
DEFI_FICHIER(UNITE = 39,ACTION = 'LIBERER');

# sigma
DEFI_FICHIER(UNITE = 39,FICHIER = 'REPE_OUT/sigmaXX-tout.agr');
IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE=pilote,UNITE=39,
                LEGENDE_X='INST',
                LEGENDE_Y='SigmaXX',
                COURBE=courbe1,
                );
DEFI_FICHIER(UNITE = 39,ACTION = 'LIBERER');
# tau
DEFI_FICHIER(UNITE = 39,FICHIER = 'REPE_OUT/sigmaXY-tout.agr');
IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE=pilote,UNITE=39,
                LEGENDE_X='INST',
                LEGENDE_Y='SigmaXY',
                COURBE=courbe2,
                );
DEFI_FICHIER(UNITE = 39,ACTION = 'LIBERER');

#################dernier cycle
# tau-sigma
DEFI_FICHIER(UNITE = 39,FICHIER = 'REPE_OUT/sigmaXY-sigmaXX-dernier_cycle.agr');
IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE=pilote,UNITE=39,
                LEGENDE_X='SigmaXX',
                LEGENDE_Y='SigmaXY*sqrt(3)',
                COURBE=courbeder1,
                );
DEFI_FICHIER(UNITE = 39,ACTION = 'LIBERER');
# sigma
DEFI_FICHIER(UNITE = 39,FICHIER = 'REPE_OUT/sigmaXX-dernier_cycle.agr');
IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE=pilote,UNITE=39,
                LEGENDE_X='INST',
                LEGENDE_Y='SigmaXX',
                COURBE=courbeder2,
                );
DEFI_FICHIER(UNITE = 39,ACTION = 'LIBERER');
# tau
DEFI_FICHIER(UNITE = 39,FICHIER = 'REPE_OUT/sigmaXY-dernier_cycle.agr');
IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE=pilote,UNITE=39,
                LEGENDE_X='INST',
                LEGENDE_Y='SigmaXY',
                COURBE=courbeder3,
                );
DEFI_FICHIER(UNITE = 39,ACTION = 'LIBERER');




# comparaison chargement resultat
DEFI_FICHIER(UNITE = 39,FICHIER = 'REPE_OUT/chargement.agr');

dic3={}
dic3['FONCTION']=eps_xx
dic3['LEGENDE']='chargement'
dic3['MARQUEUR']=0
courbe3.append(dic3)
dic3={}
dic3['FONCTION']=gamma3
dic3['LEGENDE']='chargement'
dic3['MARQUEUR']=0
courbe3.append(dic3)

IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE=pilote,UNITE=39,
                LEGENDE_X='t',
                LEGENDE_Y='epsxx',
                COURBE=courbe3,
                );
DEFI_FICHIER(UNITE = 39,ACTION = 'LIBERER');
FIN();
