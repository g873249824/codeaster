# -*- coding: utf-8 -*-
# TITRE VALIDATION MONOCRISTAL LOI DD_CC_IRRA THERMIQUE + A-THERMIQUE
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'));


from numpy.linalg import norm
from numpy import *

TEMP= 250.0
Cmm = 1000.0
CMPa= Cmm*Cmm

E=(236-0.0459*TEMP)*1.e9/CMPa  # Pa
Nu=0.35
Mu=E/2./(1.+Nu)



tau_f  = 20.e6 /CMPa   # Pa
tau_0  = 363.e6 /CMPa  # Pa
rho_ini= 1.E11  /Cmm /Cmm  # en m**-2
y_at   = 1.e-9  *Cmm  # m
N      = 20.
gamma0 = 1.E-3    # s**-1
GH     = 1.e11    # s**-1
b      = 2.48e-10 * Cmm # m
DeltaG0= 0.84     # eV
epsi_1 = 1.e-5    # s**-1
D      = 10.e-9*Cmm   # m
beta   = 0.2
d_lat  = 1. * Cmm  # m
K_f    = 30.
K_self = 100.
k_b      = 8.62E-5  # "Constante de Boltzmann, en eV/K"

l_c = 500.*b*(TEMP/300.)**2
a_irr= 0.3
xi_irr = 4.

a_coli=0.7
a_ncol=0.1
a_self=0.1024
alpha_self=sqrt(a_self)

rho_ini=rho_ini*b*b
RHO_0  = rho_ini    # en m**-2

E_L=E
G=Mu

ACIERDDI=DEFI_MATERIAU(
                  ELAS=_F( E=E, NU=Nu, ALPHA=0.),
                  MonoDDCC_Irra=_F(
                           YoungModulus1 = E_L ,
                           YoungModulus2 = E_L ,
                           YoungModulus3 = E_L,
                           PoissonRatio12 = Nu,
                           PoissonRatio23 = Nu,
                           PoissonRatio13 = Nu,
                           ShearModulus12 = G,
                           ShearModulus23 = G,
                           ShearModulus13 = G,
                           b = b,
                           H = GH,
                           DeltaG_0 = DeltaG0,
                           tau_0 = tau_0,
                           tau_f = tau_f,
                           gamma0 = gamma0,
                           pn = N,
                           omega_mob = rho_ini,
                           d = D,
                           d_lath = d_lat,
                           y_at = y_at,
                           K_f = K_f,
                           K_self = K_self ,
                           k_b = k_b,
                           epsi_1 = epsi_1,
                           Mu = G,
                           a_irr = a_irr,
                           xi_irr = xi_irr,
                           h0 = a_self,
                           h1 = a_coli,
                           h2 = a_ncol,
                           h3 = a_ncol,
                           h4 = a_ncol,
                           h5 = a_ncol,
                           ),
                           )



# LOI DE COMPORTEMENT DD_CC en Explicite
LISTARCH=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=1.,
                                      NOMBRE=100,),
                                  ),
                      );

LINSTDD=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=1.,
                                      NOMBRE=100,),
                                  ),
                      );

LIS2DD=DEFI_LIST_INST(INFO=1,
                        DEFI_LIST=_F(LIST_INST=LINSTDD),
                        ECHEC=_F(SUBD_NIVEAU=20,
                                 SUBD_PAS=10),
                        );

# vecteurs direction de chargement
l_orient=[[0.,0.,1.],[0.,1.,1.],[1.,1.,1.],[1.,5.,9.],[0.,1.,2.],[-1.,2.,5.]]
l_norm=[l_orient[i]/norm(l_orient[i],2) for i in range(0,len(l_orient))]

# parametres de chargement
# numero du vecteur de chargement

ori = 3
SIGMA0=100.e6/CMPa

##chargement
S1=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][0]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S2=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][1]*l_norm[ori][1]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S3=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][2]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S4=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][1]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S5=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S6=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][1]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);


# densites de dislocation initiales : variables internes de 0 a 44
avari = zeros(18+12)
for i in range(12):
  avari[6+i]=RHO_0
for i in range(12):
  avari[6+12+i]=RHO_0

lvari=list(avari)

TIMP=DEFI_FONCTION(
                      NOM_PARA='INST',  NOM_RESU='TEMP',
                       VALE=(  0. , TEMP, 1. , TEMP)
                        )


# DD_CFC  en IMPLICITE



LINSTDDI=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=1.,
                                      NOMBRE=500,),
                                  ),
                      );

LIS2DDI=DEFI_LIST_INST(INFO=1,
                        DEFI_LIST=_F(LIST_INST=LINSTDDI),
                        ECHEC=_F(SUBD_NIVEAU=20,
                                 SUBD_PAS=10),
                        );


IMPLDD=SIMU_POINT_MAT(INFO=1,
                      MATER=ACIERDDI,
                      COMPORTEMENT=_F(RELATION='MonoDDCC_Irra',
                        RESI_INTE_RELA=1e-9,
                        ),
                      INCREMENT=(_F(LIST_INST=LIS2DDI,),),
                      NEWTON=(_F(REAC_ITER=1,
                                 PREDICTION='EXTRAPOLE',
                                 ),),
                      CONVERGENCE=(_F(ITER_GLOB_MAXI=10,),),
                      VARI_INIT=_F(VALE=lvari,
                                  ),
                      SIGM_IMPOSE=(
                                   _F(SIXX=S1,SIYY=S2,SIZZ=S3,SIXY=S4,SIXZ=S5,SIYZ=S6),
                                  ),
                      ARCHIVAGE=_F(LIST_INST=LISTARCH),
                      SUPPORT='POINT',
                      AFFE_VARC=_F(  NOM_VARC='TEMP',
                                     VALE_FONC=TIMP,
                                     VALE_REF=TEMP),
                       );


IMPR_TABLE(TABLE=IMPLDD)

epsXX=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='EPXX',
                   INTERPOL='LIN');

epsYY=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='EPYY',
                   INTERPOL='LIN');

epsZZ=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='EPZZ',
                   INTERPOL='LIN');

epsXY=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='EPXY',
                   INTERPOL='LIN');

epsXZ=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='EPXZ',
                   INTERPOL='LIN');

epsYZ=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='EPYZ',
                   INTERPOL='LIN');


sigXX=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='SIXX',
                   INTERPOL='LIN');

sigYY=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='SIYY',
                   INTERPOL='LIN');

sigZZ=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='SIZZ',
                   INTERPOL='LIN');

sigXY=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='SIXY',
                   INTERPOL='LIN');

sigXZ=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='SIXZ',
                   INTERPOL='LIN');

sigYZ=RECU_FONCTION(TABLE=IMPLDD,
                   PARA_X='INST',
                   PARA_Y='SIYZ',
                   INTERPOL='LIN');


epsDIR=CALC_FONCTION(COMB=(_F(FONCTION = epsXX,
                              COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = epsYY,
                              COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = epsZZ,
                              COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = epsXY,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = epsXZ,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = epsYZ,
                              COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ),
                    );


sigDIR=CALC_FONCTION(COMB=(_F(FONCTION = sigXX,
                              COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = sigYY,
                              COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = sigZZ,
                              COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = sigXY,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = sigXZ,
                              COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = sigYZ,
                              COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ),
                    );


DEFI_FICHIER(UNITE = 28,
          FICHIER = 'REPE_OUT/sig-eps.dat');
IMPR_FONCTION(
            FORMAT='XMGRACE',
            PILOTE='',
            COURBE=(_F(FONC_X=epsDIR,
                        FONC_Y=sigDIR,
                        COULEUR= 0,
                        LEGENDE= 'SIGdir',),),
            UNITE=28,
            TITRE='SIGdir = f(Edir)');

DEFI_FICHIER(UNITE = 28,ACTION = 'LIBERER');

gamma=[None]*13
rho=[None]*13

system=['', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']


DEFI_FICHIER(UNITE = 30,
             FICHIER = 'REPE_OUT/rho_eps.dat');

for i in range(1,13):

    rho[i]=RECU_FONCTION(TABLE=IMPLDD,
                         PARA_X='INST',
                        PARA_Y='V'+str(6+i),
                        INTERPOL='LIN');


    IMPR_FONCTION(
                FORMAT='XMGRACE',
                PILOTE='',
                LEGENDE_X='\\f{Symbol}e\\f{}\sll',
                LEGENDE_Y='\\f{Symbol}r',
                COURBE=(
                        _F(FONC_X=epsDIR,
                           FONC_Y=rho[i],
                           COULEUR = i,
                           MARQUEUR = 0,
                           LEGENDE= unicode(system[i],'iso-8859-1').encode('utf-8'),),),
                UNITE=30,);




DEFI_FICHIER(UNITE = 28,ACTION = 'LIBERER');

# tests explicite et implicite

# densites de dislocation

sys1=8
sys2=5

TEST_FONCTION(VALEUR=_F(VALE_REFE=1.000465E+11*b*b/Cmm/Cmm,
                        VALE_CALC=6.151560E-09,
                        VALE_PARA=1.0,
                        PRECISION=3.E-4,
                        REFERENCE='AUTRE_ASTER',
                        NOM_PARA='INST',
                        FONCTION=rho_8,
                        ),
              )



TEST_FONCTION(VALEUR=_F(VALE_REFE=1.000214E+11*b*b/Cmm/Cmm,
                        PRECISION=2.E-4,
                        VALE_CALC=6.150940E-09,
                        VALE_PARA=1.0,
                        NOM_PARA='INST',
                        REFERENCE='AUTRE_ASTER',
                        FONCTION=rho_5,
                        ),
              )



FIN()
