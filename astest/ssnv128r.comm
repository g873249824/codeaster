# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# CAS_TEST__:SSNV128R
# TEST DU GRECO CALCUL 3D
# MODELE
# MAILLAGE : ELEMENT 3D HEXAEDRE A 8 NOEUDS
# UNITES   : NEWTON , METRE , SECONDE (N,M,S)
# LE GROUPE_NO PP CONTIENT LES NOEUDS OU LA
# REDONDANCE APPARAIT ICI, ON N'UTILISE PAS
# VECT_Y ET VECT_Z PARCEQUE LES DIRECTIONS
# DE GLISSEMENT SONT CONSTRUITES AUTOMATIQUEMENT

DEBUT(CODE=_F(
              NIV_PUB_WEB='INTERNET',),
IGNORE_ALARM='MODELE1_63',DEBUG=_F(SDVERI='OUI'))

# <MODELE1_63> : DANS UN MODELE, IL EXISTE DES ELEMENTS DE TYPE "BORD" 
#  QUI N'ONT PAS DE VOISIN AVEC RIGIDITE
#  LE MODELE PROVOQUANT CES ALARMES CONTIENT UNE SURFACE RIGIDE POUR LE CONTACT
#  CALCUL TEST ELEMENTS FINIS DE CONTACT 3D HEXA8
#  PLAQUE AVEC CONTACT ET FROTTEMENT SUR UN PLAN RIGIDE

MA=LIRE_MAILLAGE(VERI_MAIL=_F(VERIF='OUI',),FORMAT='MED',);

MA=DEFI_GROUP(reuse =MA,
              MAILLAGE=MA,
              CREA_GROUP_NO=(_F(GROUP_MA='SCONTA',
                                NOM='NCONTA',),
                             _F(UNION=('PPSZ','PPS',),
                                NOM='PP',),
                             _F(GROUP_MA='VPLAQ',
                                NOM='NPLAQ',),
                             _F(DIFFE=('NPLAQ','NCONTA',),
                                NOM='NBLOCZ',),
                             _F(GROUP_MA='SBATI',
                                NOM='NENCA',
                                CRIT_NOEUD='SOMMET',),),);

MO=AFFE_MODELE(MAILLAGE=MA,
               AFFE=_F(TOUT='OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='3D',),);

MA=MODI_MAILLAGE(reuse =MA,
                 MAILLAGE=MA,
                 ORIE_PEAU_3D=(_F(GROUP_MA='SPRESV',),
                               _F(GROUP_MA='SPRESH',),),);

MATPLA=DEFI_MATERIAU(ELAS=_F(E=1.3E11,
                             NU=0.2,),);

CHMAT=AFFE_MATERIAU(MAILLAGE=MA,
                    AFFE=_F(TOUT='OUI',
                            MATER=MATPLA,),);

CHA1=DEFI_CONTACT(MODELE=MO,
                  FORMULATION='CONTINUE',
                  FROTTEMENT='COULOMB',
                    ALGO_RESO_CONT = 'POINT_FIXE',
                    ALGO_RESO_GEOM = 'POINT_FIXE',
                    #ALGO_RESO_FROT = 'POINT_FIXE',
                    ##ADAPT_COEF     = 'OUI',
                  RESI_FROT=10.E-3,RESI_GEOM=1.0,
                  ZONE=_F(GROUP_MA_MAIT='SBATI',
                          GROUP_MA_ESCL='SCONTA',
                          CONTACT_INIT='INTERPENETRE',
                          COULOMB=1.0,
                          #ADAPTATION = 'CYCLAGE',
                          ADAPTATION = 'NON',
                          #ALGO_CONT = 'PENALISATION',
                          #ALGO_FROT = 'STANDARD',
                          #COEF_FROT     = 1.E6,
                          SANS_GROUP_NO_FR='PP',
                          #DIRE_EXCL_FROT=(1,0,0),
                          ),);

CHA2=AFFE_CHAR_MECA(MODELE=MO,
                    DDL_IMPO=(_F(GROUP_NO='NENCA',
                                 DX=0.,
                                 DY=0.,
                                 DZ=0.,),
                              _F(GROUP_MA='SBLOCX',
                                 DX=0.,),
                              _F(GROUP_NO='NBLOCZ',
                                 DZ=0.,),),
                    PRES_REP=(_F(GROUP_MA='SPRESV',
                                 PRES=5.E07,),
                              _F(GROUP_MA='SPRESH',
                                 PRES=15.E07,),),);

RAMPE=DEFI_FONCTION(NOM_PARA='INST',VALE=(0.0,0.0,
                          1.0,1.0,
                          ),PROL_DROITE='LINEAIRE',PROL_GAUCHE='LINEAIRE',);

LINST=DEFI_LIST_REEL(DEBUT=0.,
                      INTERVALLE=_F(JUSQU_A=1.0,
                                    NOMBRE=1,),);

L_INST=DEFI_LIST_INST(METHODE='MANUEL',
                      DEFI_LIST=_F(LIST_INST=LINST,),
                      ECHEC=_F(EVENEMENT='ERREUR',
                              ACTION='DECOUPE',
                              SUBD_METHODE = 'MANUEL',
                              SUBD_PAS=5,
                              SUBD_NIVEAU=5,),);

#-----------------------------------------------------------

U2M=STAT_NON_LINE(MODELE=MO,INFO=1,
                  CHAM_MATER=CHMAT,
                  EXCIT=_F(CHARGE=CHA2,
                           FONC_MULT=RAMPE,),
                  CONTACT=CHA1,
                  COMPORTEMENT=_F(RELATION='ELAS',),
                  INCREMENT=_F(LIST_INST=L_INST,),
                  NEWTON=_F(REAC_ITER=1,),SOLVEUR=_F(METHODE='MULT_FRONT',),
                  CONVERGENCE=_F(RESI_GLOB_RELA=1.0E-2,
                                 ITER_GLOB_MAXI=40,
                                 ARRET='OUI',),);

TEST_RESU(RESU=(
                _F(GROUP_NO='PPA',
                   INST=1.0,
                   REFERENCE='SOURCE_EXTERNE',
                   RESULTAT=U2M,
                   NOM_CHAM='DEPL',
                   NOM_CMP='DX',
                   VALE_CALC= 2.81579227713E-05,
                   VALE_REFE=2.8600000000000001E-05,
                   PRECISION=0.050000000000000003,                
                   ),
                _F(GROUP_NO='PPB',
                   INST=1.0,
                   REFERENCE='SOURCE_EXTERNE',
                   RESULTAT=U2M,
                   NOM_CHAM='DEPL',
                   NOM_CMP='DX',
                   VALE_CALC= 2.66763122224E-05,
                   VALE_REFE=2.72E-05,
                   PRECISION=0.050000000000000003,
                   ),
                _F(GROUP_NO='PPC',
                   INST=1.0,
                   REFERENCE='SOURCE_EXTERNE',
                   RESULTAT=U2M,
                   NOM_CHAM='DEPL',
                   NOM_CMP='DX',
                   VALE_CALC= 2.20157840571E-05,
                   VALE_REFE=2.2799999999999999E-05,
                   PRECISION=0.050000000000000003,
                   ),
                _F(GROUP_NO='PPD',
                   INST=1.0,
                   REFERENCE='SOURCE_EXTERNE',
                   RESULTAT=U2M,
                   NOM_CHAM='DEPL',
                   NOM_CMP='DX',
                   VALE_CALC= 1.95483571267E-05,
                   VALE_REFE=1.98E-05,
                   PRECISION=0.050000000000000003,
                   ),
                _F(GROUP_NO='PPE',
                   INST=1.0,
                   REFERENCE='SOURCE_EXTERNE',
                   RESULTAT=U2M,
                   NOM_CHAM='DEPL',
                   NOM_CMP='DX',
                   VALE_CALC= 1.65403143532E-05,
                   VALE_REFE=1.5E-05,
                   PRECISION=0.150000000000000003,
                   ),
                ),
          );
          
# Rappel du pb : ssnv128r donne deux résultats differents à 1.E-3% avec ou sans dbgjeveux.
# Explications : Perte d'unicité en frottement
# ==========================================================================================
# On essaie de localiser quel mot-clef de DEFI_CONTACT active le NOOK avec l'option 
# --args=dbgjeveux. 
# Une fois ce mot-clef trouvé, il faut vérifier la robustesse (convergence+variabilité 
# dbgjeveux+variabilité machine) de ce mot-clef DEFI_CONTACT.

# Pour ce faire, on choisit  : 
# SOLVEUR/METHODE='MULT_FRONT' activé pour écarter l'hypothèse de la variabilité du solveur MUMPS. 
# Dans un premier temps on neutralise DIRE_EXCL_FROT qui permettait d'exclure une direction de 
# frottement. On le débranche également.
# On se concentre donc uniquement sur le mot-clef ADAPTATION.

# Experimentations numériques
# ===========================

# ADAPTATION = 'NON'
# Ce test ne converge pas quand on est en ADAPTATION="NON". DIRE_FROT_EXCL ne sert  pas pour la
# convergence. Je le débranche. 

# ADAPTATION = 'CYCLAGE'
# Je branche : ADAPTATION="CYCLAGE". Je corrige la valeur de non regression et je vérifie que 
# cette valeur n'est
# pas cassée en dbgjeveux. C'est bien le cas. ADAPTATION='CYCLAGE' fournit les mêmes 
# valeurs avec ou sans dbgjeveux. La programmation liée à ADAPTATION='CYCLAGE' n'est donc pas en 
# cause. 
# A noter qu'avec ce réglage, on est à 15% d'erreurs au lieu de 2% par rapport à la solution de 
#référence source_externe.  
# Comportement vérifié également en 13.4 et sur les machines c9+eole.

# ADAPTATION = 'TOUT' ('CYCLAGE'+'ADAPT_COEF')
# Ce mode adapte à la fois les matrices de contact-frottement comme dans ADAPTATION='CYCLAGE' mais
# aussi COEF_FROT et COEF_CONT. 

# Ce mode adaptatif exhibe une variabilité dbgjeveux. On cherche par un bissect où se trouve le
# problème. La restitution concernée 
# est 26684 : automatisation du coefficient de pénalisation (14.0.8).  
# Blindage du source Fortran :
# D'abord j'ai effectué un blindage du source : appels propres à certains objets jeveux en
# écriture et initialisation de certaines variables mmmbca, nmprma,mmalgo. 
# Notament la routine cazocc qui fait appel à l'objet ".PARACR" qui va stocker le critère de
# pénétration maxi demandée par l'utilisateur dans le cas d'un contact multi-zone. 
# Le problème du NOOK persiste toujours malgré ces corrections et je ne vois pas où se localise 
# le problème mémoire. 
# Tests sur les Machines eole+c9 : pas de problème de NOOK entre dbgjeveux et non-dbgjeveux pour 
# les mêmes mise en données (avant et après les corrections du source) et sans 
# les corrections fortran.

# J'ai effectué plusieurs expérimentations qui me conduise à l'hyothèse de multiplicité de
# solutions en frottement.
# Cas sans frottement
# L'hypothèse de perte d'unicité se vérifie numériquement en perturbant légèrement la mise en
# données initiale, on ne retrouve pas les mêmes solutions. On peut également le calculer 
# numériquement det(Matrice)=0. 
# Pour vérifier cette hypothèse de multiplicité de solutions, je fais plusieurs run sur athosdev: 
# coulomb = 0.0; il ne devrait pas avoir de differences entre dbgjeveux et sans dbgjeveux pour  
# la même mise en données car la solution est démontré unique. C'est bien ce qu'on obtient. 
# On obtient à 1.E-10% la même solution entre le calcul dbgjeveux et le calcul sans dbgjeveux. 

# Cas avec frottement
# Il apparait un NOOK entre les deux calculs : dbgjeveux et sans dbgjeveux. 
# Dès qu'on active le frottement, le NOOK traduit le fait qu'une petite perturbation des jeux des 
# données en memoire entraîne une multiplicité de solutions :
# c'est un problème bien connu en contact avec frottement. L'existence et l'unicité de solution 
# en contact-frottement
# est encore un problème ouvert pour la mécanique non régulières des corps déformables. 
# Dans l'état actuel des expérimentations, rien ne permet d'écarter la piste d'un pb de 
# programmation mais rien n'écarte non plus le fait qu'on a un phénomène numérique normale. 

# Une technique de stabilisation du test : On choisit une solution parmi plusieurs
# Pour stabiliser ce test et éviter de mettre
# TOLE_MACHINE, je propose de changer un petit peu la  mise en données de DEFI_CONTACT : 
# ALGO_RESO_XXXX='POINT_FIXE', DIRE_EXCL_FROT qui exclut potentiellement une direction de 
# frottement, on reserre les critères de convergence. Avec tout ces réglages, les tests 
# avec ou sans dbgjeveux sont identiques. En fait, avec 


FIN();

#
