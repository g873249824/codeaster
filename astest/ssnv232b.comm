
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                WWW.CODE-ASTER.ORG
#
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
# 1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

# TITRE ETUDE:  ESSAI TRIAXIAL DRAINE (MECA PUR) AVEC LA LOI DE MOHR-COULOMB
# PRESSION DE CONSOLIDATION P0 = 50KPA

import numpy as np

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),
      PAR_LOT='NON',
      DEBUG=_F(SDVERI='OUI'),);

# modules mecaniques [kPa]
K=516.2E6
G=238.2E6
# =>
YOUNG = 9.*K*G /(3.*K+G)
POISSON = (3.*K-2.*G) /(6.*K+2.*G)

print 'young=',YOUNG,' /// nu=',POISSON

# pression de preconsolidation [en kPa]
P0=50.E3


#***********************************************************************
#    MAILLAGE + MODELE
#***********************************************************************
MAILLAGE=LIRE_MAILLAGE();

MODELE=AFFE_MODELE(MAILLAGE=MAILLAGE,
                   AFFE=_F(TOUT         = 'OUI',
                           PHENOMENE    = 'MECANIQUE',
                           MODELISATION = '3D'));

MAILLAGE=MODI_MAILLAGE(reuse =MAILLAGE,
                       MAILLAGE=MAILLAGE,
                       ORIE_PEAU_3D=_F(GROUP_MA=('DEVANT','DROIT',
                        'ARRIERE','GAUCHE','BAS',
                        'HAUT','APPUI','COTE',),),
                       INFO=1);


#***********************************************************************
#    INCREMENTS DE TEMPS
#***********************************************************************

tarret =19.
tfin   =30.
npas   =30

TEMPS0=DEFI_LIST_REEL(DEBUT=-1.,
                      INTERVALLE=_F(JUSQU_A =0., NOMBRE =1),);

TEMPS1=DEFI_LIST_REEL(DEBUT=0.,
                      INTERVALLE=(_F(JUSQU_A =tarret, NOMBRE =19,),
                                  _F(JUSQU_A =tfin  , NOMBRE =210,),),);

T_ARCH=DEFI_LIST_REEL(DEBUT=0.,
                      INTERVALLE=(_F(JUSQU_A =tarret, NOMBRE =19,),
                                  _F(JUSQU_A =tfin  , NOMBRE =210,),),);

DEFLIST=DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=TEMPS1,),
                       ECHEC=_F(EVENEMENT     = 'ERREUR',
                                 ACTION       = 'DECOUPE',
                                 SUBD_METHODE = 'MANUEL',
                                 SUBD_PAS     = 4,
                                 SUBD_NIVEAU  = 10,),);

#***********************************************************************
#    MATERIAU : SOL
#***********************************************************************
SOL=DEFI_MATERIAU(ELAS=_F(E = YOUNG, NU = POISSON, ALPHA=0.0),
                  MOHR_COULOMB=_F(
                            PHI      = 33.,
                            ANGDIL   = 27.,
                            COHESION = 1.0E+3,),);

CHMAT=AFFE_MATERIAU(MAILLAGE=MAILLAGE,
                    AFFE=_F(TOUT='OUI', MATER=SOL),);


#***********************************************************************
#    CHARGEMENT MECANIQUE : FORCE DE COMPRESSION + DDL IMPOSES
#***********************************************************************
CHAR_U1=AFFE_CHAR_MECA(MODELE=MODELE,
                       PRES_REP=_F(GROUP_MA='COTE',PRES = 1.));

CHAR_U2=AFFE_CHAR_MECA(MODELE=MODELE,
                       PRES_REP=_F(GROUP_MA='APPUI',PRES = 1.));

CHAR_U3=AFFE_CHAR_MECA(MODELE=MODELE,
                       FACE_IMPO=_F(GROUP_MA='APPUI',DZ = -1.));

DEPL_1=AFFE_CHAR_CINE(MODELE=MODELE,
                MECA_IMPO=(_F(GROUP_MA='BAS',DZ = 0.),
                           _F(GROUP_MA='GAUCHE',DX = 0.),
                           _F(GROUP_MA='DEVANT',DY = 0.)));

COEF0=DEFI_FONCTION(NOM_PARA='INST',
                    PROL_DROITE='CONSTANT',
                    VALE=(-1.0, 0.0,
                           0. , P0 ,));

COEF3=DEFI_FONCTION(NOM_PARA='INST',
                    PROL_DROITE='CONSTANT',
                    VALE=(0.0, 0.0,
                          tfin, .0003));


#***********************************************************************
#    PRECONSOLIDATION ELASTIQUE JUSQU'A 50KPA
#***********************************************************************
U0M=STAT_NON_LINE(MODELE=MODELE,
                 CHAM_MATER=CHMAT,
                 EXCIT=(_F(CHARGE = CHAR_U1, FONC_MULT = COEF0),
                        _F(CHARGE = CHAR_U2, FONC_MULT = COEF0),
                        _F(CHARGE = DEPL_1 ,),),
                 COMPORTEMENT=_F(RELATION = 'ELAS'),
                 NEWTON=_F(MATRICE = 'ELASTIQUE'),
                 CONVERGENCE=_F(RESI_GLOB_RELA = 1.E-8,
                                ITER_GLOB_MAXI = 20),
                 INCREMENT=_F(LIST_INST = TEMPS0, INST_FIN = 0.));
# ----------- FIN

SIG0=CREA_CHAMP(INFO=1,
                TYPE_CHAM='ELGA_SIEF_R',
                OPERATION='EXTR',
                RESULTAT=U0M,
                NOM_CHAM='SIEF_ELGA',
                INST=0.0,);

#***********************************************************************
#    ESSAI TRIAXIAL DRAINE
#***********************************************************************
U1=STAT_NON_LINE(INFO=1,MODELE=MODELE,
                 CHAM_MATER=CHMAT,
                 EXCIT=(_F(CHARGE      = CHAR_U1, FONC_MULT = COEF0),
                        _F(CHARGE      = CHAR_U3,
                           TYPE_CHARGE ='DIDI'  ,
                           FONC_MULT   = COEF3),
                        _F(CHARGE      = DEPL_1 ,),),
                 ETAT_INIT=_F(SIGM=SIG0,),
                 COMPORTEMENT=_F(RELATION='MOHR_COULOMB',),
                 NEWTON=_F(MATRICE = 'TANGENTE',
                           REAC_ITER=1),
                 CONVERGENCE=_F(RESI_GLOB_RELA = 1.E-4,
                                ITER_GLOB_MAXI = 5,
                                ARRET='OUI',),
                 ARCHIVAGE =_F(LIST_INST=T_ARCH,),
                 SOLVEUR=_F(METHODE='MUMPS',
                            NPREC=12,),
                 INCREMENT=_F(LIST_INST = DEFLIST,
                              INST_INIT=0.0,
                              INST_FIN =30.));

#-------------------------
#    TEST_RESU AU POINT C
#-------------------------
U1=CALC_CHAMP(reuse=U1,
              CONTRAINTE=('SIGM_ELNO'),
              VARI_INTERNE=('VARI_ELNO'),
              DEFORMATION=('EPSI_ELNO'),
              RESULTAT=U1,);


U1=CALC_CHAMP(reuse=U1,
              CONTRAINTE='SIGM_NOEU',
              VARI_INTERNE='VARI_NOEU',
              DEFORMATION='EPSI_NOEU',
              RESULTAT=U1);


TAB_SIGM=POST_RELEVE_T(ACTION=_F(INTITULE='SIGM_NOEU',
                                GROUP_NO='C',
                                RESULTAT=U1,
                                NOM_CHAM='SIGM_NOEU',
                                TOUT_CMP='OUI',
                                OPERATION='EXTRACTION'));

TAB_VARI=POST_RELEVE_T(ACTION=_F(INTITULE='VARI_NOEU',
                                GROUP_NO='C',
                                RESULTAT=U1,
                                NOM_CHAM='VARI_NOEU',
                                NOM_CMP=('V1','V2','V3',),
                                OPERATION='EXTRACTION'));

TAB_EPSI=POST_RELEVE_T(ACTION=_F(INTITULE='EPSI_NOEU',
                                GROUP_NO='C',
                                RESULTAT=U1,
                                NOM_CHAM='EPSI_NOEU',
                                TOUT_CMP='OUI',
                                OPERATION='EXTRACTION'));

IMPR_TABLE(TABLE=TAB_SIGM,);
IMPR_TABLE(TABLE=TAB_EPSI,);
IMPR_TABLE(TABLE=TAB_VARI,);

# =============================================================================
#
#           TEST DES RESULTATS PAR RAPPORT A UNE SOLUTION ANALYTIQUE
#
# =============================================================================

# Calcul de la solution analytique
# ---------------------------------
from Contrib.essai_triaxial import Triaxial_DR

depzz   =-.000001
epzz_max=-.0003
epzz,sizz,sixx,epsivp,epsidp, =\
      Triaxial_DR(K,G,33.,27.,1.e+3,-P0,depzz,epzz_max)


TEST_TABLE(NOM_PARA='SIXX', TABLE=TAB_SIGM,
           FILTRE=_F(NOM_PARA ='INST',
                     VALE     =30.,
                     CRITERE  ='ABSOLU',
                     PRECISION=1e-6,),
           # Non-regression
           VALE_CALC=-50000.000333466,
           # Reference
           REFERENCE='ANALYTIQUE',
           VALE_REFE=sixx[-1],);

TEST_TABLE(NOM_PARA='SIZZ', TABLE=TAB_SIGM,
           FILTRE=_F(NOM_PARA ='INST',
                     VALE     =30.,
                     CRITERE  ='ABSOLU',
                     PRECISION=1e-6,),
           # Non-regression
           VALE_CALC=-1.7328954273525E+05,
           # Reference
           REFERENCE='ANALYTIQUE',
           VALE_REFE=sizz[-1],);

TEST_TABLE(NOM_PARA='V1', TABLE=TAB_VARI,
           FILTRE=_F(NOM_PARA ='INST',
                     VALE     =30.,
                     CRITERE  ='ABSOLU',
                     PRECISION=1e-6,),
           # Non-regression
           VALE_CALC=1.6784502297244E-04,
           # Reference
           REFERENCE='ANALYTIQUE',
           VALE_REFE=epsivp[-1],);

TEST_TABLE(NOM_PARA='V2', TABLE=TAB_VARI,
           FILTRE=_F(NOM_PARA ='INST',
                     VALE     =30.,
                     CRITERE  ='ABSOLU',
                     PRECISION=1e-6,),
           # Non-regression
           VALE_CALC=3.3099447063618E-04,
           # Reference
           REFERENCE='ANALYTIQUE',
           VALE_REFE=epsidp[-1],);



# ================================================================
#                            POST-TRAITEMENTS
# ================================================================
#
# tsigm = TAB_SIGM.EXTR_TABLE().values();
# tepsi = TAB_EPSI.EXTR_TABLE().values();
# tvari = TAB_VARI.EXTR_TABLE().values();
#
# epxx = tepsi['EPXX'];
# epyy = tepsi['EPYY'];
# epxy = tepsi['EPXY'];
# epzz = tepsi['EPZZ'];
# sixx = tsigm['SIXX'];
# siyy = tsigm['SIYY'];
# sixy = tsigm['SIXY'];
# sizz = tsigm['SIZZ'];
# epvp = tvari['V1'];
# edvp = tvari['V2'];
# indi = tvari['V3'];
#
# co_sigm,co_epsi,co_vari,co_seuil,= [],[],[],[],;
#
# # CHAMPS CINEMATIQUES
# # _____________________________
# co_sigm =Defi_Xmcourbe(courbe=co_sigm,
#         X=epzz, Y=sizz,
#         legend='SIZZ',
#         color=1,);
#
# co_sigm =Defi_Xmcourbe(courbe=co_sigm,
#         X=epzz, Y=sixx,
#         legend='SIXX',
#         color=2,);
#
# co_sigm =Defi_Xmcourbe(courbe=co_sigm,
#         X=epzz, Y=siyy,
#         legend='SIYY',
#         color=3,);
#
# co_sigm =Defi_Xmcourbe(courbe=co_sigm,
#         X=epzz, Y=sixy,
#         legend='SIXY',
#         color=4,);
#
# co_epsi =Defi_Xmcourbe(courbe=co_epsi,
#         X=epzz, Y=epxx,
#         legend='EPXX',
#         color=1,);
#
# co_epsi =Defi_Xmcourbe(courbe=co_epsi,
#         X=epzz, Y=epvp,
#         legend='EPVP',
#         color=2,);
#
# co_epsi =Defi_Xmcourbe(courbe=co_epsi,
#         X=epzz, Y=edvp,
#         legend='EDVP',
#         color=3,);
#
# co_vari=Defi_Xmcourbe(courbe=co_vari,
#         X=epzz, Y=indi,
#         legend='INDICATEUR PLASTIQUE',
#         color=2,);
#
# Courbes = [co_sigm,co_epsi,co_vari,];
#
# Nom_Fichier= ['tria3d_sigm.agr','tria3d_epsi.agr','tria3d_vari.agr',];
#
# unit=38
# for c in range(len(Nom_Fichier)):
#
#   DEFI_FICHIER(ACTION='ASSOCIER',
#                FICHIER='./REPE_OUT/'+Nom_Fichier[c],
#                UNITE=unit,);
#
#   IMPR_FONCTION(FORMAT='XMGRACE',
#               UNITE=unit,
#               COURBE=Courbes[c]);
#
#   DEFI_FICHIER(ACTION='LIBERER',
#                UNITE=unit,);

FIN();
