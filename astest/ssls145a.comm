# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2018 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# AUTEUR : L. DALL OLIO (AlterEgo), L. PAONE (Kobe Innovation Engineering)
#          VALIDATION DE COMBINAISON_FERRAILLAGE et CALC_FERRAILLAGE
#
#  DETAILS : MODELISATION DKT
#            Mailles QUAD4
#
# - Based on analytical results of beam with one fixed support and point load
#   on free ending.
# - Computation with macr_elas_mult
# - Applied loads for macr_elas_mult-shearLd2 is double than for shearLd1
# - macr_elas_mult-shearLd2 must be the governing combination for density DNSYS
#   that is X4 component for UT01_ELEM maked by COMBINAISON_FERRAILLAGE

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),
      DEBUG=_F(SDVERI='OUI',),
      ERREUR=_F(ERREUR_F='EXCEPTION'),
      PAR_LOT='NON',
      IGNORE_ALARM=(
        'SUPERVIS_1',        
        'SUPERVIS_9',
        'CALCULEL6_77',
        'CALCULEL_79',
        'POSTRELE_41',
        'CALCULEL_88',
        'COMBFERR_9',
        'ALGORITH12_74',
    )
)

mesh = LIRE_MAILLAGE(
    FORMAT = 'MED',
    UNITE=2
)

mesh = DEFI_GROUP(
    reuse = mesh,
    MAILLAGE = mesh,
    CREA_GROUP_NO = (
        _F(
            NOM = "N1",
            INTERSEC = ('MED01','UPPER'),
        ),
        _F(
            NOM = "N2",
            INTERSEC = ('END','LOWER'),
        ),
    ),
)

cls = DEFI_MATERIAU(
    ELAS =
        _F(
            E = 30000.0,
            NU = 0.3
    )
)

model = AFFE_MODELE(
    AFFE =
        _F(
            MODELISATION = ('DKT', ),
            PHENOMENE = 'MECANIQUE',
            TOUT = 'OUI'
    ),
    MAILLAGE = mesh
)

fieldmat = AFFE_MATERIAU(
    AFFE =
        _F(
            MATER = (cls, ),
            TOUT = 'OUI'
        ),
    MODELE = model
)

elemprop = AFFE_CARA_ELEM(
    MODELE = model,
    COQUE =
        _F(
            GROUP_MA = 'ELEMENTS',
            EPAIS = 300.0,
            VECTEUR = (0 , 0 , 1),
        )
)

boundary = AFFE_CHAR_MECA(
    MODELE = model,
    DDL_IMPO =
        _F(
            GROUP_NO = (
                'START',
            ),
            DX = 0.,
            DY = 0.,
            DZ = 0.,
            # DRX = 0.,
            DRY = 0.,
            DRZ = 0.
        ),
)

shearLd1 = AFFE_CHAR_MECA(
    MODELE=model,
    FORCE_NODALE = _F(
        GROUP_NO = (
            #'MED01',
            #'MED02',
            #'MED03',
            'END',
        ),
        FZ = -1500E+3/11 # -136.36E+3,
    ),
)

shearLd2 = AFFE_CHAR_MECA(
    MODELE=model,
    FORCE_NODALE = _F(
        GROUP_NO = (
            #'MED01',
            #'MED02',
            #'MED03',
            'END',
        ),
        FZ = -3000E+3/11 # -136.36E+3,
    ),
)

tractLd1 = AFFE_CHAR_MECA(
    MODELE=model,
    FORCE_NODALE = _F(
        GROUP_NO = (
            #'MED01',
            #'MED02',
            #'MED03',
            'END',
        ),
        FY = +1500E+3/11
    ),
)

tractLd2 = AFFE_CHAR_MECA(
    MODELE=model,
    FORCE_NODALE = _F(
        GROUP_NO = (
            #'MED01',
            #'MED02',
            #'MED03',
            'END',
        ),
        FY = +3000E+3/11
    ),
)

comprLd1 = AFFE_CHAR_MECA(
    MODELE=model,
    FORCE_NODALE = _F(
        GROUP_NO = (
            #'MED01',
            #'MED02',
            #'MED03',
            'END',
        ),
        FY = -1500E+3/11
    ),
)

comprLd2 = AFFE_CHAR_MECA(
    MODELE=model,
    FORCE_NODALE = _F(
        GROUP_NO = (
            #'MED01',
            #'MED02',
            #'MED03',
            'END',
        ),
        FY = -3000E+3/11
    ),
)

reslin = MACRO_ELAS_MULT (
    MODELE = model,
    CHAM_MATER = fieldmat,
    CARA_ELEM = elemprop,
    CHAR_MECA_GLOBAL = boundary,
    CAS_CHARGE = (
        _F(
               NOM_CAS = 'shearLd1',
            SOUS_TITRE = 'nodal load FZ = -15E+3 [KN]',
             CHAR_MECA = shearLd1,
                OPTION = 'SANS',
        ),
        _F(
               NOM_CAS = 'shearLd2',
            SOUS_TITRE = 'nodal load FZ = -30E+3 [KN]',
             CHAR_MECA = shearLd2,
                OPTION = 'SANS',
        ),
        _F(
               NOM_CAS = 'tractLd1',
            SOUS_TITRE = 'nodal load FY = +15E+3 [KN]',
             CHAR_MECA = tractLd1,
                OPTION = 'SANS',
        ),
        _F(
               NOM_CAS = 'tractLd2',
            SOUS_TITRE = 'nodal load FY = +30E+3 [KN]',
             CHAR_MECA = tractLd2,
                OPTION = 'SANS',
        ),
        _F(
               NOM_CAS = 'comprLd1',
            SOUS_TITRE = 'nodal load FY = -15E+3 [KN]',
             CHAR_MECA = comprLd1,
                OPTION = 'SANS',
        ),
        _F(
               NOM_CAS = 'comprLd2',
            SOUS_TITRE = 'nodal load FY = -30E+3 [KN]',
             CHAR_MECA = comprLd2,
                OPTION = 'SANS',
        ),
    ),
)

TEST_RESU(
    RESU = (
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd1',
            NOM_CHAM = 'DEPL',
            CRITERE='RELATIF',
            NOM_CMP='DZ',
            GROUP_NO='N2',
            VALE_CALC = -4.43388814176537E+01,
            VALE_REFE = -4.266E+01,
            PRECISION = 4.E-2,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd2',
            NOM_CHAM = 'DEPL',
            CRITERE='RELATIF',
            NOM_CMP='DZ',
            GROUP_NO='N2',
            VALE_CALC = 2*(-4.43388814176537E+01),
            VALE_REFE = 2*(-4.266E+01),
            PRECISION = 4.E-2,
            REFERENCE='ANALYTIQUE',
        ),
    ),
)

# The field SIEF_ELGA means SIgma (stress) or EFfort (force or moment), per ELement at GAuss points.
# The field SIEF_ELNO means SIgma (stress) or EFfort (force or moment), per ELement at NOde.
# The fields DEPL and SIEF_ELGA are calculated even if we do not request it in CALC_CHAMP
# [U2.01.05]
#

reslin = CALC_CHAMP(
         reuse = reslin,
        MODELE = model,
    CHAM_MATER = fieldmat,
     CARA_ELEM = elemprop,
      RESULTAT = reslin,
     CONTRAINTE = (
         'EFGE_ELNO',
         'SIEF_ELNO',
     ),
)

postres = POST_CHAMP (
    RESULTAT = reslin,
    GROUP_MA = ('ELEMENTS',),
    EXTR_COQUE = _F(
        NUME_COUCHE = 1,
        NIVE_COUCHE = 'MOY' ,
        NOM_CHAM = (
        'SIEF_ELNO',
        ),
    ),
)

postres = CALC_CHAMP(
         reuse = postres,
        MODELE = model,
    CHAM_MATER = fieldmat,
     CARA_ELEM = elemprop,
      RESULTAT = postres,
     CONTRAINTE = (
         'SIEF_NOEU',
     ),
)

TEST_RESU(
    RESU = (
        _F(
            RESULTAT=postres,
            NOM_CAS = 'shearLd1',
            NOM_CHAM = 'SIEF_NOEU',
            CRITERE='RELATIF',
            NOM_CMP='SIYY',
            GROUP_NO='N1',
            VALE_CALC = 3.01492627573424E+01,
            VALE_REFE = 2.997E+01,
            PRECISION = 1.E-2,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=postres,
            NOM_CAS = 'shearLd2',
            NOM_CHAM = 'SIEF_NOEU',
            CRITERE='RELATIF',
            NOM_CMP='SIYY',
            GROUP_NO='N1',
            VALE_CALC = 2*3.01492627573424E+01,
            VALE_REFE = 2*2.997E+01,
            PRECISION = 1.E-2,
            REFERENCE='ANALYTIQUE',
        ),
    ),
)

#~ Units
Pa = 1.
MPa = 1.E6

# Concrete properties
fck = 35 * MPa

# Steel rebars properties
E   = 210000 * MPa; # Young Modulus
fyk = 450 * MPa

ferrDatSlu = dict(
    TOUT = 'OUI',
    C_INF = 30,
    C_SUP = 30,
    FCK = fck,
    FYK = fyk,
    E_S = E,
    GAMMA_S_FOND = 1.15,
    GAMMA_C_FOND = 1.5,
    GAMMA_S_ACCI = 1.15,
    GAMMA_C_ACCI = 1.5,
    SIGS_ELS = 0.8 * fyk,
    SIGC_ELS = 0.6 * fck,
    ALPHA_E  =  15,
    CLASSE_ACIER = 'B',
    ALPHA_CC = 1.0 ,
    UNITE_CONTRAINTE = 'Pa',
    TYPE_STRUCTURE = '2D',
)

reslin = COMBINAISON_FERRAILLAGE (
    reuse = reslin,
    RESULTAT = reslin,
    CODIFICATION = 'EC2',
    COMBINAISON = (
        _F (
            TYPE = 'ELU_FONDAMENTAL',
            NOM_CAS = ('shearLd1','shearLd2')
         ),
        _F (
            TYPE = 'ELU_ACCIDENTEL',
            NOM_CAS = ('comprLd1','comprLd2')
         ),
        _F (
            TYPE = 'ELS_CARACTERISTIQUE',
            NOM_CAS = ('tractLd1','tractLd2')
         ),
    ),
    AFFE = ( _F ( **ferrDatSlu ), ),
    )

TEST_RESU(
    RESU=(
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd1',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 1.06670257901892E-05,
            VALE_REFE = 1.06670257901892E-05,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd2',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 2.13340515803783E-05,
            VALE_REFE = 2.13340515803783E-05,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'COMB_DIME_ACIER',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 2.13340515803783E-05,
            VALE_REFE = 2.13340515803783E-05,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'tractLd2',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 5.E-3,
            VALE_CALC = 1.38216121564E-06,
            VALE_REFE = 1.38888888888E-06,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'tractLd1',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 5.E-3,
            VALE_CALC = 1.38216121564E-06/2.0,
            VALE_REFE = 1.38888888888E-06/2.0,
            REFERENCE='ANALYTIQUE',
        ),
    )
)

TOTEST = CREA_CHAMP (
    OPERATION ='EXTR',
    RESULTAT = reslin,
    TYPE_CHAM = 'CART_NEUT_R',
    NOM_CHAM ='UT01_ELEM',
    NOM_CAS = 'COMB_DIME_ORDRE',
)

TEST_RESU(
    CARTE = 
        _F(
            CHAM_GD = TOTEST,
            MAILLE='M230',
            NOM_CMP='X4',
            REFERENCE='ANALYTIQUE',
            PRECISION=1.E-6,
            VALE_CALC=2.,
            VALE_REFE=2.,
        ),
)

TEST_RESU(
    CARTE = 
        _F(
            CHAM_GD = TOTEST,
            MAILLE='M221',
            NOM_CMP='X4',
            REFERENCE='ANALYTIQUE',
            PRECISION=1.E-6,
            VALE_CALC=4.,
            VALE_REFE=4.,
        ),
)

IMPR_RESU(
    UNITE=8,
    FORMAT='RESULTAT',
    RESU= (
        _F(
            RESULTAT=reslin,
            NOM_CHAM = ('DEPL',),
            GROUP_NO = ('N1','N2'),
        ),
        _F(
            RESULTAT=postres,
            NOM_CHAM = ('SIEF_NOEU',),
            GROUP_NO = ('N1','N2'),
        ),
        _F(
            RESULTAT=reslin,
            NOM_CHAM = ('FERRAILLAGE',),
        ),
    )
)

IMPR_RESU(
    FORMAT='MED',
    RESU = (
        _F(
            RESULTAT = reslin,
            GROUP_MA = ('ELEMENTS',),
        ),
        _F(
            RESULTAT = postres,
            GROUP_MA = ('ELEMENTS',),
            NOM_CHAM = ('SIEF_NOEU',),
        ),
    ),
    # Display local ref
    CONCEPT =_F(
        CARA_ELEM = elemprop,
        REPERE_LOCAL = 'ELEM',
        MODELE = model,
        ),
    UNITE=3
)

ferrDatSlu['CLASSE_ACIER'] = 'A'

ferrDatSlu.pop('TOUT')
ferrDatSlu.update(GROUP_MA = 'ELEMENTS')

print(ferrDatSlu)

reslin = COMBINAISON_FERRAILLAGE (
    reuse = reslin,
    RESULTAT = reslin,
    CODIFICATION = 'EC2',
    COMBINAISON = (
        _F (
            TYPE = 'ELU_FONDAMENTAL',
            NOM_CAS = ('shearLd1','shearLd2')
         ),
    ),
    AFFE = ( _F ( **ferrDatSlu ), ),
    )

TEST_RESU(
    RESU=(
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd1',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 1.06670257901892E-05,
            VALE_REFE = 1.06670257901892E-05,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd2',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 2.13340515803783E-05,
            VALE_REFE = 2.13340515803783E-05,
            REFERENCE='ANALYTIQUE',
        ),
    )
)

ferrDatSlu['CLASSE_ACIER'] = 'C'

reslin = COMBINAISON_FERRAILLAGE (
    reuse = reslin,
    RESULTAT = reslin,
    CODIFICATION = 'EC2',
    COMBINAISON = (
        _F (
            TYPE = 'ELU_FONDAMENTAL',
            NOM_CAS = ('shearLd1','shearLd2')
         ),
    ),
    AFFE = ( _F ( **ferrDatSlu ), ),
    )

TEST_RESU(
    RESU=(
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd1',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 1.06670257901892E-05,
            VALE_REFE = 1.06670257901892E-05,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd2',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 2.13340515803783E-05,
            VALE_REFE = 2.13340515803783E-05,
            REFERENCE='ANALYTIQUE',
        ),
    )
)

ferrDatSlu['UNITE_CONTRAINTE'] = 'MPa'
ferrDatSlu['FCK'] = 35 * Pa
ferrDatSlu['FYK'] = 450 * Pa
ferrDatSlu['E_S'] = 210000 * Pa
ferrDatSlu['SIGS_ELS'] = 0.8 * ferrDatSlu['FYK']
ferrDatSlu['SIGC_ELS'] = 0.6 * ferrDatSlu['FCK']

reslin = COMBINAISON_FERRAILLAGE (
    reuse = reslin,
    RESULTAT = reslin,
    CODIFICATION = 'EC2',
    COMBINAISON = (
        _F (
            TYPE = 'ELU_FONDAMENTAL',
            NOM_CAS = ('shearLd1','shearLd2')
         ),
    ),
    AFFE = ( _F ( **ferrDatSlu ), ),
    )

TEST_RESU(
    RESU=(
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd1',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 1.06670257901892E-05 * 1E+06,
            VALE_REFE = 1.06670257901892E-05 * 1E+06,
            REFERENCE='ANALYTIQUE',
        ),
        _F(
            RESULTAT=reslin,
            NOM_CAS = 'shearLd2',
            NOM_CHAM = 'FERRAILLAGE',
            CRITERE='RELATIF',
            NOM_CMP='DNSYS',
            MAILLE='M230',
            POINT=1,
            PRECISION = 1.E-6,
            VALE_CALC = 2.13340515803783E-05 * 1E+06,
            VALE_REFE = 2.13340515803783E-05 * 1E+06,
            REFERENCE='ANALYTIQUE',
        ),
    )
)

ferrDatSlu = dict(
    TOUT = 'OUI',
    CEQUI = 15,
    TYPE_STRUCTURE = '2D',
    ENROBG = 30,
    ES = E,
    SIGM_ACIER = 0.8 * fyk,
    SIGM_BETON = 0.6 * fck,
    PIVA  =  10.0E-3,
    PIVB  =  3.5E-3,
)

import aster

try:
    reslin = COMBINAISON_FERRAILLAGE (
        reuse = reslin,
        RESULTAT = reslin,
        CODIFICATION = 'UTILISATEUR',
        COMBINAISON = (
            _F (
                TYPE = 'ELU_FONDAMENTAL',
                NOM_CAS = ('shearLd1','shearLd2')
             ),
        ),
        AFFE = ( _F ( **ferrDatSlu ), ),
        )
except (aster.FatalError, aster.error), message:
    if message.id_message == 'COMBFERR_1':
        print("COMBFERR_1 intercepted")

FIN()
