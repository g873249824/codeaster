# TITRE TEST DE LA MACRO COMMANDE DE RECALAGE
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# person_in_charge: aimery.assire at edf.fr
import numpy as NP

DEBUT(CODE=_F(NOM='ZZZZ159G',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU

parametres = [['SIGY__',190.,5.,500.]]

calcul = [['REPONSE1','INST','SIYY'],['REPONSE2','INST','V1']]

weight= NP.array([50. , 1.,])

experience=[        NP.array([[0.00000E+00  , 0.00000E+00 ],
                              [5.00000E-02  , 5.00000E+01 ],
                              [1.00000E-01  , 1.00000E+02 ],
                              [1.50000E-01  , 1.50000E+02 ],
                              [2.00000E-01  , 2.00000E+02 ],
                              [2.50000E-01  , 2.00500E+02 ],
                              [3.00000E-01  , 2.01000E+02 ],
                              [3.50000E-01  , 2.01500E+02 ],
                              [4.00000E-01  , 2.02000E+02 ],
                              [4.50000E-01  , 2.02500E+02 ],
                              [5.00000E-01  , 2.03000E+02 ],
                              [5.50000E-01  , 2.03500E+02 ],
                              [6.00000E-01  , 2.04000E+02 ],
                              [6.50000E-01  , 2.04500E+02 ],
                              [7.00000E-01  , 2.05000E+02 ],
                              [7.50000E-01  , 2.05500E+02 ],
                              [8.00000E-01  , 2.06000E+02 ],
                              [8.50000E-01  , 2.06500E+02 ],
                              [9.00000E-01  , 2.07000E+02 ],
                              [9.50000E-01  , 2.07500E+02 ],
                              [1.00000E+00  , 2.08000E+02 ]]),
                    NP.array([[0.00000E+00  , 0.00000E+00 ],
                              [5.00000E-02  , 0.00000E+00 ],
                              [1.00000E-01  , 0.00000E+00 ],
                              [1.50000E-01  , 0.00000E+00 ],
                              [2.00000E-01  , 0.00000E+00 ],
                              [2.50000E-01  , 2.47500E-04 ],
                              [3.00000E-01  , 4.95000E-04 ],
                              [3.50000E-01  , 7.42500E-04 ],
                              [4.00000E-01  , 9.90000E-04 ],
                              [4.50000E-01  , 1.23750E-03 ],
                              [5.00000E-01  , 1.48500E-03 ],
                              [5.50000E-01  , 1.73250E-03 ],
                              [6.00000E-01  , 1.98000E-03 ],
                              [6.50000E-01  , 2.22750E-03 ],
                              [7.00000E-01  , 2.47500E-03 ],
                              [7.50000E-01  , 2.72250E-03 ],
                              [8.00000E-01  , 2.97000E-03 ],
                              [8.50000E-01  , 3.21750E-03 ],
                              [9.00000E-01  , 3.46500E-03 ],
                              [9.50000E-01  , 3.71250E-03 ],
                              [1.00000E+00  , 3.96000E-03 ]]) ]


# LANCEMENT DE L'IDENTIFICATION

RESU=MACR_RECAL(
         UNITE_ESCL       = 3,
         RESU_EXP         = experience,
         LIST_PARA        = parametres,
         RESI_GLOB_RELA   = 1.E-5,
         RESU_CALC        = calcul,
         LIST_POIDS       = weight,
#         ITER_MAXI        = 1,   # On stoppe le cas-test apres une iteration
         ITER_FONC_MAXI   = 50,
         CALCUL_ESCLAVE=(_F(LANCEMENT='DISTRIBUTION',
                            MPI_NBCPU=1,
                            MODE='BATCH',
                         )),

);


# On cree une liste bidon pour pouvoir
# definir une fonction testable par TEST_RESU
BIDON=DEFI_LIST_REEL(VALE=(1.),);

OPTIM=DEFI_FONCTION(NOM_PARA='INST',
                    VALE_PARA=BIDON,
                    VALE_FONC=RESU);

TEST_FONCTION(VALEUR=_F(VALE_CALC=199.999998723,
                        VALE_REFE=200.0,
                        VALE_PARA=1.0,
                        REFERENCE='ANALYTIQUE',
                        PRECISION=1.E-4,
                        FONCTION=OPTIM,),
              )

exper1=DEFI_FONCTION(NOM_PARA='INST',
                        NOM_RESU='SIYY',
                        VALE=(
0.00000E+00  , 0.00000E+00,
5.00000E-02  , 5.00000E+01,
1.00000E-01  , 1.00000E+02,
1.50000E-01  , 1.50000E+02,
2.00000E-01  , 2.00000E+02,
2.50000E-01  , 2.00500E+02,
3.00000E-01  , 2.01000E+02,
3.50000E-01  , 2.01500E+02,
4.00000E-01  , 2.02000E+02,
4.50000E-01  , 2.02500E+02,
5.00000E-01  , 2.03000E+02,
5.50000E-01  , 2.03500E+02,
6.00000E-01  , 2.04000E+02,
6.50000E-01  , 2.04500E+02,
7.00000E-01  , 2.05000E+02,
7.50000E-01  , 2.05500E+02,
8.00000E-01  , 2.06000E+02,
8.50000E-01  , 2.06500E+02,
9.00000E-01  , 2.07000E+02,
9.50000E-01  , 2.07500E+02,
1.00000E+00  , 2.08000E+02 ),)

exper2=DEFI_FONCTION(NOM_PARA='INST',
                        NOM_RESU='V1',
                        VALE=(
0.00000E+00  , 0.00000E+00,
5.00000E-02  , 0.00000E+00,
1.00000E-01  , 0.00000E+00,
1.50000E-01  , 0.00000E+00,
2.00000E-01  , 0.00000E+00,
2.50000E-01  , 2.47500E-04,
3.00000E-01  , 4.95000E-04,
3.50000E-01  , 7.42500E-04,
4.00000E-01  , 9.90000E-04,
4.50000E-01  , 1.23750E-03,
5.00000E-01  , 1.48500E-03,
5.50000E-01  , 1.73250E-03,
6.00000E-01  , 1.98000E-03,
6.50000E-01  , 2.22750E-03,
7.00000E-01  , 2.47500E-03,
7.50000E-01  , 2.72250E-03,
8.00000E-01  , 2.97000E-03,
8.50000E-01  , 3.21750E-03,
9.00000E-01  , 3.46500E-03,
9.50000E-01  , 3.71250E-03,
1.00000E+00  , 3.96000E-03,
 ),)

RESU2=MACR_RECAL(
         UNITE_ESCL       = 3,
         PARA_OPTI=_F(NOM_PARA='SIGY__', VALE_INI=190., VALE_MIN=5.0, VALE_MAX=500.0),
         COURBE=(_F(FONC_EXP=exper1, NOM_FONC_CALC='REPONSE1', PARA_X='INST', PARA_Y='SIYY',POIDS=50.),
                 _F(FONC_EXP=exper2, NOM_FONC_CALC='REPONSE2', PARA_X='INST', PARA_Y='V1',POIDS=1.),),

)  ;

BIDON2=DEFI_LIST_REEL(VALE=(1.),);

OPTIM2=DEFI_FONCTION(NOM_PARA='INST',
                    VALE_PARA=BIDON2,
                    VALE_FONC=RESU2);

TEST_FONCTION(VALEUR=_F(VALE_CALC=200.0,
                        VALE_REFE=200.0,
                        VALE_PARA=1.0,
                        REFERENCE='ANALYTIQUE',
                        PRECISION=1.E-4,
                        FONCTION=OPTIM2,),
              )

FIN()
