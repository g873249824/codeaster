# ======================================================================
# COPYRIGHT (C) 1991 - 2017  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',),);

mail0 = LIRE_MAILLAGE(FORMAT="ASTER", );

mail1 = CREA_MAILLAGE(MAILLAGE=mail0,
                   CREA_MAILLE=_F(NOM='REFLEX',GROUP_MA='IFLUSOL',
                                  PREF_MAILLE='N'),
                   );

mail = CREA_MAILLAGE(MAILLAGE=mail1,
          CREA_POI1 = (
                _F(NOM_GROUP_MA='PC',NOEUD='NO6288',),
                       ),
                     );

mail = DEFI_GROUP(reuse =mail, MAILLAGE=mail,
                CREA_GROUP_NO=_F(GROUP_MA=('STRVOU','VOLSOL','TH_SOL',),),
                );
                
mail = DEFI_GROUP(reuse =mail, MAILLAGE=mail,
                CREA_GROUP_NO=_F(INTERSEC=('STRVOU','VOLSOL',),NOM='INTESOL'),
                );
                
mail = MODI_MAILLAGE(reuse =mail, MAILLAGE=mail,
             ORIE_PEAU_3D=_F(GROUP_MA_VOLU='VOLSOL',GROUP_MA='TH_SOL'),
                );
                
# 
eau   = DEFI_MATERIAU (FLUIDE=_F(RHO=1000.,  CELE_R=1500.));
#
beton = DEFI_MATERIAU( ELAS=_F( E= 3.6E+10, RHO= 2400. , NU= 0.2,
                               )
                      ) ;
#
# Pour la roche, on va utiliser les frontieres absorbantes avec raideur
# LONG_CARA sert a definir la raideur equivalente et represente
# une longueur caracteristique du domaine borne par les frontieres absorbantes
#
roche = DEFI_MATERIAU( ELAS=_F( E= 3.0E+11, RHO= 2000., NU= 0.16, 
                               #AMOR_ALPHA=0.0005, AMOR_BETA=0.6,
                               AMOR_HYST=0.04,
                               LONG_CARA=340.,
                               ),
                      ) ;
#
ensemble  = AFFE_MODELE (MAILLAGE= mail,
                          AFFE=(
                                 _F(GROUP_MA    = 'FLUIDE',
                                    PHENOMENE   ='MECANIQUE',
                                    MODELISATION='3D_FLUIDE'),
                                 _F(GROUP_MA    = 'IFLUSTR',
                                    PHENOMENE   ='MECANIQUE',
                                    MODELISATION='FLUI_STRU'),
                                 _F(GROUP_MA    = 'IFLUSOL',
                                    PHENOMENE   ='MECANIQUE',
                                    MODELISATION='FLUI_STRU'),
                                 _F(GROUP_MA    = 'IFLUSOLF',
                                    PHENOMENE   ='MECANIQUE',
                                    MODELISATION='3D_FLUI_ABSO'),
                                  _F(GROUP_MA    = 'STRVOU',
                                    PHENOMENE   ='MECANIQUE',
                                    MODELISATION='3D'),
                                  _F(GROUP_MA    = 'VOLSOL',
                                    PHENOMENE   ='MECANIQUE',
                                    MODELISATION='3D'),
                                  _F(GROUP_MA    = 'TH_SOL',
                                    PHENOMENE   ='MECANIQUE',
                                    MODELISATION='3D_ABSO'),
                                ),
                           );
                           
#
champmat = AFFE_MATERIAU    (MAILLAGE= mail,
                    AFFE =(
                           _F(GROUP_MA= ('FLUIDE', 'IFLUSTR',
                                        ),
                               MATER   = eau ),
                           _F(GROUP_MA    = 'IFLUSOL',
                              MATER   = eau ),
                           _F(GROUP_MA    = ('REFLEX','IFLUSOLF'),
                              MATER   = eau ),
                           _F(GROUP_MA= 'STRVOU',
                               MATER   = beton ),
                           _F(GROUP_MA= ('VOLSOL', 'TH_SOL'),
                               MATER   = roche ),
                           ),
                               );
                               
cond_lib = AFFE_CHAR_MECA( MODELE= ensemble,
           DDL_IMPO=_F(GROUP_NO='SLIBRE_N',  PRES=0., PHI=0.)
                            ) ;
                            
impemeca = AFFE_CHAR_MECA (MODELE    = ensemble,
               IMPE_FACE =(_F(GROUP_MA= 'IFLUSOLF', IMPE= 1.5E+6),
                           ));


# Calcul des matrices et vecteurs elementaires=
#---------------------------------------------- 
rigi_ele = CALC_MATR_ELEM( MODELE= ensemble , OPTION= 'RIGI_MECA',
                               CHAM_MATER= champmat, 
                               CHARGE= (cond_lib)    ) ;
                               
righ_ele = CALC_MATR_ELEM( MODELE= ensemble , OPTION= 'RIGI_MECA_HYST',
                               RIGI_MECA = rigi_ele,
                               CHAM_MATER= champmat, 
                               CHARGE= (cond_lib)    ) ;
                               

mass_ele = CALC_MATR_ELEM( MODELE= ensemble , OPTION= 'MASS_MECA',
                               CHAM_MATER= champmat, 
                               CHARGE= (cond_lib)    ) ;

amor_ele = CALC_MATR_ELEM( MODELE = ensemble, OPTION= 'AMOR_MECA',
                               CHAM_MATER= champmat, 
                               RIGI_MECA = rigi_ele,
                               MASS_MECA = mass_ele,
                               CHARGE= (cond_lib)    ) ;
                               
#
# Calcul de l'impedance associee au domaine fluide
#
impe_ele = CALC_MATR_ELEM( MODELE = ensemble, OPTION= 'IMPE_MECA',
                               CHAM_MATER= champmat, 
                               CHARGE= (impemeca)    ) ;
                               
VECT_ELE=CALC_VECT_ELEM(     OPTION='CHAR_MECA',
                             CHAM_MATER=champmat,
                             CHARGE=cond_lib,
                           )
 
nume_ddl = NUME_DDL( MATR_RIGI= rigi_ele, );

# Assemblage des matrices et vecteurs=
#-------------------------------------
#  
rigidite = ASSE_MATRICE( MATR_ELEM= rigi_ele , NUME_DDL= nume_ddl ) ;
rigihyst = ASSE_MATRICE( MATR_ELEM= righ_ele , NUME_DDL= nume_ddl ) ;
masse    = ASSE_MATRICE( MATR_ELEM= mass_ele , NUME_DDL= nume_ddl ) ;
amort    = ASSE_MATRICE( MATR_ELEM= amor_ele , NUME_DDL= nume_ddl ) ;
imped    = ASSE_MATRICE( MATR_ELEM= impe_ele , NUME_DDL= nume_ddl ) ;

VECAS=ASSE_VECTEUR( VECT_ELEM=VECT_ELE, NUME_DDL=nume_ddl );

#
fo1 = DEFI_FONCTION ( NOM_PARA= 'FREQ', 
         VALE= ( 0., 1., 100., 1. ) );
         
INCLUDE(UNITE=31,);

#Parametres
# Solution de reference :
# TFIN = 20.48
# dt = 0.005
# Pour le cas-test :
dt = 0.01
TFIN = 0.32


# Profondeur du domaine de sol :
prof = -170.0038
df = 1./TFIN
fmax = int(1/(2.*dt)) - df
NF = int(TFIN/dt)+1

linst= DEFI_LIST_REEL ( DEBUT = 0.,
                          INTERVALLE = (
                                      _F(
                                         JUSQU_A = TFIN-dt,
                                         PAS=dt,
                                         ),
                                       ),
                      );
                      

#
# Si le sol est homogene non dissipatif, on devrait mettre COEF=0.5
# Car on a un facteur 2 entre le signal total champ libre et l'onde incidente en profondeur
# Ici le sol a de l'amortissement, ce qui attenue l'onde
#
accex0= CALC_FONCTION( COMB=_F( FONCTION = acc_x, COEF = 0.52),
                      LIST_PARA=linst);
                      
accex= CALC_FONCTION( CORR_ACCE=_F( FONCTION = accex0, METHODE='FILTRAGE'),);
                      

#
# accxc sert juste de reference, pas pour le calcul
#
accxc= CALC_FONCTION( COMB=_F( FONCTION = acc_x, COEF = 1.0),
                      LIST_PARA=linst);
                      
vitex=CALC_FONCTION(INTEGRE=_F(FONCTION=accex,));

deplx0=CALC_FONCTION(INTEGRE=_F(FONCTION=vitex,));


#
# Correction de la derive d'integration
#
deplxF=FORMULE(NOM_PARA='INST',
            VALE='deplx0(INST)-(INST*deplx0(TFIN-dt)/(TFIN-dt))')

deplx=CALC_FONC_INTERP(FONCTION=deplxF, NOM_PARA = 'INST',
                        PROL_DROITE='CONSTANT',
                        PROL_GAUCHE='CONSTANT',
                        LIST_PARA=linst);

                      
# On donne en exemple en plus les cas ondes P et SH
#
# ONDEP=AFFE_CHAR_MECA_F(  MODELE=ensemble,
#                 ONDE_PLANE=_F( DIRECTION = (0., 0., 1.,), 
#                 TYPE_ONDE = 'P',
#                 DIST=prof,
#                 DEPL_IMPO=deplx,
#                 FONC_SIGNAL = vitex, GROUP_MA='TH_SOL')
#                      );
ONDEV=AFFE_CHAR_MECA_F(  MODELE=ensemble,
                ONDE_PLANE=_F( DIRECTION = (0., 0., 1.,), 
                TYPE_ONDE = 'SV',
                DIST=prof,
                DEPL_IMPO=deplx,
                FONC_SIGNAL = vitex, GROUP_MA='TH_SOL')
                     );
# ONDEH=AFFE_CHAR_MECA_F(  MODELE=ensemble,
#                 ONDE_PLANE=_F( DIRECTION = (0., 0., 1.,), 
#                 TYPE_ONDE = 'SH',
#                 DIST=prof,
#                 DEPL_IMPO=deplx,
#                 FONC_SIGNAL = vitex, GROUP_MA='TH_SOL')
#                      );



for k in range(1,NF):

#
# VECT_EL1 et VECT_EL3 correspondent aux ondes P et SH
#
#  VECT_EL1=CALC_VECT_ELEM(INST=(k-1)*dt, OPTION='CHAR_MECA', CHAM_MATER=champmat, CHARGE=ONDEP)
#  VECA1=ASSE_VECTEUR(VECT_ELEM=VECT_EL1, NUME_DDL=nume_ddl)
  VECT_EL2=CALC_VECT_ELEM(INST=(k-1)*dt, OPTION='CHAR_MECA', CHAM_MATER=champmat, CHARGE=ONDEV)
  VECA2=ASSE_VECTEUR(VECT_ELEM=VECT_EL2, NUME_DDL=nume_ddl)
#  VECT_EL3=CALC_VECT_ELEM(INST=(k-1)*dt, OPTION='CHAR_MECA', CHAM_MATER=champmat, CHARGE=ONDEH)
#  VECA3=ASSE_VECTEUR(VECT_ELEM=VECT_EL3, NUME_DDL=nume_ddl)
  VECAT=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R',
                  OPERATION='ASSE',
                  NUME_DDL= nume_ddl,
                  MODELE=ensemble,
                  ASSE=(
#                         _F(TOUT='OUI',
#                            CHAM_GD=VECA1,
#                            CUMUL='OUI',
#                            COEF_R=1.0,
#                            ),
                        _F(TOUT='OUI',
                           CHAM_GD=VECA2,
                           CUMUL='OUI',
                           COEF_R=1.0,
                           ),
#                         _F(TOUT='OUI',
#                            CHAM_GD=VECA3,
#                            CUMUL='OUI',
#                            COEF_R=1.0,
#                            ),
        ),
      ); 
  if k==1:
    CHA_ON=CREA_RESU(OPERATION='AFFE',
                  TYPE_RESU='DYNA_TRANS',
                  MATR_RIGI=rigidite,
                  MATR_MASS=masse,
                  NOM_CHAM='DEPL',
                  AFFE=(_F(CHAM_GD=VECAT,INST=0.0,),),);
  else:
    CHA_ON=CREA_RESU(reuse=CHA_ON,OPERATION='AFFE',
                  TYPE_RESU='DYNA_TRANS',
                  MATR_RIGI=rigidite,
                  MATR_MASS=masse,
                  NOM_CHAM='DEPL',
                  AFFE=(_F(CHAM_GD=VECAT,INST=(k-1)*dt,),),);
#  DETRUIRE(INFO=1,CONCEPT=_F(NOM=(VECT_EL1,VECA1)));
  DETRUIRE(INFO=1,CONCEPT=_F(NOM=(VECT_EL2,VECA2)));
#  DETRUIRE(INFO=1,CONCEPT=_F(NOM=(VECT_EL3,VECA3)));
  DETRUIRE(INFO=1,CONCEPT=_F(NOM=(VECAT)));
  
CHAONF = REST_SPEC_TEMP( RESULTAT = CHA_ON ,
                          METHODE = 'PROL_ZERO' ,
                          SYMETRIE = 'NON' ,
                          NOM_CHAM = 'DEPL' ,  );


lfreqc = DEFI_LIST_REEL ( DEBUT = df,
                           INTERVALLE = _F( JUSQU_A = fmax,
                                          PAS = df)
                            );                            

#
# Calcul pour la premiere frequence qu'on va decaler a 0 :
#
dynah0 = DYNA_VIBRA    ( TYPE_CALCUL='HARM', BASE_CALCUL='PHYS',
                        MATR_MASS= masse,   MATR_RIGI= rigihyst, #rigidite,
                        MATR_AMOR = amort,  MATR_IMPE_PHI = imped,
                        EXCIT   = _F( VECT_ASSE = VECAS,
                                      COEF_MULT = 1.
                                       ),
                        EXCIT_RESU=(
                                 _F( RESULTAT = CHAONF,
                                     COEF_MULT_C= -1.0 -0.0j,),
                                 ),
                        FREQ= df,
                        TOUT_CHAM= 'OUI'
                        );
                        
DEP0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_C',
                 OPERATION='EXTR',
                 RESULTAT=dynah0,
                 NOM_CHAM='DEPL',
                 FREQ=df,
                 INFO=1,);                        
                        
VIT0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_C',
                 OPERATION='EXTR',
                 RESULTAT=dynah0,
                 NOM_CHAM='VITE',
                 FREQ=df,
                 INFO=1,);
                 
ACC0=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_C',
                 OPERATION='EXTR',
                 RESULTAT=dynah0,
                 NOM_CHAM='ACCE',
                 FREQ=df,
                 INFO=1,);
                 
dynah=CREA_RESU(OPERATION='AFFE',
                  TYPE_RESU='DYNA_HARMO',
                  MATR_RIGI=rigidite,
                  MATR_MASS=masse,
                  NOM_CHAM='DEPL',
                  AFFE=(_F(CHAM_GD=DEP0,FREQ=0.0,),),);
                  
dynah=CREA_RESU(reuse=dynah, OPERATION='AFFE',
                  TYPE_RESU='DYNA_HARMO',
                  MATR_RIGI=rigidite,
                  MATR_MASS=masse,
                  NOM_CHAM='VITE',
                  AFFE=(_F(CHAM_GD=VIT0,FREQ=0.0,),),);
                  
dynah=CREA_RESU(reuse=dynah, OPERATION='AFFE',
                  TYPE_RESU='DYNA_HARMO',
                  MATR_RIGI=rigidite,
                  MATR_MASS=masse,
                  NOM_CHAM='ACCE',
                  AFFE=(_F(CHAM_GD=ACC0,FREQ=0.0,),),);
                                                
#
# Calcul pour toute la suite des frequences :
#

dynah = DYNA_VIBRA    ( reuse=dynah, RESULTAT=dynah,
                        TYPE_CALCUL='HARM', BASE_CALCUL='PHYS',
                        MATR_MASS= masse,   MATR_RIGI= rigihyst, #rigidite,
                        MATR_AMOR = amort,  MATR_IMPE_PHI = imped,
                        EXCIT   = _F( VECT_ASSE = VECAS,
                                      COEF_MULT = 1.
                                       ),
                        EXCIT_RESU=(
                                 _F( RESULTAT = CHAONF,
                                     COEF_MULT_C= -1.0 -0.0j,),
                                 ),
                        LIST_FREQ= lfreqc,
                        TOUT_CHAM= 'OUI'
                      );
                      
dyna = REST_SPEC_TEMP( RESULTAT = dynah ,
                          METHODE = 'PROL_ZERO' ,
                          SYMETRIE = 'NON' ,
                          TOUT_CHAM = 'OUI'  );
                      
# Point au sommet du barrage

axch = RECU_FONCTION( RESULTAT= dyna, GROUP_NO='GNOH', NOM_CHAM= 'ACCE',
                      INTERPOL='LIN',
                      PROL_DROITE='CONSTANT',PROL_GAUCHE='CONSTANT',
                      LIST_INST=linst,
                      NOM_CMP='DX');
      


# Point au bas du barrage

axcb = RECU_FONCTION( RESULTAT= dyna, GROUP_NO='GNOB', 
                      NOM_CHAM= 'ACCE',
                      INTERPOL='LIN',
                      PROL_DROITE='CONSTANT',PROL_GAUCHE='CONSTANT',
                      LIST_INST=linst,
                         NOM_CMP='DX');

# Point au bord du barrage 

axcc = RECU_FONCTION( RESULTAT= dyna, GROUP_NO='GNOB',  
                      NOM_CHAM= 'ACCE',
                      INTERPOL='LIN',
                      PROL_DROITE='CONSTANT',PROL_GAUCHE='CONSTANT',
                      LIST_INST=linst,
                         NOM_CMP='DX');
 
    
# IMPR_FONCTION(UNITE=32,
#               FORMAT='XMGRACE',
#              COURBE=(_F(FONCTION=axch),
#                      _F(FONCTION=axcb),
#                      _F(FONCTION=axcc),
#                      _F(FONCTION=accxc),
#               ),
#       );
                    
              
freqspec = DEFI_LIST_REEL ( DEBUT = 0.1,
                          INTERVALLE = (
                                      _F(
                                         JUSQU_A = 15.,
                                         NOMBRE = 149,
                                       ),
                                      _F(
                                         JUSQU_A = 35.,
                                         NOMBRE = 80,
                                       ),
                                      _F(
                                         JUSQU_A = 100.,
                                         NOMBRE = 65,
                                       ),
                                        ),
                           );


sro_axh=CALC_FONCTION(SPEC_OSCI=_F(FONCTION=axch, AMOR_REDUIT=0.05,
                                  NORME=1.,
                                  LIST_FREQ = freqspec,
                                 ),);
 
sro_axb=CALC_FONCTION(SPEC_OSCI=_F(FONCTION=axcb, AMOR_REDUIT=0.05,
                                  NORME=1.,
                                  LIST_FREQ = freqspec,
                                 ),);
 
sro_axc=CALC_FONCTION(SPEC_OSCI=_F(FONCTION=axcc, AMOR_REDUIT=0.05,
                                  NORME=1.,
                                  LIST_FREQ = freqspec,
                                 ),);
 
sro_axd=CALC_FONCTION(SPEC_OSCI=_F(FONCTION=acc_x, AMOR_REDUIT=0.05,
                                  NORME=1.,
                                  LIST_FREQ = freqspec,
                                 ),);
 
 
# IMPR_FONCTION(UNITE=33,
#               FORMAT='XMGRACE',
#               COURBE=(_F(FONCTION=sro_axh),
#                       _F(FONCTION=sro_axb),
#                       _F(FONCTION=sro_axc),
#                       _F(FONCTION=sro_axd),
#            ),
#       );      

                                 
#
# Valeurs de reference pour calcul complet sur aster5 :
# inst1 = 1.02
# calt1 = 3.706025202053
# reft1 = 4.52
# tolt1 = 0.22
# calsro = 16.86561519333
# refsro = 17.40
# tolsro = 0.05

#
# Valeurs de reference pour test :
inst1 = 0.27
calt1 = 1.258811841068 
reft1 = 1.273984709738
tolt1 = 0.013
calsro = 3.413043472460
refsro = 3.446278205765
tolsro = 0.011


TEST_FONCTION(VALEUR=(
                       _F(VALE_CALC=calt1,
                         VALE_REFE=reft1,
                         PRECISION=tolt1,
                         REFERENCE = 'AUTRE_ASTER',
                         VALE_PARA=inst1,
                         FONCTION=axch,
                         ),
                      _F(
                         VALE_CALC=calsro,
                         VALE_REFE=refsro,
                         PRECISION=tolsro,
                         REFERENCE = 'AUTRE_ASTER',
                         VALE_PARA=(10.7, 0.05),
                         NOM_PARA=('FREQ', 'AMOR'),
                         FONCTION=sro_axh,
                         ),
                      ),
              );

FIN( );

