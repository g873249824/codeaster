# -*- coding: iso-8859-1 -*-

### This file is generated by SALOME automatically by dump python functionality

import sys
import salome

salome.salome_init()

import salome_notebook
notebook = salome_notebook.notebook
sys.path.insert( 0, r'/local01/maillage_mixte')

import iparameters
ipar = iparameters.IParameters(salome.myStudy.GetCommonParameters("Interface Applicative", 1))

#Set up visual properties:
ipar.setProperty("AP_ACTIVE_VIEW", "VTKViewer_0_0")
ipar.setProperty("AP_WORKSTACK_INFO", "00000001000000000000000201000000010000057e000000040000000100000001000000080000001a00560054004b005600690065007700650072005f0030005f00300000000102")
ipar.setProperty("AP_ACTIVE_MODULE", "Mesh")
ipar.setProperty("AP_SAVEPOINT_NAME", "GUI state: 1")
#Set up lists:
# fill list AP_VIEWERS_LIST
ipar.append("AP_VIEWERS_LIST", "VTKViewer_1")
# fill list VTKViewer_1
ipar.append("VTKViewer_1", "VTK scene:1 - viewer:1")
ipar.append("VTKViewer_1", """<?xml version="1.0"?>
<ViewState>
    <Position X="26.5944" Y="-5.59441" Z="6.09441"/>
    <FocalPoint X="20.5" Y="0.5" Z="0"/>
    <ViewUp X="0" Y="0" Z="1"/>
    <ViewScale Parallel="0.707107" X="1" Y="1" Z="1"/>
    <DisplayCubeAxis Show="0"/>
    <GraduatedAxis Axis="X">
        <Title isVisible="1" Text="X" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Y">
        <Title isVisible="1" Text="Y" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Z">
        <Title isVisible="1" Text="Z" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <Trihedron isShown="1" Size="105"/>
</ViewState>
""")
# fill list AP_MODULES_LIST
ipar.append("AP_MODULES_LIST", "Geometry")
ipar.append("AP_MODULES_LIST", "Mesh")


import tpnl301cd_GEOM
tpnl301cd_GEOM.RebuildData(salome.myStudy)
import tpnl301cd_SMESH
tpnl301cd_SMESH.RebuildData(salome.myStudy)

if salome.sg.hasDesktop():
	salome.sg.updateObjBrowser(1)
	iparameters.getSession().restoreVisualState(1)
# -*- coding: iso-8859-1 -*-
### This file is generated by SALOME automatically by dump python functionality
### of GEOM component

import GEOM
import geompy
import math
import SALOMEDS

def RebuildData(theStudy):
	geompy.init_geom(theStudy)

	global dessus1, cote1, Fuse_2, Vertex_7, Extrusion_1, Face_5, Fuse_3, Extrusion_2, Vertex_4, Line_3, Vertex_5, Face_1, Line_1, Vertex_2, dessus2, Face_4, cote2, Vertex_3, Fuse_1, Face_6, Face_2, Vertex_8, Face_3, Line_4, Vertex_1, Line_2, Vertex_6
	Vertex_1 = geompy.MakeVertex(0.25, 0.25, 0)
	Vertex_2 = geompy.MakeVertex(0.25, 0.25, 1)
	Vertex_3 = geompy.MakeVertex(0.25, 0.75, 1)
	Vertex_4 = geompy.MakeVertex(0.25, 0.75, 0)
	Vertex_5 = geompy.MakeVertex(0.75, 0.25, 0)
	Vertex_6 = geompy.MakeVertex(0.75, 0.25, 1)
	Vertex_7 = geompy.MakeVertex(0.75, 0.75, 1)
	Vertex_8 = geompy.MakeVertex(0.75, 0.75, 0)
	Line_1 = geompy.MakeLineTwoPnt(Vertex_1, Vertex_2)
	Vertex_1 = geompy.GetMainShape(Line_1)
	Line_2 = geompy.MakeLineTwoPnt(Vertex_5, Vertex_6)
	Vertex_5 = geompy.GetMainShape(Line_2)
	Line_3 = geompy.MakeLineTwoPnt(Vertex_8, Vertex_7)
	Vertex_8 = geompy.GetMainShape(Line_3)
	Line_4 = geompy.MakeLineTwoPnt(Vertex_4, Vertex_3)
	Vertex_4 = geompy.GetMainShape(Line_4)
	Face_1 = geompy.MakeFaceObjHW(Line_2, 0.5, 0.5)
	Face_2 = geompy.MakeFaceObjHW(Line_3, 0.5, 0.5)
	Face_3 = geompy.MakeFaceObjHW(Line_1, 0.5, 0.5)
	Face_4 = geompy.MakeFaceObjHW(Line_4, 0.5, 0.5)
	Fuse_1 = geompy.MakeFuse(Face_1, Face_2)
	Fuse_2 = geompy.MakeFuse(Face_4, Face_3)
	Fuse_3 = geompy.MakeFuse(Fuse_1, Fuse_2)
	Extrusion_1 = geompy.MakePrismVecH(Fuse_1, Line_2, 1)
	Extrusion_2 = geompy.MakePrismVecH(Fuse_2, Line_1, 1)
	[geomObj_1,geomObj_2,geomObj_3,geomObj_4,dessus1,geomObj_5,geomObj_6,geomObj_7,geomObj_8,geomObj_9,geomObj_10] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_11,geomObj_12,geomObj_13,geomObj_14,geomObj_15,geomObj_16,geomObj_17,dessus2,geomObj_18,geomObj_19,geomObj_20] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_21,geomObj_22,cote1,geomObj_23,geomObj_24,geomObj_25,geomObj_26,geomObj_27,geomObj_28,geomObj_29,geomObj_30] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_31,geomObj_32,geomObj_33,geomObj_34,geomObj_35,geomObj_36,geomObj_37,geomObj_38,cote2,geomObj_39,geomObj_40] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_41,geomObj_42,geomObj_43,geomObj_44,geomObj_45,geomObj_46,geomObj_47,geomObj_48,geomObj_49,Face_5,geomObj_50] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_51,geomObj_52,geomObj_53,geomObj_54,geomObj_55,geomObj_56,geomObj_57,geomObj_58,geomObj_59,geomObj_60,Face_6] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	geompy.addToStudy( Vertex_1, "Vertex_1" )
	geompy.addToStudy( Vertex_2, "Vertex_2" )
	geompy.addToStudy( Vertex_3, "Vertex_3" )
	geompy.addToStudy( Vertex_4, "Vertex_4" )
	geompy.addToStudy( Vertex_5, "Vertex_5" )
	geompy.addToStudy( Vertex_6, "Vertex_6" )
	geompy.addToStudy( Vertex_7, "Vertex_7" )
	geompy.addToStudy( Vertex_8, "Vertex_8" )
	geompy.addToStudyInFather( Vertex_1, Line_1, "Line_1" )
	geompy.addToStudyInFather( Vertex_5, Line_2, "Line_2" )
	geompy.addToStudyInFather( Vertex_8, Line_3, "Line_3" )
	geompy.addToStudyInFather( Vertex_4, Line_4, "Line_4" )
	geompy.addToStudy( Face_1, "Face_1" )
	geompy.addToStudy( Face_2, "Face_2" )
	geompy.addToStudy( Face_3, "Face_3" )
	geompy.addToStudy( Face_4, "Face_4" )
	geompy.addToStudy( Fuse_1, "Fuse_1" )
	geompy.addToStudy( Fuse_2, "Fuse_2" )
	geompy.addToStudy( Fuse_3, "Fuse_3" )
	geompy.addToStudy( Extrusion_1, "Extrusion_1" )
	geompy.addToStudy( Extrusion_2, "Extrusion_2" )
	geompy.addToStudyInFather( Extrusion_2, dessus1, "dessus1" )
	geompy.addToStudyInFather( Extrusion_2, dessus2, "dessus2" )
	geompy.addToStudyInFather( Extrusion_2, cote1, "cote1" )
	geompy.addToStudyInFather( Extrusion_2, cote2, "cote2" )
	geompy.addToStudyInFather( Extrusion_2, Face_5, "Face_5" )
	geompy.addToStudyInFather( Extrusion_2, Face_6, "Face_6" )

	### Store presentation parameters of displayed objects
	import iparameters
	ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "GEOM", 1))


	pass
# -*- coding: iso-8859-1 -*-
### This file is generated by SALOME automatically by dump python functionality of SMESH component

import salome, SMESH, SALOMEDS
import smesh

## import GEOM dump file ## 
import string, os, sys, re
sys.path.insert( 0, os.path.dirname(__file__) )
exec("from "+re.sub("SMESH$","GEOM",__name__)+" import *")


def RebuildData(theStudy):
	smesh.SetCurrentStudy(theStudy)
	import StdMeshers
	import NETGENPlugin
	smeshObj_1 = smesh.Mesh(Fuse_3)
	Netgen_1D_2D = smeshObj_1.Triangle(algo=smesh.NETGEN)
	isDone = smeshObj_1.Compute()
	smeshObj_2 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'A' )
	nbAdd = smeshObj_2.Add( [ 6 ] )
	smeshObj_3 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'B' )
	nbAdd = smeshObj_3.Add( [ 3 ] )
	smeshObj_4 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'C' )
	nbAdd = smeshObj_4.Add( [ 7 ] )
	smeshObj_5 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'D' )
	nbAdd = smeshObj_5.Add( [ 9 ] )
	smeshObj_6 = smeshObj_1.CreateEmptyGroup( SMESH.EDGE, 'DC' )
	nbAdd = smeshObj_6.Add( [ 12, 10 ] )
	smesh.SetName(smeshObj_1, 'Mesh_1')
	smeshObj_1.ExportMED( '/home/haelewyn/ther_hydr/ttnl03jm.med', 0, SMESH.MED_V2_2 )
	qua12 = smesh.Mesh(Fuse_1)
	tri12 = smesh.Mesh(Fuse_2)
	Regular_1D = qua12.Segment()
	Nb_Segments_1 = Regular_1D.NumberOfSegments(1)
	Nb_Segments_1.SetDistrType( 0 )
	Quadrangle_2D = qua12.Quadrangle()
	isDone = qua12.Compute()
	Average_length_1 = smesh.CreateHypothesis('NETGEN_Parameters_2D', 'NETGENEngine')
	Regular_1D_1 = tri12.Segment()
	status = tri12.AddHypothesis(Nb_Segments_1)
	Netgen_2D = tri12.Triangle(algo=smesh.NETGEN_2D)
	isDone = tri12.Compute()
	smeshObj_7 = smesh.Concatenate([tri12.GetMesh(), qua12.GetMesh()], 1, 1, 1e-05,True)
	[ smeshObj_8, smeshObj_9, smeshObj_10, smeshObj_11, smeshObj_12, smeshObj_13 ] = smeshObj_7.GetGroups()
	smeshObj_14 = smeshObj_7.CreateEmptyGroup( SMESH.EDGE, 'DC' )
	nbAdd = smeshObj_14.Add( [ 3, 17 ] )
	smeshObj_15 = smeshObj_7.CreateEmptyGroup( SMESH.NODE, 'A' )
	nbAdd = smeshObj_15.Add( [ 5 ] )
	smeshObj_16 = smeshObj_7.CreateEmptyGroup( SMESH.NODE, 'B' )
	nbAdd = smeshObj_16.Add( [ 9 ] )
	smeshObj_17 = smeshObj_7.CreateEmptyGroup( SMESH.NODE, 'C' )
	nbAdd = smeshObj_17.Add( [ 12 ] )
	smeshObj_18 = smeshObj_7.CreateEmptyGroup( SMESH.NODE, 'D' )
	nbAdd = smeshObj_18.Add( [ 2 ] )
	smesh.SetName(smeshObj_7, 'tri_quad')
	smeshObj_7.ExportMED( '/home/haelewyn/ther_hydr/tri_quad.med', 0, SMESH.MED_V2_2 )
	smeshObj_7.RemoveGroup( smeshObj_13 )
	smeshObj_7.RemoveGroup( smeshObj_10 )
	smeshObj_7.RemoveGroup( smeshObj_12 )
	smeshObj_7.RemoveGroup( smeshObj_9 )
	smesh.SetName(smeshObj_7, 'tri_quad')
	smeshObj_7.ExportMED( '/home/haelewyn/ther_hydr/tri_quad.med', 0, SMESH.MED_V2_2 )
	smeshObj_7.RemoveGroup( smeshObj_8 )
	smeshObj_7.RemoveGroup( smeshObj_11 )
	smesh.SetName(smeshObj_7, 'tri_quad')
	smeshObj_7.ExportMED( '/home/haelewyn/ther_hydr/tri_quad.med', 0, SMESH.MED_V2_2 )
	mesh_editor_2 = smeshObj_7.GetMeshEditor()
	isDone = mesh_editor_2.Make2DMeshFrom3D()
	mesh_editor_1 = tri12.GetMeshEditor()
	isDone = mesh_editor_1.Make2DMeshFrom3D()
	Nb_Segments_1.SetNumberOfSegments( 1 )
	Nb_Segments_1.SetDistrType( 0 )
	Compound_Mesh_1 = smesh.Mesh(Extrusion_1)
	status = Compound_Mesh_1.AddHypothesis(Nb_Segments_1)
	Regular_1D_2 = Compound_Mesh_1.Segment()
	Netgen_2D_1 = Compound_Mesh_1.Triangle(algo=smesh.NETGEN_2D)
	Tetrahedron_Netgen = Compound_Mesh_1.Tetrahedron(algo=smesh.NETGEN)
	isDone = Compound_Mesh_1.Compute()
	Average_length_1 = smesh.CreateHypothesis('LocalLength')
	Average_length_1.SetLength( 0.5 )
	Average_length_1.SetPrecision( 1e-07 )
	status = Compound_Mesh_1.RemoveHypothesis(Nb_Segments_1)
	status = Compound_Mesh_1.AddHypothesis(Average_length_1)
	isDone = Compound_Mesh_1.Compute()
	tri_quad = smesh.Mesh(Extrusion_2)
	Prism_3D = smesh.CreateHypothesis('Prism_3D')
	isDone = qua12.Compute()
	isDone = tri12.Compute()
	status = Compound_Mesh_1.RemoveHypothesis(Tetrahedron_Netgen)
	status = Compound_Mesh_1.RemoveHypothesis(Netgen_2D)
	status = Compound_Mesh_1.RemoveHypothesis(Regular_1D)
	status = Compound_Mesh_1.RemoveHypothesis(Average_length_1)
	smeshObj_1.RemoveGroup( smeshObj_6 )
	smeshObj_1.RemoveGroup( smeshObj_5 )
	smeshObj_1.RemoveGroup( smeshObj_4 )
	smeshObj_1.RemoveGroup( smeshObj_3 )
	smeshObj_1.RemoveGroup( smeshObj_2 )
	status = smeshObj_1.RemoveHypothesis(Netgen_1D_2D)
	smeshObj_7.RemoveGroup( smeshObj_14 )
	smeshObj_7.RemoveGroup( smeshObj_18 )
	smeshObj_7.RemoveGroup( smeshObj_17 )
	smeshObj_7.RemoveGroup( smeshObj_16 )
	smeshObj_7.RemoveGroup( smeshObj_15 )
	status = tri12.RemoveHypothesis(Netgen_2D)
	Quadrangle_2D_1 = tri12.Quadrangle()
	Nb_Segments_1.SetNumberOfSegments( 2 )
	Nb_Segments_1.SetDistrType( 0 )
	isDone = qua12.Compute()
	isDone = tri12.Compute()
	isDone = tri12.SplitQuad( [ 15, 16, 17, 18, 19, 20, 21, 22 ], 1 )
	Compound_Mesh_1 = smesh.Concatenate([qua12.GetMesh(), tri12.GetMesh()], 1, 1, 1e-05)
	tri_quad = Compound_Mesh_1.TranslateObjectMakeMesh( Compound_Mesh_1, SMESH.DirStruct( SMESH.PointStruct ( 20, 0, 0 )), 0, 'tri_quad' )
	isDone = tri_quad.Compute()
	SEXTERI = tri_quad.CreateEmptyGroup( SMESH.NODE, 'SEXTERI' )
	nbAdd = SEXTERI.Add( [ 5, 8, 7, 13, 12 ] )
	SINTERI = tri_quad.CreateEmptyGroup( SMESH.NODE, 'SINTERI' )
	nbAdd = SINTERI.Add( [ 21, 22, 16, 17, 18 ] )
	X205 = tri_quad.CreateEmptyGroup( SMESH.NODE, 'X205' )
	nbAdd = X205.Add( [ 3 ] )

	SEXTERI.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	SINTERI.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	X205.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	## some objects were removed
	aStudyBuilder = theStudy.NewBuilder()
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_1.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_2))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_3))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_4))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_5))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_6))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_7.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_8))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_9))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_10))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_11))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_12))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_13))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_14))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_15))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_16))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_17))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_18))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	## set object names
	smesh.SetName(Netgen_1D_2D.GetAlgorithm(), 'Netgen 1D-2D')
	smesh.SetName(qua12.GetMesh(), 'qua12')
	smesh.SetName(tri12.GetMesh(), 'tri12')
	smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
	smesh.SetName(Nb_Segments_1, 'Nb. Segments_1')
	smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
	smesh.SetName(Average_length_1, 'Average length_1')
	smesh.SetName(Netgen_2D.GetAlgorithm(), 'Netgen 2D')
	smesh.SetName(Compound_Mesh_1.GetMesh(), 'Compound_Mesh_1')
	smesh.SetName(Tetrahedron_Netgen.GetAlgorithm(), 'Tetrahedron (Netgen)')
	smesh.SetName(tri_quad.GetMesh(), 'tri_quad')
	smesh.SetName(Prism_3D, 'Prism_3D')
	smesh.SetName(SEXTERI, 'SEXTERI')
	smesh.SetName(SINTERI, 'SINTERI')
	smesh.SetName(X205, 'X205')
	if salome.sg.hasDesktop():
		salome.sg.updateObjBrowser(0)

	### Store presentation parameters of displayed objects
	import iparameters
	ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "SMESH", 1))

	#Set up entries:
	# set up entry SMESH_8 (tri_quad) parameters
	ipar.setParameter("SMESH_8", "VTKViewer_0_Visibility", "On")
	ipar.setParameter("SMESH_8", "VTKViewer_0_Representation", "2")
	ipar.setParameter("SMESH_8", "VTKViewer_0_IsShrunk", "0")
	ipar.setParameter("SMESH_8", "VTKViewer_0_Entities", "e:1:f:1:v:0")
	ipar.setParameter("SMESH_8", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:0:0:1:edge:0:0.666667:1:node:1:0:0")
	ipar.setParameter("SMESH_8", "VTKViewer_0_Sizes", "line:1:node:3:shrink:0.75")
	ipar.setParameter("SMESH_8", "VTKViewer_0_Opacity", "1")
	ipar.setParameter("SMESH_8", "VTKViewer_0_ClippingPlane", "Off")


	pass
