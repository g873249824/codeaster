# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
import numpy as NP

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
IGNORE_ALARM=('RECAL0_43'),PAR_LOT='NON',DEBUG=_F(SDVERI='OUI'))


# On ajoute les commandes correspondant au modeles experimental
INCLUDE(UNITE=2)

# Nombre de frequences utiles
NF=8

# le tableau des frequences experimentales

REPEXP1=RECU_TABLE(CO=MODMES,
                    NOM_PARA='FREQ');

# le tableau des MAC experimentaux - en fait le MAC ideal qui est 1.0

liste_mac=[]
for i in range(NF):
    liste_mac.append(1.0)

REPEXP2=CREA_TABLE(LISTE=(_F(PARA='NUME_ORDRE',LISTE_I=range(1,NF+1),),
                          _F(PARA='MAC_EXP',LISTE_R=liste_mac,),
                       ),);

# on recupere les reponses experimentales en format numpy

data1 = REPEXP1.EXTR_TABLE().Array('NUME_ORDRE','FREQ')
data2 = REPEXP2.EXTR_TABLE().Array('NUME_ORDRE','MAC_EXP')

parametres =[['EP__',0.15,0.1,1.0],['MP__',3.0E4,2.E4,7.E4]]

calcul = [['REPONSE1','NUME_ORDRE','FREQ'],['REPONSE2','NUME_ORDRE','MAC']]

experience= [NP.array(data1),NP.array(data2)]

poids =NP.array([3.0, 1.0])

# LANCEMENT DE L'IDENTIFICATION

RESU=MACR_RECAL(
         UNITE_ESCL       = 3,
         RESU_EXP         = experience,
         LIST_PARA        = parametres,
         RESU_CALC        = calcul,
         LIST_POIDS       = poids,
         UNITE_RESU       = 91,

         METHODE          = 'HYBRIDE',
         NB_PARENTS       = 10,
         NB_FILS          = 5,
         ECART_TYPE       = 10.,
         ITER_ALGO_GENE   = 2,
#Attention: l'utilisation de la GRAINE n'est pas indiquee pour les etudes.
#On l'utilise seulement dans les cas-tests pour assurer la repetitivite de la
#solution.
         GRAINE           = 1,

         CALCUL_ESCLAVE=_F(
#               LANCEMENT  = 'INCLUSION',
               LANCEMENT  = 'DISTRIBUTION',
               MODE       = 'BATCH',
                           ),
         DYNAMIQUE =_F(
              MODE_EXP           = 'MODMES',
              MODE_CALC          = 'MODNUM',
              APPARIEMENT_MANUEL = 'NON',
                      ),
)  ;


# On cree une liste bidon pour pouvoir
# definir une fonction testable par TEST_RESU
BIDON=DEFI_LIST_REEL(DEBUT=1.,
                     INTERVALLE=_F(JUSQU_A = 2., NOMBRE=1));

OPTIM=DEFI_FONCTION(NOM_PARA='INST',
                    VALE_PARA=BIDON,
                    VALE_FONC=RESU);

TEST_FONCTION(VALEUR=(_F(VALE_CALC=0.50419188,
                         VALE_REFE=0.5,
                         VALE_PARA=1.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=1.E-2,
                         FONCTION=OPTIM,),
                      _F(VALE_CALC=49737.38,
                         VALE_REFE=5.E4,
                         VALE_PARA=2.0,
                         REFERENCE='ANALYTIQUE',
                         PRECISION=0.040000000000000001,
                         FONCTION=OPTIM,),
                      ),
              )

FIN()
