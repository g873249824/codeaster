# MODIF  DATE 12/04/2010   AUTEUR MICHEL S.MICHEL 
# TITRE VALIDATION DE LA LOI ENDO_SCALAIRE MODELISATION GRAD_VARI
# ssnp146a.para = tps_job 70 mem_job 32Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2010  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# ET DU PILOTAGE PRED_ELAS

DEBUT(CODE=_F(NOM='SSNP146A',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'))

E     = 30000.
NU    = 0.2
Sy    = 3.
Gf    = 0.1
D     = 50.

wy    = 0.5*Sy**2/E
p     = 0.75*Gf/(D*wy)
m     = 2.
b     = 1.00
gamma = p/m - 1
C     = 0.375*Gf*D
pena  = 1.E3 * p * wy

# solution analytique pour a = 0.6
# --------------------------------

a    = 0.6
weps = p*wy*(1+gamma*a)**3 / (2*(1-a)*(1+gamma))
eps  = ( weps * 2*(1-NU**2)/E )**0.5


# -----------------------------------------------------
#                 MAILLAGE ET MODELE
# -----------------------------------------------------

MA  =  LIRE_MAILLAGE()

MO = AFFE_MODELE(
  MAILLAGE = MA, 
  AFFE     = _F(
    GROUP_MA     = 'MATIERE', 
    PHENOMENE    = 'MECANIQUE', 
    MODELISATION = 'D_PLAN_GRAD_VARI'
    ),
  )


# -----------------------------------------------------
#                     MATERIAU 
# -----------------------------------------------------

BETON = DEFI_MATERIAU(
  ELAS          = _F(E=E, NU=NU),
  ENDO_SCALAIRE = _F(SY=Sy, GAMMA=gamma),
  NON_LOCAL     = _F(C_GRAD_VARI = C, PENA_LAGR = pena),)

CHMAT = AFFE_MATERIAU(
  MAILLAGE = MA, 
  AFFE = _F(
    GROUP_MA = 'MATIERE', 
    MATER    =  BETON
    ),
  )


# -----------------------------------------------------
#                CHARGEMENT ET INSTANTS
# -----------------------------------------------------

LIAISON = AFFE_CHAR_MECA(
  MODELE = MO,
  FACE_IMPO = (
    _F(GROUP_MA = 'GAUCHE', DX=0),
    _F(GROUP_MA = 'BAS',    DY=0),
    ),
  )
  
TRACTION = AFFE_CHAR_MECA(
  MODELE = MO,
  FACE_IMPO = _F(GROUP_MA = 'HAUT', DY=eps),
  )

RAMPE = DEFI_FONCTION(
  NOM_PARA = 'INST',
  VALE     = (0,0,1,1),
  )
  
INSTANTS = DEFI_LIST_REEL(
  DEBUT = 0, 
  INTERVALLE = (
    _F(JUSQU_A = 1, NOMBRE = 2)
    )
  )

incr_endo = 0.1
n_pilo    = 6
tfin_pilo = n_pilo * incr_endo

INSTPILO = DEFI_LIST_REEL(
  DEBUT = 0, 
  INTERVALLE = (
    _F(JUSQU_A = tfin_pilo, NOMBRE = n_pilo)
    )
  )

# -----------------------------------------------------
#                CALCUL NON LINEAIRE
# -----------------------------------------------------

# calcul non lineaire sans pilotage

EVOL0 = STAT_NON_LINE(
  MODELE = MO,
  CHAM_MATER = CHMAT,
  EXCIT = (
    _F(CHARGE = LIAISON),
    _F(CHARGE = TRACTION, FONC_MULT = RAMPE),
    ),
  COMP_INCR = _F(RELATION = 'ENDO_SCALAIRE'),
  INCREMENT = _F(
    LIST_INST      = INSTANTS,
    ),
  NEWTON  = _F(
    MATRICE        = 'TANGENTE',
    REAC_ITER      = 1,
    ),
  CONVERGENCE = _F(
    SIGM_REFE      = Sy,
    VARI_REFE      = 1.,
    LAGR_REFE      = p*wy,
    RESI_REFE_RELA = 1.E-3,
    ITER_GLOB_MAXI = 15,
    ),
  SOLVEUR   = _F(
    METHODE     = 'MUMPS',
    PCENT_PIVOT = 50,
    ),
  ARCHIVAGE = _F(
    ARCH_ETAT_INIT = 'OUI',
    ),
  ) 

# calcul non lineaire avec pilotage PRED_ELAS

EVOL1 = STAT_NON_LINE(
  MODELE = MO,
  CHAM_MATER = CHMAT,
  EXCIT = (
    _F(CHARGE = LIAISON),
    _F(CHARGE = TRACTION, TYPE_CHARGE = 'FIXE_PILO'),
    ),
  PILOTAGE   = _F(
    TYPE           = 'PRED_ELAS',
    SELECTION      = 'RESIDU',
    COEF_MULT      =  1.,
    ETA_PILO_R_MIN = 0,
    ),
  COMP_INCR = _F(RELATION = 'ENDO_SCALAIRE'),
  INCREMENT = _F(
    LIST_INST      = INSTPILO,
    ),
  NEWTON  = _F(
    MATRICE        = 'TANGENTE',
    REAC_ITER      = 1,
    ),
  CONVERGENCE = _F(
    SIGM_REFE      = Sy,
    VARI_REFE      = 1.,
    LAGR_REFE      = p*wy,
    RESI_REFE_RELA = 1.E-3,
    ITER_GLOB_MAXI = 15,
    ),
  SOLVEUR   = _F(
    METHODE     = 'MUMPS',
    PCENT_PIVOT = 50,
    ),
  ARCHIVAGE = _F(
    ARCH_ETAT_INIT = 'OUI',
    ),
  ) 

# -----------------------------------------------------
#    EXTRAPOLATION DES VARIABLES INTERNES AUX NOEUDS
# -----------------------------------------------------

EVOL0 = CALC_ELEM(reuse    = EVOL0,
                 RESULTAT = EVOL0,
                 OPTION   = 'VARI_ELNO_ELGA',)

EVOL0 = CALC_NO(reuse    = EVOL0,
               RESULTAT = EVOL0,
               OPTION   = 'VARI_NOEU_ELGA',)

EVOL1 = CALC_ELEM(reuse    = EVOL1,
                 RESULTAT = EVOL1,
                 OPTION   = 'VARI_ELNO_ELGA',)

EVOL1 = CALC_NO(reuse    = EVOL1,
               RESULTAT = EVOL1,
               OPTION   = 'VARI_NOEU_ELGA',)

# -----------------------------------------------------
#     EXTRACTION SUR LA FACE DROITE DU QUADGRANGLE
# -----------------------------------------------------

RESU0 = MACR_LIGN_COUPE(RESULTAT   = EVOL0,
                       NOM_CHAM   = 'VARI_NOEU_ELGA',
                       LIGN_COUPE = _F(TYPE = 'GROUP_NO',
                                       GROUP_NO = 'DRO',),)
                                       
RESU1 = MACR_LIGN_COUPE(RESULTAT   = EVOL1,
                       NOM_CHAM   = 'VARI_NOEU_ELGA',
                       LIGN_COUPE = _F(TYPE = 'GROUP_NO',
                                       GROUP_NO = 'DRO',),)

IMPR_TABLE(TABLE=RESU0)

IMPR_TABLE(TABLE=RESU1)
                                       
# -----------------------------------------------------
#      COMPARAISON AVEC LES VALEURS DE REFERENCE
# -----------------------------------------------------

valref = 6.e-01
coory  = [-5.e-01, 0., 5.e-01]
prec   = 1.e-04

TEST_TABLE(REFERENCE = 'ANALYTIQUE',
           VALE      = valref,
           PRECISION = prec,
           TABLE     = RESU0,
           NOM_PARA  = 'V1',
           FILTRE    = (_F(NOM_PARA = 'INST'  , 
                           VALE = 1.),
                        _F(NOM_PARA = 'COOR_Y', 
                           VALE = coory[0]),),)

TEST_TABLE(REFERENCE = 'ANALYTIQUE',
           VALE      = valref,
           PRECISION = prec,
           TABLE     = RESU0,
           NOM_PARA  = 'V1',
           FILTRE    = (_F(NOM_PARA = 'INST'  , 
                           VALE = 1.),
                        _F(NOM_PARA = 'COOR_Y', 
                           VALE = coory[1]),),)                                       

TEST_TABLE(REFERENCE = 'ANALYTIQUE',
           VALE      = valref,
           PRECISION = prec,
           TABLE     = RESU0,
           NOM_PARA  = 'V1',
           FILTRE    = (_F(NOM_PARA = 'INST'  , 
                           VALE = 1.),
                        _F(NOM_PARA = 'COOR_Y', 
                           VALE = coory[2]),),)

TEST_TABLE(REFERENCE = 'ANALYTIQUE',
           VALE      = valref,
           PRECISION = prec,
           TABLE     = RESU1,
           NOM_PARA  = 'V1',
           FILTRE    = (_F(NOM_PARA = 'INST'  , 
                           VALE = tfin_pilo),
                        _F(NOM_PARA = 'COOR_Y', 
                           VALE = coory[0]),),)

TEST_TABLE(REFERENCE = 'ANALYTIQUE',
           VALE      = valref,
           PRECISION = prec,
           TABLE     = RESU1,
           NOM_PARA  = 'V1',
           FILTRE    = (_F(NOM_PARA = 'INST'  , 
                           VALE = tfin_pilo),
                        _F(NOM_PARA = 'COOR_Y', 
                           VALE = coory[1]),),)                                       

TEST_TABLE(REFERENCE = 'ANALYTIQUE',
           VALE      = valref,
           PRECISION = prec,
           TABLE     = RESU1,
           NOM_PARA  = 'V1',
           FILTRE    = (_F(NOM_PARA = 'INST'  , 
                           VALE = tfin_pilo),
                        _F(NOM_PARA = 'COOR_Y', 
                           VALE = coory[2]),),)
                           
FIN()
