# MODIF  DATE 20/10/2011   AUTEUR SELLENET N.SELLENET 
# RESPONSABLE F6BHHBO P.DEBONNIERES
# TITRE PLAQUE SOUS PRESSION EN DP (PLASTICITE DRUCKER-PRAGER)
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#            CONFIGURATION MANAGEMENT OF EDF VERSION
#
#
DEBUT(CODE=_F(NOM='SENSM12A', NIV_PUB_WEB='INTERNET', VISU_EFICAS='NON'), DEBUG=_F(SDVERI='NON'))
#
#......................................................................
# PLAQUE EN COMPRESSION SIMPLE EN DEFORMATIONS PLANES
# (DEPLACEMENT TRANSVERSAL NUL SUR LES BORDS)
# PLASTICITE DRUCKER-PRAGER
# SENSIBILITE AUX CHARGEMENTS
#......................................................................
#

MA=LIRE_MAILLAGE();

MO=AFFE_MODELE(MAILLAGE=MA,
               AFFE=_F(TOUT='OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='D_PLAN',),);

MA=MODI_MAILLAGE( reuse=MA,
             MAILLAGE=MA,
             ORIE_PEAU_2D=_F(  GROUP_MA = ('AB')),
             INFO=1);

FORCES = DEFI_PARA_SENSI(VALE=1.0E8)

E1 = DEFI_CONSTANTE(VALE=5800.0E6)
NU1 = DEFI_CONSTANTE(VALE=0.3)
ALPHA1 = DEFI_CONSTANTE(VALE=0.33)
P_ULTM1 = DEFI_CONSTANTE(VALE=0.01)
SY1 = DEFI_CONSTANTE(VALE=2.57E6)
SY_ULTM1 = DEFI_CONSTANTE(VALE=1.0E8)

MAT=DEFI_MATERIAU(ELAS_FO=_F(E = E1,
                             NU = NU1,),
                    DRUCK_PRAGER_FO=_F(
                                 ECROUISSAGE = 'PARABOLIQUE',
                                 ALPHA = ALPHA1,
                                 P_ULTM = P_ULTM1,
                                 SY = SY1,
                                 SY_ULTM = SY_ULTM1,),
                                );

CHMAT=AFFE_MATERIAU(MAILLAGE=MA,
                    AFFE=(_F(GROUP_MA='MA',
                             MATER=MAT,),
                             ),);

ZERO = DEFI_CONSTANTE(VALE=0.0)

CHAS=AFFE_CHAR_MECA_F(MODELE=MO,
                   FORCE_NODALE = _F(NOEUD = ('N3','N4'),
                   FY = FORCES),
                   DDL_IMPO=(
                             _F(GROUP_MA='AB',
                                DY=ZERO,),
                             _F(NOEUD=('N1','N2','N3','N4',),
                                DX=ZERO,),
                                     ),
                   );


L_INST=DEFI_LIST_REEL(DEBUT=0.0,
                      INTERVALLE=_F(JUSQU_A=1.0,
                                    NOMBRE=5,),);

F=DEFI_FONCTION(NOM_PARA='INST',
                VALE=(0.0,  0.0,
                      1.0,  1.0),
                      );

RESUS=STAT_NON_LINE(MODELE=MO,
                   CHAM_MATER=CHMAT,
                   EXCIT=_F(CHARGE=CHAS,
                            FONC_MULT=F,),
                   COMP_INCR=_F(RELATION='DRUCK_PRAGER',
                                RESI_INTE_RELA = 1.E-8),
                   INCREMENT=_F(LIST_INST=L_INST,
                                INST_FIN=1.,),
                   NEWTON=_F(MATRICE='TANGENTE',
                             PREDICTION='ELASTIQUE',
                             REAC_ITER=1,),
                   CONVERGENCE=_F(RESI_GLOB_RELA = 1.E-8),
                   ARCHIVAGE=_F(LIST_INST=L_INST,),
                   SENSIBILITE=FORCES,
                   INFO=1);

RESUS=CALC_ELEM( reuse=RESUS, OPTION=( 'SIEF_ELNO',  'VARI_ELNO',), RESULTAT=RESUS,)

CALC_SENSI( reuse=RESUS, RESULTAT=RESUS, SENSIBILITE=FORCES,
                            OPTION=( 'SIEF_ELNO',  'VARI_ELNO',),
              )

# Extraction de contrainte YY et de sa derivee
TSIGN = POST_RELEVE_T(ACTION=_F(INTITULE='SENSIBILITE',
                               NOEUD='N1',
                               MAILLE='M1',
                               RESULTAT=RESUS,
                               NOM_CHAM='SIEF_ELNO',
                               NOM_CMP='SIYY',
                               OPERATION='EXTRACTION',),);

TSIGN = POST_RELEVE_T(reuse=TSIGN,
                     ACTION=_F(INTITULE='SENSIBILITE',
                               NOEUD='N1',
                               MAILLE='M1',
                               RESULTAT=RESUS,
                               NOM_CHAM='SIEF_ELNO',
                               NOM_CMP='SIYY',
                               SENSIBILITE=FORCES,
                               OPERATION='EXTRACTION',),);

# Extraction de la 1ere variable interne et de sa derivee
TVARN = POST_RELEVE_T(ACTION=_F(INTITULE='SENSIBILITE',
                               NOEUD='N1',
                               MAILLE='M1',
                               RESULTAT=RESUS,
                               NOM_CHAM='VARI_ELNO',
                               NOM_CMP='V1',
                               OPERATION='EXTRACTION',),);

TVARN = POST_RELEVE_T(reuse=TVARN,
                     ACTION=_F(INTITULE='SENSIBILITE',
                               NOEUD='N1',
                               MAILLE='M1',
                               RESULTAT=RESUS,
                               NOM_CHAM='VARI_ELNO',
                               NOM_CMP='V1',
                               SENSIBILITE=FORCES,
                               OPERATION='EXTRACTION',),);



# calcul avec P + epsilon
epsilon = 1.0E-4
eps = 1.0 + epsilon

FORCE2 = DEFI_CONSTANTE(VALE=1.0E8*eps)

CHA2 = AFFE_CHAR_MECA_F(MODELE=MO,
                        FORCE_NODALE = _F(NOEUD = ('N3','N4'),
                        FY = FORCE2),
                        DDL_IMPO=(
                             _F(GROUP_MA='AB',
                                DY=ZERO,),
                             _F(NOEUD=('N1','N2','N3','N4',),
                                DX=ZERO,),
                                     ),
                       );

RESU2 = STAT_NON_LINE(MODELE=MO,
                      CHAM_MATER=CHMAT,
                      EXCIT=_F(CHARGE=CHA2,
                               FONC_MULT=F,),
                      COMP_INCR=_F(RELATION='DRUCK_PRAGER',
                                   RESI_INTE_RELA = 1.E-8),
                      INCREMENT=_F(LIST_INST=L_INST,
                                   INST_FIN=1.,),
                      NEWTON=_F(MATRICE='TANGENTE',
                                PREDICTION='ELASTIQUE',
                                REAC_ITER=1,),
                      CONVERGENCE=_F(RESI_GLOB_RELA = 1.E-8),
                      ARCHIVAGE=_F(LIST_INST=L_INST,),
                      INFO=1);

RESU2=CALC_ELEM( reuse=RESU2,
                            OPTION=(
                  'SIEF_ELNO',  'VARI_ELNO',),
                          RESULTAT=RESU2,
              )


def ecart(diff, deriv):
   """
      Retourne l'ecart relatif entre les derivees si la reference est non nulle,
      la difference finie sinon.
   """
   if abs(deriv) > 1.e-3:
      res = abs(diff - deriv)/deriv
   else:
      res = deriv
   return res

# deux formules pour garder dans la table l'estimation de la derivee
DCALC = FORMULE(NOM_PARA=('VNOM', 'VPLUS'),
                VALE='(VPLUS - VNOM)/%f' % (1.0E8*epsilon))

VERIF = FORMULE(NOM_PARA=('DERIV', 'DCALC'),
                VALE='ecart(DCALC, DERIV)')


# Extraction de la contrainte YY avec P + epsilon
TSIGP=POST_RELEVE_T(ACTION=_F(INTITULE='SENSIBILITE',
                              NOEUD='N1',
                              MAILLE='M1',
                              RESULTAT=RESU2,
                              NOM_CHAM='SIEF_ELNO',
                              NOM_CMP='SIYY',
                              OPERATION='EXTRACTION',),)

# table de comparaison pour les contraintes
# Principe :
# - On part de la table qui contient la derivee,
# - on renomme la colonne de la derivee en DERIV,
# - on fusionne avec la table de la valeur en p+epsilon,
# - que l'on renomme en VPLUS,
# - on insere la table avec la valeur nominale,
# - que l'on renomma en VNOM,
# - on estime la derivee (VPLUS - VNOM)/deltap = DCALC,
# - on calcule l'ecart entre DCALC et DERIV (en relatif ou absolu),
# - on limite les colonnes de la table.
TCS  = CALC_TABLE(TABLE=TSIGN,
                  SENSIBILITE=FORCES,
                  ACTION=(_F(OPERATION='RENOMME',
                              NOM_PARA=('SIYY', 'DERIV'),),
                           _F(OPERATION='COMB',
                              TABLE=TSIGP,
                              NOM_PARA=('NOEUD','INST'),),
                           _F(OPERATION='RENOMME',
                              NOM_PARA=('SIYY', 'VPLUS'),),
                           _F(OPERATION='COMB',
                              TABLE=TSIGN,
                              NOM_PARA=('NOEUD','INST'),),
                           _F(OPERATION='RENOMME',
                              NOM_PARA=('SIYY', 'VNOM'),),
                           _F(OPERATION='OPER',
                              NOM_PARA='DCALC',
                              FORMULE=DCALC),
                           _F(OPERATION='OPER',
                              NOM_PARA='DIFF',
                              FORMULE=VERIF),
                           _F(OPERATION='EXTR',
                              NOM_PARA=('NOEUD','INST','VNOM','VPLUS','DCALC','DERIV','DIFF'),),),)

IMPR_TABLE(TABLE=TCS)

IMPR_TABLE(TABLE=TCS,
            FILTRE=_F(NOM_PARA='DIFF',
                     CRIT_COMP='ABS_MAXI'),
            TITRE="Max de l'ecart")

TEST_TABLE(TABLE=TCS,
            NOM_PARA='DIFF',
            FILTRE=_F(NOM_PARA='DIFF',
                     CRIT_COMP='ABS_MAXI'),
            VALE=0.,
            CRITERE='ABSOLU',
            PRECISION=1.e-3,
            REFERENCE='AUTRE_ASTER',)

# Extraction de la 1ere variable interne avec P + epsilon
TVARP=POST_RELEVE_T(ACTION=_F(INTITULE='SENSIBILITE',
                              NOEUD='N1',
                              MAILLE='M1',
                              RESULTAT=RESU2,
                              NOM_CHAM='VARI_ELNO',
                              NOM_CMP='V1',
                              OPERATION='EXTRACTION',),)

# table de comparaison pour la 1ere variable interne
TCV =  CALC_TABLE(TABLE=TVARN,
                  SENSIBILITE=FORCES,
                  ACTION=(_F(OPERATION='RENOMME',
                              NOM_PARA=('V1', 'DERIV'),),
                           _F(OPERATION='COMB',
                              TABLE=TVARP,
                              NOM_PARA=('NOEUD','INST'),),
                           _F(OPERATION='RENOMME',
                              NOM_PARA=('V1', 'VPLUS'),),
                           _F(OPERATION='COMB',
                              TABLE=TVARN,
                              NOM_PARA=('NOEUD','INST'),),
                           _F(OPERATION='RENOMME',
                              NOM_PARA=('V1', 'VNOM'),),
                           _F(OPERATION='OPER',
                              NOM_PARA='DCALC',
                              FORMULE=DCALC),
                           _F(OPERATION='OPER',
                              NOM_PARA='DIFF',
                              FORMULE=VERIF),
                           _F(OPERATION='EXTR',
                              NOM_PARA=('NOEUD','INST','VNOM','VPLUS','DCALC','DERIV','DIFF'),),),)

IMPR_TABLE(TABLE=TCV)

IMPR_TABLE(TABLE=TCV,
            FILTRE=_F(NOM_PARA='DIFF',
                     CRIT_COMP='ABS_MAXI'),
            TITRE="Max de l'ecart")

TEST_TABLE(TABLE=TCV,
            NOM_PARA='DIFF',
            FILTRE=_F(NOM_PARA='DIFF',
                     CRIT_COMP='ABS_MAXI'),
            VALE=0.,
            CRITERE='ABSOLU',
            PRECISION=1.e-3,
            REFERENCE='AUTRE_ASTER',)


FIN();

