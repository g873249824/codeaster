# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

POURSUITE(CODE='OUI',)


# post-traitement de type 1 avec signal en fréquence


tmax = 10.24 # INST_FIN
pasdt = 0.02 # PAS_INST

# interpolation

linst = DEFI_LIST_REEL(DEBUT=0.,
                       INTERVALLE=_F(JUSQU_A=tmax - pasdt,
                                     PAS=pasdt),)

ACXCO = CALC_FONCTION(COMB=_F(FONCTION=ACCE_X, COEF=1.0,),
                      LIST_PARA=linst)

ACYCO = CALC_FONCTION(COMB=_F(FONCTION=ACCE_Y, COEF=1.0,),
                      LIST_PARA=linst)

ACZCO = CALC_FONCTION(COMB=_F(FONCTION=ACCE_Z, COEF=1.0,),
                     LIST_PARA=linst)


ACCE_XFR = CALC_FONCTION(FFT=_F(FONCTION=ACXCO, METHODE='PROL_ZERO',),)

ACCE_YFR = CALC_FONCTION(FFT=_F(FONCTION=ACYCO, METHODE='PROL_ZERO',),)

ACCE_ZFR = CALC_FONCTION(FFT=_F(FONCTION=ACZCO, METHODE='PROL_ZERO',),)


resgenfr = CALC_MISS(
    TYPE_RESU = 'TRAN_GENE',
    VERSION = 'V6.6',
    TABLE_SOL = tabsol,
    BASE_MODALE = BASMO,
    MATR_RIGI = MATRIGI,
    MATR_MASS = MATMASS,
    AMOR_REDUIT = l_amor,
    GROUP_MA_INTERF = 'SRADIER',

    PARAMETRE=_F(
        FREQ_MIN=dfc,
        FREQ_MAX=fmaxc,
        FREQ_PAS=dfc,
        TYPE='BINAIRE',
        Z0= -11.60,
        SURF='OUI',
        ALGO = 'DEPL',
        OFFSET_MAX=110,
        OFFSET_NB=400,
        SPEC_MAX=0.12,
        SPEC_NB=16384,
    ),
    UNITE_RESU_IMPE=38,
    UNITE_RESU_FORC=28,

    MODELE         = MODELE,
    ACCE_X         = ACCE_XFR,
    ACCE_Y         = ACCE_YFR,
    ACCE_Z         = ACCE_ZFR,

    INFO=2,
)


# On va comparer HARM_GENE et TRAN_GENE pour signaux en fréquence
resgenhf = CALC_MISS(
    TYPE_RESU = 'HARM_GENE',
    VERSION = 'V6.6',
    TABLE_SOL = tabsol,
    BASE_MODALE = BASMO,
    MATR_RIGI = MATRIGI,
    MATR_MASS = MATMASS,
    AMOR_REDUIT = l_amor,
    GROUP_MA_INTERF = 'SRADIER',

    PARAMETRE=_F(
        FREQ_MIN=dfc,
        FREQ_MAX=fmaxc,
        FREQ_PAS=dfc,
        TYPE='BINAIRE',
        Z0= -11.60,
        SURF='OUI',
        ALGO = 'DEPL',
        OFFSET_MAX=110,
        OFFSET_NB=400,
        SPEC_MAX=0.12,
        SPEC_NB=16384,
    ),
    UNITE_RESU_IMPE=38,
    UNITE_RESU_FORC=28,

    MODELE         = MODELE,
    ACCE_X         = ACCE_XFR,
    ACCE_Y         = ACCE_YFR,
    ACCE_Z         = ACCE_ZFR,

    INFO=2,
)
resgen0f = REST_SPEC_TEMP(RESU_GENE = resgenhf,
                                  METHODE = 'TRONCATURE',
                                  SYMETRIE = 'NON',
                                  TOUT_CHAM = 'OUI')


FIN()
