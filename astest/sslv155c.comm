# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(
              NIV_PUB_WEB='INTERNET',
              VISU_EFICAS='OUI'),
      DEBUG=_F(SDVERI='OUI'),
      IGNORE_ALARM=('MODELE1_63',))

# MODELISATION C : X-FEM 3D, MAILLAGE LINEAIRE

# on ignore l'alarme MODELISA3_31 qui est emise lors de
# l'application de la pression sur la face EXT, surface exterieure d'un quart de cylindre

# parametres utiles
#------------------

# angle de la lentile
alpha = pi / 4.0

# valeur nominale de la force imposee
sig = 1000000.

# rayon de la fissure
R = 2.

# rayon circulaire de la lentille
a = R * sin(alpha)

# taille des mailles initiales
h0 = 1.

# taille cible des mailles apres raffinement 
hc = 0.025

# nombre de niveau de raffinements
# attention, en python log = ln (logarithme neperien)
n = (log(h0)-log(hc))/log(2)
nb_raff = int(n)+1

# taille des mailles apres raffinement
h = h0/(2.**nb_raff)

nb_iter = nb_raff+1

# rayon du disque de raffinement
r_raff = 5*h

# couronnes d'integration 
Rsup = 5*h
Rinf = 2*h

# definition des formules utiles pour le calcul des level sets
Rp = R * tan(alpha)
Yh = R - R/cos(alpha)
LN = FORMULE(NOM_PARA=('X','Y','Z'),VALE='-sqrt(X**2+(Y-R)**2+Z**2)+R')
LT = FORMULE(NOM_PARA=('X','Y','Z'),VALE='sqrt(X**2+(Y-Yh)**2+Z**2)-Rp')

# initialisation
nb_iter = nb_raff+1
MA    = [None]*(nb_iter+1)
MO    = [None]*nb_iter
CHERR = [None]*nb_iter
FISS  = [None]*nb_iter 

i_raff=0   
MA[i_raff]=LIRE_MAILLAGE(FORMAT='MED')

# boucle de raffinements
for i_raff in range(nb_iter) :

   MO[i_raff]=AFFE_MODELE(MAILLAGE=MA[i_raff],
                          AFFE=_F(TOUT='OUI',
                                  PHENOMENE='MECANIQUE',
                                  MODELISATION='3D'))

   FISS[i_raff]=DEFI_FISS_XFEM(MAILLAGE=MA[i_raff],
                               DEFI_FISS=_F(FONC_LT=LT,
                                            FONC_LN=LN),
                               )
      
   # evaluation de l'erreur       
   CHERR[i_raff]=RAFF_XFEM(FISSURE=FISS[i_raff],
                           TYPE='ZONE',
                           RAYON=r_raff)
   
   # definition du type du maillage n+1
   MA[i_raff+1]=CO('MA_%d' % (i_raff+1))
      
   MACR_ADAP_MAIL(ADAPTATION         = 'RAFFINEMENT',
                  CHAM_GD            = CHERR[i_raff],
                  CRIT_RAFF_ABS      = 0.5,
                  DIAM_MIN           = hc,
                  MAILLAGE_N         = MA[i_raff],
                  MAILLAGE_NP1       = MA[i_raff+1])

assert(nb_iter == i_raff+1)

# impression du dernier maillage
IMPR_RESU(FORMAT='MED',UNITE=80,RESU=_F(MAILLAGE=MA[nb_iter]))

MA[nb_iter]=DEFI_GROUP( reuse=MA[nb_iter],
                        MAILLAGE=MA[nb_iter],
                        CREA_GROUP_NO=(_F(NOEUD='N120',NOM='N120'),
                                       _F(GROUP_MA='LATD',),
                                       _F(GROUP_MA='LATG',),
                                       _F(DIFFE=('LATD','N120'),NOM='LATD2'),
                                       _F(DIFFE=('LATG','N120'),NOM='LATG2'),
                                      ));

MA[nb_iter]=MODI_MAILLAGE(reuse =MA[nb_iter],
                          MAILLAGE=MA[nb_iter],
                          ORIE_PEAU_3D=_F(GROUP_MA=('SUP','INF','EXT','LATG','LATD')))

MODE=AFFE_MODELE(MAILLAGE=MA[nb_iter],
                 AFFE=_F(GROUP_MA=('VOL','SUP','INF','EXT','LATG','LATD'),
                         PHENOMENE='MECANIQUE',
                         MODELISATION='3D'))

FISSX=DEFI_FISS_XFEM(MAILLAGE=MA[nb_iter], #NB_COUCHES=3,
                     #TYPE_ENRI_FOND='TOPOLOGIQUE',
                     DEFI_FISS=_F(FONC_LT=LT,
                                  FONC_LN=LN),
                               )

MODX=MODI_MODELE_XFEM(MODELE_IN=MODE,
                      FISSURE=FISSX,
                      DECOUPE_FACETTE='SOUS_ELEMENTS')

ACIER=DEFI_MATERIAU(ELAS=_F(E=210000e6,
                            NU=0.22))

MATE=AFFE_MATERIAU(MAILLAGE=MA[nb_iter],
                   AFFE=_F(TOUT='OUI',
                           MATER=ACIER))

CHAR=AFFE_CHAR_MECA(MODELE=MODX,
                    # mode rigide de translation :
                    # conditions de symetrie :
                    DDL_IMPO=(_F(GROUP_NO=('D'), DY=0.,),
                             # _F(GROUP_NO=('LATG2',),DX=0.,H1X=0.,K3=0.),
                             # _F(GROUP_NO=('LATD2',),DZ=0.,H1Z=0.,K3=0.),
                             # _F(GROUP_NO=('N120',) ,DX=0.,DZ=0.),
                              _F(GROUP_NO=('LATG',),DX=0.,K3=0.),
                              _F(GROUP_NO=('LATD',),DZ=0.,K3=0.),
                             ),
                    #FACE_IMPO=_F(GROUP_MA=('LATG','LATD'),DNOR=0.),
                    # traction :
                    PRES_REP=_F(GROUP_MA=('SUP','INF','EXT'),PRES=-sig))

RESU=MECA_STATIQUE(MODELE=MODX,
                   CHAM_MATER=MATE,
                   EXCIT=_F(CHARGE=CHAR))

# visualisation
MA_VISU=POST_MAIL_XFEM(MODELE=MODX)

MO_VISU=AFFE_MODELE(MAILLAGE=MA_VISU,
                    AFFE=_F(TOUT='OUI',
                            PHENOMENE='MECANIQUE',
                            MODELISATION='3D'))

RE_VISU=POST_CHAM_XFEM(MODELE_VISU=MO_VISU,
                       RESULTAT=RESU)

IMPR_RESU(FORMAT='MED',UNITE=80,RESU=_F(RESULTAT=RE_VISU))

# post-traitement en mecanique de la rupture
CGX=CALC_G(THETA=_F(FISSURE=FISSX,
                    NB_POINT_FOND=30,),
           RESULTAT=RESU,
           OPTION='CALC_K_G')

IMPR_TABLE(TABLE=CGX)

PK=POST_K1_K2_K3(FISSURE=FISSX,
                 NB_POINT_FOND=30,
                 RESULTAT=RESU,)

IMPR_TABLE(TABLE=PK)

K1ref = 0.877*(2/pi)*sig*sqrt(pi*a)
K2ref = 0.235*(2/pi)*sig*sqrt(pi*a)

# test de la commande CALC_G
#---------------------------

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.050000000000000003,
           VALE_CALC=1226550.11688,
           VALE_REFE=1.176825720257336E6,
           NOM_PARA='K1',
           TYPE_TEST='MAX',
           TABLE=CGX,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.021,
           VALE_CALC=1154430.70555,
           VALE_REFE=1.176825720257336E6,
           NOM_PARA='K1',
           TYPE_TEST='MIN',
           TABLE=CGX,)

TEST_TABLE(REFERENCE='ANALYTIQUE',        
           PRECISION=0.04,
           VALE_CALC=325662.68039,
           VALE_REFE=3.1534098547374451E5,
           NOM_PARA='K2',
           TYPE_TEST='MAX',
           TABLE=CGX,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.070000000000000003,
           VALE_CALC=293505.466905,
           VALE_REFE=3.1534098547374451E5,
           NOM_PARA='K2',
           TYPE_TEST='MIN',
           TABLE=CGX,)

# test de la commande POST_K1_K2_K3
#-----------------------------------

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.02,
           VALE_CALC=1169073.2377,
           VALE_REFE=1.176825720257336E6,
           NOM_PARA='K1',
           TYPE_TEST='MAX',
           TABLE=PK,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.089999999999999997,
           VALE_CALC=1100664.7863,
           VALE_REFE=1.176825720257336E6,
           NOM_PARA='K1',
           TYPE_TEST='MIN',
           TABLE=PK,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.04000000000000001,
           VALE_CALC=322919.218889,
           VALE_REFE=3.1534098547374451E5,
           NOM_PARA='K2',
           TYPE_TEST='MAX',
           TABLE=PK,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.14,
           VALE_CALC=273942.41626,
           VALE_REFE=3.1534098547374451E5,
           NOM_PARA='K2',
           TYPE_TEST='MIN',
           TABLE=PK,)

FIN()
