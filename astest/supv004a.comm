# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2017 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
# person_in_charge: mathieu.courtois at edf.fr

import sys
import unittest

# to be runnable without aster module
if not 'DEBUT' in list(globals().keys()):
    def does_nothing(**kwargs):
        """empty function"""
        return
    DEBUT = FIN = _F = does_nothing

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),)


ldr = unittest.defaultTestLoader
suite = unittest.TestSuite()

if hasattr(ldr, 'discover'):    # only python >= 2.7
    count = suite.countTestCases()
    suite.addTests(ldr.discover('Miss', pattern='*.py'))
    suite.addTests(ldr.discover('Utilitai', pattern='*.py'))
else:
    TESTLIST = [
        'Miss.miss_fichier_cmde', 'Miss.miss_resu_aster', 'Miss.miss_resu_miss',
        'Utilitai.calc_fonction_utils',
        'Utilitai.TensorModule', 'Utilitai.HookeTensor',
    ]
    suite.addTest(ldr.loadTestsFromNames(TESTLIST))

# info = 0 (quiet), 1 (print tests titles), 2 (debug, stop on first error)
info = 1
if info < 2:
    runner = unittest.TextTestRunner(verbosity=info + 1)
    result = runner.run(suite)
else:
    result = None
    suite.debug()
    raise AssertionError('only for debug purpose')

# add TEST_TABLE: True=1, False=0
keys = ['GLOBAL', 'NBRUN', 'ERROR', 'FAILURE']
values = [
    int(result.wasSuccessful()),
    result.testsRun,
    len(result.errors),
    len(result.failures),
]

tab1 = CREA_TABLE(LISTE=(_F(PARA='TEST',
                            TYPE_K='K8',
                            LISTE_K=keys,),
                         _F(PARA='RESULT',
                            LISTE_I=values,),),)

# all tests ended with success
TEST_TABLE(TABLE=tab1,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='GLOBAL',),
           NOM_PARA='RESULT',
           REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,)

# number of unittests expected to run
TEST_TABLE(TABLE=tab1,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='NBRUN',),
           NOM_PARA='RESULT',
           REFERENCE='ANALYTIQUE',
           VALE_CALC_I=21,
           VALE_REFE_I=21,)

# number of errors
TEST_TABLE(TABLE=tab1,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='ERROR',),
           NOM_PARA='RESULT',
           REFERENCE='ANALYTIQUE',
           VALE_CALC_I=0,
           VALE_REFE_I=0,)

# number of failures
TEST_TABLE(TABLE=tab1,
           FILTRE=_F(NOM_PARA='TEST',
                     VALE_K='FAILURE',),
           NOM_PARA='RESULT',
           REFERENCE='ANALYTIQUE',
           VALE_CALC_I=0,
           VALE_REFE_I=0,)

FIN()
