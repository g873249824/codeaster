# TITRE Validation de SOLVEUR / ELIM_LAGR='OUI'
# person_in_charge: jacques.pellet at edf.fr
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'), PAR_LOT='NON',
      # SUPERVIS_1 : a cause de PAR_LOT='NON' necessaire pour recuperer la valeur de reference.
      IGNORE_ALARM=('SUPERVIS_1'))

MAILL=LIRE_MAILLAGE()

MATER=DEFI_MATERIAU(  ELAS=_F(  E = 1.,      NU = 0.2) )
CHMAT=AFFE_MATERIAU(  MAILLAGE=MAILL, AFFE=_F(  TOUT = 'OUI',   MATER = MATER) )

MODEL=AFFE_MODELE(  MAILLAGE=MAILL,
                    AFFE= _F(TOUT='OUI',  MODELISATION = 'D_PLAN', PHENOMENE = 'MECANIQUE'))

LINST=DEFI_LIST_REEL(VALE=(0. , 1.))

# valeurs ne non-regression :
vcalc=[
  2.77142857143,  2.77142857143,  2.77142857143,  2.77142857143,  2.77142857143,  2.77142857143,
  2.77142829771,  2.77142829771,  2.77142857143,  2.77142857143,  2.77142857143,  2.77142857143,
  2.77142857143,  2.77142857143,  2.45714285714,  2.45714285714,  2.45714285714,  2.45714285714,
  2.45714285714,  2.45714285714,  2.45714286707,  2.45714286707,  2.45714285714,  2.45714285714,
  2.45714285714,  2.45714285714,  2.45714285714,  2.45714285714,
  ]


ico=-1
for czero in (False, True,) :
      if czero :
         c1=0.
         c2=0.
         c3=0.
         c4=0.
      else :
         c1=1.1
         c2=2.2
         c3=3.3
         c4=4.4


      CHAR1=AFFE_CHAR_MECA(MODELE=MODEL,
                           DDL_IMPO= (  _F(NOEUD='N1', DX=c1,   DY=c2),
                                        _F(NOEUD='N2',          DY=c3)),
                           LIAISON_DDL= _F(NOEUD=('N3','N3'), DDL=('DX','DY',),
                                          COEF_MULT=(1.0,-1.0,), COEF_IMPO=c4),
                           FORCE_INTERNE=_F(TOUT='OUI',  FX=5.0, FY=7.0,),);



      # Calcul de référence (MUMPS + DUALISE) :
      #-----------------------------------------
      if 1 :
         REREF1=MECA_STATIQUE( MODELE=MODEL, CHAM_MATER=CHMAT,  SOLVEUR=_F(METHODE='MUMPS',),
                  EXCIT=(_F(CHARGE = CHAR1),   ))

         TN1=POST_RELEVE_T(  ACTION=_F(  INTITULE = 'XX1', NOEUD = 'N3', OPERATION = 'EXTRACTION',
                                      RESULTAT = REREF1, NUME_ORDRE=1, NOM_CHAM='DEPL', NOM_CMP = 'DY' ))
         VREF=TN1['DY',1]

         for method1 in ('MUMPS', 'MULT_FRONT', 'LDLT', 'PETSC', 'GCPC') :
            for precond in (' ', 'LDLT_SP', 'LDLT_INC',) :
               # precond n'est utile que pour les methodes iteratives :
               if method1 in ('PETSC', 'GCPC') :
                  if precond == ' ' : continue
               else:
                  if precond != ' ' : continue

               if method1 not in ('PETSC','GCPC') :
                  solv1=_F(METHODE=method1, ELIM_LAGR='OUI'),
               elif method1=='PETSC' :
                  solv1=_F(METHODE=method1, ELIM_LAGR='OUI',ALGORITHME='FGMRES',PRE_COND=precond,RESI_RELA=1.e-8),
               elif method1=='GCPC' :
                  solv1=_F(METHODE=method1, ELIM_LAGR='OUI',PRE_COND=precond,RESI_RELA=1.e-8),


               # Calcul MECA_STATIQUE :
               #-----------------------------------------------------
               if 1 :
                  RESU1b=MECA_STATIQUE( MODELE=MODEL, CHAM_MATER=CHMAT, INFO=2,
                         SOLVEUR=solv1,
                         EXCIT=_F(CHARGE = CHAR1))

                  ico+=1
                  TEST_RESU(RESU=_F(NUME_ORDRE=1, NOEUD='N3', RESULTAT=RESU1b,  NOM_CHAM='DEPL', NOM_CMP='DY',
                                  REFERENCE='AUTRE_ASTER', VALE_REFE=VREF ,
                                  VALE_CALC=vcalc[ico], TOLE_MACHINE=3.e-7))

                  DETRUIRE(CONCEPT=_F(NOM=RESU1b),INFO=1,)


               # Calcul STAT_NON_LINE :
               #------------------------------------------------------
               if 1 :
                  RESU3a=STAT_NON_LINE( MODELE=MODEL, CHAM_MATER=CHMAT,
                        SOLVEUR=solv1,
                        COMPORTEMENT=_F(RELATION='ELAS',), INCREMENT=_F(LIST_INST=LINST,),
                        EXCIT=(_F(CHARGE = CHAR1),  ))

                  ico+=1
                  TEST_RESU(RESU=_F(NUME_ORDRE=1, NOEUD='N3', RESULTAT=RESU3a,  NOM_CHAM='DEPL', NOM_CMP='DY',
                              REFERENCE='AUTRE_ASTER', VALE_REFE=VREF ,
                              VALE_CALC=vcalc[ico], TOLE_MACHINE=3.e-7))

                  DETRUIRE(CONCEPT=_F(NOM=RESU3a),INFO=1,)


      DETRUIRE(CONCEPT=_F(NOM=CHAR1),INFO=1,)
      DETRUIRE(CONCEPT=_F(NOM=REREF1),INFO=1,)
      DETRUIRE(CONCEPT=_F(NOM=TN1),INFO=1,)

FIN()
