# TITRE VALIDATION DE L'ASSISTANT CRACK ANALYSIS DU MODULE ASTER SALOME-MECA : FISSURE CIRCULAIRE EN MILIEU INFINI
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
# MODALISATION B : METHODE X-FEM (FISSURE NON MAILLEE) EN AXI-SYMETRIQUE

# CE CAS-TEST EST ISSU DU SSLV134I, MAIS AVEC UNE MISE EN DONNEE PAR LE WIZARD

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),
      DEBUG=_F(SDVERI='OUI'),
      PAR_LOT='NON',
      IGNORE_ALARM=('SUPERVIS_1',),);

# <SUPERVIS_1> : PAR_LOT='NON' sert uniquement a recuperer de maniere dynamique le nombre de fonds de fissure (EXTR_TABLE)

#---------------------------------------------------------------------------
# parameters from the Wizard
#------------------------------

# h0 : initial elements size
h0 = 1.25

# hc : target elements size (taille cible)
hc=0.15

#---------------------------------------------------------------------------

# PARAMETRES DE LA FISSURE
ray = 2.

# useful parameters
#------------------

# number of mesh refinements
n = (log(h0)-log(hc))/log(2)
nb_raff = int(n)+1

# h : final elements size
h = h0/(2.**nb_raff)

# rayon du disque de raffinement
r_raff = 6*h

# initialisation
MA    = [None]*(nb_raff+1)
MO    = [None]*nb_raff
CHERR = [None]*nb_raff

i_raff=0
MA[i_raff]=LIRE_MAILLAGE(FORMAT='MED')

# boucle de raffinements
for i_raff in range(nb_raff) :

   MO[i_raff]=AFFE_MODELE(MAILLAGE=MA[i_raff],
                          AFFE=_F(TOUT='OUI',
                                  PHENOMENE='MECANIQUE',
                                  MODELISATION='AXIS'))

   fiss_1=DEFI_FISS_XFEM(MAILLAGE=MA[i_raff],
                         DEFI_FISS=_F(FORM_FISS='DEMI_DROITE',
                                      PFON=(ray,0.,0.),
                                      DTAN=(1.,0.,0.),),
                         )

   l_fiss = (fiss_1,)

   # evaluation de l'erreur
   CHERR[i_raff]=RAFF_XFEM(FISSURE=l_fiss)

   # definition du type du maillage n+1
   MA[i_raff+1]=CO('MA_%d' % (i_raff+1))

   # valeur du critere de raffinement
   crit = -max(r_raff , h0/(2.**i_raff) )

   MACR_ADAP_MAIL(ADAPTATION         = 'RAFFINEMENT',
                  CHAM_GD            = CHERR[i_raff],
                  CRIT_RAFF_ABS      = crit,
                  USAGE_CMP          = 'RELATIF',
                  MAILLAGE_N         = MA[i_raff],
                  MAILLAGE_NP1       = MA[i_raff+1])

   DETRUIRE(CONCEPT=_F(NOM=l_fiss),INFO=1)

assert(nb_raff == i_raff+1)

MA[nb_raff]=MODI_MAILLAGE(reuse =MA[nb_raff],
                          MAILLAGE=MA[nb_raff],
                          ORIE_PEAU_2D=_F(GROUP_MA=('haut','bas')))

IMPR_RESU(FORMAT='MED',UNITE=80,RESU=_F(MAILLAGE=MA[nb_raff]))


MOD=AFFE_MODELE(MAILLAGE=MA[nb_raff],
                AFFE=_F(GROUP_MA=('FACE','haut','bas'),
                        PHENOMENE='MECANIQUE',
                        MODELISATION='AXIS'))

fiss_1=DEFI_FISS_XFEM(MAILLAGE=MA[nb_raff],
                      DEFI_FISS=_F(FORM_FISS='DEMI_DROITE',
                                   PFON=(2.,0.,0.),
                                   DTAN=(1.,0.,0.),),
                      )

l_fiss = (fiss_1,)

MODX=MODI_MODELE_XFEM(MODELE_IN=MOD,
                      FISSURE=l_fiss)

ACIER=DEFI_MATERIAU( ELAS=_F(  E = 2.E11,  NU = 0.3))

MATE=AFFE_MATERIAU(MAILLAGE=MA[nb_raff],
                   AFFE=_F(TOUT='OUI',
                           MATER=ACIER))

CHAR=AFFE_CHAR_MECA(MODELE=MODX,
                    DDL_IMPO=_F(GROUP_NO='C' ,DY=0.),
                    PRES_REP=_F(GROUP_MA=('haut','bas'),PRES=-1.E6,),
                    )


RESU=MECA_STATIQUE(MODELE=MODX,
                   CHAM_MATER=MATE,
                   EXCIT=_F(CHARGE=CHAR))

#----------------------------------------------------------------------
#                       VISUALISATION
#----------------------------------------------------------------------

MA_VISU=POST_MAIL_XFEM(MODELE=MODX)

MO_VISU=AFFE_MODELE(MAILLAGE=MA_VISU,
                    AFFE=_F(TOUT='OUI',
                            PHENOMENE='MECANIQUE',
                            MODELISATION='AXIS'))

RE_VISU=POST_CHAM_XFEM(MODELE_VISU=MO_VISU,
                       RESULTAT=RESU)

IMPR_RESU(FORMAT='MED',UNITE=80,RESU=_F(RESULTAT=RE_VISU))

#----------------------------------------------------------------------
#                       POST-TRAITEMENT DE G ET K
#----------------------------------------------------------------------

NB_FOND=RECU_TABLE(CO=fiss_1,NOM_TABLE='NB_FOND_FISS')
dict = NB_FOND.EXTR_TABLE().values()
nb_fond = dict['NOMBRE'][0]
DETRUIRE(CONCEPT=_F(NOM=NB_FOND),INFO=1)

G1 = [None]*nb_fond
G2 = [None]*nb_fond

for i in range(nb_fond) :

   G1[i]=CALC_G(THETA=_F(FISSURE=fiss_1,
                         NUME_FOND=i+1,
                         R_INF=2*h,
                         R_SUP=5*h,),
                RESULTAT=RESU,
                OPTION='CALC_K_G')

   IMPR_TABLE(TABLE=G1[i])

#  calcul sans R_INF et R_SUP
   G2[i]=CALC_G(THETA=_F(FISSURE=fiss_1,
                         NUME_FOND=i+1,),
                RESULTAT=RESU,
                OPTION='CALC_K_G')

#----------------------------------------------------------------------
#              TEST
#----------------------------------------------------------------------

# VALEUR DE REFERENCE MILIEU INFINI :
G_REF=11.58648
K1_REF=1.595769E6

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.029999999999999999,
           VALE_CALC=11.2441792596,
           VALE_REFE=11.58648,
           NOM_PARA='G',
           TABLE=G1_0,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.029999999999999999,
           VALE_CALC=1637150.2458,
           VALE_REFE=1.595769E6,
           NOM_PARA='K1',
           TABLE=G1_0,)

#  sans R_INF et R_SUP
TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.029999999999999999,
           VALE_CALC=11.2508553729,
           VALE_REFE=11.58648,
           NOM_PARA='G',
           TABLE=G2_0,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=0.029999999999999999,
           VALE_CALC=1616198.58136,
           VALE_REFE=1.595769E6,
           NOM_PARA='K1',
           TABLE=G2_0,)
FIN()
