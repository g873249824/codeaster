# MODIF  DATE 29/05/2006   AUTEUR GALENNE E.GALENNE 
# TITRE CALCUL DES FACTEURS D INTENSITE DES CONTRAINTES 
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2005  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
#        PAR RECOMBINAISON MODALE SUR UNE PLAQUE FISSUREE
# RESPONSABLE GALENNE E.GALENNE

DEBUT(CODE=_F( NOM = 'SDLS114A',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
      PAR_LOT = 'NON', )

# DEFINITION DES PARAMETRES DU CALCUL
n_mode = 15
tau = 0.01
t_fin = 0.013
pas = 2.5E-7

#PRE_IDEAS();

M = LIRE_MAILLAGE();

M=DEFI_GROUP(reuse=M,
             MAILLAGE=M,
             CREA_GROUP_NO=(_F(OPTION = 'NOEUD_ORDO',
                               NOM = 'LEVSUP',
                               GROUP_MA = 'LEVSUP',),
                            _F(OPTION = 'NOEUD_ORDO',
                               NOM = 'LEVINF',
                               GROUP_MA = 'LEVINF',),
                            _F(NOM = 'COT_INF',
                               GROUP_MA = 'COT_INF',),),
            );

MO=AFFE_MODELE(MAILLAGE=M,
               AFFE=_F(TOUT = 'OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='C_PLAN',),
              );
                 
M = MODI_MAILLAGE(reuse = M,
                  MAILLAGE = M,
                  MODI_MAILLE = _F(OPTION = 'NOEUD_QUART',
                                   GROUP_NO_FOND = 'PF',),
                 );
#IMPR_RESU(FORMAT = 'IDEAS',
#          RESU=_F(MAILLAGE = M,),);

#FIN();


MA=DEFI_MATERIAU(ELAS=_F(E=200.0E+9,
                         NU=0.3,
                         ALPHA = 0.,
                         RHO=7800,),);

CM=AFFE_MATERIAU(MAILLAGE=M,
                 AFFE=_F(TOUT='OUI',
                         MATER=MA,
                         TEMP_REF=0.0,),);  

BLOCAGE=AFFE_CHAR_MECA(MODELE=MO,
                       DDL_IMPO=(_F(GROUP_MA='COT_SUP',
                                    DX = 0,),
                                 _F(GROUP_MA='COT_SUP',
                                    DY = 0,),),
                      );

CHAR=AFFE_CHAR_MECA(MODELE=MO,
                    FORCE_NODALE=_F(GROUP_NO='COT_INF',
                                  FX=-1000,), 
                    );   
                  
RAMPE=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,
                          tau,1.0,
                          0.2, 1.0,),
                    PROL_DROITE='CONSTANT',
                    PROL_GAUCHE='LINEAIRE',);
                                    
#################################
#  CONSTRUCTION DES MATRICES
#################################

MRIGI=CALC_MATR_ELEM(OPTION='RIGI_MECA',
                     MODELE=MO,
                     CHAM_MATER=CM,
                     CHARGE=BLOCAGE);

MMASSE=CALC_MATR_ELEM(OPTION='MASS_MECA',
                      MODELE=MO,
                      CHAM_MATER=CM,
                      CHARGE=BLOCAGE,);

MAMOR=CALC_MATR_ELEM(OPTION='AMOR_MECA',
                     MODELE=MO,
                     RIGI_MECA = MRIGI,
                     MASS_MECA = MMASSE,
                     CHAM_MATER=CM,
                     CHARGE=BLOCAGE,);

VCHA=CALC_VECT_ELEM(OPTION='CHAR_MECA',
                    CHARGE =(BLOCAGE,CHAR),);

NUM=NUME_DDL(MODELE= MO,
             CHARGE=(BLOCAGE,CHAR),);

RIG_ASS=ASSE_MATRICE(MATR_ELEM=MRIGI,
                     NUME_DDL=NUM,);

MA_ASS=ASSE_MATRICE(MATR_ELEM=MMASSE,
                    NUME_DDL=NUM,);

AMO_ASS=ASSE_MATRICE(MATR_ELEM=MAMOR,
                    NUME_DDL=NUM,);
                    
VE_ASS=ASSE_VECTEUR(VECT_ELEM=VCHA,
                    NUME_DDL=NUM,);


##################################
#  CALCUL DES MODES PROPRES ET DES K_MODAUX
##################################

MODE=MODE_ITER_SIMULT(MATR_A=RIG_ASS,
                      MATR_B=MA_ASS,
                      CALC_FREQ=_F(NMAX_FREQ=n_mode,),);


MODE=NORM_MODE(reuse=MODE,
               MODE=MODE,
               NORME='MASS_GENE',);

THET1=CALC_THETA(
                 MODELE=MO,
                 THETA_2D=_F(GROUP_NO='PF',
                             MODULE=1.0,
                             R_INF=5.E-6,
                             R_SUP=5.E-5,),
                 DIRECTION = (-1.0, 0.0, 0.0),
                 );
                 
FF1=DEFI_FOND_FISS(MAILLAGE=M,
                   FOND_FISS=_F(GROUP_NO = 'PF',),
                   NORMALE=(0.0, -1.0, 0.0),
                  );

GLMO1=CALC_G(MODELE=MO,
             CHAM_MATER=CM,
             OPTION='K_G_MODA',
             RESULTAT=MODE,
             TOUT_MODE = 'OUI',
             THETA=_F(FOND_FISS=FF1,
                      MODULE=1.0,
                      R_INF=5.E-6,
                      R_SUP=5.E-5,
                      DIRECTION = (-1.0, 0.0, 0.0),),
                    );

IMPR_TABLE(TABLE =GLMO1);
                                    
             
D_SUP = [None]*n_mode
D_INF = [None]*n_mode
T1_K = [None]*n_mode
Kmodu = [None]*n_mode

for i in range(0,n_mode) :
   
   imode = i + 1
   
   D_SUP[i]=POST_RELEVE_T(ACTION=_F(INTITULE='Lev sup',
                                    GROUP_NO='LEVSUP',
                                    RESULTAT=MODE,
                                    NUME_MODE=imode,
                                    NOM_CHAM='DEPL',
                                    NOM_CMP=('DX','DY','DZ',),
                                    OPERATION='EXTRACTION',),);
   
   
   D_INF[i]=POST_RELEVE_T(ACTION=_F(INTITULE='lev inf',
                                    GROUP_NO='LEVINF',
                                    RESULTAT=MODE,
                                    NUME_MODE=imode,
                                    NOM_CHAM='DEPL',
                                    NOM_CMP=('DX','DY','DZ',),
                                    OPERATION='EXTRACTION',),);
  
   
   T1_K[i] = POST_K1_K2_K3(MODELISATION='C_PLAN',
                           MATER=MA,
                           INFO = 2,
                           TABL_DEPL_SUP=D_SUP[i],
                           TABL_DEPL_INF=D_INF[i],
                           VECT_K1 = (0., 1., 0.),
                           ABSC_CURV_MAXI=7.E-5,
                           TOUT_ORDRE='OUI',);

   
   Kmodu[i] = T1_K[i]['K1_MAX',3] 

# TEST DE NON REGRESSION SUR LES 5 PREMIERS MODES
Kg_ref =[-1.92107E+10,-1.16602E+11, 8.03919E+10,-1.18804E+11, 1.72295E+11]
Ku_ref =[-1.8976E+10,-1.1515E+11,7.9484E+10,-1.174E+11,1.7046E+11]

for i in range(0,5) :
   imode = i + 1
   TEST_TABLE(TABLE=GLMO1,
              NOM_PARA='K1',
              FILTRE=_F(NOM_PARA = 'NUME_MODE',
                         VALE_I = imode),  
              VALE=Kg_ref[i],
              PRECISION=0.001,
              REFERENCE = 'NON_REGRESSION',
             );
             
   TEST_TABLE(TABLE=T1_K[i],
              NOM_PARA='K1_MAX',
              FILTRE=_F(NOM_PARA = 'METHODE',
                         VALE_I = 3),  
              VALE=Ku_ref[i],
              PRECISION=0.001,
              REFERENCE = 'NON_REGRESSION',
             );

##############################################
# CALCUL TRANSITOIRE EN COORDONNEES MODALES
##############################################

MACRO_PROJ_BASE(BASE=MODE,
                MATR_ASSE_GENE=(_F(MATRICE=CO('MASS_GE'),
                                   MATR_ASSE=MA_ASS,),
                                _F(MATRICE=CO('RIGI_GE'),
                                   MATR_ASSE=RIG_ASS,),
                                _F(MATRICE=CO('AMOR_GE'),
                                   MATR_ASSE=AMO_ASS,),), 
                VECT_ASSE_GENE=_F(VECTEUR=CO('CHA_ASS'),
                                  VECT_ASSE=VE_ASS,),);

RES_DYNA=DYNA_TRAN_MODAL(MASS_GENE=MASS_GE,
                         RIGI_GENE=RIGI_GE,
                         AMOR_GENE=AMOR_GE,
                         INFO = 2,
                         INCREMENT=_F(INST_INIT=0.,
                                      INST_FIN=t_fin,
                                      VERI_PAS = 'OUI',
                                      PAS=pas,),
                         EXCIT=_F(VECT_GENE=CHA_ASS,
                                  FONC_MULT=RAMPE,),
                         ARCHIVAGE=_F(PAS_ARCH = 200,),
                         IMPRESSION = _F(TOUT='OUI',),);

RESUDYNA = REST_BASE_PHYS(RESU_GENE = RES_DYNA, 
                          NOM_CHAM='DEPL',);
                

coef = aster.getvectjev("RES_DYNA           .DEPL        ")
l_inst = aster.getvectjev("RES_DYNA           .INST        ")

nbarch = len(l_inst)

alpha = [None]*n_mode
Kmodg = [None]*n_mode
K1g = [None]*nbarch

for k in range(0,n_mode) :
   alpha[k] = [None]*nbarch
   
for inst in range(0,nbarch) :
   for k in range(0,n_mode) :
      r = k+1
      Kmodg[k] = GLMO1['K1',r]
      alpha[k][inst] = coef[n_mode*inst+k]

for inst in range(0,nbarch) :
   K1g[inst] = 0.0
   for k in range(0,n_mode) :
      K1g[inst] = K1g[inst] + alpha[k][inst]*Kmodg[k]
   #print 'inst = ',l_inst[inst],'K1 = ',K1g[inst]

# CALCUL DE L ERREUR PAR RAPPORT A LA SOLUTION DE REFERENCE
# aux instants : 0.0005 0.001 0.002 0.003 0.004

Kt_ref = [24337.0, 45159.3, 91679., 135633.9, 183286.7]
t = [10, 20, 40, 60, 80]

for i in range(0,5) :
   inst = t[i]
   err_g = 100*(Kt_ref[i]-K1g[inst])/Kt_ref[i]
   print 'K1_g(t) = ', K1g[inst], 'Erreur (%) : ', err_g


###TEST INFORMATIQUE         
GLMO2=CALC_G(MODELE=MO,
             CHAM_MATER=CM,
             NUME_MODE = 1,
             OPTION='K_G_MODA',
             RESULTAT=MODE,
             THETA=_F(FOND_FISS=FF1,
                      MODULE=1.0,
                      R_INF=5.E-6,
                      R_SUP=5.E-5,
                      DIRECTION = (-1.0, 0.0, 0.0),),
                    );

TEST_TABLE(TABLE=GLMO2,
              NOM_PARA='K1',
              FILTRE=_F(NOM_PARA = 'NUME_MODE',
                         VALE_I = 1),  
              VALE=-1.92107E+10,
              PRECISION=0.001,
              REFERENCE = 'NON_REGRESSION',
             );

GLMO3=CALC_G(MODELE=MO,
             CHAM_MATER=CM,
             OPTION='K_G_MODA',
             RESULTAT=MODE,
             FREQ = 3.46915E+03,
             CRITERE='RELATIF',
             PRECISION=1.E-3,
             THETA=_F(THETA=THET1,
                      FOND_FISS = FF1),);

TEST_TABLE(TABLE=GLMO3,
              NOM_PARA='K1',
              FILTRE=_F(NOM_PARA = 'NUME_MODE',
                         VALE_I = 1),  
              VALE=-1.92107E+10,
              PRECISION=0.001,
              REFERENCE = 'NON_REGRESSION',
             );

FIN();

#Calcul de K1 (resu transitoire)
LR = DEFI_LIST_REEL(DEBUT=0.,
                    INTERVALLE=_F(JUSQU_A=t_fin, PAS=pas),
                    );
                                 
RESUTRAN=DYNA_LINE_TRAN(MODELE = MO,
                        CHAM_MATER = CM,
                        MATR_MASS = MA_ASS,
                        MATR_RIGI = RIG_ASS,
                        MATR_AMOR = AMO_ASS,
                        INFO = 1,
                        NEWMARK=_F(ALPHA = 0.25,
                                   DELTA = 0.5,),
                        EXCIT=_F(CHARGE=CHAR,
                                 FONC_MULT=RAMPE,),
                        ARCHIVAGE=_F(PAS_ARCH = 200,),
                        INCREMENT=_F(LIST_INST = LR,),);

n_calc = 25
T_SUP = [None]*n_calc
T_INF = [None]*n_calc
T_K = [None]*n_calc
Tue = [None]*n_calc

for i in range(0,n_calc) :
   iord = i*4
   T_SUP[i]=POST_RELEVE_T(ACTION=_F(INTITULE='Lev sup',
                                GROUP_NO='LEVSUP',
                                RESULTAT=RESUTRAN,
                                NUME_ORDRE= iord,
                                NOM_CHAM='DEPL',
                                NOM_CMP=('DX','DY','DZ',),
                                OPERATION='EXTRACTION',),);
   T_INF[i]=POST_RELEVE_T(ACTION=_F(INTITULE='lev inf',
                                GROUP_NO='LEVINF',
                                RESULTAT=RESUTRAN,
                                NUME_ORDRE=iord,
                                NOM_CHAM='DEPL',
                                NOM_CMP=('DX','DY','DZ',),
                                OPERATION='EXTRACTION',),);
   T_K[i] = POST_K1_K2_K3(MODELISATION='C_PLAN',
                          MATER=MA,
                          TABL_DEPL_SUP=T_SUP[i],
                          TABL_DEPL_INF=T_INF[i],
                          VECT_K1 = (0., 1., 0.),
                          ABSC_CURV_MAXI=5.E-5,
                          TOUT_ORDRE='OUI',);

for i in range(0,n_calc) :
   K_T = T_K[i]['K1_MAX',3] 
   print 'i=',i,'K = ', K_T
