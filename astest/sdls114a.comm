# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#
# Pour des raisons de performances, on force SDVERI='NON'.
DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
      DEBUG=_F(SDVERI='NON'))

# DEFINITION DES PARAMETRES DU CALCUL
n_mode = 15
tau = 0.01
t_fin = 0.013
pas = 2.5E-7

M = LIRE_MAILLAGE(FORMAT='MED',);

M=DEFI_GROUP(reuse=M,
             MAILLAGE=M,
             CREA_GROUP_NO=(_F(OPTION = 'NOEUD_ORDO',
                               NOM = 'LEVSUP',
                               GROUP_MA = 'LEVSUP',),
                            _F(OPTION = 'NOEUD_ORDO',
                               NOM = 'LEVINF',
                               GROUP_MA = 'LEVINF',),
                            _F(NOM = 'COT_INF',
                               GROUP_MA = 'COT_INF',),),
            );

MO=AFFE_MODELE(MAILLAGE=M,
               AFFE=_F(TOUT = 'OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='C_PLAN',),
              );

M = MODI_MAILLAGE(reuse = M,
                  MAILLAGE = M,
                  MODI_MAILLE = _F(OPTION = 'NOEUD_QUART',
                                   GROUP_NO_FOND = 'PF',),
                 );

MA=DEFI_MATERIAU(ELAS=_F(E=200.0E+9,
                         NU=0.3,
                         ALPHA = 0.,
                         RHO=7800,),);

CM=AFFE_MATERIAU(MAILLAGE=M,
                 AFFE=_F(TOUT='OUI',
                         MATER=MA,
                         ),);

BLOCAGE=AFFE_CHAR_MECA(MODELE=MO,
                       DDL_IMPO=(_F(GROUP_MA='COT_SUP',
                                    DX = 0,),
                                 _F(GROUP_MA='COT_SUP',
                                    DY = 0,),),
                      );

CHAR=AFFE_CHAR_MECA(MODELE=MO,
                    FORCE_NODALE=_F(GROUP_NO='COT_INF',
                                  FX=-1000,),
                    );

RAMPE=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,
                          tau,1.0,
                          0.2, 1.0,),
                    PROL_DROITE='CONSTANT',
                    PROL_GAUCHE='LINEAIRE',);

#################################
#  CONSTRUCTION DES MATRICES
#################################

MRIGI=CALC_MATR_ELEM(OPTION='RIGI_MECA',
                     MODELE=MO,
                     CHAM_MATER=CM,
                     CHARGE=BLOCAGE);

MMASSE=CALC_MATR_ELEM(OPTION='MASS_MECA',
                      MODELE=MO,
                      CHAM_MATER=CM,
                      CHARGE=BLOCAGE,);

MAMOR=CALC_MATR_ELEM(OPTION='AMOR_MECA',
                     MODELE=MO,
                     RIGI_MECA = MRIGI,
                     MASS_MECA = MMASSE,
                     CHAM_MATER=CM,
                     CHARGE=BLOCAGE,);

VCHA=CALC_VECT_ELEM(OPTION='CHAR_MECA',
                    CHARGE =(BLOCAGE,CHAR),);

NUM=NUME_DDL(MODELE= MO,
             CHARGE=(BLOCAGE,CHAR),);

RIG_ASS=ASSE_MATRICE(MATR_ELEM=MRIGI,
                     NUME_DDL=NUM,);

MA_ASS=ASSE_MATRICE(MATR_ELEM=MMASSE,
                    NUME_DDL=NUM,);

AMO_ASS=ASSE_MATRICE(MATR_ELEM=MAMOR,
                    NUME_DDL=NUM,);

VE_ASS=ASSE_VECTEUR(VECT_ELEM=VCHA,
                    NUME_DDL=NUM,);


##################################
#  CALCUL DES MODES PROPRES ET DES K_MODAUX
##################################

MODE=CALC_MODES(MATR_RIGI=RIG_ASS,
                MATR_MASS=MA_ASS,
                CALC_FREQ=_F(NMAX_FREQ=n_mode,
                             ),
                )

#enrichissement de la base pour la restitution sur base physique
MODE=CALC_CHAMP(reuse=MODE,
                   CHAM_MATER=CM,
                   RESULTAT=MODE,
                   FORCE=('FORC_NODA',),);

#IMPR_RESU(RESU=_F(RESULTAT=MODE,))

MODE=NORM_MODE(reuse=MODE,
               MODE=MODE,
               NORME='MASS_GENE',);


FF1=DEFI_FOND_FISS(MAILLAGE=M,
                   FOND_FISS=_F(GROUP_NO = 'PF',),
                  );

GLMO1=CALC_G(OPTION='CALC_K_G',
             RESULTAT=MODE,
             TOUT_MODE = 'OUI',
             THETA=_F(FOND_FISS=FF1,
                      R_INF=5.E-6,
                      R_SUP=5.E-5,
                    ),
                    );

IMPR_TABLE(TABLE =GLMO1);

FISS=DEFI_FOND_FISS(MAILLAGE=M,
                   FOND_FISS=_F(GROUP_NO = 'PF',),
                   LEVRE_SUP=_F(  GROUP_MA = 'LEVSUP'),
                   LEVRE_INF=_F(  GROUP_MA = 'LEVINF'),
                  );


T1_K = POST_K1_K2_K3(INFO = 2,
                           RESULTAT=MODE,
                           FOND_FISS=FISS,
                           NUME_ORDRE=(1,2,3,4,5),);
IMPR_TABLE(TABLE=T1_K)


# TEST DE NON REGRESSION SUR LES 5 PREMIERS MODES
Kg_ref =[-1.9210656530516E+10, -1.1660157187863E+11, 8.0391912527133E+10, -1.1880390578447E+11, 1.7229518729345E+11]
Ku_ref =[-1.9038714866638E+10, -1.1555795319447E+11, 7.9672432337416E+10, -1.177406508046E+11 , 1.7075333962439E+11]

for i in range(0,5) :
   iord = i + 1
   imode = i + 1
   TEST_TABLE(TABLE=GLMO1,
              NOM_PARA='K1',
              FILTRE=_F(NOM_PARA = 'NUME_MODE',
                         VALE_I = imode),
              VALE_CALC=Kg_ref[i],
             )

   TEST_TABLE(TABLE=T1_K,
              NOM_PARA='K1',
              FILTRE=_F(NOM_PARA = 'NUME_ORDRE',
                         VALE_I = iord),
              VALE_CALC=Ku_ref[i],
             )


##############################################
# CALCUL TRANSITOIRE EN COORDONNEES MODALES
##############################################

PROJ_BASE(BASE=MODE,
                STOCKAGE='DIAG',
                MATR_ASSE_GENE=(_F(MATRICE=CO('MASS_GE'),
                                   MATR_ASSE=MA_ASS,),
                                _F(MATRICE=CO('RIGI_GE'),
                                   MATR_ASSE=RIG_ASS,),
                                _F(MATRICE=CO('AMOR_GE'),
                                   MATR_ASSE=AMO_ASS,),),
                VECT_ASSE_GENE=_F(VECTEUR=CO('CHA_ASS'),
                                  VECT_ASSE=VE_ASS,),);



RES_DYNA=DYNA_VIBRA(TYPE_CALCUL='TRAN',
                    BASE_CALCUL='GENE',
                    SCHEMA_TEMPS=_F(SCHEMA='DIFF_CENTRE',),
                    MATR_MASS=MASS_GE,
                    MATR_RIGI=RIGI_GE,
                    MATR_AMOR=AMOR_GE,
                    INFO = 2,
                    INCREMENT=_F(INST_INIT=0.,
                                 INST_FIN=t_fin,
                                 VERI_PAS = 'OUI',
                                 PAS=pas,),
                    EXCIT=_F(VECT_ASSE_GENE=CHA_ASS,
                            FONC_MULT=RAMPE,),
                    ARCHIVAGE=_F(PAS_ARCH = 200,),
                    IMPRESSION = _F(TOUT='OUI',),);

RESUDYNA = REST_GENE_PHYS(RESU_GENE = RES_DYNA,
                          NOM_CHAM=('DEPL','ACCE',)
                          );

RESUDYNA=CALC_CHAMP(reuse =RESUDYNA ,
                    MODELE=MO,
                    CHAM_MATER=CM,
                    CONTRAINTE=('SIEF_ELGA'),
                    RESULTAT=RESUDYNA ,);

RESUDYNA=CALC_CHAMP(reuse =RESUDYNA ,
                    MODELE=MO,
                    CHAM_MATER=CM,
                    RESULTAT=RESUDYNA ,
                    FORCE='REAC_NODA',);

#si calcul par POST_GENE_PHYS:
T_FORC=POST_GENE_PHYS(RESU_GENE=RES_DYNA,
                      OBSERVATION=(
                                    _F(NOM_CHAM = 'FORC_NODA',
                                     #  NOM_CMP=('DX','DY',),
                                       MAILLE='MA1',
                                    #   NOEUD=('NO2797','NO2798',),
                                       INST=1.e-2,
                                       ),
                                   ),
                       )
#IMPR_TABLE(TABLE=T_FORC)

TEST_TABLE(
           VALE_CALC=3.06153456261,
           TABLE=T_FORC,
           NOM_PARA='VALE_R',
           FILTRE=(_F(NOM_PARA='NOM_CHAM', VALE_K='FORC_NODA',),
                   _F(NOM_PARA='NOEUD', VALE_K='NO2797',),
                   _F(NOM_PARA='NOM_CMP', VALE_K='DX',),
                  ),
           )

TEST_TABLE(
           VALE_CALC=0.717623088175,
           TABLE=T_FORC,
           NOM_PARA='VALE_R',
           FILTRE=(_F(NOM_PARA='NOM_CHAM', VALE_K='FORC_NODA',),
                   _F(NOM_PARA='NOEUD', VALE_K='NO2798',),
                   _F(NOM_PARA='NOM_CMP', VALE_K='DY',),
                  ),
           )

KT1 = POST_K_TRANS(RESU_TRANS = RES_DYNA,
                   K_MODAL = _F(TABL_K_MODA =GLMO1,
                              FOND_FISS=FF1, ),);

IMPR_TABLE(TABLE=KT1)

TEST_TABLE(
           VALE_CALC=4.4999014467721E+05,

           NOM_PARA='K1',
           TABLE=KT1,
           FILTRE=_F(NOM_PARA='INST',
                     VALE=0.01285,),
           )

###TESTS INFORMATIQUES
GLMO2=CALC_G(NUME_MODE = 1,
             OPTION='CALC_K_G',
             RESULTAT=MODE,
             THETA=_F(FOND_FISS=FF1,
                      R_INF=5.E-6,
                      R_SUP=5.E-5,),
                    );

TEST_TABLE(
           VALE_CALC=-1.9210656530516E+10,

           NOM_PARA='K1',
           TABLE=GLMO2,
           FILTRE=_F(NOM_PARA='NUME_MODE',
                     VALE_I=1,),
           )

GLMO3=CALC_G(OPTION='CALC_K_G',
             RESULTAT=MODE,
             FREQ = 3.46915E+03,
             PRECISION=1.E-3,
             THETA=_F(FOND_FISS=FF1,
                      R_INF=5.E-6,
                      R_SUP=5.E-5,
                      ),);

TEST_TABLE(
           VALE_CALC=-1.9210656530516E+10,

           NOM_PARA='K1',
           TABLE=GLMO3,
           FILTRE=_F(NOM_PARA='NUME_MODE',
                     VALE_I=1,),
           )

FIN();
