# MODIF  DATE 21/06/2011   AUTEUR MACOCCO K.MACOCCO 
# TITRE CALCUL DES FACTEURS D INTENSITE DES CONTRAINTES
# sdls114a.para = tps_job 240 mem_job 256Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2011  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#        PAR RECOMBINAISON MODALE SUR UNE PLAQUE FISSUREE


DEBUT(CODE=_F( NOM = 'SDLS114A',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'))

# DEFINITION DES PARAMETRES DU CALCUL
n_mode = 15
tau = 0.01
t_fin = 0.013
pas = 2.5E-7

M = LIRE_MAILLAGE();

M=DEFI_GROUP(reuse=M,
             MAILLAGE=M,
             CREA_GROUP_NO=(_F(OPTION = 'NOEUD_ORDO',
                               NOM = 'LEVSUP',
                               GROUP_MA = 'LEVSUP',),
                            _F(OPTION = 'NOEUD_ORDO',
                               NOM = 'LEVINF',
                               GROUP_MA = 'LEVINF',),
                            _F(NOM = 'COT_INF',
                               GROUP_MA = 'COT_INF',),),
            );

MO=AFFE_MODELE(MAILLAGE=M,
               AFFE=_F(TOUT = 'OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='C_PLAN',),
              );

M = MODI_MAILLAGE(reuse = M,
                  MAILLAGE = M,
                  MODI_MAILLE = _F(OPTION = 'NOEUD_QUART',
                                   GROUP_NO_FOND = 'PF',),
                 );

MA=DEFI_MATERIAU(ELAS=_F(E=200.0E+9,
                         NU=0.3,
                         ALPHA = 0.,
                         RHO=7800,),);

CM=AFFE_MATERIAU(MAILLAGE=M,
                 AFFE=_F(TOUT='OUI',
                         MATER=MA,
                         ),);

BLOCAGE=AFFE_CHAR_MECA(MODELE=MO,
                       DDL_IMPO=(_F(GROUP_MA='COT_SUP',
                                    DX = 0,),
                                 _F(GROUP_MA='COT_SUP',
                                    DY = 0,),),
                      );

CHAR=AFFE_CHAR_MECA(MODELE=MO,
                    FORCE_NODALE=_F(GROUP_NO='COT_INF',
                                  FX=-1000,),
                    );

RAMPE=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,
                          tau,1.0,
                          0.2, 1.0,),
                    PROL_DROITE='CONSTANT',
                    PROL_GAUCHE='LINEAIRE',);

#################################
#  CONSTRUCTION DES MATRICES
#################################

MRIGI=CALC_MATR_ELEM(OPTION='RIGI_MECA',
                     MODELE=MO,
                     CHAM_MATER=CM,
                     CHARGE=BLOCAGE);

MMASSE=CALC_MATR_ELEM(OPTION='MASS_MECA',
                      MODELE=MO,
                      CHAM_MATER=CM,
                      CHARGE=BLOCAGE,);

MAMOR=CALC_MATR_ELEM(OPTION='AMOR_MECA',
                     MODELE=MO,
                     RIGI_MECA = MRIGI,
                     MASS_MECA = MMASSE,
                     CHAM_MATER=CM,
                     CHARGE=BLOCAGE,);

VCHA=CALC_VECT_ELEM(OPTION='CHAR_MECA',
                    CHARGE =(BLOCAGE,CHAR),);

NUM=NUME_DDL(MODELE= MO,
             CHARGE=(BLOCAGE,CHAR),);

RIG_ASS=ASSE_MATRICE(MATR_ELEM=MRIGI,
                     NUME_DDL=NUM,);

MA_ASS=ASSE_MATRICE(MATR_ELEM=MMASSE,
                    NUME_DDL=NUM,);

AMO_ASS=ASSE_MATRICE(MATR_ELEM=MAMOR,
                    NUME_DDL=NUM,);

VE_ASS=ASSE_VECTEUR(VECT_ELEM=VCHA,
                    NUME_DDL=NUM,);


##################################
#  CALCUL DES MODES PROPRES ET DES K_MODAUX
##################################

MODE=MODE_ITER_SIMULT(MATR_A=RIG_ASS,
                      MATR_B=MA_ASS,
                      CALC_FREQ=_F(NMAX_FREQ=n_mode,),);


MODE=NORM_MODE(reuse=MODE,
               MODE=MODE,
               NORME='MASS_GENE',);

THET1=CALC_THETA(
                 MODELE=MO,
                 THETA_2D=_F(GROUP_NO='PF',
                             MODULE=1.0,
                             R_INF=5.E-6,
                             R_SUP=5.E-5,),
                 DIRECTION = (-1.0, 0.0, 0.0),
                 );

FF1=DEFI_FOND_FISS(MAILLAGE=M,
                   FOND_FISS=_F(GROUP_NO = 'PF',),
                   NORMALE=(0.0, -1.0, 0.0),
                  );

GLMO1=CALC_G(OPTION='K_G_MODA',
             RESULTAT=MODE,
             TOUT_MODE = 'OUI',
             THETA=_F(FOND_FISS=FF1,
                      R_INF=5.E-6,
                      R_SUP=5.E-5,
                      DIRECTION = (-1.0, 0.0, 0.0),),
                    );

IMPR_TABLE(TABLE =GLMO1);


D_SUP = [None]*n_mode
D_INF = [None]*n_mode
T1_K = [None]*n_mode
Kmodu = [None]*n_mode

for i in range(0,n_mode) :

   imode = i + 1

   D_SUP[i]=POST_RELEVE_T(ACTION=_F(INTITULE='Lev sup',
                                    GROUP_NO='LEVSUP',
                                    RESULTAT=MODE,
                                    NUME_MODE=imode,
                                    NOM_CHAM='DEPL',
                                    NOM_CMP=('DX','DY',),
                                    OPERATION='EXTRACTION',),);


   D_INF[i]=POST_RELEVE_T(ACTION=_F(INTITULE='lev inf',
                                    GROUP_NO='LEVINF',
                                    RESULTAT=MODE,
                                    NUME_MODE=imode,
                                    NOM_CHAM='DEPL',
                                    NOM_CMP=('DX','DY',),
                                    OPERATION='EXTRACTION',),);


   T1_K[i] = POST_K1_K2_K3(MODELISATION='C_PLAN',
                           MATER=MA,
                           INFO = 2,
                           TABL_DEPL_SUP=D_SUP[i],
                           TABL_DEPL_INF=D_INF[i],
                           VECT_K1 = (0., 1., 0.),
                           ABSC_CURV_MAXI=7.E-5,
                           TOUT_ORDRE='OUI',);


# TEST DE NON REGRESSION SUR LES 5 PREMIERS MODES
Kg_ref =[-1.92107E+10, -1.16602E+11, 8.03919E+10, -1.18804E+11, 1.72295E+11]
Ku_ref =[-1.90387E+10, -1.15558E+11, 7.96724E+10, -1.17741E+11, 1.70753E+11]

for i in range(0,5) :
   imode = i + 1
   TEST_TABLE(TABLE=GLMO1,
              NOM_PARA='K1',
              FILTRE=_F(NOM_PARA = 'NUME_MODE',
                         VALE_I = imode),
              VALE=Kg_ref[i],
              PRECISION=0.001,
              REFERENCE = 'NON_REGRESSION',
              VERSION='11.00.04'
             )

   TEST_TABLE(TABLE=T1_K[i],
              NOM_PARA='K1',
              VALE=Ku_ref[i],
              PRECISION=0.001,
              REFERENCE = 'NON_REGRESSION',
              VERSION='11.00.04'
             )


##############################################
# CALCUL TRANSITOIRE EN COORDONNEES MODALES
##############################################

MACRO_PROJ_BASE(BASE=MODE,
                MATR_ASSE_GENE=(_F(MATRICE=CO('MASS_GE'),
                                   MATR_ASSE=MA_ASS,),
                                _F(MATRICE=CO('RIGI_GE'),
                                   MATR_ASSE=RIG_ASS,),
                                _F(MATRICE=CO('AMOR_GE'),
                                   MATR_ASSE=AMO_ASS,),),
                VECT_ASSE_GENE=_F(VECTEUR=CO('CHA_ASS'),
                                  VECT_ASSE=VE_ASS,),);

RES_DYNA=DYNA_TRAN_MODAL(SCHEMA_TEMPS=_F(SCHEMA='EULER',),
                         MATR_MASS=MASS_GE,
                         MATR_RIGI=RIGI_GE,
                         MATR_AMOR=AMOR_GE,
                         INFO = 2,
                         INCREMENT=_F(INST_INIT=0.,
                                      INST_FIN=t_fin,
                                      VERI_PAS = 'OUI',
                                      PAS=pas,),
                         EXCIT=_F(VECT_ASSE=CHA_ASS,
                                  FONC_MULT=RAMPE,),
                         ARCHIVAGE=_F(PAS_ARCH = 200,),
                         IMPRESSION = _F(TOUT='OUI',),);

RESUDYNA = REST_GENE_PHYS(RESU_GENE = RES_DYNA,
                          NOM_CHAM=('DEPL','ACCE',)
                          );

RESUDYNA =CALC_CHAMP(reuse =RESUDYNA ,
                   MODELE=MO,
                   CHAM_MATER=CM,
                    CONTRAINTE=('SIEF_ELGA'),
                   RESULTAT=RESUDYNA ,);

RESUDYNA =CALC_NO(reuse =RESUDYNA ,
                   MODELE=MO,
                   CHAM_MATER=CM,
                   RESULTAT=RESUDYNA ,
                   OPTION='REAC_NODA',);

KT1 = POST_K_TRANS(RESU_TRANS = RES_DYNA,
                   K_MODAL = _F(TABL_K_MODA =GLMO1,
                              FOND_FISS=FF1, ),);

IMPR_TABLE(TABLE=KT1)

TEST_TABLE(TABLE=KT1,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA = 'INST',
                      VALE = 1.285E-2),
           VALE=4.49990E+05,
           PRECISION=0.001,
           REFERENCE = 'NON_REGRESSION',
          );
###TESTS INFORMATIQUES
GLMO2=CALC_G(NUME_MODE = 1,
             OPTION='K_G_MODA',
             RESULTAT=MODE,
             THETA=_F(FOND_FISS=FF1,
                      R_INF=5.E-6,
                      R_SUP=5.E-5,
                      DIRECTION = (-1.0, 0.0, 0.0),),
                    );

TEST_TABLE(TABLE=GLMO2,
              NOM_PARA='K1',
              FILTRE=_F(NOM_PARA = 'NUME_MODE',
                         VALE_I = 1),
              VALE=-1.92107E+10,
              PRECISION=0.001,
              REFERENCE = 'NON_REGRESSION',
             );

GLMO3=CALC_G(OPTION='K_G_MODA',
             RESULTAT=MODE,
             FREQ = 3.46915E+03,
             PRECISION=1.E-3,
             THETA=_F(THETA=THET1,
                      FOND_FISS = FF1),);

TEST_TABLE(TABLE=GLMO3,
              NOM_PARA='K1',
              FILTRE=_F(NOM_PARA = 'NUME_MODE',
                         VALE_I = 1),
              VALE=-1.92107E+10,
              PRECISION=0.001,
              REFERENCE = 'NON_REGRESSION',
             );

LI = DEFI_LIST_REEL(VALE = (9.0E-04,6.90E-03, 1.285E-2),);
KT2 = POST_K_TRANS(RESU_TRANS = RES_DYNA,
                  LIST_INST = LI,
                  K_MODAL = _F(RESU_MODA=MODE,
                              FOND_FISS=FF1,
                              MODULE=1.0,
                              R_SUP = 5.E-5,
                              R_INF=5.E-6,
                    DIRECTION = (-1.0, 0.0, 0.0),),);

IMPR_TABLE(TABLE=KT2);
TEST_TABLE(TABLE=KT2,
           NOM_PARA='K1',
           FILTRE=_F(NOM_PARA = 'INST',
                      VALE = 1.285E-2),
           VALE=4.49990E+05,
           PRECISION=0.001,
           REFERENCE = 'NON_REGRESSION',
          );

FIN();
