# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2018 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# double jonction en I, C_PLAN, TRIA3 avec contact

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'));

MAILLAG=LIRE_MAILLAGE(FORMAT='MED',INFO=1);


MODELEIN=AFFE_MODELE(MAILLAGE=MAILLAG,
                     AFFE=(_F(GROUP_MA=('SURF','LH','LD'),
                              PHENOMENE='MECANIQUE',
                              MODELISATION='C_PLAN')));

LN1=FORMULE(NOM_PARA=('X','Y'),VALE='Y-2');

FISS1=DEFI_FISS_XFEM(MAILLAGE=MAILLAG,
                    TYPE_DISCONTINUITE='INTERFACE',
                    DEFI_FISS=_F(FONC_LN=LN1),
                    INFO=1);

LN2=FORMULE(NOM_PARA=('X','Y'),VALE='Y+2');

FISS2=DEFI_FISS_XFEM(MAILLAGE=MAILLAG,
                    TYPE_DISCONTINUITE='INTERFACE',
                    DEFI_FISS=_F(FONC_LN=LN2),
                    INFO=1);

LN3=FORMULE(NOM_PARA=('X','Y'),VALE='X');
FISS3=DEFI_FISS_XFEM(MAILLAGE=MAILLAG,
                    TYPE_DISCONTINUITE='INTERFACE',
                    DEFI_FISS=_F(FONC_LN=LN3),
                    JONCTION=_F(FISSURE=(FISS1,FISS2),POINT=(0,0)),
                    INFO=1);

MODELEK=MODI_MODELE_XFEM(MODELE_IN=MODELEIN,
                         FISSURE=(FISS1,FISS2,FISS3),
                         CONTACT='STANDARD',
                         INFO=1);

CTXFEM = DEFI_CONTACT(MODELE         = MODELEK,
                      FORMULATION    = 'XFEM',
                      ITER_CONT_MAXI = 10,ELIM_ARETE='ELIM',
                      ZONE = (_F(
                                 INTEGRATION   = 'NOEUD',
                                 CONTACT_INIT  = 'OUI',
                                 GLISSIERE     = 'OUI',
                                 FISS_MAIT     = FISS1,
                              ),
                              _F(
                                 INTEGRATION   = 'NOEUD',
                                 CONTACT_INIT  = 'OUI',
                                 GLISSIERE     = 'NON',
                                 FISS_MAIT     = FISS2,
                              ),
                             _F(
                                 INTEGRATION   = 'NOEUD',
                                 CONTACT_INIT  = 'OUI',
                                 GLISSIERE     = 'NON',
                                 FISS_MAIT     = FISS3,
                              ),
                            ),
                    );

E=100.0E6
nu=0.3
ACIER=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=nu,
                            RHO=7800.0));

CHAMPMAT=AFFE_MATERIAU(MAILLAGE=MAILLAG,
                       MODELE=MODELEK,
                       AFFE=_F(TOUT=('OUI'),
                                MATER=ACIER,
                                ));

VAR1=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.,0.,1.,1.));

def pres_d(x) :
   if x < -2 : return 1E6
   if x >  2 : return 3E6
   return 2E6

def pres_h(x) :
   return 1E6

PRES_H = FORMULE(VALE='pres_h(X)',
                  NOM_PARA=('X'));
PRES_D = FORMULE(VALE='pres_d(Y)',
                  NOM_PARA=('Y'));

CH1=AFFE_CHAR_MECA_F(MODELE=MODELEK,
                   PRES_REP=(_F(GROUP_MA='LH',PRES = PRES_H),
                             _F(GROUP_MA='LD',PRES = PRES_D)));

CH2=AFFE_CHAR_MECA(MODELE=MODELEK,
                   DDL_IMPO=(_F(GROUP_MA='LB',DY = 0),
                             _F(GROUP_MA='LG',DX = 0,H1X = 0)));

L_INST=DEFI_LIST_REEL(DEBUT=0.0,
                      INTERVALLE=_F(JUSQU_A=1,
                                    NOMBRE=1));

UTOT1=STAT_NON_LINE(MODELE=MODELEK,
                   CHAM_MATER=CHAMPMAT,
                   CONTACT=CTXFEM,
                   EXCIT=(_F(CHARGE=CH1),
                          _F(CHARGE=CH2)),
                   COMPORTEMENT=(_F(RELATION='ELAS',
                                 GROUP_MA='SURF')),
                   NEWTON=_F(REAC_INCR=1,REAC_ITER=1),
                   INCREMENT=_F(LIST_INST=L_INST),
                   CONVERGENCE=(_F(ITER_GLOB_MAXI=20,
                                  RESI_GLOB_MAXI=1E-6)),
                   SOLVEUR=_F(METHODE='MUMPS',),
                   ARCHIVAGE=_F(CHAM_EXCLU='VARI_ELGA'),
                   INFO=1);

#-----------------------------------------------------------
#             POST-TRAITEMENT POUR LA VISUALISATION
#-----------------------------------------------------------

MA_XFEM=POST_MAIL_XFEM(MODELE=MODELEK);

MOD_VISU=AFFE_MODELE(MAILLAGE=MA_XFEM,
                     AFFE=_F(GROUP_MA='SURF',
                     PHENOMENE='MECANIQUE',
                     MODELISATION='C_PLAN'))

RES_XFEM=POST_CHAM_XFEM(MODELE_VISU   = MOD_VISU,
                        RESULTAT      = UTOT1)

#----------------------------------------------
#                   POST RELEVE
#----------------------------------------------

DEP=POST_RELEVE_T(ACTION=_F(INTITULE='DEPLE',
                                 GROUP_NO=('NFISSU'),
                                 RESULTAT=RES_XFEM,
                                 NOM_CHAM='DEPL',
                                 TOUT_CMP='OUI',NUME_ORDRE = 1,
                                 OPERATION='EXTRACTION'));
DEP = CALC_TABLE(TABLE = DEP,
                 reuse = DEP,
                 ACTION =_F(OPERATION = 'EXTR',
                            NOM_PARA=('NOEUD','INST','COOR_X','COOR_Y','DX','DY')));

DEPP = CALC_TABLE(TABLE = DEP,
                     ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'NOEUD',
                                 CRIT_COMP = 'REGEXP',
                                 VALE_K    = 'NP')));
DEPPGX = CALC_TABLE(TABLE = DEPP,
                      ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'GT',
                                 VALE      =  0.2),
                               _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -1.98)));
DEPPLX = CALC_TABLE(TABLE = DEPP,
                      ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -0.2),
                              _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -1.98)));
DEPPGY = CALC_TABLE(TABLE = DEPP,
                      ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'GT',
                                 VALE      =  1.98),
                               _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'NE',
                                 CRITERE='ABSOLU',
                                 VALE      =  0)));
DEPPLY = CALC_TABLE(TABLE = DEPP,
                      ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'LT',
                                 VALE      =  1.98),
                               _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'GT',
                                 VALE      =  -1.98)));

DEPM = CALC_TABLE(TABLE = DEP,
                     ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'NOEUD',
                                 CRIT_COMP = 'REGEXP',
                                 VALE_K    = 'NM')));

DEPMGX = CALC_TABLE(TABLE = DEPM,
                      ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'GT',
                                 VALE      =  0.02),
                               _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'GT',
                                 VALE      =  1.98)));
DEPMLX = CALC_TABLE(TABLE = DEPM,
                      ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -0.02),
                               _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'GT',
                                 VALE      =  1.98)));

DEPMGY = CALC_TABLE(TABLE = DEPM,
                      ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'LT',
                                 VALE      =  1.98),
                              _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'GT',
                                 VALE      =  -1.98)));

DEPMLY = CALC_TABLE(TABLE = DEPM,
                      ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_Y',
                                 CRIT_COMP = 'LT',
                                 VALE      =  -1.98),
                               _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'COOR_X',
                                 CRIT_COMP = 'NE',
                                 CRITERE='ABSOLU',
                                 VALE      =  0)));

# Definition des zones

# ATTENTION : les formules suivantes supposent des pressions esprimees en MPa
#             => il faut utiliser un module d'Younf exprime en MPa !

# conversion Pa -> MPa du module d'Young
EM = E*1.e-6

# zone 1 : [-5, 0[ x ]-2, +2[
def ux1(x, y):
    return -(2. - nu)*x/EM - 5.*(2. - nu)/EM
def uy1(x, y):
    return -(1. - 2.*nu)*y/EM - (5. - 7.*nu)/EM

depl_x1 = FORMULE(NOM_PARA=('DX','COOR_X','COOR_Y'), VALE='DX-ux1(COOR_X, COOR_Y)')
depl_y1 = FORMULE(NOM_PARA=('DY','COOR_X','COOR_Y'), VALE='DY-uy1(COOR_X, COOR_Y)')

# zone 2 : [-5, +5] x ]+2, +5]
def ux2(x, y):
    return -(3. - nu)*x/EM - 5.*(3. - nu)/EM
def uy2(x, y):
    return -(1. - 3.*nu)*y/EM - 5.*(1. - nu)/EM

depl_x2 = FORMULE(NOM_PARA=('DX','COOR_X','COOR_Y'), VALE='DX-ux2(COOR_X, COOR_Y)')
depl_y2 = FORMULE(NOM_PARA=('DY','COOR_X','COOR_Y'), VALE='DY-uy2(COOR_X, COOR_Y)')

# zone 3 : ]0, +5] x ]-2, +2[
def ux3(x, y):
    return -(2. - nu)*x/EM - 5*(2. - nu)/EM
def uy3(x, y):
    return -(1. - 2.*nu)*y/EM - (5. - 7.*nu)/EM

depl_x3 = FORMULE(NOM_PARA=('DX','COOR_X','COOR_Y'), VALE='DX-ux3(COOR_X, COOR_Y)')
depl_y3 = FORMULE(NOM_PARA=('DY','COOR_X','COOR_Y'), VALE='DY-uy3(COOR_X, COOR_Y)')

# zone 4 : ]-5, +5] x [-5, -2[
def ux4(x, y):
    return -(1. - nu)*x/EM - 5.*(1. - nu)/EM
def uy4(x, y):
    return -(1. - nu)*y/EM - 5.*(1. - nu)/EM

depl_x4 = FORMULE(NOM_PARA=('DX','COOR_X','COOR_Y'), VALE='DX-ux4(COOR_X, COOR_Y)')
depl_y4 = FORMULE(NOM_PARA=('DY','COOR_X','COOR_Y'), VALE='DY-uy4(COOR_X, COOR_Y)')

DEPZON=[None]*5
DEPZON[1] = CALC_TABLE(TABLE = DEPMLX,
                    ACTION =(_F(OPERATION = 'COMB',
                               TABLE=DEPPLX),
                             _F(OPERATION = 'COMB',
                               TABLE=DEPMGY),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DY-DY',
                                 FORMULE = depl_y1),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DX',
                                 FORMULE = depl_x1)));
DEPZON[2] = CALC_TABLE(TABLE = DEPPGY,
                    ACTION =(_F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DY-DY',
                                 FORMULE = depl_y2),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DX',
                                 FORMULE = depl_x2)));
DEPZON[3] = CALC_TABLE(TABLE = DEPMGX,
                    ACTION =(_F(OPERATION = 'COMB',
                               TABLE=DEPPGX),
                            _F(OPERATION = 'COMB',
                               TABLE=DEPPLY),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DY-DY',
                                 FORMULE = depl_y3),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DX',
                                 FORMULE = depl_x3)));
DEPZON[4] = CALC_TABLE(TABLE = DEPMLY,
                    ACTION =(_F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DY-DY',
                                 FORMULE = depl_y4),
                            _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DX',
                                 FORMULE = depl_x4)));

#------------------------------------------------------------------------
# POST-TRAITEMENT : CALCUL D'ERREURS EN TERME DE NORME EN ENERGIE ET
#                   DE NORME L2 DU DEPLACEMENT
#------------------------------------------------------------------------

# solution analytique :

#    - contraintes
def Sxx(X,Y):
    return -pres_d(Y)

def Syy(X,Y):
    return -pres_h(X)

SXX=FORMULE(NOM_PARA=('X','Y',),VALE='Sxx(X,Y)');
SYY=FORMULE(NOM_PARA=('X','Y',),VALE='Syy(X,Y)');



###    - deplacement

def ux(x, y):
    if x < 0 and y > -2 and y < 2:
        return ux1(x, y)
    if y > 2:
        return ux2(x, y)
    if x > 0 and y > -2 and y < 2:
        return ux3(x, y)
    if y < -2:
        return ux4(x, y)

def uy(x, y):
    if x < 0 and y > -2 and y < 2:
        return uy1(x, y)
    if y > 2:
        return uy2(x, y)
    if x > 0 and y > -2 and y < 2:
        return uy3(x, y)
    if y < -2:
        return uy4(x, y)

UX=FORMULE(NOM_PARA=('X','Y',),VALE='ux(X,Y)')
UY=FORMULE(NOM_PARA=('X','Y',),VALE='uy(X,Y)')

# calcul de l'erreur en terme de norme en energie
Scal=CREA_CHAMP(OPERATION='EXTR',
                TYPE_CHAM='ELGA_SIEF_R',
                RESULTAT=UTOT1,
                NOM_CHAM='SIEF_ELGA',
                NUME_ORDRE=1)

tabNRJ=POST_ERREUR(OPTION='ENER_RELA',
                   CHAM_GD=Scal,
                   MODELE=MODELEK,
                   DEFORMATION='PETIT',
                   CHAM_MATER=CHAMPMAT,
                   GROUP_MA='SURF',
                   SIXX=SXX,
                   SIYY=SYY
                  )

IMPR_TABLE(TABLE=tabNRJ)

# calcul de l'erreur en terme de norme L2 du deplacement
Ucal=CREA_CHAMP(OPERATION='EXTR',
                TYPE_CHAM='NOEU_DEPL_R',
                RESULTAT=UTOT1,
                NOM_CHAM='DEPL',
                NUME_ORDRE=1)

tabL2=POST_ERREUR(OPTION='DEPL_RELA',
                  CHAM_GD=Ucal,
                  MODELE=MODELEK,
                  GROUP_MA='SURF',
                  DX=UX,
                  DY=UY
                 )

IMPR_TABLE(TABLE=tabL2)

#----------------------------------------------
#                   TEST TABLE
#----------------------------------------------

vale = [0,0,0,0,0]
preci = 0.05

VALE_CALC=[
 -0.0027247022916,
  0.0011770495933,
 -0.000117797416039,
  0.00671453375512,
 -0.000383129399022,
  0.000758315379966,
 -0.00379642876016,
  0.00149624595694,
 -0.00331750241409,
  0.00117435475044,
 -0.00382013641722,
  0.00057249319633,
 -0.000256262802282,
  0.000180124209345,
 -0.000985793914654,
  0.000768062798732
]

for i in [1,2,3,4]: #Boucle sur les zones

  IMPR_TABLE(TABLE=DEPZON[i]);

  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DX-DX',
             TYPE_TEST='MIN',
             VALE_CALC=VALE_CALC[(i-1)*4+0], VALE_REFE=vale[i],
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE',);
  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DX-DX',
             TYPE_TEST='MAX',
             VALE_CALC=VALE_CALC[(i-1)*4+1], VALE_REFE=vale[i],
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE',);
  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DY-DY',
             TYPE_TEST='MIN',
             VALE_CALC=VALE_CALC[(i-1)*4+2], VALE_REFE=0,
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE',);
  TEST_TABLE(TABLE=DEPZON[i],
             NOM_PARA='DY-DY',
             TYPE_TEST='MAX',
             VALE_CALC=VALE_CALC[(i-1)*4+3], VALE_REFE=0,
             CRITERE='ABSOLU',
             PRECISION=preci,
             REFERENCE='ANALYTIQUE',);

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=2200000.0,
           VALE_REFE=2200000.0,
           NOM_PARA='REFERENCE',
           FILTRE=_F(NOM_PARA='GROUP_MA',
                     VALE_K='TOTAL'),
           TABLE=tabNRJ,
           );

TEST_TABLE(CRITERE='ABSOLU',
           VALE_CALC=0.0359813383148,
           NOM_PARA='ERREUR RELATIVE',
           FILTRE=_F(NOM_PARA='GROUP_MA',
                     VALE_K='TOTAL'),
           TABLE=tabNRJ,
           );

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           VALE_CALC=1.11620912385,
           VALE_REFE=1.11656914997087,
           NOM_PARA='REFERENCE',
           FILTRE=_F(NOM_PARA='GROUP_MA',
                     VALE_K='TOTAL'),
           TABLE=tabL2,
           );

TEST_TABLE(CRITERE='ABSOLU',
           VALE_CALC=0.00976157933398,
           NOM_PARA='ERREUR RELATIVE',
           FILTRE=_F(NOM_PARA='GROUP_MA',
                     VALE_K='TOTAL'),
           TABLE=tabL2,
           );

FIN();
