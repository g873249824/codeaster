# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'))

#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
#-- systeme 4DDL masse / ressort / amortisseur
#-- 1) soumi a une imulsion
#-- 2) excite par un bruit blanc uniforme sur l'intervalle [-1 ; 1]
#
#
#m  = [2 0 0 0
#      0 1 0 0
#      0 0 1 0
#      0 0 0 2];
#
#k  =[100  -100     0     0
#    -100   200  -100     0
#       0  -100   200  -100
#       0     0  -100   200]*50;
#
#c  =([4  -4   0   0
#     -4   8  -4   0
#      0  -4   8  -4
#      0   0  -4   8]+m))/3;
#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
#
#-- Definition du systeme :
#
# Matrice d'etat :
# A=[-m\c -m\k ; eye(4) zeros(4)];
#
# Excitation au niveau du deuxieme DDL :
# B=[0 1 0 0 0 0 0 0]';
#
# Observation des 4 DDL :
# C= [zeros(4) eye(4)];
#
#Transpose(C*Phi_r) = [
# -1.8195e-005 -9.9969e-004j  9.8468e-005 +5.4102e-003j -1.0055e-004 -5.5247e-003j  2.2791e-005 +1.2522e-003j
# -1.8195e-005 +9.9969e-004j  9.8468e-005 -5.4102e-003j -1.0055e-004 +5.5247e-003j  2.2791e-005 -1.2522e-003j
#  4.4987e-005 +3.2514e-003j -1.0028e-004 -7.2479e-003j -8.3639e-005 -6.0450e-003j  6.8047e-005 +4.9180e-003j
#  4.4987e-005 -3.2514e-003j -1.0028e-004 +7.2479e-003j -8.3639e-005 +6.0450e-003j  6.8047e-005 -4.9180e-003j
# -3.6933e-004 -3.3643e-002j -3.0975e-004 -2.8216e-002j -2.2520e-004 -2.0514e-002j -1.2248e-004 -1.1157e-002j
# -3.6933e-004 +3.3643e-002j -3.0975e-004 +2.8216e-002j -2.2520e-004 +2.0514e-002j -1.2248e-004 +1.1157e-002j
#  8.2844e-005 +8.0103e-003j -1.6376e-005 -1.5834e-003j -1.0579e-004 -1.0229e-002j -1.3185e-004 -1.2749e-002j
#  8.2844e-005 -8.0103e-003j -1.6376e-005 +1.5834e-003j -1.0579e-004 +1.0229e-002j -1.3185e-004 +1.2749e-002j]
#
#
#Transpose(Phi_l)*B=[
# -3.2902e-001 -5.9883e-003j
# -3.2902e-001 +5.9883e-003j
#  2.5430e-001 +3.5186e-003j
#  2.5430e-001 -3.5186e-003j
#  1.8836e-001 +2.0677e-003j
#  1.8836e-001 -2.0677e-003j
#  2.5810e-002 +2.6694e-004j
#  2.5810e-002 -2.6694e-004j]
#
#
#eigenvalues=[
# -2.3040e+000 +1.2659e+002j
# -2.3040e+000 -1.2659e+002j
# -1.2430e+000 +8.9841e+001j
# -1.2430e+000 -8.9841e+001j
# -2.2044e-001 +2.0080e+001j
# -2.2044e-001 -2.0080e+001j
# -5.6589e-001 +5.4716e+001j
# -5.6589e-001 -5.4716e+001j]
#
#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
#
#-- Synthese des FRF analytiques :
#

FRF1_F=FORMULE(NOM_PARA='FREQ',
             VALE_C='''
(-1.8195E-005-9.9969e-004j)*(-3.2902E-001-5.9883e-003j)/(2*1j*pi*FREQ-(-2.3040E+000+1.2659e+002j))+
(-1.8195E-005+9.9969e-004j)*(-3.2902E-001+5.9883e-003j)/(2*1j*pi*FREQ-(-2.3040E+000-1.2659e+002j))+
(4.4987E-005+3.2514e-003j)*(2.5430E-001-3.5186e-003j)/(2*1j*pi*FREQ-(-1.2430E+000+8.9841e+001j))+
(4.4987E-005-3.2514e-003j)*(2.5430E-001-3.5186e-003j)/(2*1j*pi*FREQ-(-1.2430E+000-8.9841e+001j))+
(-3.6933E-004-3.3643e-002j)*(1.8836E-001+2.0677e-003j)/(2*1j*pi*FREQ-(-2.2044E-001+2.0080e+001j))+
(-3.6933E-004+3.3643e-002j)*(1.8836E-001-2.0677e-003j)/(2*1j*pi*FREQ-(-2.2044E-001-2.0080e+001j))+
(8.2844E-005+8.0103e-003j)*(2.5810E-002+2.6694e-004j)/(2*1j*pi*FREQ-(-5.6589E-001+5.4716e+001j))+
(8.2844E-005-8.0103e-003j)*(2.5810E-002-2.6694e-004j)/(2*1j*pi*FREQ-(-5.6589E-001-5.4716e+001j))
                          ''',)

lis_freq=DEFI_LIST_REEL( DEBUT=0.,
                         INTERVALLE=_F( JUSQU_A=50,
                                        PAS=0.05,),
                                       )

# interpolation des fonctions de transfert de reference

FRF1_FI=CALC_FONC_INTERP( FONCTION=FRF1_F,
                      LIST_PARA=lis_freq,)

#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
#-- Reponse a une impulsion et calcul des transferts
#---------------------------------------------------------------------#
#---------------------------------------------------------------------#

#-- calcul de la reponse impulsionnelle temporelle a partir des transferts

REP_IMP1=CALC_FONCTION( FFT=_F( FONCTION = FRF1_FI, METHODE='COMPLET',) )


#-- generation de l'impulsion


IMPUL=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0., 0., 2./100.1, 0.5, 4./100.1, 0.,),
                    PROL_DROITE='CONSTANT',
                    PROL_GAUCHE='CONSTANT'
                    )

lis_inst=DEFI_LIST_REEL(DEBUT=0.,
                        INTERVALLE=_F( JUSQU_A=20./1.001,
                                       PAS=2./100.1,),
                        )

IMPUL_FI=CALC_FONC_INTERP(FONCTION=IMPUL,
                          LIST_PARA=lis_inst,
                         )

#-- Calcul du transfert a partir dela reponse impulsionnelle
from Contrib.calc_spec import CALC_SPEC

FRF1_IMP=CALC_SPEC(ECHANT=(
                           _F(NUME_ORDRE_I = 1,
                           NUME_MES=1,
                           FONCTION=IMPUL_FI,),
                           _F(NUME_ORDRE_I = 2,
                           NUME_MES=1,
                           FONCTION=REP_IMP1,),
                           ),

                           TRANSFERT=(_F(ESTIM='H1',
                           FENETRE='EXPO',
                           DEFI_FENE=(10,-0.02),
                           REFER=1,),
                           ),
                   )

IMP1_H1=RECU_FONCTION(    INTE_SPEC=FRF1_IMP,
                    NUME_ORDRE_I = 1,
                    NUME_ORDRE_J = 2,
                      )

#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
#-- Reponse a un bruit uniforme centre et calcul des transferts
#---------------------------------------------------------------------#
#---------------------------------------------------------------------#
#
#-- import des resultats de simulation a une excitation bruit blanc uniforme

EFFORT = LIRE_FONCTION(UNITE=11,
                       NOM_PARA='INST',
                       FORMAT='NUMPY',
                       INDIC_PARA=(1, 1),
                       INDIC_RESU=(1, 2),
                       PROL_DROITE='LINEAIRE')

REP_1 = LIRE_FONCTION(UNITE=11,
                      NOM_PARA='INST',
                      FORMAT='NUMPY',
                      INDIC_PARA=(1, 1),
                      INDIC_RESU=(1, 3),
                      PROL_DROITE='LINEAIRE')

REP_2 = LIRE_FONCTION(UNITE=11,
                      NOM_PARA='INST',
                      FORMAT='NUMPY',
                      INDIC_PARA=(1, 1),
                      INDIC_RESU=(1, 4),
                      PROL_DROITE='LINEAIRE')

REP_3 = LIRE_FONCTION(UNITE=11,
                      NOM_PARA='INST',
                      FORMAT='NUMPY',
                      INDIC_PARA=(1, 1),
                      INDIC_RESU=(1, 5),
                      PROL_DROITE='LINEAIRE')

REP_4 = LIRE_FONCTION(UNITE=11,
                      NOM_PARA='INST',
                      FORMAT='NUMPY',
                      INDIC_PARA=(1, 1),
                      INDIC_RESU=(1, 6),
                      PROL_DROITE='LINEAIRE')


#-- organisation des fonctions pour le calcul des spectres

tab_rep=CREA_TABLE(LISTE=(_F(PARA='NOM_CHAM',LISTE_K='Rep_Temp',),
                          _F(PARA='NUME_ORDRE_I',LISTE_I=(1,2,3,4,5),),
                          _F(PARA='NUME_MES',LISTE_I=(1,1,1,1,1),),
                          _F(PARA='FONCTION',LISTE_K=('EFFORT','REP_1','REP_2','REP_3','REP_4'),),
                          ),
                          TITRE='',
                          TYPE_TABLE='TABLE_FONCTION',
                   )

#-- Calcul des fonctions de transfert a partir de resultats

FRF_H1=CALC_SPEC(TAB_ECHANT=_F(NOM_TAB=tab_rep,
                               LONGUEUR_DUREE=12,
                               RECOUVREMENT_POURCENT=50,
                               ),
                 TRANSFERT=(_F(ESTIM='H1',
                               FENETRE='HANN',
                               REFER=1,
                               ),
                           ),
                 )

FRF_H2=CALC_SPEC(TAB_ECHANT=_F(NOM_TAB=tab_rep,
                               LONGUEUR_DUREE=12,
                               RECOUVREMENT_POURCENT=50,
                              ),
                 TRANSFERT=(_F(ESTIM='H2',
                               FENETRE='HAMM',
                               REFER=1,
                              ),
                           ),
                 )

FRF1_H1=RECU_FONCTION(    INTE_SPEC=FRF_H1,
                    NUME_ORDRE_I = 1,
                    NUME_ORDRE_J = 2,
                      )

FRF1_H2=RECU_FONCTION(    INTE_SPEC=FRF_H2,
                    NUME_ORDRE_I = 1,
                    NUME_ORDRE_J = 2,
                      )

#-- calcul des interspectres et autospectres :

SPEC=CALC_SPEC(TAB_ECHANT=_F(NOM_TAB=tab_rep,
                             LONGUEUR_NB_PTS=1201,
                             RECOUVREMENT_DUREE=6,
                            ),
               INTERSPE=(_F(FENETRE='HANN',),),
              )

APS_EFF=RECU_FONCTION(    INTE_SPEC=SPEC,
                    NUME_ORDRE_I = 1,
                      )

APS_DDL1=RECU_FONCTION(    INTE_SPEC=SPEC,
                    NUME_ORDRE_I = 2,
                      )
CPS_DDL1=RECU_FONCTION(    INTE_SPEC=SPEC,
                    NUME_ORDRE_I = 1,
                    NUME_ORDRE_J = 2,
                      )

#-- Re-interpolation des fonctions pour resu_test --#

lis_fr_i=DEFI_LIST_REEL(DEBUT=0.,
                        INTERVALLE=_F(JUSQU_A=25.,
                        PAS=0.1,),
                        )

#-- interpolation des fonctions de transfert de reference

FRF_REF=CALC_FONC_INTERP(FONCTION=FRF1_F,
                         LIST_PARA=lis_fr_i,
                         PROL_DROITE='EXCLU',
                         PROL_GAUCHE='EXCLU',
                         )

FRF_H1_i=CALC_FONC_INTERP(FONCTION = FRF1_H1,
                          LIST_PARA=lis_fr_i,
                          PROL_DROITE='EXCLU',
                          PROL_GAUCHE='EXCLU',
                         )

FRF_H2_i=CALC_FONC_INTERP(FONCTION = FRF1_H2,
                          LIST_PARA=lis_fr_i,
                          PROL_DROITE='EXCLU',
                          PROL_GAUCHE='EXCLU',
                          )

IMP_H1_i=CALC_FONC_INTERP(FONCTION = IMP1_H1,
                          LIST_PARA=lis_fr_i,
                          PROL_DROITE='EXCLU',
                          PROL_GAUCHE='EXCLU',
                         )

AP_EFF_i=CALC_FONC_INTERP(FONCTION = APS_EFF,
                          LIST_PARA=lis_fr_i,
                          PROL_DROITE='EXCLU',
                          PROL_GAUCHE='EXCLU',
                         )

AP_1_i=CALC_FONC_INTERP(FONCTION = APS_DDL1,
                        LIST_PARA=lis_fr_i,
                        PROL_DROITE='EXCLU',
                        PROL_GAUCHE='EXCLU',
                       )

FIN()
