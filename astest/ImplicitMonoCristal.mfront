@Parser    Implicit;
@Behaviour MonoCristal;

@ModellingHypothesis Tridimensional;

@Theta 1.0;
@Epsilon 1.e-11;
@IterMax 100;

@OrthotropicBehaviour;
@RequireStiffnessTensor;

@MaterialProperty real m;
@MaterialProperty real K;
@MaterialProperty real C;
@MaterialProperty real R0;
@MaterialProperty real Q;
@MaterialProperty real b;
@MaterialProperty real d1;

eel.setMaximumIncrementValuePerIteration(1.e-4);

@StateVariable strain g[12];
g.setMaximumIncrementValuePerIteration(1.e-4);

@AuxiliaryStateVariable real p[12];
@AuxiliaryStateVariable real a[12];

@Includes{
#include"TFEL/Material/MetallicCFCSlidingSystems.hxx"
#include"TFEL/Material/MetallicCFCGenericSlidingSystemsInteractionMatrix.hxx"
}

@Members{
  // Mono cristal gliding system
  typedef MetallicCFCSlidingSystems<real> SlidingSystems;
  // Interaction matrix
  typedef MetallicCFCGenericSlidingSystemsInteractionMatrix<real> InteractionMatrix;
  // number of sliding systems
  static const unsigned short Nss = SlidingSystems::Nss;
}

//! interaction matrix
@LocalVariable tfel::math::tmatrix<12,12,real> mh;
@InitLocalVariables{
  const real h1 = 1. ;
  const real h2 = 0. ;
  const real h3 = 0. ;
  const real h4 = 0. ;
  const real h5 = 0. ;
  const real h6 = 0. ;
  mh = InteractionMatrix::getInteractionMatrix(h1,h2,h3,
					       h4,h5,h6);
}

@TangentOperator{
  if((smt==ELASTIC)||(smt==SECANTOPERATOR)||(smt==TANGENTOPERATOR)){
    Dt = D ;
  } else if (smt==CONSISTENTTANGENTOPERATOR){
    Stensor4 Je;
    getPartialJacobianInvert(Je);
    Dt = D*Je;
  } else {
    return false;
  }
}

@ComputeStress{
  sig = D*eel;
}

@Integrator{
  const SlidingSystems& ss = SlidingSystems::getSlidingSystems();
  StrainStensor vepsp(real(0));
  real vpi = 0. ;
  real agi[Nss];
  real pei[Nss];  
  real hsi[Nss] ;
  real expi[Nss] ;
  real sgni[Nss] ;
  // boucle pour calculer une seule fois l'exponentielle
  for(unsigned short i=0;i!=Nss;++i){
    agi[i] = abs(dg[i]);
    expi[i]=exp(-b*(p[i]+theta*agi[i]));
    pei[i] = Q*(1.-expi[i]) ;
  }
  for(unsigned short i=0;i!=Nss;++i){
    real Rp = R0;
    for(unsigned short j=0;j!=Nss;++j){
      Rp += mh(i,j)*pei[j] ;
    }     
    const real tau = ss.mus[i] | sig ;
    const real va  = (dg[i]-d1*a[i]*agi[i])/(1.+d1*theta*agi[i]);
    const real tma = tau-C*(a[i]+theta*va) ;
    const real tmR = abs(tma)-Rp;
    sgni[i]= 1.0 ;
    //if (tmR > K) {throw(MaterialException(« Stress too high » )};
    if (tmR  > 0.){
      sgni[i]=tma/abs(tma);
      hsi[i]  = dt*pow((tmR / K),(m-1.0))/K;
      vpi  = hsi[i]*tmR *sgni[i] ;        
    } else{
      vpi=0.;
      hsi[i]=0.;
    }
    vepsp+=vpi*ss.mus[i] ;
    fg[i]  -= vpi;
  }
  feel += vepsp-deto;
  // jacobian
  for(unsigned short i=0;i!=Nss;++i){
    real Hsi= hsi[i]*m;
    if (Hsi>0){
      real dgsdalfai = -C*Hsi*theta ;
      real dalfaidgi = (1.0-d1*a[i]*sgni[i])/(1.0+theta*d1*agi[i])/(1.0+theta*d1*agi[i]) ;
      real dgsdRi = -Hsi*sgni[i] ;
      real dRidpi = b*Q*mh(i,i)*expi[i]*theta ;  
      real dgsdgi = dgsdalfai*dalfaidgi+dgsdRi*dRidpi*sgni[i] ;
      dfeel_ddeel  += Hsi* ( (ss.mus[i]) ^ (ss.mus[i]) ) *D *theta;     
      dfeel_ddg(i) += dgsdgi * ( ss.mus[i] )   ;
      dfg_ddeel(i)  = -Hsi*D*ss.mus[i]*theta ;
      for(unsigned short j=0;j!=Nss;++j){
	real dRsdpj = b*Q*mh(i,j)*expi[j] ;    
	real dgsdgj = dgsdRi*dRsdpj*sgni[j] ;
	if (i==j){
	  dgsdgj += dgsdalfai*dalfaidgi ;
	}
	dfg_ddg(i,j) -=  dgsdgj ;
      }
    }
  }
} 

@UpdateAuxiliaryStateVars{
  for(unsigned short i=0;i!=Nss;++i){
    p[i]+=abs(dg[i]);
    a[i]+=(dg[i]-d1*a[i]*abs(dg[i]))/(1.+d1*abs(dg[i]));
  }
}
