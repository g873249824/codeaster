# MODIF  DATE 11/03/2013   AUTEUR PROIX J-M.PROIX 
# TITRE VALIDATION MONOCRISTAL LOI DD_CFC_IRRA
# ssnd110e.para = tps_job 300 mem_job 500Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NOM='SSND110E',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'));


from numpy.linalg import norm
from numpy import *

# MATERIAU DEFINI POUR LE COMPORTEMENT  DD_CFC. Unites : MPa, mm, N

MU=80000. # MPa
NU=0.3
E=MU*2*(1.+NU)
TAU_F  = 80.
RHO_0  = 1.E5    # en mm**-2
RHOREF = 1.E6    # en mm**-2

N      = 20.
GAMMA0 = 1.E-3
ALPHA=0.35
BETA=2.54E-7     # 2.54 Angstrom

A      = 0.13
B      = 0.005
Y      = 2.5E-7  # 2.5 Angstrom

# variable adimensionnee, voir R5.03.11

RHO_0=RHO_0*BETA*BETA

ALPHA=0.0

# variable adimensionnee, voir R5.03.11
RHO_LOOPS=7.4E13*BETA*BETA

PHI_VOIDS=1.e-3

ACIERDD=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=NU,
                            ALPHA=0.),
                      MONO_DD_CFC=_F(TAU_F  = TAU_F,  # MPa
                                     Y      = Y      ,  # 2.5 Angstrom
                                     N      = N,
                                     GAMMA0 = GAMMA0,
                                     A      = A,
                                     B      = B,
                                     RHO_REF= RHOREF,    # en mm**-2
                                     ALPHA=ALPHA,
                                     BETA=BETA,          # 2.54 Angstrom
                                     H1      = 0.124,
                                     H2      = 0.625,
                                     H3      = 0.137,
                                     H4      = 0.122,
                                     H5      = 0.07,                                       
                                   ),
                      );

ACIERDDI=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=NU,
                            ALPHA=0.),
                      MONO_DD_CFC_IRRA=_F(TAU_F  = TAU_F,  # MPa
                                     Y      = Y      ,  # 2.5 Angstrom
                                     N      = N,
                                     GAMMA0 = GAMMA0,
                                     A      = A,
                                     B      = B,
                                     RHO_REF= RHOREF,    # en mm**-2
                                     ALPHA=ALPHA,
                                     BETA=BETA,          # 2.54 Angstrom
                                     H1      = 0.124,
                                     H2      = 0.625,
                                     H3      = 0.137,
                                     H4      = 0.122,
                                     H5      = 0.07,                                       
                                     RHO_VOID =1.E3,
                                     PHI_LOOP =5.9E-6,
                                     ALP_VOID =0.,
                                     ALP_LOOP =0.1,
                                     RHO_SAT  =RHO_LOOPS*0.,
                                     PHI_SAT  =4.E-2,
                                     XI_IRRA  =10.,
                                     DZ_IRRA  =1.e7,  
                                   ),
                      );
# DD_CFC

COMPODD=DEFI_COMPOR(MONOCRISTAL=_F(MATER=ACIERDD,
                                    ECOULEMENT='MONO_DD_CFC',
                                    ELAS='ELAS',
                                    FAMI_SYST_GLIS='OCTAEDRIQUE',
                                    ),
                                    ROTA_RESEAU='CALC',
                                    );
                                    
COMPODDI=DEFI_COMPOR(MONOCRISTAL=_F(MATER=ACIERDDI,
                                    ECOULEMENT='MONO_DD_CFC_IRRA',
                                    ELAS='ELAS',
                                    FAMI_SYST_GLIS='OCTAEDRIQUE',
                                    ),
                                    ROTA_RESEAU='CALC',
                                    );
# LOI DE COMPORTEMENT DD_CFC 
LISTARCH=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=0.2,
                                      NOMBRE=100,),
                                   _F(JUSQU_A=1.,
                                      NOMBRE=100,),
                                  ),
                      );

LINSTDD=DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(
                                   _F(JUSQU_A=0.2,
                                      NOMBRE=100,),
                                   _F(JUSQU_A=1.,
                                      NOMBRE=100,),
                                  ),
                      );

LIS2DD=DEFI_LIST_INST(INFO=1,
                        DEFI_LIST=_F(LIST_INST=LINSTDD),
                        ECHEC=_F(SUBD_NIVEAU=20,
                                 SUBD_PAS=10),
                        );

# vecteurs direction de chargement
l_orient=[[0.,0.,1.],[0.,1.,1.],[1.,1.,1.],[1.,5.,9.],[0.,1.,2.],[-1.,2.,5.]]
l_norm=[l_orient[i]/norm(l_orient[i],2) for i in range(0,len(l_orient))]

# parametres de chargement
# numero du vecteur de chargement

ori = 0
SIGMA0=300.

##chargement
S1=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][0]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S2=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][1]*l_norm[ori][1]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S3=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][2]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S4=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][1]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S5=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][0]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);
S6=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,SIGMA0*l_norm[ori][1]*l_norm[ori][2]),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);

# deformation imposee                   
E3=DEFI_FONCTION(NOM_PARA='INST',
                   VALE=(0.0,0.0,1.0,0.05),
                   PROL_DROITE='LINEAIRE',
                   PROL_GAUCHE='LINEAIRE',);


# densites de dislocation initiales : variables internes 
avari = zeros(6 + 3 * 12 + (12 + 12) + 12 + 16 + 3)

for i in range(12):
  avari[6+i*3]=RHO_0
  
for i in range(12):
  avari[6+12*3+i]=RHO_LOOPS
  
for i in range(12):
  avari[6+12*4+i]=PHI_VOIDS

lvari=list(avari)

#rotation du repere 
h=1
k=5
l=9

phi1=0
phi =arccos(l / sqrt( h*h + k*k + l*l) ) * 180. / pi
phi2=arctan2( h / sqrt( h*h + k*k ) , k / sqrt( h*h + k*k ) )* 180. / pi
angles=(phi1, phi ,phi2)

# avec irradiation
IMPLDDI=SIMU_POINT_MAT(INFO=1,
                      MATER=ACIERDDI,
                      MASSIF=_F(ANGL_EULER=angles),
                      COMP_INCR=(_F(RELATION='MONOCRISTAL',
                                    COMPOR=COMPODDI,
                                    ALGO_INTE='NEWTON_PERT',
                                    ITER_INTE_MAXI=100,
                                    TOUT='OUI',),),
                      INCREMENT=(_F(LIST_INST=LIS2DD,),),
                      NEWTON=(_F(REAC_ITER=1, ),),
                      CONVERGENCE=(_F(ITER_GLOB_MAXI=100,),),
                      VARI_INIT=_F(VALE=lvari,
                                  ),
                      EPSI_IMPOSE=_F(EPZZ=E3,),
                      ARCHIVAGE=_F(LIST_INST=LISTARCH),
                       );      
                       
IMPR_TABLE(TABLE=IMPLDDI)

# sans irradiation

# densites de dislocation initiales : variables internes 
avari = zeros(6 + 3 * 12 +  12 + 16 + 3)

for i in range(12):
  avari[6+i*3]=RHO_0
  
lvari=list(avari)

IMPLDD=SIMU_POINT_MAT(INFO=1,
                      MATER=ACIERDD,
                      MASSIF=_F(ANGL_EULER=angles),
                      COMP_INCR=(_F(RELATION='MONOCRISTAL',
                                    COMPOR=COMPODD,
                                   # ALGO_INTE='NEWTON_PERT',
                                    ITER_INTE_MAXI=100,
                                    TOUT='OUI',),),
                      INCREMENT=(_F(LIST_INST=LIS2DD,),),
                      NEWTON=(_F(REAC_ITER=1, ),),
                      CONVERGENCE=(_F(ITER_GLOB_MAXI=100,),),
                      VARI_INIT=_F(VALE=lvari,
                                  ),
                      EPSI_IMPOSE=_F(EPZZ=E3,),
                      ARCHIVAGE=_F(LIST_INST=LISTARCH),
                       );      
                       
IMPR_TABLE(TABLE=IMPLDDI)

epsXXi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='EPXX',INTERPOL='LIN');
epsYYi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='EPYY',INTERPOL='LIN');
epsZZi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='EPZZ',INTERPOL='LIN');
epsXYi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='EPXY',INTERPOL='LIN');
epsXZi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='EPXZ',INTERPOL='LIN');
epsYZi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='EPYZ',INTERPOL='LIN');

sigXXi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='SIXX',INTERPOL='LIN');
sigYYi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='SIYY',INTERPOL='LIN');
sigZZi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='SIZZ',INTERPOL='LIN');
sigXYi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='SIXY',INTERPOL='LIN');
sigXZi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='SIXZ',INTERPOL='LIN');
sigYZi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='SIYZ',INTERPOL='LIN');

# deformation viscoplastique globale
EVIXXi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='V1',INTERPOL='LIN');                   
EVIZZi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='V3',INTERPOL='LIN');                   
EVIXYi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='V4',INTERPOL='LIN');                   
EVIYZi=RECU_FONCTION(TABLE=IMPLDDI,PARA_X='INST',PARA_Y='V6',INTERPOL='LIN');
                                      
epsDIRi=CALC_FONCTION(COMB=(_F(FONCTION = epsXXi,COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = epsYYi,COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = epsZZi,COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = epsXYi,COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = epsXZi,COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = epsYZi,COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ), );

sigDIRi=CALC_FONCTION(COMB=(_F(FONCTION = sigXXi,COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = sigYYi,COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = sigZZi,COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = sigXYi,COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = sigXZi,COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = sigYZi,COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ), );


epsXX=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='EPXX',INTERPOL='LIN');
epsYY=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='EPYY',INTERPOL='LIN');
epsZZ=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='EPZZ',INTERPOL='LIN');
epsXY=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='EPXY',INTERPOL='LIN');
epsXZ=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='EPXZ',INTERPOL='LIN');
epsYZ=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='EPYZ',INTERPOL='LIN');

sigXX=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='SIXX',INTERPOL='LIN');
sigYY=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='SIYY',INTERPOL='LIN');
sigZZ=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='SIZZ',INTERPOL='LIN');
sigXY=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='SIXY',INTERPOL='LIN');
sigXZ=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='SIXZ',INTERPOL='LIN');
sigYZ=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='SIYZ',INTERPOL='LIN');

# deformation viscoplastique globale
EVIXX=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='V1',INTERPOL='LIN');                   
EVIZZ=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='V3',INTERPOL='LIN');                   
EVIXY=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='V4',INTERPOL='LIN');                   
EVIYZ=RECU_FONCTION(TABLE=IMPLDD,PARA_X='INST',PARA_Y='V6',INTERPOL='LIN');
                                      
epsDIR=CALC_FONCTION(COMB=(_F(FONCTION = epsXX,COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = epsYY,COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = epsZZ,COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = epsXY,COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = epsXZ,COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = epsYZ,COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ), );

sigDIR=CALC_FONCTION(COMB=(_F(FONCTION = sigXX,COEF= l_norm[ori][0]*l_norm[ori][0],),
                           _F(FONCTION = sigYY,COEF= l_norm[ori][1]*l_norm[ori][1],),
                           _F(FONCTION = sigZZ,COEF= l_norm[ori][2]*l_norm[ori][2],),
                           _F(FONCTION = sigXY,COEF= 2*l_norm[ori][0]*l_norm[ori][1],),
                           _F(FONCTION = sigXZ,COEF= 2*l_norm[ori][0]*l_norm[ori][2],),
                           _F(FONCTION = sigYZ,COEF= 2*l_norm[ori][1]*l_norm[ori][2],),
                           ), );

IMPR_FONCTION(
            FORMAT='XMGRACE',PILOTE='', UNITE=29,
            LEGENDE_X='\\f{Symbol}e\\f{}\\sll',
            LEGENDE_Y='\\f{Symbol}s\\f{}\\sll (MPa)',
            COURBE=(
            _F(FONC_X=epsDIR,FONC_Y=sigDIR, ),
            _F(FONC_X=epsDIRi,FONC_Y=sigDIRi, ),
            ),           
            );


TEST_FONCTION(VALEUR=_F(VALE_CALC=539.068,
                        VALE_REFE=539.068,
                        VALE_PARA=0.066,
                        REFERENCE='SOURCE_EXTERNE',
                        NOM_PARA='INST',
                        FONCTION=sigZZi,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=427.1665,
                        VALE_REFE=427.1665,
                        VALE_PARA=1.0,
                        REFERENCE='SOURCE_EXTERNE',
                        NOM_PARA='INST',
                        FONCTION=sigZZi,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-0.04511131,
                        VALE_REFE=-0.04511131,
                        VALE_PARA=1.0,
                        REFERENCE='SOURCE_EXTERNE',
                        NOM_PARA='INST',
                        FONCTION=EVIXXi,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=0.04794632,
                        VALE_REFE=0.04794632,
                        VALE_PARA=1.0,
                        REFERENCE='SOURCE_EXTERNE',
                        NOM_PARA='INST',
                        FONCTION=EVIZZi,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=0.01472389,
                        VALE_REFE=0.01472389,
                        VALE_PARA=1.0,
                        REFERENCE='SOURCE_EXTERNE',
                        NOM_PARA='INST',
                        FONCTION=EVIXYi,),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=-5.691284E-03,
                        VALE_REFE=-5.691284E-03,
                        VALE_PARA=1.0,
                        REFERENCE='SOURCE_EXTERNE',
                        NOM_PARA='INST',
                        FONCTION=EVIYZi,),
              )

FIN()
                   
