# coding=utf-8

###
### This file is generated automatically by SALOME v6.3.1 with dump python functionality
###

import sys
import salome

salome.salome_init()
theStudy = salome.myStudy

import salome_notebook
notebook = salome_notebook.notebook
sys.path.insert( 0, r'/home/ladier/Documents/Fiches/F18605/TEST')

import iparameters
ipar = iparameters.IParameters(salome.myStudy.GetCommonParameters("Interface Applicative", 1))

#Set up visual properties:
ipar.setProperty("AP_ACTIVE_VIEW", "VTKViewer_0_0")
ipar.setProperty("AP_WORKSTACK_INFO", "0000000100000000000000020100000001000004e9000000040000000100000001000000080000001a00560054004b005600690065007700650072005f0030005f00300000000102")
ipar.setProperty("AP_ACTIVE_MODULE", "Mesh")
ipar.setProperty("AP_SAVEPOINT_NAME", "GUI state: 1")
#Set up lists:
# fill list AP_VIEWERS_LIST
ipar.append("AP_VIEWERS_LIST", "VTKViewer_1")
# fill list VTKViewer_1
ipar.append("VTKViewer_1", "VTK scene:12 - viewer:1")
ipar.append("VTKViewer_1", """<?xml version="1.0"?>
<ViewState>
    <Position X="5.86796" Y="4.49611" Z="5.42358"/>
    <FocalPoint X="0.5" Y="0.25" Z="0.15"/>
    <ViewUp X="-0.722758" Y="0.0584563" Z="0.688625"/>
    <ViewScale Parallel="0.578792" X="1" Y="1" Z="1"/>
    <DisplayCubeAxis Show="0"/>
    <GraduatedAxis Axis="X">
        <Title isVisible="1" Text="X" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="1" G="0" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Y">
        <Title isVisible="1" Text="Y" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="1" B="0"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <GraduatedAxis Axis="Z">
        <Title isVisible="1" Text="Z" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Title>
        <Labels isVisible="1" Number="3" Offset="2" Font="0" Bold="0" Italic="0" Shadow="0">
            <Color R="0" G="0" B="1"/>
        </Labels>
        <TickMarks isVisible="1" Length="5"/>
    </GraduatedAxis>
    <Trihedron isShown="1" Size="105"/>
</ViewState>
""")
# fill list AP_MODULES_LIST
ipar.append("AP_MODULES_LIST", "Geometry")
ipar.append("AP_MODULES_LIST", "Mesh")


###
### GEOM component
###

import GEOM
import geompy
import math
import SALOMEDS


geompy.init_geom(theStudy)

Vertex_1 = geompy.MakeVertex(0, 0, 0)
Vertex_2 = geompy.MakeVertex(1, 0, 0)
Vertex_3 = geompy.MakeVertex(1, 0.5, 0)
Vertex_4 = geompy.MakeVertex(0.5, 0.5, 0)
Vertex_5 = geompy.MakeVertex(0, 0.4997, 0)
Line_1 = geompy.MakeLineTwoPnt(Vertex_1, Vertex_2)
Line_2 = geompy.MakeLineTwoPnt(Vertex_2, Vertex_3)
Line_3 = geompy.MakeLineTwoPnt(Vertex_3, Vertex_4)
Line_4 = geompy.MakeLineTwoPnt(Vertex_4, Vertex_5)
Line_5 = geompy.MakeLineTwoPnt(Vertex_5, Vertex_1)
Face_1 = geompy.MakeFaceWires([Line_1, Line_2, Line_3, Line_4, Line_5], 1)
[Vertex_6,Vertex_7,Vertex_8,Vertex_9,Vertex_10] = geompy.ExtractShapes(Face_1, geompy.ShapeType["VERTEX"], True)
geompy.addToStudy( Vertex_1, 'Vertex_1' )
geompy.addToStudy( Vertex_2, 'Vertex_2' )
geompy.addToStudy( Vertex_3, 'Vertex_3' )
geompy.addToStudy( Vertex_4, 'Vertex_4' )
geompy.addToStudy( Vertex_5, 'Vertex_5' )
geompy.addToStudy( Line_1, 'Line_1' )
geompy.addToStudy( Line_2, 'Line_2' )
geompy.addToStudy( Line_3, 'Line_3' )
geompy.addToStudy( Line_4, 'Line_4' )
geompy.addToStudy( Line_5, 'Line_5' )
geompy.addToStudy( Face_1, 'Face_1' )
geompy.addToStudyInFather( Face_1, Vertex_6, 'Vertex_6' )
geompy.addToStudyInFather( Face_1, Vertex_7, 'Vertex_7' )
geompy.addToStudyInFather( Face_1, Vertex_8, 'Vertex_8' )
geompy.addToStudyInFather( Face_1, Vertex_9, 'Vertex_9' )
geompy.addToStudyInFather( Face_1, Vertex_10, 'Vertex_10' )

### Store presentation parameters of displayed objects
import iparameters
ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "GEOM", 1))


###
### SMESH component
###

import smesh, SMESH, SALOMEDS

aFilterManager = smesh.CreateFilterManager()
aMeasurements = smesh.CreateMeasurements()
smesh.SetCurrentStudy(theStudy)
import StdMeshers
zzzz314d = smesh.Mesh(Face_1)
Regular_1D = zzzz314d.Segment()
Max_Size_1 = Regular_1D.MaxSize(0.07)
MEFISTO_2D = zzzz314d.Triangle()
isDone = zzzz314d.Compute()
smeshObj_1 = zzzz314d.GroupOnGeom(Vertex_8,'FOND',SMESH.NODE)
smeshObj_1.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smeshObj_2 = zzzz314d.CreateEmptyGroup( SMESH.EDGE, 'LEVR_SUP' )
nbAdd = smeshObj_2.Add( [ 16, 15, 14, 13, 12, 11, 10, 9 ] )
smeshObj_2.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
isDone = zzzz314d.Compute()
[ smeshObj_1, smeshObj_2 ] = zzzz314d.GetGroups()
smesh.SetName(zzzz314d, 'zzzz314b')
zzzz314d.ExportMED( r'/home/ladier/Documents/Fiches/F18605/TEST/zzzz314b.med', 0, SMESH.MED_V2_2, 1 )
[ smeshObj_1, smeshObj_2 ] = zzzz314d.GetGroups()
[ LEVR_SUP, FOND ] = zzzz314d.ExtrusionSweepObject2D( zzzz314d, SMESH.DirStruct( SMESH.PointStruct ( 0, 0, 0.1 )), 3 ,True)
zzzz314d.RemoveGroup( smeshObj_2 )
LEVR_SUP.SetName( 'LEVR_SUP' )
LEVR_SUP.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
zzzz314d.RemoveGroup( smeshObj_1 )
FOND.SetName( 'FOND' )
aFilter0x937ed30 = aFilterManager.CreateFilter()
aCriteria = []
aCriterion = SMESH.Filter.Criterion(18,39,0,'Vertex_8','Vertex_8',39,39,1e-07,SMESH.NODE,-1)
aBelongToGeom0x992f940 = aFilterManager.CreateBelongToGeom()
aBelongToGeom0x992f940.SetElementType(SMESH.NODE)
aBelongToGeom0x992f940.SetTolerance(1e-07)
aCriteria.append(aCriterion)
aFilter0x937ed30.SetCriteria(aCriteria)
aFilter0x937ed30.SetPredicate(aBelongToGeom0x992f940)
aBelongToGeom0x992f940.SetMesh(zzzz314d.GetMesh())
aBelongToGeom0x992f940.SetMesh(zzzz314d.GetMesh())
aFilter0xa13bff0 = aFilterManager.CreateFilter()
aCriteria = []
aCriterion = SMESH.Filter.Criterion(18,39,0,'Vertex_8','Vertex_8',39,39,1e-07,SMESH.NODE,-1)
aBelongToGeom0x2b13ee0 = aFilterManager.CreateBelongToGeom()
aBelongToGeom0x2b13ee0.SetElementType(SMESH.NODE)
aBelongToGeom0x2b13ee0.SetTolerance(1e-07)
aCriteria.append(aCriterion)
aFilter0xa13bff0.SetCriteria(aCriteria)
aFilter0xa13bff0.SetPredicate(aBelongToGeom0x2b13ee0)
FOND.SetColor( SALOMEDS.Color( 0, 0, 0 ))
nbAdd = FOND.Add( [ 2 ] )
FOND.SetColor( SALOMEDS.Color( 0, 0.666667, 1 ))
smesh.SetName(zzzz314d, 'zzzz314d')
zzzz314d.ExportMED( r'/home/ladier/Documents/Fiches/F18605/TEST/zzzz314d.med', 0, SMESH.MED_V2_2, 1 )

## some objects were removed
aStudyBuilder = theStudy.NewBuilder()
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_1))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_2))
if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
## set object names
smesh.SetName(zzzz314d.GetMesh(), 'zzzz314d')
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Max_Size_1, 'Max Size_1')
smesh.SetName(MEFISTO_2D.GetAlgorithm(), 'MEFISTO_2D')
smesh.SetName(LEVR_SUP, 'LEVR_SUP')
smesh.SetName(FOND, 'FOND')

### Store presentation parameters of displayed objects
import iparameters
ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "SMESH", 1))

#Set up entries:
# set up entry SMESH_3 (zzzz314d) parameters
ipar.setParameter("SMESH_3", "VTKViewer_0_Visibility", "On")
ipar.setParameter("SMESH_3", "VTKViewer_0_Representation", "2")
ipar.setParameter("SMESH_3", "VTKViewer_0_IsShrunk", "0")
ipar.setParameter("SMESH_3", "VTKViewer_0_Entities", "e:1:f:1:v:1")
ipar.setParameter("SMESH_3", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:0:0:1:edge:0:0.666667:1:node:1:0:0")
ipar.setParameter("SMESH_3", "VTKViewer_0_Sizes", "line:1:shrink:0.75")
ipar.setParameter("SMESH_3", "VTKViewer_0_PointMarker", "std:1:9")
ipar.setParameter("SMESH_3", "VTKViewer_0_Opacity", "1")
ipar.setParameter("SMESH_3", "VTKViewer_0_ClippingPlane", "Off")
# set up entry SMESH_3:13:1 (LEVR_SUP) parameters
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_Visibility", "On")
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_Representation", "2")
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_IsShrunk", "0")
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_Entities", "e:0:f:1:v:0")
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:0:0:1:edge:0:0.666667:1:node:1:0:0")
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_Sizes", "line:1:shrink:0.75")
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_PointMarker", "std:1:9")
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_Opacity", "1")
ipar.setParameter("SMESH_3:13:1", "VTKViewer_0_ClippingPlane", "Off")
# set up entry SMESH_3:11:2 (FOND) parameters
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_Visibility", "On")
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_Representation", "0")
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_IsShrunk", "0")
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_Entities", "e:0:f:0:v:0")
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_Colors", "surface:0:0.666667:1:backsurface:0:0:1:edge:0:0.666667:1:node:0:0.666667:1")
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_Sizes", "line:1:shrink:0.75")
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_PointMarker", "std:1:9")
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_Opacity", "1")
ipar.setParameter("SMESH_3:11:2", "VTKViewer_0_ClippingPlane", "Off")


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser(1)
  iparameters.getSession().restoreVisualState(1)
