# person_in_charge: jean-michel.proix at edf.fr
# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

from Contrib.veri_matr_tang import VERI_MATR_TANG

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'));

#lire le maillage
MA=LIRE_MAILLAGE();

#affecter les elements
modele=AFFE_MODELE(MAILLAGE=MA,
                   AFFE=_F(TOUT='OUI',
                           PHENOMENE='MECANIQUE',
                           MODELISATION='C_PLAN',),);

#definir le materiau

A7=DEFI_FONCTION(NOM_PARA='EPSI',PROL_DROITE='LINEAIRE',
    VALE=( 1.0E-3       ,200.,
          2.E-3        ,202., ))


acier=DEFI_MATERIAU(ELAS=_F(E=2e+05,NU=0.3,),
                    ECRO_LINE=_F(D_SIGM_EPSI=2000.0,SY=200.0,),
                    TRACTION=_F(SIGM=A7),
                    );

compor=[]
compor.append(['VMIS_ISOT_LINE','GDEF_LOG'])

mat=AFFE_MATERIAU(MAILLAGE=MA,
                  AFFE=_F(TOUT='OUI',MATER=acier,),);


#-----------------------------donness Traction-Rotation ------------------------------
dureetrac=0.5
dureetracrot=1.
tfintrac=dureetrac
npastrac=15
npasrota=5
nbincr=1
angle_degres=45.0
reaciter=1
iterintemaxi=10
Rota2=[None]*len(compor)*nbincr
Trac2=[None]*len(compor)*nbincr
Ftra2=[None]*len(compor)*nbincr
DYMAX2=200
precision=[1.E-5]*len(compor)

#conditions limites et charge
DYMAX=500.0
clim_tra=AFFE_CHAR_MECA(MODELE=modele,
                        FACE_IMPO=(_F(GROUP_MA='FINF',
                                     DNOR=0.0,),
                                  _F(GROUP_MA='FSUP',
                                     DNOR=DYMAX),
                                     ),
                        DDL_IMPO=(_F(GROUP_NO='NAXE',
                                     DX=0.0,
                                     ),),);

F_trac=DEFI_FONCTION(NOM_PARA='INST',VALE=(0.0,0.0,tfintrac,1.0,),PROL_DROITE='LINEAIRE',);
# pour la rotation
ClFixe=AFFE_CHAR_MECA(MODELE=modele,DDL_IMPO=(
                        _F(GROUP_NO='NAXE',DX=0.0,DY=0.0),
                        ),);

INCLUDE(UNITE=30)

#listes d'instants initiale
L_inst=DEFI_LIST_REEL(DEBUT=0.0,INTERVALLE=_F(JUSQU_A=dureetrac,NOMBRE=npastrac),)
DEFLIST1 = DEFI_LIST_INST(DEFI_LIST=_F(METHODE   ='MANUEL',LIST_INST = L_inst,))

#### boucle sur les comportements
resu=[None]*len(compor)
vmis=[None]*len(compor)
epsg=[None]*len(compor)
icl=-1
for icomp,comp in enumerate(compor) :

    DEBUG(SDVERI='NON')
    resu[icomp]=STAT_NON_LINE(MODELE=modele,CHAM_MATER=mat,
                   EXCIT=_F(CHARGE=clim_tra, FONC_MULT=F_trac,),
                   COMPORTEMENT=_F(RELATION=comp[0],DEFORMATION=comp[1],ITER_INTE_MAXI=iterintemaxi,TYPE_MATR_TANG='VERIFICATION',RESI_INTE_RELA=1.E-8),
                   INCREMENT=_F(LIST_INST=DEFLIST1),
                   NEWTON=_F(MATRICE='TANGENTE',REAC_ITER=1,PREDICTION='TANGENTE',),
                             );
    DIFF_MAT=VERI_MATR_TANG()
    DETRUIRE(CONCEPT=_F(NOM=(DIFF_MAT)),INFO=1)
    DEBUG(SDVERI='OUI')

    # increments de rotation puis traction
    for incr in range(nbincr):

        tini=dureetrac+ dureetracrot*incr
        tfinrot=dureetracrot+dureetracrot*incr
        tfintrac=dureetrac+dureetracrot+dureetracrot*incr
        # appel a la macro dans INCLUDE
        icl+=1
        Rota2[icl]=CHAR_ROTA(ANGLE_DEGRES=angle_degres,TINI=tini,TFIN=tfinrot,RESU=resu[icomp],MAIL=MA)

        Linst2=DEFI_LIST_REEL(DEBUT=tini,INTERVALLE=_F(JUSQU_A=tfinrot,NOMBRE=npasrota),);
        DEFLIST2 = DEFI_LIST_INST(DEFI_LIST=_F(METHODE   ='MANUEL',LIST_INST = Linst2,))

        resu[icomp]=STAT_NON_LINE(reuse =resu[icomp],
                           MODELE=modele,CHAM_MATER=mat,
                           EXCIT=(_F(CHARGE=Rota2[icl],TYPE_CHARGE='DIDI',),
                                  _F(CHARGE=ClFixe),),
                           COMPORTEMENT=_F(RELATION=comp[0],DEFORMATION=comp[1],
                                        ITER_INTE_MAXI=iterintemaxi,RESI_INTE_RELA=1.E-8),
                           ETAT_INIT=_F(EVOL_NOLI=resu[icomp],),
                           INCREMENT=_F(LIST_INST=DEFLIST2,),
                           NEWTON=_F(MATRICE='TANGENTE',REAC_ITER=reaciter,PREDICTION='TANGENTE',),
                           );
        DETRUIRE(CONCEPT=_F(NOM=(Linst2,DEFLIST2)),INFO=1)
        # nouvelle traction
        Trac2[icl]=AFFE_CHAR_MECA(MODELE=modele,LIAISON_OBLIQUE= (
                            _F(GROUP_NO='FSUP',ANGL_NAUT=(angle_degres*(incr+1),0.,0.),DY=DYMAX2),
                            _F(GROUP_NO='NX1Y0',ANGL_NAUT=(angle_degres*(incr+1),0.,0),DY=0.0,),
                            _F(GROUP_NO='NX0Y1',ANGL_NAUT=(angle_degres*(incr+1),0.,0),DX=0.0,),
                            ),
                            DDL_IMPO=(_F(GROUP_NO='NAXE', DX=0.0,DY=0.0),
                                      ),)
        Ftra2[icl]=DEFI_FONCTION(NOM_PARA='INST',VALE=(tfinrot,0.,tfintrac,1.,),PROL_DROITE='LINEAIRE',);
        Linst2=DEFI_LIST_REEL(DEBUT=tfinrot,INTERVALLE=_F(JUSQU_A=tfintrac,NOMBRE=npastrac),)
        DEFLIST2 = DEFI_LIST_INST(DEFI_LIST=_F(METHODE   ='MANUEL',LIST_INST = Linst2,))

        DEBUG(SDVERI='NON')
        resu[icomp]=STAT_NON_LINE(reuse = resu[icomp],MODELE=modele,CHAM_MATER=mat,
                           EXCIT=(_F(CHARGE=Trac2[icl],TYPE_CHARGE='DIDI',FONC_MULT=Ftra2[icl]),),
                           COMPORTEMENT=_F(RELATION=comp[0], DEFORMATION=comp[1],
                                        ITER_INTE_MAXI=iterintemaxi,TYPE_MATR_TANG='VERIFICATION',RESI_INTE_RELA=1.E-8),
                           ETAT_INIT=_F(EVOL_NOLI=resu[icomp]),
                           INCREMENT=_F(LIST_INST=DEFLIST2,INST_FIN=tfintrac),
                           NEWTON=_F(MATRICE='TANGENTE',REAC_ITER=reaciter,PREDICTION='TANGENTE',),
                                           );
        DIFF_MAT=VERI_MATR_TANG()
        DETRUIRE(CONCEPT=_F(NOM=(DIFF_MAT)),INFO=1)
        DETRUIRE(CONCEPT=_F(NOM=(Linst2,DEFLIST2)),INFO=1)
        DEBUG(SDVERI='OUI')


    resu[icomp]=CALC_CHAMP(reuse=resu[icomp],RESULTAT=resu[icomp],CRITERES=('SIEQ_ELGA'),DEFORMATION=('EPSG_ELGA'))


    vmis[icomp]=RECU_FONCTION(RESULTAT=resu[icomp],NOM_CHAM='SIEQ_ELGA',
                              NOM_CMP='VMIS',MAILLE='M2',POINT=1,);
    epsg[icomp]=RECU_FONCTION(RESULTAT=resu[icomp],NOM_CHAM='EPSG_ELGA',
                              NOM_CMP='EPYY',MAILLE='M2',POINT=1,);
    # reference : GDEF_LOG en 3D test SSND106C
    TEST_FONCTION(VALEUR=(_F(VALE_CALC=1006.89638849,
                             VALE_REFE=1006.8964,
                             VALE_PARA=0.5,
                             REFERENCE='AUTRE_ASTER',
                             PRECISION=1.0000000000000001E-05,
                             NOM_PARA='INST',
                             FONCTION=vmis[icomp],),
                          _F(VALE_CALC=1006.89638849,
                             VALE_REFE=1006.8964,
                             VALE_PARA=1.0,
                             REFERENCE='AUTRE_ASTER',
                             PRECISION=1.0000000000000001E-05,
                             NOM_PARA='INST',
                             FONCTION=vmis[icomp],),
                          _F(VALE_CALC=1256.08903883,
                             VALE_REFE=1256.0889999999999,
                             VALE_PARA=1.5,
                             REFERENCE='AUTRE_ASTER',
                             PRECISION=1.0000000000000001E-05,
                             NOM_PARA='INST',
                             FONCTION=vmis[icomp],),
                          ),
                  )

DEFI_FICHIER( UNITE=38, FICHIER='./REPE_OUT/courbes2D_vmis_isotrope.agr')
IMPR_FONCTION(FORMAT='XMGRACE',UNITE=38,
                  COURBE=(
                   _F(FONCTION=vmis[0],LEGENDE=compor[0][0]+compor[0][1]),
                   ),
                  TITRE='courbes_vmis2D_isotrope');
DEFI_FICHIER(ACTION='LIBERER',UNITE=38)


DEFI_FICHIER( UNITE=38, FICHIER='./REPE_OUT/courbes_epsg2D_isotrope.agr')
IMPR_FONCTION(FORMAT='XMGRACE',UNITE=38,
                  COURBE=(
                   _F(FONCTION=epsg[0],LEGENDE=compor[0][0]+compor[0][1]),
                   ),
                  TITRE='courbes_epsg2D_isotrope');
DEFI_FICHIER(ACTION='LIBERER',UNITE=38)


FIN()
