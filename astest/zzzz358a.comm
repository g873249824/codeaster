# TITRE : VALIDATION DE MODI_MODELE_XFEM / MODELE_THER (MODELISATION 3D)
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),
      PAR_LOT = 'NON',
      IGNORE_ALARM=('MODELISA4_6','SUPERVIS_1'),
      DEBUG=_F(SDVERI='OUI'),
      )

# ###################################################
# Raffinement avec homard -> creation de PYRA5
# ###################################################

MA0 = LIRE_MAILLAGE(FORMAT = 'MED',);

MODBID = AFFE_MODELE(MAILLAGE = MA0,
                     AFFE = _F(TOUT = 'OUI',
                               PHENOMENE = 'MECANIQUE',
                               MODELISATION = '3D',)
                     )

LN = FORMULE(NOM_PARA=('X','Y','Z'),VALE='Z+0.125');

FISBID = DEFI_FISS_XFEM(MAILLAGE = MA0,
                        TYPE_DISCONTINUITE = 'INTERFACE', 
                        DEFI_FISS = _F(FONC_LN = LN,),
                        )

CHERR= RAFF_XFEM(FISSURE=FISBID)

MA1 = CO('MA1')

MACR_ADAP_MAIL(ADAPTATION = 'RAFFINEMENT',
               CHAM_GD = CHERR,
               CRIT_RAFF_PE = 0.05,
               USAGE_CMP = 'RELATIF',
               MAILLAGE_N = MA0,
               MAILLAGE_NP1 = MA1)

#MA1 = LIRE_MAILLAGE(FORMAT = 'MED',);

MAILLAGE = CREA_MAILLAGE(MAILLAGE = MA1,
                         CREA_POI1 = (_F(NOM_GROUP_MA = 'POCOUPE1',
                                         GROUP_NO = 'NORPHHAU',),
                                      _F(NOM_GROUP_MA = 'POCOUPE2',
                                         GROUP_NO = 'NORPHBAS',),),)

# ###################################################
# Definition des modeles sains mecanique et thermique
# ###################################################

MODMES = AFFE_MODELE(MAILLAGE = MAILLAGE,
                     AFFE = (
                             _F(GROUP_MA = ('VOLUME','FACE','EDGE',),
                             #_F(GROUP_MA = ('VOLUME','FACE',),
                             #_F(GROUP_MA = ('VOLUME',),
                                PHENOMENE = 'MECANIQUE',
                                MODELISATION = '3D',),
                             _F(GROUP_MA = ('POCOUPE1','POCOUPE2',),
                                PHENOMENE = 'MECANIQUE',
                                MODELISATION = 'DIS_TR',),
                             ),)

MODTHS = AFFE_MODELE(MAILLAGE = MAILLAGE,
                     AFFE = _F(GROUP_MA = ('VOLUME','FACE'),
                               PHENOMENE = 'THERMIQUE',
                               MODELISATION = '3D',),)

# ###################################################
# Definition des fissures mecanique et thermique 
# ###################################################

D    = 1.0
cent = D/2
a    = 0.57
b    = 0.57

FISSME = DEFI_FISS_XFEM(MAILLAGE = MAILLAGE,
                        TYPE_DISCONTINUITE = 'FISSURE', 
                        DEFI_FISS = _F(FORM_FISS = 'ELLIPSE',
                                       DEMI_GRAND_AXE = a, # suivant x ellipse
                                       DEMI_PETIT_AXE = b, # suivant y ellipse
                                       CENTRE = (cent,0.0,0.0),
                                       VECT_X = (0.1,0.0,0.0),
                                       VECT_Y = (0.0,1.0,0.0)
                                       ),
                        )

FISSTH = DEFI_FISS_XFEM(MAILLAGE = MAILLAGE,
                        TYPE_DISCONTINUITE = 'FISSURE', 
                        DEFI_FISS = _F(FORM_FISS = 'ELLIPSE',
                                       DEMI_GRAND_AXE = a, # suivant x ellipse
                                       DEMI_PETIT_AXE = b, # suivant y ellipse
                                       CENTRE = (cent,0.0,0.0),
                                       VECT_X = (0.1,0.0,0.0),
                                       VECT_Y = (0.0,1.0,0.0)
                                       ),
                        )

LNHAUT = FORMULE(NOM_PARA=('X','Y','Z'),VALE='Z-0.5');

INTEME = DEFI_FISS_XFEM(MAILLAGE = MAILLAGE,
                        TYPE_DISCONTINUITE = 'INTERFACE', 
                        DEFI_FISS = _F(FONC_LN = LNHAUT,),)

INTETH = DEFI_FISS_XFEM(MAILLAGE = MAILLAGE,
                        TYPE_DISCONTINUITE = 'INTERFACE', 
                        DEFI_FISS = _F(FONC_LN = LNHAUT,),)

# ###################################################
# Definition des modeles xfem mecanique et thermique
# -> avec le mot cle FISSURE
# ###################################################

MODMEX1 = MODI_MODELE_XFEM(MODELE_IN = MODMES,
                           FISSURE = (FISSME,INTEME),)

MODTHX1 = MODI_MODELE_XFEM(MODELE_IN = MODTHS,
                           FISSURE = (FISSTH,INTETH),)

#MAXF = POST_MAIL_XFEM(MODELE=MODMEX1)
#IMPR_RESU(FORMAT='MED', RESU=_F(MAILLAGE=MAXF) )

# ###################################################
# Definition du modele xfem mecanique
# -> avec le mot cle MODELE_THER
# ###################################################

MODMEX2 = MODI_MODELE_XFEM(MODELE_IN = MODMES,
                           MODELE_THER = MODTHX1,)

# ###################################################
# Impression du contenu des modeles xfem obtenus :
# -> meca, avec mot-cle FISSURE     : MODMEX1
# -> meca, avec mot-cle MODELE_THER : MODMEX2
# -> ther, avec mot-cle FISSURE     : MODTHX1
# ###################################################

DEFI_FICHIER(UNITE=31, FICHIER='./fort.31')
DEFI_FICHIER(UNITE=32, FICHIER='./fort.32')
DEFI_FICHIER(UNITE=41, FICHIER='./fort.41')

IMPR_CO(CONCEPT=_F(NOM=MODMEX1),NIVEAU=-1,UNITE=31,)
IMPR_CO(CONCEPT=_F(NOM=MODMEX2),NIVEAU=-1,UNITE=32,)
IMPR_CO(CONCEPT=_F(NOM=MODTHX1),NIVEAU=-1,UNITE=41,)

DEFI_FICHIER(ACTION='LIBERER',UNITE=31)
DEFI_FICHIER(ACTION='LIBERER',UNITE=32)
DEFI_FICHIER(ACTION='LIBERER',UNITE=41)

# ###################################################
# "Post-traitements" des fichiers obtenus avec IMPR_CO
# ###################################################

File31 = open('./fort.31', "r")
File32 = open('./fort.32', "r")
File41 = open('./fort.41', "r")

LinesFile31 = File31.readlines()
LinesFile32 = File32.readlines()
LinesFile41 = File41.readlines()
LinesFile31 = [line.split() for line in LinesFile31]
LinesFile32 = [line.split() for line in LinesFile32]
LinesFile41 = [line.split() for line in LinesFile41]
n31 = len(LinesFile31)
n32 = len(LinesFile32)
n41 = len(LinesFile41)

File31.close()
File32.close()
File41.close()

ListM1 = []
ListM2 = []
ListT1 = []

for il in xrange(n31):
  lF31 = LinesFile31[il]
  if '&&UTIMSD' in lF31 :
    ind = lF31.index('MODMEX1')
    lF31[ind] = ''
    for char in lF31:
      if ('.CELV' in char) or ('.VALE' in char):
        ListM1.append(lF31)
        break
for il in xrange(n32):
  lF32 = LinesFile32[il]
  if '&&UTIMSD' in lF32 :
    ind = lF32.index('MODMEX2')
    lF32[ind] = ''
    for char in lF32:
      if ('.CELV' in char) or ('.VALE' in char):
        ListM2.append(lF32)
        break
for il in xrange(n41):
  lF41 = LinesFile41[il]
  if '&&UTIMSD' in lF41 :
    ind = lF41.index('MODTHX1')
    lF41[ind] = ''
    for char in lF41:
      if ('.CELV' in char) or ('.VALE' in char):
        ListT1.append(lF41)
        break

#assert len(ListM2) == len(ListM1)
#for i in xrange(len(ListM2)):
  #print ListM2[i] == ListM1[i]
  #print ListM2[i]
  #print ListM1[i]
  #print "&&"

#assert len(ListM2) == len(ListT1)
#for i in xrange(len(ListM2)):
  #print ListM2[i] == ListT1[i]
  #print ListM2[i]
  #print ListT1[i]
  #print "&&"

# ###################################################
# Tests une fois les infos extraites de ces fichiers
# ###################################################

# -------
# nobj_ok == 1 si il y a le meme nombre de lignes dans les 2
# fichiers, c.a.d le meme nombre d'objets dans les deux modeles
# nobj_ok == 0 sinon
# -------

# -> entre MODMEX2 et MODMEX1
nobj_ok = 0
if (n32 == n31) and (n32 > 0) : nobj_ok = 1
TOBJM2M1 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [nobj_ok], PARA = 'BOOLEEN'),)

# -> entre MODMEX2 et MODTHX1
nobj_ok = 0
if (n32 == n41) and (n32 > 0) : nobj_ok = 1
TOBJM2T1 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [nobj_ok], PARA = 'BOOLEEN'),)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TOBJM2M1,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TOBJM2T1,)

# -------
# vale_ok == 1 si le "resume" (IMPR_CO/NIVEAU=-1) des .CELV
# ou .VALE contenus dans les deux modeles sont identiques 
# (au nom du modele pres) 
# vale_ok == 0 sinon
# -------

# -> entre MODMEX2 et MODMEX1
vale_ok = 0
if (ListM2 == ListM1) and (ListM2 != []) : vale_ok = 1
TVALM2M1 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [vale_ok], PARA = 'BOOLEEN'),)

# -> entre MODMEX2 et MODTHX1
vale_ok = 0
if (ListM2 == ListT1) and (ListM2 != []) : vale_ok = 1
TVALM2T1 = CREA_TABLE(TITRE = '',
                      LISTE = _F( LISTE_I = [vale_ok], PARA = 'BOOLEEN'),)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TVALM2M1,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC_I=1,
           VALE_REFE_I=1,
           NOM_PARA='BOOLEEN',
           TABLE=TVALM2T1,)

FIN()
