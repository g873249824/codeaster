# TITRE FISSURATION A PROPAGATION IMPOSEE AVEC XFEM
# ======================================================================
# COPYRIGHT (C) 1991 - 2015  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# person_in_charge: daniele.colombo at ifpen.fr

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'),);

# ON IGNORE L'ALARME XFEM2_94 PARCE QUE MEME SI DANS LE CAS OU ELLE EST
# EMISE ON PEUT OBTENIR DES VALEURS DE KI, KII, KIII ET BETA QUI NE SONT PAS
# CORRECTES, DANS CE CAS TEST CES VALEURS (CALCULEES PAR CALC_G) NE SONT PAS
# UTILISEES.

#----------------------------------------------
#                 MAILLAGE
#----------------------------------------------

nbcalc = 4

# on lit le maillage avec GMSH
PRE_GMSH();

MAILLAG1=LIRE_MAILLAGE(INFO=1,);

MAILLAG1=DEFI_GROUP(reuse =MAILLAG1,
                    MAILLAGE=MAILLAG1,
                    CREA_GROUP_MA=(_F(NOM='VOL',GROUP_MA='GM254',),
                                   _F(NOM='SURFINF',GROUP_MA='GM251',),
                                   _F(NOM='SURFSUP',GROUP_MA='GM252',),
                                   _F(NOM='FONDINI',GROUP_MA='GM253',),),);


#----------------------------------------------
#                   MODELE
#----------------------------------------------


MODELE=AFFE_MODELE(MAILLAGE=MAILLAG1,
                      AFFE=(_F(GROUP_MA=('VOL',),
                               PHENOMENE='MECANIQUE',
                               MODELISATION='3D',),
                            _F(GROUP_MA=('SURFINF','SURFSUP',),
                               PHENOMENE='MECANIQUE',
                               MODELISATION='3D',),),);

MAILLAG1=MODI_MAILLAGE(reuse =MAILLAG1,
                       MAILLAGE=MAILLAG1,
                       ORIE_PEAU_3D=_F(GROUP_MA=('SURFSUP','SURFINF',),),
                       );

#----------------------------------------------
#              FISSURE INITIALE
#----------------------------------------------

FISS = [None]*nbcalc

FISS[0]=DEFI_FISS_XFEM(MAILLAGE=MAILLAG1,
                       TYPE_DISCONTINUITE='COHESIF',
                       DEFI_FISS=_F(GROUP_MA_BORD='FONDINI',
                                 FORM_FISS = 'DEMI_PLAN',
                                 PFON      =(0. , 2. ,9.),
                                 NORMALE   =(0. , 0 , 1.),
                                 DTAN      =(0. , 1. , 0.)),
                       );
# on cree une table pour imiter une sortie de CALC_G
SIF0 =  CREA_TABLE(LISTE=(_F(LISTE_R=(0.,0.25,0.5,0.75,1.0),PARA='ABSC_CURV'),
                          _F(LISTE_R=(1.,1.,1.,1.,1.),PARA='INST'),
                          _F(LISTE_R=(1.,1.,1.,1.,1.),PARA='K1'),
                          _F(LISTE_R=(0.,0.,0.,0.,0.),PARA='K2'),
                          _F(LISTE_R=(0.,0.,0.,0.,0.),PARA='K3'),
                          _F(LISTE_R=(1.,1.,1.,1.,1.),PARA='G'),
                          _F(LISTE_R=(1.,1.,1.,1.,1.),PARA='G_IRWIN'),
                          _F(LISTE_I=(1,1,1,1,1),PARA='NUME_FOND'),
                          _F(LISTE_I=(1,1,1,1,1),PARA='NUME_ORDRE'),
                          _F(LISTE_I=(1,2,3,4,5),PARA='NUM_PT'),));

SIF0NPT=CREA_TABLE(LISTE=(_F(LISTE_R=(0.,1.0),PARA='ABSC_CURV'),
                          _F(LISTE_R=(1.,1.),PARA='INST'),
                          _F(LISTE_R=(1.,1.),PARA='K1'),
                          _F(LISTE_R=(0.,0.),PARA='K2'),
                          _F(LISTE_R=(0.,0.),PARA='K3'),
                          _F(LISTE_R=(1.,1.),PARA='G'),
                          _F(LISTE_R=(1.,1.),PARA='G_IRWIN'),
                          _F(LISTE_I=(1,1),PARA='NUME_FOND'),
                          _F(LISTE_I=(1,1),PARA='NUME_ORDRE'),
                          _F(LISTE_I=(1,2),PARA='NUM_PT'),));

# AVANCE IMPOSEE
da=2.0

# ANGLE DE PROPAGATION IMPOSE
beta=30.0/180.0*3.1415
print sin(beta)

# FUNCTION POUR IMPOSER L'ANGLE DE PROPAGATION CI-DESSUS
# DANS LA TABLE ISSUE PAR CALC_G
ZERO=FORMULE(NOM_PARA='G',
             VALE='0.0*G+beta',);

# modif pour imposer un angle
SIF =  CALC_TABLE(TABLE=SIF0,
                  ACTION=(_F(OPERATION='EXTR',
                             NOM_PARA=('NUME_ORDRE','INST','NUM_PT',
                                       'ABSC_CURV','K1','K2',
                                       'K3','G','G_IRWIN','NUME_FOND'),
                             ),
                          _F(OPERATION='OPER',
                             FORMULE=ZERO,
                             NOM_PARA='BETA',),
                             ),
                  );
SIFNPT=CALC_TABLE(TABLE=SIF0NPT,
                  ACTION=(_F(OPERATION='EXTR',
                             NOM_PARA=('NUME_ORDRE','INST','NUM_PT',
                                       'ABSC_CURV','K1','K2',
                                       'K3','G','G_IRWIN','NUME_FOND'),
                             ),
                          _F(OPERATION='OPER',
                             FORMULE=ZERO,
                             NOM_PARA='BETA',),
                             ),
                  );

# propagation avec NB_POINT_FOND
FISS[1] = CO('FISS_1');
PROPA_FISS(MODELE=MODELE,
           METHODE_PROPA='GEOMETRIQUE',
           OPERATION='PROPA_COHESIF',
           FISSURE=_F(FISS_ACTUELLE=FISS[0],
                      FISS_PROPAGEE=FISS[1],
                      NB_POINT_FOND=2,
                      TABLE=SIFNPT,),
           CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
           ZONE_MAJ='TOUT',
           DA_MAX=da,
           INFO=1,);

# propagation sans NB_POINT_FOND
FISS[2] = CO('FISS_2');
PROPA_FISS(MODELE=MODELE,
           METHODE_PROPA='GEOMETRIQUE',
           OPERATION = 'PROPA_COHESIF',
           FISSURE=_F(FISS_ACTUELLE=FISS[0],
                      FISS_PROPAGEE=FISS[2],
                      TABLE=SIF,),
           CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
           ZONE_MAJ='TOUT',
           DA_MAX=da,
           INFO=1,);

#
# idem, ms angle plus grand
beta2=70.0/180.0*3.1415
#
ANGLE=FORMULE(NOM_PARA='G',
              VALE='0.0*G+beta2',);
#
SIF2 = CALC_TABLE(TABLE=SIF0,
                  ACTION=(_F(OPERATION='EXTR',
                             NOM_PARA=('NUME_ORDRE','INST','NUM_PT',
                                       'ABSC_CURV','K1','K2',
                                       'K3','G','G_IRWIN','NUME_FOND'),
                             ),
                          _F(OPERATION='OPER',
                             FORMULE=ANGLE,
                             NOM_PARA='BETA',),
                             ),
                  );

# propagation sans NB_POINT_FOND
FISS[3] = CO('FISS_3');
PROPA_FISS(MODELE=MODELE,
           METHODE_PROPA='GEOMETRIQUE',
           OPERATION = 'PROPA_COHESIF',
           FISSURE=_F(FISS_ACTUELLE=FISS[0],
                      FISS_PROPAGEE=FISS[3],
                      TABLE=SIF2,),
           CRIT_ANGL_BIFURCATION='ANGLE_IMPO',
           ZONE_MAJ='TOUT',
           DA_MAX=da,
           INFO=1,);
#----------------------------------------------
#         PROPAGATION SUR 3 PAS DE TEMPS
#----------------------------------------------

VAL_CALC = [-4.87110352054E-14, -1.09995346165E-13, 9.31824062356E-14,
            -6.34770014329E-14, -4.87110352054E-14, -1.09995346165E-13,
             9.31824062356E-14, -6.34770014329E-14, 8.07479083598E-14,
            -1.80688797258E-14, -2.95111157733E-14, -4.96512553294E-14]

#----------------------------------------------
#         POST TRAITEMENT
#----------------------------------------------

# POSITION INITIALE DU FOND DE FISSURE
y_in=2.0
z_in=9.0

# TOLERANCE: 15% LONGUEUR MAXIMALE DES ARETES DES ELEMENTS
tol=0.15*0.33

CHLN=[None]*nbcalc
CHLT=[None]*nbcalc
FOND=[None]*nbcalc
TABLSN=[None]*nbcalc
TABLST=[None]*nbcalc
tabBeta=[0., beta, beta, beta2]

# VERIFICATION DE LA POSITION DU CHAQUE FOND DE FISSURE CALCULE
for i in range(1,nbcalc) :

#   CALCUL DE LA POSITION CORRECTE
    y=y_in+da*cos(tabBeta[i])
    z=z_in+da*sin(tabBeta[i])
    

#   EXTRACTION DES LEVEL SETS POUR LES POINTS D'INTERSECTION
#   ENTRE L'ARETE DONNANT LA POSITION CORRECTE DU FOND ET
#   LES FACES DES ELEMENTS DU MAILLAGE
    CHLN[i]=CREA_CHAMP(TYPE_CHAM='NOEU_NEUT_R',
                     OPERATION='EXTR',
                     NOM_CHAM='LNNO',
                     FISSURE=FISS[i],);

    CHLT[i]=CREA_CHAMP(TYPE_CHAM='NOEU_NEUT_R',
                     OPERATION='EXTR',
                     NOM_CHAM='LTNO',
                     FISSURE=FISS[i],);

    FOND[i]=INTE_MAIL_3D(MAILLAGE=MAILLAG1,
                         DEFI_SEGMENT=_F(
                         ORIGINE=(0,y,z),
                         EXTREMITE=(1,y,z),
                                         ),
                         );

    TABLSN[i]= POST_RELEVE_T(ACTION=_F(INTITULE='Test LSN',
                                       CHEMIN=FOND[i],
                                       CHAM_GD=CHLN[i],
                                       TOUT_CMP='OUI',
                                       OPERATION='EXTRACTION',),);
    TABLST[i]= POST_RELEVE_T(ACTION=_F(INTITULE='Test LST',
                                       CHEMIN=FOND[i],
                                       CHAM_GD=CHLT[i],
                                       TOUT_CMP='OUI',
                                       OPERATION='EXTRACTION',),); 

    IMPR_TABLE(TABLE=TABLSN[i],);
    IMPR_TABLE(TABLE=TABLST[i],);

#   VERIFICATION DES VALEURS DES LEVEL SETS. POUR LES POINTS
#   SELECTIONNES, LES LEVEL SETS DOIVENT ETRE EGAL A ZERO.
    TEST_TABLE(TABLE=TABLSN[i],
               REFERENCE='ANALYTIQUE',
               NOM_PARA='X1',
               PRECISION=tol,
               
               TYPE_TEST='MAX',
               CRITERE='ABSOLU',
               VALE_CALC=VAL_CALC[(i-1)*4+0],
               VALE_REFE=0.0  )

    TEST_TABLE(TABLE=TABLSN[i],
               REFERENCE='ANALYTIQUE',
               NOM_PARA='X1',
               PRECISION=tol,
               
               TYPE_TEST='MIN',
               CRITERE='ABSOLU',
               VALE_CALC=VAL_CALC[(i-1)*4+1],
               VALE_REFE=0.0  )

    TEST_TABLE(TABLE=TABLST[i],
               REFERENCE='ANALYTIQUE',
               NOM_PARA='X1',
               PRECISION=tol,
               
               TYPE_TEST='MAX',
               CRITERE='ABSOLU',
               VALE_CALC=VAL_CALC[(i-1)*4+2],
               VALE_REFE=0.0  )

    TEST_TABLE(TABLE=TABLST[i],
               REFERENCE='ANALYTIQUE',
               NOM_PARA='X1',
               PRECISION=tol,
               
               TYPE_TEST='MIN',
               CRITERE='ABSOLU',
               VALE_CALC=VAL_CALC[(i-1)*4+3],
               VALE_REFE=0.0  )

FIN();
