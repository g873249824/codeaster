# coding=utf-8

###
### This file is generated automatically by SALOME v6.3.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
theStudy = salome.myStudy

###
### GEOM component
###

import GEOM
import geompy
import math
import SALOMEDS

geompy.init_geom(theStudy)

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Contour_1 = geompy.MakeSketcher("Sketcher:F 0.000000 0.000000:TT 0.000000 50.000000:TT 50.000000 50.000000:R 90:C 50.000000 -90.000000", [0, 0, 0, 0, 0, 1, 1, 0, 0])
Face_1 = geompy.MakeFaceWires([Contour_1], 1)
Sommet_1 = geompy.MakeVertex(0, 25, 0)
Sommet_2 = geompy.MakeVertex(25, 50, 0)
Sommet_3 = geompy.MakeVertex(25, 25, 0)
Sommet_4 = geompy.MakeVertex(50, 0, 0)
Ligne_1 = geompy.MakeLineTwoPnt(Sommet_3, Sommet_1)
Ligne_2 = geompy.MakeLineTwoPnt(Sommet_3, Sommet_2)
Ligne_3 = geompy.MakeLineTwoPnt(Sommet_4, Sommet_3)
Partition_1 = geompy.MakePartition([Face_1], [Ligne_1, Ligne_2, Ligne_3], [], [], geompy.ShapeType["FACE"], 0, [], 0)
Miroir_1 = geompy.MakeMirrorByAxis(Partition_1, OX)
Assemblage_1 = geompy.MakeCompound([Partition_1, Miroir_1])
SPH_HAU = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(SPH_HAU, [20, 3, 13])
SPH_BAS = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(SPH_BAS, [36, 26, 43])
A1A2 = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(A1A2, [24, 40, 17, 47])
A1B1 = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(A1B1, [28, 45])
A2B2 = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(A2B2, [22, 5])
CONT2 = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(CONT2, [19])
CONT1 = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(CONT1, [42])
geomObj_1 = geompy.GetInPlace(Assemblage_1, SPH_HAU)
[geomObj_2,geomObj_3,geomObj_4,geomObj_5,geomObj_6,geomObj_7,geomObj_8] = geompy.SubShapeAll(geomObj_1, geompy.ShapeType["VERTEX"])
[geomObj_9,geomObj_10,geomObj_11,geomObj_12,geomObj_13,geomObj_14,geomObj_15] = geompy.SubShapeAll(geomObj_1, geompy.ShapeType["VERTEX"])
C2 = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["VERTEX"])
geompy.UnionIDs(C2, [18])
geomObj_16 = geompy.GetInPlace(Assemblage_1, SPH_BAS)
[geomObj_17,geomObj_18,geomObj_19,geomObj_20,geomObj_21,geomObj_22,geomObj_23] = geompy.SubShapeAll(geomObj_16, geompy.ShapeType["VERTEX"])
[geomObj_24,geomObj_25,geomObj_26,geomObj_27,geomObj_28,geomObj_29,geomObj_30] = geompy.SubShapeAll(geomObj_16, geompy.ShapeType["VERTEX"])
C1 = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["VERTEX"])
geompy.UnionIDs(C1, [41])
lcirc = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(lcirc, [22, 15, 38, 19, 42, 45])
lepai = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(lepai, [40, 17])
linv = geompy.CreateGroup(Assemblage_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(linv, [22, 45])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Contour_1, 'Contour_1' )
geompy.addToStudy( Face_1, 'Face_1' )
geompy.addToStudy( Sommet_1, 'Sommet_1' )
geompy.addToStudy( Sommet_2, 'Sommet_2' )
geompy.addToStudy( Sommet_3, 'Sommet_3' )
geompy.addToStudy( Sommet_4, 'Sommet_4' )
geompy.addToStudy( Ligne_1, 'Ligne_1' )
geompy.addToStudy( Ligne_2, 'Ligne_2' )
geompy.addToStudy( Ligne_3, 'Ligne_3' )
geompy.addToStudy( Partition_1, 'Partition_1' )
geompy.addToStudy( Miroir_1, 'Miroir_1' )
geompy.addToStudy( Assemblage_1, 'Assemblage_1' )
geompy.addToStudyInFather( Assemblage_1, SPH_HAU, 'SPH_HAU' )
geompy.addToStudyInFather( Assemblage_1, SPH_BAS, 'SPH_BAS' )
geompy.addToStudyInFather( Assemblage_1, A1A2, 'A1A2' )
geompy.addToStudyInFather( Assemblage_1, A1B1, 'A1B1' )
geompy.addToStudyInFather( Assemblage_1, A2B2, 'A2B2' )
geompy.addToStudyInFather( Assemblage_1, CONT2, 'CONT2' )
geompy.addToStudyInFather( Assemblage_1, CONT1, 'CONT1' )
geompy.addToStudyInFather( Assemblage_1, C2, 'C2' )
geompy.addToStudyInFather( Assemblage_1, C1, 'C1' )
geompy.addToStudyInFather( Assemblage_1, lcirc, 'lcirc' )
geompy.addToStudyInFather( Assemblage_1, lepai, 'lepai' )
geompy.addToStudyInFather( Assemblage_1, linv, 'linv' )

###
### SMESH component
###

import smesh, SMESH, SALOMEDS

aMeasurements = smesh.CreateMeasurements()
smesh.SetCurrentStudy(theStudy)
import StdMeshers
Maillage_1 = smesh.Mesh(Assemblage_1)
Regular_1D_global = Maillage_1.Segment()
Global = Regular_1D_global.NumberOfSegments( 5 )
Quadrangle_2D = Maillage_1.Quadrangle()
Regular_1D_lcirc = Maillage_1.Segment(geom=lcirc)
circ = Regular_1D_lcirc.NumberOfSegments(40,0.1,[ 22, 45 ])
Regular_1D_lepai = Maillage_1.Segment(geom=lepai)
epai = Regular_1D_lepai.NumberOfSegments(20,0.1,[ 40, 17 ])
Propagation = Regular_1D_lepai.Propagation()
isDone = Maillage_1.Compute()
SPH_HAU_1 = Maillage_1.GroupOnGeom(SPH_HAU,'SPH_HAU',SMESH.FACE)
SPH_BAS_1 = Maillage_1.GroupOnGeom(SPH_BAS,'SPH_BAS',SMESH.FACE)
A1A2_1 = Maillage_1.GroupOnGeom(A1A2,'A1A2',SMESH.EDGE)
A1B1_1 = Maillage_1.GroupOnGeom(A1B1,'A1B1',SMESH.EDGE)
A2B2_1 = Maillage_1.GroupOnGeom(A2B2,'A2B2',SMESH.EDGE)
CONT2_1 = Maillage_1.GroupOnGeom(CONT2,'CONT2',SMESH.EDGE)
CONT1_1 = Maillage_1.GroupOnGeom(CONT1,'CONT1',SMESH.EDGE)
C2_1 = Maillage_1.GroupOnGeom(C2,'C2',SMESH.NODE)
C1_1 = Maillage_1.GroupOnGeom(C1,'C1',SMESH.NODE)
[ SPH_HAU_1, SPH_BAS_1, A1A2_1, A1B1_1, A2B2_1, CONT2_1, CONT1_1, C2_1, C1_1 ] = Maillage_1.GetGroups()
smesh.SetName(Maillage_1, 'Assemblage_1')
Maillage_1.ExportMED( r'/tmp/forma04c.mmed', 0, SMESH.MED_V2_2, 1 )
Sous_maillage_1 = Regular_1D_lcirc.GetSubMesh()
Sous_maillage_2 = Regular_1D_lepai.GetSubMesh()

## set object names
smesh.SetName(Maillage_1.GetMesh(), 'Maillage_1')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Regular_1D_global.GetAlgorithm(), 'Regular_1D_global')
smesh.SetName(Global, 'Global')
smesh.SetName(Regular_1D_lcirc.GetAlgorithm(), 'Regular_1D_lcirc')
smesh.SetName(circ, 'circ')
smesh.SetName(Regular_1D_lepai.GetAlgorithm(), 'Regular_1D_lepai')
smesh.SetName(epai, 'epai')
smesh.SetName(Propagation, 'Propagation')
smesh.SetName(SPH_HAU_1, 'SPH_HAU')
smesh.SetName(SPH_BAS_1, 'SPH_BAS')
smesh.SetName(A1A2_1, 'A1A2')
smesh.SetName(A1B1_1, 'A1B1')
smesh.SetName(A2B2_1, 'A2B2')
smesh.SetName(CONT2_1, 'CONT2')
smesh.SetName(CONT1_1, 'CONT1')
smesh.SetName(C2_1, 'C2')
smesh.SetName(C1_1, 'C1')
smesh.SetName(Sous_maillage_1, 'Sous-maillage_1')
smesh.SetName(Sous_maillage_2, 'Sous-maillage_2')

if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser(1)
