# person_in_charge: david.haboussa at edf.fr
# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#
# CAS-TEST DE REFERENCE : SSNA104B
#
#=====================================================================


DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),PAR_LOT='NON',DEBUG=_F(SDVERI='NON'))
# SDVERI='NON' car la verification est trop couteuse en CPU

#=====================================================================
#               INITIALISATIONS
#=====================================================================
#

import numpy as N

NCAL = 20

MATER  = [None]*NCAL
RESU   = [None]*NCAL

TREF = 0.
T0   = TREF
Tmax = 500.

epsi = 1.E-10

ZERO = DEFI_CONSTANTE(VALE=0.0);

UN   = DEFI_CONSTANTE(VALE=1.0);

tmax = 1.


compor='LEMA_SEUIL'

# Nombre de variables internes

Nbvari = 2

#=====================================================================
#               MATERIAU  FONCTION  DE  LA  TEMPERATURE
#=====================================================================

# Parametres elastiques

# Parametres elastiques

YOUN=DEFI_FONCTION(  NOM_PARA='TEMP',
                     VALE=(T0,   1.0E5,
                           Tmax, 0.5E5,))

ALPH=DEFI_FONCTION(NOM_PARA='TEMP',VALE=(T0,   1.0E-5,
                                         Tmax, 2.0E-5,),);

# Parametre de la loi de Lemaitre seuil

A_F=DEFI_CONSTANTE(VALE=1.E-10);
S_F=DEFI_CONSTANTE(VALE=40.);
A_F2=DEFI_FONCTION(NOM_PARA='TEMP',VALE=( T0,   0.86E5,
                                         Tmax, 0.66E5,),);

S_F2=DEFI_FONCTION(NOM_PARA='TEMP',VALE=( T0,   1.0E-10,
                                         Tmax, 0.5E-10,),);

MATERI=DEFI_MATERIAU(ELAS_FO=_F(E=YOUN,
                                NU=ZERO,
                                TEMP_DEF_ALPHA=TREF,
                                ALPHA=ALPH,),
                     LEMA_SEUIL_FO=_F(A=A_F,
                                      S=S_F,),
                      );

L_INST=DEFI_LIST_REEL(DEBUT=0.,
                      INTERVALLE=(_F(JUSQU_A=tmax,
                                     NOMBRE=NCAL,),
                                     ),
                      );

TIMP=DEFI_FONCTION(NOM_PARA='INST',  NOM_RESU='TEMP',
                   VALE=(  0. , T0, 1. , Tmax)
                   )

FLUENCE=DEFI_FONCTION(NOM_PARA='INST',  NOM_RESU='IRRA',
                      VALE=(  0. , 0., 1. , 2.)
                      )

U=SIMU_POINT_MAT(COMPORTEMENT=_F(RELATION=compor,),
                 MATER=MATERI,
                 SUPPORT='POINT',
                   AFFE_VARC=(
                   _F(  NOM_VARC='TEMP',
                        VALE_FONC=TIMP,
                        VALE_REF=TREF),
                   _F(  NOM_VARC='IRRA',
                        VALE_FONC=FLUENCE)),
                 INCREMENT=_F(LIST_INST=L_INST,),
                 NEWTON=_F(PREDICTION='ELASTIQUE',
                           MATRICE='TANGENTE',
                           REAC_ITER=1,),
                 EPSI_IMPOSE=_F(EPXX=ZERO,),
                 INFO=1,);

IMPR_TABLE(TABLE=U,);


SXM = 0.
EXM = 0.
V1M=0.
V2M=0.

time = 0.


for i in range(NCAL):

          timem = time

          time = timem + tmax/NCAL

          Ti = T0 + time/tmax * (Tmax - T0)

          Tm = T0 + timem/tmax * (Tmax - T0)

          # deformation mecanique imposee correspondant a la deformation thermique du premier calcul

          epsimp =DEFI_CONSTANTE(VALE=-ALPH(Ti)*(Ti - TREF));
          fluxi= DEFI_CONSTANTE (VALE = FLUENCE(time) )
          fluxm= FLUENCE(timem)

          tempi= DEFI_FONCTION (NOM_PARA='INST',NOM_RESU='TEMP',
                                VALE=(timem,Ti,time,Ti));
          print 'i=',i, ' instant=', time, ' Temperature=',Ti, 'epsimp=',epsimp

          if i > 0 :
             SXM = SXM *(YOUN(Ti)/YOUN(Tm))

          MATER[i]=DEFI_MATERIAU(ELAS =_F(E=YOUN(Ti),
                                          NU=0.,
                                          ALPHA=0.,),
                                 LEMA_SEUIL=_F(A=A_F(Ti),
                                               S=S_F(Ti),),
                                 );

          list = DEFI_LIST_REEL(DEBUT=timem,
                      INTERVALLE=(_F(JUSQU_A=time,NOMBRE=1,),),);

          RESU[i]=SIMU_POINT_MAT(COMPORTEMENT=_F(RELATION=compor,),
                                 MATER=MATER[i],
                                 SUPPORT='POINT',
                                 AFFE_VARC=(
                                             _F(NOM_VARC='TEMP',
                                                VALE_FONC=tempi,
                                                VALE_REF=TREF),
                                             _F(NOM_VARC='IRRA',
                                               # VALE_FONC=fluxi,
                                                VALE_FONC=FLUENCE)),
                                 INCREMENT=_F(LIST_INST = list, ),
                                 NEWTON=_F( PREDICTION='ELASTIQUE',
                                             MATRICE='TANGENTE',
                                             REAC_ITER=1,),
                                 EPSI_IMPOSE=_F(EPXX=epsimp),
                                 VARI_INIT=_F(VALE=(V1M,V2M)),
                                 SIGM_INIT=_F(SIXX=SXM),
                                 EPSI_INIT=_F(EPXX=EXM, EPYY=0.,EPZZ=0.,EPXY=0.,EPXZ=0.,EPYZ=0.),
                                 INFO=1,);

          # recuperation des valeurs initiales du futur pas de temps dans la table resultat

          EXM = RESU[i]['EPXX',2]

          SXM = RESU[i]['SIXX',2]

          V1M = RESU[i]['V1',2]
          V2M = RESU[i]['V2',2]

          IMPR_TABLE(TABLE=RESU[i]);

          DETRUIRE ( CONCEPT =  _F (NOM =epsimp),);
          DETRUIRE ( CONCEPT =  _F (NOM =list),);
          DETRUIRE ( CONCEPT =  _F (NOM =(fluxi,tempi)),);

          TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='VMIS',
                     VALE_CALC=U['VMIS',i+2],
                     VALE_REFE=U['VMIS',i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',);

          TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA='TRACE',
                     VALE_CALC=U['TRACE',i+2],
                     VALE_REFE=U['TRACE',i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',);

          for j in range(Nbvari):
             nomvari='V'+str(j+1)
             if U[nomvari,i+2] > epsi :
                TEST_TABLE(TABLE=RESU[i],
                     NOM_PARA=nomvari,
                     VALE_CALC=U[nomvari,i+2],
                     VALE_REFE=U[nomvari,i+2],
                     FILTRE=_F(NOM_PARA='INST',VALE=time),
                     REFERENCE='AUTRE_ASTER',);

FIN();
