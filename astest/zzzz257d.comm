# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: josselin.delmas at edf.fr
# DOC V1.01.257
# CHARGEMENT EN TRACTION
# MAILLAGE : TETRA10
# COMPORTEMENT ELASTIQUE

DEBUT(CODE=_F(
              NIV_PUB_WEB='INTERNET',),
      DEBUG=_F(SDVERI='OUI',),);

#####################################
###Definition de la fissure en dur###
#####################################

#Absc_curv_maxi
#Equivalent quatre noeuds sur le maillage initial
Lfiss = 3.5;
Dmax = Lfiss / 2.;


# Vect_KI
#  c'est le vecteur pour avoir l'erreur sur KI

vx = 0.0;

vy = 1.0;

vz = 0.0;

#Fond de fissure

X0 = 3.5;

Y0 = 8.0;

Z0 = 0.0;

#####################################
###Definition de la fissure en dur###
#####################################

young = 200000.0;
nu = 0.3;

#Fonctions necessaires a la definition du chargement pour le probleme dual
const = ((young * sqrt((2 * pi))) / 8.);


FPLUSX = FORMULE(VALE='const*2/(Dmax)**2*sqrt((X-X0)**2+(Y-Y0)**2+(Z-Z0)**2)*vx',
                 const=const,
                 Dmax=Dmax,
                 X0=X0,
                 Y0=Y0,
                 Z0=Z0,
                 vx=vx,
                 NOM_PARA=['X', 'Y', 'Z'],)

FPLUSY = FORMULE(VALE='const*2/(Dmax)**2*sqrt((X-X0)**2+(Y-Y0)**2+(Z-Z0)**2)*vy',
                 const=const,
                 Dmax=Dmax,
                 X0=X0,
                 Y0=Y0,
                 Z0=Z0,
                 vy=vy,
                 NOM_PARA=['X', 'Y', 'Z'],)

FPLUSZ = FORMULE(VALE='(const/(1+nu))*2/(Dmax)**2*sqrt((X-X0)**2+(Y-Y0)**2+(Z-Z0)**2)*vz',
                 const=const,
                 nu=nu,
                 Dmax=Dmax,
                 X0=X0,
                 Y0=Y0,
                 Z0=Z0,
                 vz=vz,
                 NOM_PARA=['X', 'Y', 'Z'],)

FMOINX = FORMULE(VALE='-const*2/(Dmax)**2*sqrt((X-X0)**2+(Y-Y0)**2+(Z-Z0)**2)*vx',
                 const=const,
                 Dmax=Dmax,
                 X0=X0,
                 Y0=Y0,
                 Z0=Z0,
                 vx=vx,
                 NOM_PARA=['X', 'Y', 'Z'],)

FMOINY = FORMULE(VALE='-const*2/(Dmax)**2*sqrt((X-X0)**2+(Y-Y0)**2+(Z-Z0)**2)*vy',
                 const=const,
                 Dmax=Dmax,
                 X0=X0,
                 Y0=Y0,
                 Z0=Z0,
                 vy=vy,
                 NOM_PARA=['X', 'Y', 'Z'],)

FMOINZ = FORMULE(VALE='-(const/(1+nu))*2/(Dmax)**2*sqrt((X-X0)**2+(Y-Y0)**2+(Z-Z0)**2)*vz',
                 const=const,
                 nu=nu,
                 Dmax=Dmax,
                 X0=X0,
                 Y0=Y0,
                 Z0=Z0,
                 vz=vz,
                 NOM_PARA=['X', 'Y', 'Z'],)

MAI=LIRE_MAILLAGE(FORMAT='MED',);

MAIB=CREA_MAILLAGE(MAILLAGE=MAI,
                   LINE_QUAD=_F(TOUT='OUI',
                                PREF_NOEUD='QN',
                                PREF_NUME=1,),);

MAIB=MODI_MAILLAGE(reuse =MAIB,
                   MAILLAGE=MAIB,
                   MODI_MAILLE=_F(OPTION='NOEUD_QUART',
                                  GROUP_MA_FOND='FONDFISS',),);

MATE=DEFI_MATERIAU(ELAS=_F(E=young,
                           NU=nu,),);

CHMAT=AFFE_MATERIAU(MAILLAGE=MAIB,
                    AFFE=_F(TOUT='OUI',
                            MATER=MATE,),);

MODL=AFFE_MODELE(MAILLAGE=MAIB,
                 AFFE=_F(TOUT='OUI',
                         PHENOMENE='MECANIQUE',
                         MODELISATION='3D',),);

BLOC=AFFE_CHAR_MECA(MODELE=MODL,
                   DDL_IMPO=(_F(GROUP_MA='BLOC1',DX=0.0,DY=0.0,DZ=0.0,),
                             _F(GROUP_MA='BLOC2',DY=0.0,DZ=0.0,),
                             _F(GROUP_MA='BLOC3',DY=0.0,),),);

# -----------------------------
# definition du probleme primal
# -----------------------------

CHAR=AFFE_CHAR_MECA(MODELE=MODL,
                    FORCE_FACE=(_F(GROUP_MA='HAUT',
                                      FY=1.0,),
                                   _F(GROUP_MA='BAS',
                                      FY=-1.0,),),);

RESU=MECA_STATIQUE(MODELE=MODL,
                   CHAM_MATER=CHMAT,
                   EXCIT=(_F(CHARGE=BLOC,),
                          _F(CHARGE=CHAR,),),);

MAIB=DEFI_GROUP(reuse =MAIB,
                MAILLAGE=MAIB,
                CREA_GROUP_MA=(_F(NOM='CURVMAX',
                                  OPTION='CYLINDRE',
                                  POINT=(X0,Y0,Z0),
                                  VECT_NORMALE=(0.0,0.0,1.0),
                                  RAYON=Dmax,),
                               _F(NOM='LSUP',
                                  INTERSEC=('LEVSUP','CURVMAX',),),
                               _F(NOM='LINF',
                                  INTERSEC=('LEVINF','CURVMAX',),),),);

FISS=DEFI_FOND_FISS(MAILLAGE=MAIB, SYME='NON',
                    FOND_FISS=_F(GROUP_MA='FONDFISS',),
                    LEVRE_SUP=_F(GROUP_MA='LSUP',),
                    LEVRE_INF=_F(GROUP_MA='LINF',),);

POST_K=POST_K1_K2_K3(FOND_FISS=FISS,
                     TYPE_MAILLAGE='LIBRE',
                     RESULTAT=RESU,
                     ABSC_CURV_MAXI=Dmax,);

IMPR_TABLE(TABLE=POST_K,
           UNITE=8,);


RESU=CALC_ERREUR(reuse =RESU,
               RESULTAT=RESU,
               OPTION=('ERME_ELEM',),);

# ---------------------------
# definition du probleme dual
# ---------------------------

CHARDUAL=AFFE_CHAR_MECA_F(MODELE=MODL,
                          FORCE_FACE=(_F(GROUP_MA='LSUP',
                                            FX=FPLUSX,
                                            FY=FPLUSY,
                                            FZ=FPLUSZ,),
                                         _F(GROUP_MA='LINF',
                                            FX=FMOINX,
                                            FY=FMOINY,
                                            FZ=FMOINZ,),),);

RESUDUAL=MECA_STATIQUE(MODELE=MODL,
                       CHAM_MATER=CHMAT,
                       EXCIT=(_F(CHARGE=BLOC,),
                              _F(CHARGE=CHARDUAL,),),);

RESUDUAL=CALC_ERREUR(reuse =RESUDUAL,
                   RESULTAT=RESUDUAL,
                   OPTION=('ERME_ELEM',),);

# ---------------------------
# estimation de l'erreur en quantite d'interet
# ---------------------------

RESU=CALC_ERREUR(reuse =RESU,
               RESULTAT=RESU,
               OPTION='QIRE_ELEM',
               RESU_DUAL=RESUDUAL,);

# ---------------------------
# tests sur les resultats
# ---------------------------

TEST_TABLE(CRITERE='RELATIF',
           VALE_CALC=9.95355131775,
           
           NOM_PARA='K1',
           TABLE=POST_K,
           FILTRE=_F(NOM_PARA='NOEUD_FOND',
                     VALE_K='N10',),
           )

TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  PARA='ERREUR_ERRE',
                  RESULTAT=RESU,
                  VALE_CALC=7.07763874742,
                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  PARA='ERREUR_ERRE',
                  RESULTAT=RESUDUAL,
                  VALE_CALC=369740.278317,
                  CRITERE='RELATIF',
                  ),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  PARA='ERREUR_QIRE',
                  RESULTAT=RESU,
                  VALE_CALC=444.818509653,
                  CRITERE='RELATIF',
                  ),
          )

##################################################################
# TEST DES OPTIONS DE CHOIX DES POINTS DE CALCUL DANS POST_K1_K2_K3
##################################################################

MAIB = DEFI_GROUP(reuse=MAIB,
                MAILLAGE=MAIB,
                CREA_GROUP_NO = (
                 _F(NOM = 'NFF',
                    GROUP_MA = 'FONDFISS'),
                 _F(NOM = 'part1',
                    OPTION='ENV_SPHERE',
                    POINT = (3.5, 8.0, 0.),
                   RAYON = 1.1,
                   PRECISION = 1.1),
                 _F(NOM = 'part2',
                    OPTION='ENV_SPHERE',
                    POINT = (3.5, 8.0, 3.5),
                    RAYON = 0.8,
                    PRECISION = 0.8),
                 _F(NOM = 'GRoui',
                    INTERSEC = ('NFF','part1')),
                 _F(NOM = 'GRnon',
                    INTERSEC = ('NFF','part2')),
                 ),
        )

K1=POST_K1_K2_K3(RESULTAT=RESU,
                TYPE_MAILLAGE='LIBRE',
                FOND_FISS=FISS,
                TOUT='OUI',
                GROUP_NO='GRoui',
                SANS_GROUP_NO='GRnon')  
        
K2=POST_K1_K2_K3(RESULTAT=RESU,
                TYPE_MAILLAGE='LIBRE',
                FOND_FISS=FISS,
                TOUT='OUI',
                GROUP_NO='GRoui')  
        
K3=POST_K1_K2_K3(RESULTAT=RESU,
                TYPE_MAILLAGE='LIBRE',
                FOND_FISS=FISS,
                TOUT='OUI',
                SANS_GROUP_NO='GRnon')    
        
K4=POST_K1_K2_K3(RESULTAT=RESU,
                TYPE_MAILLAGE='LIBRE',
                FOND_FISS=FISS,
                TOUT='OUI')    
        
K5=POST_K1_K2_K3(RESULTAT=RESU,
                TYPE_MAILLAGE='LIBRE',
                FOND_FISS=FISS,
                GROUP_NO='GRoui',
                SANS_GROUP_NO='GRnon')  
        
K6=POST_K1_K2_K3(RESULTAT=RESU,
                TYPE_MAILLAGE='LIBRE',
                FOND_FISS=FISS,
                GROUP_NO='GRoui')  
        
K7=POST_K1_K2_K3(RESULTAT=RESU,
                TYPE_MAILLAGE='LIBRE',
                FOND_FISS=FISS,
                SANS_GROUP_NO='GRnon')        

# cas par defaut : POST_K
        
TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=1.0E-10,
           VALE_CALC_I=12,
           VALE_REFE_I=12,
           NOM_PARA='NUM_PT',
           TYPE_TEST='MAX',
           TABLE=K1,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=1.0E-10,
           VALE_CALC_I=14,
           VALE_REFE_I=14,
           NOM_PARA='NUM_PT',
           TYPE_TEST='MAX',
           TABLE=K2,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=1.0E-10,
           VALE_CALC_I=12,
           VALE_REFE_I=12,
           NOM_PARA='NUM_PT',
           TYPE_TEST='MAX',
           TABLE=K3,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=1.0E-10,
           VALE_CALC_I=23,
           VALE_REFE_I=23,
           NOM_PARA='NUM_PT',
           TYPE_TEST='MAX',
           TABLE=K4,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=1.0E-10,
           VALE_CALC_I=12,
           VALE_REFE_I=12,
           NOM_PARA='NUM_PT',
           TYPE_TEST='MAX',
           TABLE=K5,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=1.0E-10,
           VALE_CALC_I=14,
           VALE_REFE_I=14,
           NOM_PARA='NUM_PT',
           TYPE_TEST='MAX',
           TABLE=K6,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=1.0E-10,
           VALE_CALC_I=6,
           VALE_REFE_I=6,
           NOM_PARA='NUM_PT',
           TYPE_TEST='MAX',
           TABLE=K7,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           PRECISION=1.0E-10,
           VALE_CALC_I=12,
           VALE_REFE_I=12,
           NOM_PARA='NUM_PT',
           TYPE_TEST='MAX',
           TABLE=POST_K,)
FIN();
