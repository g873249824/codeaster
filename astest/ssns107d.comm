# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'))


PRE_GMSH();


E = 2e10
Ea = 2.e11
nu = .2
P=1e6

sec = 1.

#import numpy as NP
#l = nu*E/(1.-2.*nu)/(1.+nu)
#m = 1/2.*E/(1.+nu)
#a= 10.
#b= 20.
# sans membrane
#def f_srr(r) :
#  y = P*a**2/(b**2-a**2)*(1.-b**2/r**2)
#  return y
#def f_stt(r) :
#  y = P*a**2/(b**2-a**2)*(1.+b**2/r**2)
#  return y
# avec membrane
#Pb = 4.*P*a**2*(l+m)/(b*(3*l+2*m)*2*m*(b**2-a**2)/Ea/sec+b**2*(l+2*m)+a**2*(3*l+2*m))
#print 'Pb = ',Pb
#C1 = (P*a**2-Pb*b**2)/(b**2-a**2)
#C2 = a**2*b**2*(P-Pb)/(b**2-a**2)
#CC = l/m/(3*l+2*m)*C1
#CE = 2.*C1/3/(3*l+2*m)
#print 'D1 = %f ; D2 = %f'%((CC+3*CE)/2,C2/2/m)
#def f_srr(r) :
#  y = C1-C2/r**2
#  return y
#def f_stt(r) :
#  y = C1+C2/r**2
#  return y

MA2=LIRE_MAILLAGE();
MA=CREA_MAILLAGE(
            MAILLAGE = MA2,
            LINE_QUAD = _F(TOUT='OUI'))


BETON=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=nu,),);

ACIER=DEFI_MATERIAU(
            ELAS=_F(  E = Ea,   NU = 0.0),
            ECRO_LINE=_F( D_SIGM_EPSI = 2.E9,   SY = 2.E11, )
                          )

MATE=AFFE_MATERIAU(MAILLAGE=MA,
                   AFFE=(_F(  GROUP_MA = ('GM100007',),
                                 MATER = ACIER,),
                                 _F(GROUP_MA=('GM100005','GM100004'),
                           MATER=BETON,),),);

MO=AFFE_MODELE(MAILLAGE=MA,
               AFFE=(_F(  GROUP_MA = ('GM100007',),
                               PHENOMENE = 'MECANIQUE',
                               MODELISATION = 'GRILLE_MEMBRANE'),
                     _F(GROUP_MA=('GM100005','GM100004'),
                       PHENOMENE='MECANIQUE',
                       MODELISATION='3D',),),);

CAREL=AFFE_CARA_ELEM(    MODELE=MO,
                       GRILLE=(_F( GROUP_MA = 'GM100007',
                                SECTION = sec,
                                ANGL_REP = (90., 0.0,),
                                EXCENTREMENT = 0.0,
                              ),
                              )
                        )
CHAR=AFFE_CHAR_MECA(MODELE=MO,
                    FACE_IMPO=(_F(GROUP_MA=('GM100002',),
                                 DNOR=0.0,),
                               _F(GROUP_MA=('GM100003',),
                                 DNOR=0.0,),),
                    PRES_REP=_F(GROUP_MA='GM100004',
                                PRES=P,),
                    DDL_IMPO=_F(GROUP_MA = ('GM100006'),
                                DZ = 0.),
      )


FM=DEFI_FONCTION(NOM_PARA='INST',
                 VALE=(0.0,0.0,1.0,1.0,),);

LINST=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=_F(JUSQU_A=1.0,
                                   NOMBRE=1,),);

RESU=STAT_NON_LINE(MODELE=MO,
                   CHAM_MATER=MATE,
                   CARA_ELEM=CAREL,
                   EXCIT=_F(CHARGE=CHAR,
                            FONC_MULT=FM,),
                     NEWTON=_F(MATRICE='TANGENTE',
                               ),
                   COMPORTEMENT=(_F(RELATION='ELAS',
                                GROUP_MA='GM100005',),
                             _F(RELATION='GRILLE_ISOT_LINE',
                                GROUP_MA='GM100007',),),
                   INCREMENT=_F(LIST_INST=LINST,),);

#CHAMELG=CALC_CHAM_ELEM(MODELE=MO,
#                       GROUP_MA='GM100005',
#                       OPTION='COOR_ELGA',);
#
#x=CHAMELG.EXTR_COMP("X",[])
#y=CHAMELG.EXTR_COMP("Y",[])
#w=CHAMELG.EXTR_COMP("W",[])
#
#r=NP.sqrt(x.valeurs**2+y.valeurs**2)
#theta=NP.arctan(y.valeurs/x.valeurs)
#
#CONT  = CREA_CHAMP(
#             TYPE_CHAM = 'ELGA_SIEF_R',
#             OPERATION = 'EXTR',
#             RESULTAT  = RESU,
#             NOM_CHAM  = 'SIEF_ELGA',
#             INST      = 1.,
#             )
#
#sxx=CONT.EXTR_COMP("SIXX",['GM100005']).valeurs
#syy=CONT.EXTR_COMP("SIYY",['GM100005']).valeurs
#sxy=CONT.EXTR_COMP("SIXY",['GM100005']).valeurs
#
#srr=sxx*NP.cos(theta)**2+syy*NP.sin(theta)**2+2*sxy*NP.sin(theta)*NP.cos(theta)
#stt=sxx*NP.sin(theta)**2+syy*NP.cos(theta)**2-2*sxy*NP.sin(theta)*NP.cos(theta)
#
#ax=NP.sort(r)
#ay=NP.array(map(f_srr,ax))
#az=NP.take(srr,NP.argsort(r))
#
#bx=ax
#by=NP.array(map( f_stt,bx))
#bz=NP.take(stt,NP.argsort(r))
#
#fichier=open('./REPE_OUT/resu_grille_lin_1.dat','w')
#for i in xrange(len(r)) :
#  fichier.writelines('%E %E %E %E %E\n'%(ax[i],ay[i],az[i],by[i],bz[i]))
#fichier.close()
#
#
#IMPR_RESU(RESU=_F(RESULTAT=RESU,),);
TEST_RESU(RESU=(_F(INST=1.0,
                   REFERENCE='ANALYTIQUE',
                   RESULTAT=RESU,
                   NOM_CHAM='DEPL',
                   NOEUD='N6',
                   NOM_CMP='DX',
                   VALE_CALC= 0.000676933025626,
                   VALE_REFE=6.7692299999999996E-4,
                   PRECISION=1.E-3,),
                _F(INST=1.0,
                   REFERENCE='ANALYTIQUE',
                   RESULTAT=RESU,
                   NOM_CHAM='DEPL',
                   NOEUD='N17',
                   NOM_CMP='DX',
                   VALE_CALC= 0.000384600299775,
                   VALE_REFE=3.8462000000000001E-4,
                   PRECISION=1.E-3,),
                ),
          )

FIN()
