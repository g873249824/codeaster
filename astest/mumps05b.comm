# TITRE VALIDATION DU SOLVEUR MUMPS EN PARALLELE AVEC MATRICE CENTRALISEE
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

#########################################################################
#
#   MODELISATION B : CUBE HEXA8 / 688391 DDLs / 27057822 NNZ
#   ON TESTE DIFFERENTES VARIANTES DE MUMPS (CENTRALISEE/DISTRIBUEE
#   PAR MAILLE).
#   PARALLELE: VALEUR CONSEILLEE 32 PROCS
#########################################################################
#
# Choix du solveur
solveur = 'MUMPS';
#
# Pourcentage de memoire supplementaire que peut s'allouer MUMPS
# Rappel :
# --------------------------------------------------------------#
#                                                               #
#         JEVEUX          'DISPO'==>UTILISABLE PAR MUMPS        #
#  I-------------------I----------------------------------I     #
#    mem_aster*MEM/100        (1-mem_aster)*MEM/100             #
#                                                               #
#    ou MEM est la memoire totale indiquee dans ASTK            #
#                                                               #
#        #
# --------------------------------------------------------------#
#  Dans cette memoire 'DISPO', MUMPS decide qu'il aura besoin   #
#  de XX, le parametre mem_pivot autorise MUMPS a en prendre    #
#  (1+mem_pivot/100)*XX                                         #
# --------------------------------------------------------------#
mem_pivot = 40;
#
# Choix de la methode de renumeration
meth_renum = 'METIS';
#
# Mode verbeux 1/2
niv_info = 2
#
DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'))

# pour obtenir un maillage quadratique :
#----------------------------------------
# MA1=LIRE_MAILLAGE( )
# MA=CREA_MAILLAGE(MAILLAGE=MA1,LINE_QUAD=_F(TOUT='OUI'))

# pour obtenir un maillage lineaire :
#----------------------------------------
MA=LIRE_MAILLAGE(FORMAT='MED');

MAT=DEFI_MATERIAU(ELAS=_F(E=1.E+05,
                          NU=0.3));

CHAM_MAT=AFFE_MATERIAU(MAILLAGE=MA,
                       AFFE=_F(TOUT='OUI',
                               MATER=MAT));

MO=AFFE_MODELE(MAILLAGE=MA,
               AFFE=_F(TOUT='OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='3D'));

CHARF=AFFE_CHAR_MECA(MODELE=MO,
                     FORCE_FACE=_F(GROUP_MA='COTE_H',
                                   FZ=1.E+4));

CHARD=AFFE_CHAR_MECA(MODELE=MO,
                     DDL_IMPO=(_F(GROUP_NO='A',
                                  DX=0.,
                                  DY=0.),
                               _F(GROUP_NO='B',
                                  DY=0.),
                               _F(GROUP_MA='COTE_B',
                                  DZ=0.)));

TPS=DEFI_LIST_REEL(DEBUT=0.0,
                   INTERVALLE=_F(JUSQU_A=1,
                                 NOMBRE=1));

# 1.1 : AVEC CHARGE DUALISEE ET MUMPS CENTRALISE
#----------------------------------------------------------

MODI_MODELE(reuse=MO, MODELE=MO, PARTITION=_F(PARALLELISME='CENTRALISE'))
MECAC=MECA_STATIQUE(INFO=niv_info,
                     MODELE=MO,
                     CHAM_MATER=CHAM_MAT,
                     EXCIT=(_F(CHARGE=CHARF),
                            _F(CHARGE=CHARD)),
                     OPTION='SANS',
                     SOLVEUR=_F(METHODE=solveur, RENUM=meth_renum, RESI_RELA=-1.0, PCENT_PIVOT=mem_pivot,
                     GESTION_MEMOIRE='IN_CORE'));

TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  GROUP_NO='D',
                  REFERENCE='ANALYTIQUE',
                  RESULTAT=MECAC,
                  NOM_CHAM='DEPL',
                  NOM_CMP='DZ',
                  VALE_CALC=0.100000000,
                  VALE_REFE=0.10000000000000001,),
          )

TEST_RESU(RESU=_F(NUME_ORDRE=1,
                  GROUP_NO='D',
                  REFERENCE='ANALYTIQUE',
                  RESULTAT=MECAC,
                  NOM_CHAM='DEPL',
                  NOM_CMP='DX',
                  VALE_CALC=-1.18363658E-12,
                  VALE_REFE=0.0,
                  CRITERE='ABSOLU',
                  PRECISION=1.E-08,),
          )

# 2.1 : AVEC CHARGE DUALISEE ET MUMPS DISTRIBUE PAR MAILLES
#       EQUILIBRAGE DE CHARGE AUTOMATIQUE
#----------------------------------------------------------

X="""MODI_MODELE(reuse=MO, MODELE=MO, PARTITION=_F(PARALLELISME='MAIL_DISPERSE'))
MECAD1=MECA_STATIQUE(INFO=niv_info,
                     MODELE=MO,
                     CHAM_MATER=CHAM_MAT,
                     EXCIT=(_F(CHARGE=CHARF),
                            _F(CHARGE=CHARD)),
                     OPTION='SANS',
                     SOLVEUR=_F(METHODE=solveur, RENUM=meth_renum, RESI_RELA=-1.0, 
                     GESTION_MEMOIRE='IN_CORE'));

TEST_RESU(RESU=_F(RESULTAT=MECAD1,
                  NUME_ORDRE=1,
                  NOM_CHAM='DEPL',
                  NOM_CMP='DZ',
                  GROUP_NO='D',
                  VALE=0.1,
                  REFERENCE='ANALYTIQUE'));

TEST_RESU(RESU=_F(RESULTAT=MECAD1,
                  NUME_ORDRE=1,
                  NOM_CHAM='DEPL',
                  NOM_CMP='DX',
                  GROUP_NO='D',
                  VALE=0.0,
                  CRITERE='ABSOLU',
                  PRECISION=1e-08,
                  REFERENCE='ANALYTIQUE'));"""

FIN();
