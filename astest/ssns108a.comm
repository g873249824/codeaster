# MODIF  DATE 02/06/2008   AUTEUR LEFEBVRE J-P.LEFEBVRE 
# TITRE SIMULATION DE L'ESSAI SAFE
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2007  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NOM='SSNS108A', NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'))

MTRAN=2.818E6
RHOBET=2500
RHOACI=7800.

LOI_COMPORTEMENT = 'ENDO_ISOT_BETON'
CALCUL = 'STATIQUE'
RESOLUTION = 'TANGENTE'
TANG_SEC = 'TANGENTE_SECANTE'

SUBD_PAS = 2;
Nmax = 100;
Nmaxdb = 20
RESI_GLOB_RELA = 1E-7 
Pas = 1.5E-3
Tmax = 0.15 

ALGO_C_PLAN = 'DEBORST'

MA = LIRE_MAILLAGE();

MURS = []
MURS.append('F1_QUAD')
MURS.append('F2_QUAD')
MURS.append('MUR_QUAD')

MURS1 = MURS 

MA = DEFI_GROUP(reuse = MA, 
                MAILLAGE = MA,
                CREA_GROUP_MA = (_F(NOM = 'MURS1',    UNION = MURS1)),
                )        

MA = DEFI_GROUP(reuse = MA, 
                MAILLAGE = MA,
                 CREA_GROUP_NO = (  _F(NOM = 'TETENO', GROUP_MA = 'MURS1',),
                                  ),      
               );   

MA = DEFI_GROUP(reuse = MA, 
                MAILLAGE = MA,
                CREA_GROUP_MA = (_F(NOM = 'MURS',    UNION = MURS)),
               )        

MA = DEFI_GROUP(reuse = MA, 
                MAILLAGE = MA,
                CREA_GROUP_NO = (  _F(NOM = 'TETENO_T'    , GROUP_MA = 'MURS',),
                ),      
              );   

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = (_F(NOM = 'PLAN',
                OPTION = 'PLAN',
                POINT = (0., 0., 1.2), 
                VECT_NORMALE = (0., 0., 1.), 
                PRECISION = 1E-3),
               _F(NOM = 'GM_HAUT',
                  INTERSEC = ('TETENO', 'PLAN')),
                  ),
                )

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = ( _F(NOM = 'GM_LONG',
                INTERSEC = ('TETENO', 'PLAN')),
               ),
           )

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = (_F(NOM = 'PLAN1',
                OPTION = 'PLAN',
                POINT = (0., 0., 0), 
                VECT_NORMALE = (0., 0., 1.), 
                PRECISION = 1E-3),
               _F(NOM = 'GM_BAS',
                  INTERSEC = ('TETENO_T', 'PLAN1')),
                 ),
               )

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = (_F(NOM = 'PLAN2',
                OPTION = 'PLAN',
                POINT = (0., 0., 1.2), 
                VECT_NORMALE = (0., 0., 1.), 
                PRECISION = 1E-3),
               _F(NOM = 'HAUT_TOU',
                  INTERSEC = ('TETENO_T', 'PLAN2')),
                  ),
               )

NB_NOEUD = 26
MTRAN_HAUT = (MTRAN)/NB_NOEUD
NOEUD_PILOTE = 'N325'

modele_aff = []

gr_armature = []
gr_armature +=  ['F1_H1','F1_H2','F2_H1','F2_H2','F1_V1','F1_V2','F2_V1','F2_V2']
gr_armature += ['M_H1','M_H2','M_V1','M_V2']

#--------------------------------------------------------------------------               
modele_aff.append({'GROUP_MA':gr_armature,
                   'PHENOMENE': 'MECANIQUE',
                   'MODELISATION' :'GRILLE_MEMBRANE'})

modele_aff.append({'GROUP_MA':  MURS,
                   'PHENOMENE': 'MECANIQUE',
                   'MODELISATION': 'DKT'})

MO=AFFE_MODELE(MAILLAGE=MA,
               INFO=1,
               VERIF='MAILLE',
               AFFE=modele_aff,
                ) ;

E     = DEFI_CONSTANTE(VALE = 32308e6)
NU    = DEFI_CONSTANTE(VALE = 0.2)
BETON = DEFI_MATERIAU(ELAS_FO = _F(E   = E,
                                   NU       = NU,
                                   RHO      = RHOBET,
                                   B_ENDOGE = 1.5E-5,
                                 ),
                        BETON_ECRO_LINE = _F(SYT         = 3.415e6,
                                             D_SIGM_EPSI = -7000.e6,
                                             SYC         = 25.E6,
                                             ),
                        );

#----- acier du liner -----

ACIER1 = DEFI_MATERIAU ( ELAS =_F( E   = 2.0E11 ,
                                   NU  = 0.3 ,
                                   RHO = RHOACI ,
                                  ),
                         ECRO_LINE =_F(D_SIGM_EPSI=300.0E6,
                                       SY=570.0E6,),) ;



BETEL = DEFI_MATERIAU ( ELAS =_F( E   = 3.29725E10 ,
                                   NU  = 0.16 ,
                                   RHO = RHOBET ,
                       ),),

#-----------------------------------------------------------------------
#              AFFECTATION DES MATERIAUX AUX ELEMENTS
#-----------------------------------------------------------------------

aff_mater=[]
aff_mater.append({'GROUP_MA': ('MUR_QUAD') , 'MATER':BETON})
aff_mater.append({'GROUP_MA': ('F1_QUAD') , 'MATER':BETON})
aff_mater.append({'GROUP_MA': ('F2_QUAD') , 'MATER':BETON})
aff_mater.append({'GROUP_MA':gr_armature, 'MATER':ACIER1}) 

MATER = AFFE_MATERIAU (MAILLAGE = MA ,
                       AFFE = aff_mater,
                       );

#-------------------------------------------------
#  Definition des caracteristiques des elements
#-------------------------------------------------

liste_carac_grille = []

EXT = 0.1
for gr in ['M_H1','M_H2']:
   
    liste_carac_grille.append({'GROUP_MA' : gr,
                               'SECTION'    : 8e-4,
                               'EXCENTREMENT' : EXT,
                               'ANGL_REP'  : (0,0)})
    EXT = -1.0*EXT
  
  
EXT = 0.1                               
for gr in ['M_V1','M_V2']:
    liste_carac_grille.append({'GROUP_MA' : gr,
                               'SECTION'    : 8e-4,
                               'EXCENTREMENT' : EXT,
                               'ANGL_REP'  : (0,90)})
    EXT = -1.0*EXT                             
                                

EXT = 0.08                               
for gr in ['F1_H1','F1_H2', 'F2_H1','F2_H2']:                                                                                            
    liste_carac_grille.append({'GROUP_MA' : gr,
                               'SECTION'    : 8e-4,
                               'EXCENTREMENT' : EXT,
                               'ANGL_REP'  : (90,0)})
    EXT = -1.0*EXT                             

EXT = 0.08                                                              
for gr in ['F1_V1','F1_V2', 'F2_V1','F2_V2']:                                                                                            
    liste_carac_grille.append({'GROUP_MA' : gr,
                               'SECTION'    : 8e-4,
                               'EXCENTREMENT' : EXT,
                               'ANGL_REP'  : (90,90)})
    EXT = -1.0*EXT                           

discret = None
coque = []
coque.append({'EPAIS' : 0.20,
              'GROUP_MA':'MUR_QUAD',
              'COQUE_NCOU' : 11,
              'ANGL_REP': (0.0,0.0,),
#              'COEF_RIGI_DRZ' : 1.0E-10,
            })

coque.append({'EPAIS' : 0.16,
              'GROUP_MA':('F1_QUAD','F2_QUAD'),
              'COQUE_NCOU' : 11,
              'ANGL_REP': (90,0.0,),
            })

CAEL = AFFE_CARA_ELEM(MODELE = MO,
                      COQUE = coque,
                      GRILLE = liste_carac_grille,
                      DISCRET = discret,
                      );

CHAR0 = AFFE_CHAR_MECA(MODELE = MO,
                       DDL_IMPO = (_F(GROUP_NO = 'GM_BAS',
                                      DX = 0.0,
                                      DY = 0.0,
                                      DZ = 0.0,
                                      DRX=0,DRY=0,DRZ=0,),
                                   _F(GROUP_NO = 'HAUT_TOU',
                                      DY = 0,DRX=0,DRY=0,DRZ=0,),
                                  ),
                       LIAISON_UNIF = _F(GROUP_NO = 'HAUT_TOU',
                                         DDL = ('DZ','DX')),
                                        );

comp_incr=[]
comp_incr.append({'GROUP_MA' : gr_armature,
                  'RELATION' : 'GRILLE_ISOT_LINE'})
comp_incr.append({'GROUP_MA' : ('MUR_QUAD'),
                  'RELATION' : LOI_COMPORTEMENT,
                  'ALGO_C_PLAN' : ALGO_C_PLAN,
                  'ITER_MAXI_DEBORST' : Nmaxdb,
                  'TYPE_MATR_TANG' : TANG_SEC,
                })               

comp_incr.append({'GROUP_MA' : ('F1_QUAD'),
                  'RELATION' : LOI_COMPORTEMENT,
                  'ALGO_C_PLAN' : ALGO_C_PLAN,
                  'ITER_MAXI_DEBORST' : Nmaxdb,
                  'TYPE_MATR_TANG' : TANG_SEC,
                  })
                  
comp_incr.append({'GROUP_MA' : ('F2_QUAD'),
                  'RELATION' : LOI_COMPORTEMENT,
                  'ALGO_C_PLAN' : ALGO_C_PLAN,
                  'ITER_MAXI_DEBORST' : Nmaxdb,
                  'TYPE_MATR_TANG' : TANG_SEC,
                  })

RIGI_ELE = CALC_MATR_ELEM( MODELE= MO,
                           OPTION= 'RIGI_MECA',
                           CARA_ELEM=CAEL,
                           CHAM_MATER=MATER,
                           CHARGE=CHAR0 );
MASS_ELE = CALC_MATR_ELEM( MODELE=MO,
                           OPTION='MASS_MECA',
                           CARA_ELEM=CAEL,
                           CHAM_MATER=MATER,
                           CHARGE=CHAR0);
NUM_DDL = NUME_DDL( MATR_RIGI=RIGI_ELE,
                     METHODE='LDLT',
                     RENUM='SANS');

MASSE    = ASSE_MATRICE( MATR_ELEM=MASS_ELE,
                         NUME_DDL=NUM_DDL );

#----- POIDS PROPRE

DEPSZ = CALC_CHAR_SEISME ( MATR_MASS=MASSE,
                          MONO_APPUI='OUI',
                          DIRECTION=(0.,0,1.),);

# on transforme le cham_no_depl_r et char_meca                  
POIDS=AFFE_CHAR_MECA ( MODELE =MO,
                      VECT_ASSE =DEPSZ);

# il y a deja un moins dans calc_char_seisme !!!
GG=DEFI_CONSTANTE(VALE=9.81)
L0=DEFI_LIST_REEL(VALE=(-1.,0.))

DEPL = AFFE_CHAR_MECA(MODELE=MO,
                     DDL_IMPO = (_F(NOEUD= NOEUD_PILOTE,
                                      DX=0.01,),
                                     ),
                     );   

LINST=DEFI_LIST_REEL(DEBUT=0.0,
                      INTERVALLE=(_F(JUSQU_A=Tmax,
                                     PAS= Pas ,),
                           ))

RAMPE = DEFI_FONCTION(
       NOM_PARA = 'INST',
       VALE     = (0,0,1,1),
       PROL_DROITE = 'CONSTANT',
       ) 

DYNA = STAT_NON_LINE (
                      MODELE=MO,
                      CHAM_MATER=MATER,
                      CARA_ELEM=CAEL,
                  
                      NEWTON=_F(MATRICE='TANGENTE',
                                REAC_ITER = 1,
                                REAC_INCR = 1,
                                ),
                      EXCIT=(_F(CHARGE=CHAR0,),
                             _F(CHARGE=DEPL,FONC_MULT=RAMPE,),
                             _F(CHARGE = POIDS, FONC_MULT = GG),
                           ),
                      COMP_INCR=comp_incr,
                      INCREMENT=_F(LIST_INST=LINST,
                                   PRECISION = 1.E-2,
                                   SUBD_PAS=SUBD_PAS ,
                                   SUBD_PAS_MINI=1.E-5 ,
                                   SUBD_METHODE='UNIFORME',
                                   ),
                      CONVERGENCE=_F(
                                     RESI_GLOB_RELA=RESI_GLOB_RELA,
                                     ITER_GLOB_MAXI=Nmax,
                                     ITER_GLOB_ELAS=Nmax,
                                     ),
                  );

GROUPES =  MURS
GROUPES =  MURS + gr_armature

DYNA = CALC_NO(reuse = DYNA,
    MODELE     = MO,
    CHAM_MATER = MATER,
    CARA_ELEM  = CAEL,
    RESULTAT   =  DYNA,
    OPTION     = ('FORC_NODA','REAC_NODA',),
    GROUP_MA   = GROUPES,
    ) 


TEST_RESU(RESU=(
                 _F(RESULTAT=DYNA,
                   INST = 0.03,
                   NOM_CHAM='DEPL',
                   NOM_CMP='DX',
                   NOEUD ='N283',
                   VALE= 2.5652E-04,
                   PRECISION = 1E-4,
                   REFERENCE='NON_REGRESSION',),
                   
                 _F(RESULTAT=DYNA,
                   INST = 0.03,
                   NOM_CHAM='FORC_NODA',
                   NOM_CMP='DX',
                   NOEUD ='N332',
                   VALE= 1.18879E+05,
                   PRECISION = 1E-4,
                   REFERENCE='NON_REGRESSION',),
                   
                 _F(RESULTAT=DYNA,
                   INST = Tmax,
                   NOM_CHAM='DEPL',
                   NOM_CMP='DX',
                   NOEUD ='N311',
                   VALE= 1.35E-03,
                   PRECISION = (5E-2,1E-6),
                   REFERENCE='NON_REGRESSION',),
                   
                 _F(RESULTAT=DYNA,
                   INST = Tmax,
                   NOM_CHAM='FORC_NODA',
                   NOM_CMP='DX',
                   NOEUD ='N332',
                   VALE= 1.74E+05,
                   PRECISION = (5E-2,1E-6),
                   REFERENCE='NON_REGRESSION',),               
                )
          )

FIN()

