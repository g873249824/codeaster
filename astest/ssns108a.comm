# MODIF  DATE 10/10/2012   AUTEUR COURTOIS M.COURTOIS 
# TITRE SIMULATION DE L'ESSAI SAFE
# ssns108a.para = tps_job 270 mem_job 512Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

DEBUT(CODE=_F(NOM='SSNS108A',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'))

#-----------------------------------------------------------------------
#              OPTION DE CALCULS
#-----------------------------------------------------------------------

LOI_COMPORTEMENT = 'ENDO_ISOT_BETON'
CALCUL = 'STATIQUE'
RESOLUTION = 'TANGENTE'
TANG_SEC = 'TANGENTE_SECANTE'

Nmax = 30;
Nmaxdb = 40
RESI_GLOB_RELA = 1E-7
Pas = 1.5E-3

Tmax = 0.0495
ResiDB=1.E-4


#-----------------------------------------------------------------------
#              MAILLAGE
#-----------------------------------------------------------------------

MA = LIRE_MAILLAGE();#FORMAT='MED',);

MURS = []
MURS.append('F1_QUAD')
MURS.append('F2_QUAD')
MURS.append('MUR_QUAD')

MURS1 = MURS

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_MA = (_F(NOM = 'MURS1',    UNION = MURS1)),
                )

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                 CREA_GROUP_NO = (  _F(NOM = 'TETENO', GROUP_MA = 'MURS1',),
                                  ),
               );

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_MA = (_F(NOM = 'MURS',    UNION = MURS)),
               )

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = (  _F(NOM = 'TETENO_T'    , GROUP_MA = 'MURS',),
                ),
              );

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = (_F(NOM = 'PLAN',
                OPTION = 'PLAN',
                POINT = (0., 0., 1.2),
                VECT_NORMALE = (0., 0., 1.),
                PRECISION = 1E-3),
               _F(NOM = 'GM_HAUT',
                  INTERSEC = ('TETENO', 'PLAN')),
                  ),
                )

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = ( _F(NOM = 'GM_LONG',
                INTERSEC = ('TETENO', 'PLAN')),
               ),
           )

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = (_F(NOM = 'PLAN1',
                OPTION = 'PLAN',
                POINT = (0., 0., 0),
                VECT_NORMALE = (0., 0., 1.),
                PRECISION = 1E-3),
               _F(NOM = 'GM_BAS',
                  INTERSEC = ('TETENO_T', 'PLAN1')),
                 ),
               )

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_NO = (_F(NOM = 'PLAN2',
                OPTION = 'PLAN',
                POINT = (0., 0., 1.2),
                VECT_NORMALE = (0., 0., 1.),
                PRECISION = 1E-3),
               _F(NOM = 'HAUT_TOU',
                  INTERSEC = ('TETENO_T', 'PLAN2')),
                  ),
               )

NOEUD_PILOTE = 'N325'

#-----------------------------------------------------------------------
#              AFFE_MODELE
#-----------------------------------------------------------------------

modele_aff = []

#gr_armature = []
gr_armature =  ['F1_H1','F1_H2','F2_H1','F2_H2','F1_V1','F1_V2','F2_V1','F2_V2']
gr_armature += ['M_H1','M_H2','M_V1','M_V2']

modele_aff.append({'GROUP_MA':gr_armature,
                   'PHENOMENE': 'MECANIQUE',
                   'MODELISATION' :'GRILLE_MEMBRANE'})

modele_aff.append({'GROUP_MA':  MURS,
                   'PHENOMENE': 'MECANIQUE',
                   'MODELISATION': 'DKT'})

MO=AFFE_MODELE(MAILLAGE=MA,
               INFO=1,
               VERIF='MAILLE',
               AFFE=modele_aff,
                ) ;

#-----------------------------------------------------------------------
#              DEFINITION DES MATERIAUX
#-----------------------------------------------------------------------

#----- beton -----

RHOBET= 2500.
E     = DEFI_CONSTANTE(VALE = 32308.e6)
NU    = DEFI_CONSTANTE(VALE = 0.2)

BETON = DEFI_MATERIAU(ELAS_FO = _F(E   = E,
                                   NU       = NU,
                                   RHO      = RHOBET,
                                   B_ENDOGE = 1.5E-5,
                                 ),
                        BETON_ECRO_LINE = _F(SYT         = 3.415e6,
                                             D_SIGM_EPSI = -7000.e6,
                                             SYC         = 25.E6,
                                             ),
                        );

#----- acier du liner -----

RHOACI=7800.

ACIER1 = DEFI_MATERIAU ( ELAS =_F( E   = 2.0E11 ,
                                   NU  = 0.3 ,
                                   RHO = RHOACI ,
                                  ),
                         ECRO_LINE =_F(D_SIGM_EPSI=300.0E6,
                                       SY=570.0E6,),) ;

#-----------------------------------------------------------------------
#              AFFECTATION DES MATERIAUX AUX ELEMENTS
#-----------------------------------------------------------------------

aff_mater=[]
aff_mater.append({'GROUP_MA': ('MUR_QUAD') , 'MATER':BETON})
aff_mater.append({'GROUP_MA': ('F1_QUAD') , 'MATER':BETON})
aff_mater.append({'GROUP_MA': ('F2_QUAD') , 'MATER':BETON})
aff_mater.append({'GROUP_MA':gr_armature, 'MATER':ACIER1})

MATER = AFFE_MATERIAU (MAILLAGE = MA ,
                       AFFE = aff_mater,
                       );

#-----------------------------------------------------------------------
#              DEFINITION DES CARACTERISTIQUES DES ELEMENTS
#-----------------------------------------------------------------------

liste_carac_grille = []

EXT = 0.1
for gr in ['M_H1','M_H2']:

    liste_carac_grille.append({'GROUP_MA' : gr,
                               'SECTION'    : 8e-4,
                               'EXCENTREMENT' : EXT,
                               'ANGL_REP'  : (0,0)})
    EXT = -1.0*EXT


EXT = 0.1

for gr in ['M_V1','M_V2']:
    liste_carac_grille.append({'GROUP_MA' : gr,
                               'SECTION'    : 8e-4,
                               'EXCENTREMENT' : EXT,
                               'ANGL_REP'  : (0,90)})
    EXT = -1.0*EXT


EXT = 0.08

for gr in ['F1_H1','F1_H2', 'F2_H1','F2_H2']:
    liste_carac_grille.append({'GROUP_MA' : gr,
                               'SECTION'    : 8e-4,
                               'EXCENTREMENT' : EXT,
                               'ANGL_REP'  : (90,0)})
    EXT = -1.0*EXT

EXT = 0.08
for gr in ['F1_V1','F1_V2', 'F2_V1','F2_V2']:
    liste_carac_grille.append({'GROUP_MA' : gr,
                               'SECTION'    : 8e-4,
                               'EXCENTREMENT' : EXT,
                               'ANGL_REP'  : (90,90)})
    EXT = -1.0*EXT

discret = None
coque = []
coque.append({'EPAIS' : 0.20,
              'GROUP_MA':'MUR_QUAD',
              'COQUE_NCOU' : 11,
              'ANGL_REP': (0.0,0.0,),
            })

coque.append({'EPAIS' : 0.16,
              'GROUP_MA':('F1_QUAD','F2_QUAD'),
              'COQUE_NCOU' : 11,
              'ANGL_REP': (90,0.0,),
            })

CAEL = AFFE_CARA_ELEM(MODELE = MO,
                      COQUE = coque,
                      GRILLE = liste_carac_grille,
                      DISCRET = discret,
                      );

#-----------------------------------------------------------------------
#              DEFINITION DES CL ET DES CHARGEMENTS
#-----------------------------------------------------------------------

#----- CL -----

CHAR0 = AFFE_CHAR_MECA(MODELE = MO,
                       DDL_IMPO = (_F(GROUP_NO = 'GM_BAS',
                                      DX = 0.0,
                                      DY = 0.0,
                                      DZ = 0.0,
                                      DRX=0,DRY=0,DRZ=0,),
                                   _F(GROUP_NO = 'HAUT_TOU',
                                      DY = 0,DRX=0,DRY=0,DRZ=0,),
                                  ),
                       LIAISON_UNIF = _F(GROUP_NO = 'HAUT_TOU',
                                         DDL = ('DZ','DX')),
                                        );
#----- Chargements -----
#----- Cacul de la matrice de masse -----

RIGI_ELE = CALC_MATR_ELEM( MODELE= MO,
                           OPTION= 'RIGI_MECA',
                           CARA_ELEM=CAEL,
                           CHAM_MATER=MATER,
                           CHARGE=CHAR0 );

MASS_ELE = CALC_MATR_ELEM( MODELE=MO,
                           OPTION='MASS_MECA',
                           CARA_ELEM=CAEL,
                           CHAM_MATER=MATER,
                           CHARGE=CHAR0);

NUM_DDL = NUME_DDL( MATR_RIGI=RIGI_ELE,
                     METHODE='LDLT',
                     RENUM='SANS');

MASSE = ASSE_MATRICE( MATR_ELEM=MASS_ELE,
                         NUME_DDL=NUM_DDL );

#----- Poids propre -----

DEPSZ = CALC_CHAR_SEISME ( MATR_MASS=MASSE,
                          MONO_APPUI='OUI',
                          DIRECTION=(0.,0,1.),);

# on transforme le cham_no_depl_r en char_meca

POIDS = AFFE_CHAR_MECA ( MODELE =MO,
                         VECT_ASSE =DEPSZ);

# il y a deja un moins dans calc_char_seisme !!!

GG = DEFI_CONSTANTE( VALE=9.81);
L0 = DEFI_LIST_REEL( VALE=(-1.,0.));

#----- Deplacement impose -----

DEPL = AFFE_CHAR_MECA(MODELE=MO,
                      DDL_IMPO = (_F(NOEUD= NOEUD_PILOTE,
                                      DX=0.01,),
                                  ),
                      );

LINST = DEFI_LIST_REEL(DEBUT=0.0,
                       INTERVALLE=(_F(JUSQU_A=Tmax,
                                      PAS= Pas ,),
                           ),);

RAMPE = DEFI_FONCTION(
       NOM_PARA = 'INST',
       VALE     = (0,0,1,1),
       PROL_DROITE = 'CONSTANT',
       );

#-----------------------------------------------------------------------
#  DEFINITION DES METHODES DE RESOLUTION DES LOIS DE COMPORTEMENT
#-----------------------------------------------------------------------

comp_incr=[]

comp_incr.append({'GROUP_MA' : gr_armature,
                  'RELATION' : 'GRILLE_ISOT_LINE'})

comp_incr.append({'GROUP_MA' : ('MUR_QUAD'),
                  'RELATION' : LOI_COMPORTEMENT,
                  'RESI_CPLAN_MAXI' : ResiDB,
                  'ITER_CPLAN_MAXI' : Nmaxdb,
                  'TYPE_MATR_TANG' : TANG_SEC,
                })

comp_incr.append({'GROUP_MA' : ('F1_QUAD'),
                  'RELATION' : LOI_COMPORTEMENT,
                  'ITER_CPLAN_MAXI' : Nmaxdb,
                  'RESI_CPLAN_MAXI' : ResiDB,
                  'TYPE_MATR_TANG' : TANG_SEC,
                  })

comp_incr.append({'GROUP_MA' : ('F2_QUAD'),
                  'RELATION' : LOI_COMPORTEMENT,
                  'ITER_CPLAN_MAXI' : Nmaxdb,
                  'RESI_CPLAN_MAXI' : ResiDB,
                  'TYPE_MATR_TANG' : TANG_SEC,
                  })

#-----------------------------------------------------------------------
#              CALCUL NON LINEAIRE
#-----------------------------------------------------------------------

RESU = STAT_NON_LINE (
                      MODELE=MO,
                      CHAM_MATER=MATER,
                      CARA_ELEM=CAEL,

                      NEWTON=_F(MATRICE='TANGENTE',
                                REAC_ITER = 1,
                                REAC_INCR = 1,
                                ),
                      EXCIT=(_F(CHARGE=CHAR0,),
                             _F(CHARGE=DEPL,FONC_MULT=RAMPE,),
                             _F(CHARGE = POIDS, FONC_MULT = GG),
                           ),
                      COMP_INCR=comp_incr,
                      INCREMENT=_F(LIST_INST=LINST,
                                   PRECISION = 1.E-2,
                                   ),
                      CONVERGENCE=_F(
                                     RESI_GLOB_RELA=RESI_GLOB_RELA,
                                     ITER_GLOB_MAXI=Nmax,
                                     ITER_GLOB_ELAS=Nmax,
                                     ),
                  );

#-----------------------------------------------------------------------
#              POST TRATEMENT
#-----------------------------------------------------------------------

GROUPES =  MURS + gr_armature

RESU=CALC_CHAMP(reuse =RESU,RESULTAT=RESU,GROUP_MA=GROUPES,
             FORCE=('FORC_NODA','REAC_NODA',),);
             

IMPR_RESU(FORMAT='MED',
          RESU=_F(MAILLAGE=MA,
                  RESULTAT=RESU,
                  NOM_CHAM=('DEPL',),),);


TAB_REAC=POST_RELEVE_T(ACTION=_F(INTITULE='FORCE',
                                 GROUP_NO='GM_HAUT',#HAUT_TOU',
                                 RESULTAT=RESU,
                                 NOM_CHAM='REAC_NODA',
                                 LIST_INST=LINST,
                                 RESULTANTE='DX',
                                 OPERATION = 'EXTRACTION'),);

TEST_TABLE(REFERENCE='SOURCE_EXTERNE',
           PRECISION=0.59999999999999998,
           VALE_CALC= 1.64144456E+06,
           VALE_REFE=1.079760E6,
           NOM_PARA='DX',
           TABLE=TAB_REAC,
           FILTRE=_F(NOM_PARA='INST',
                     VALE=0.029999999999999999,),
           )

TEST_TABLE(REFERENCE='SOURCE_EXTERNE',
           PRECISION=0.11,
           VALE_CALC= 1.46471710E+06,
           VALE_REFE=1.329210E6,
           NOM_PARA='DX',
           TABLE=TAB_REAC,
           FILTRE=_F(NOM_PARA='INST',
                     VALE=0.049500000000000002,),
           )

TEST_RESU(RESU=(_F(INST=0.029999999999999999,
                   RESULTAT=RESU,
                   NOM_CHAM='DEPL',
                   NOEUD='N283',
                   NOM_CMP='DX',
                   VALE_CALC=2.5651999999999999E-4,
                   TOLE_MACHINE=1.E-4,
                   ),
                _F(INST=0.029999999999999999,
                   RESULTAT=RESU,
                   NOM_CHAM='FORC_NODA',
                   NOEUD='N332',
                   NOM_CMP='DX',
                   VALE_CALC=1.18879E5,
                   TOLE_MACHINE=1.E-4,
                   ),
                _F(INST=0.049500000000000002,
                   RESULTAT=RESU,
                   NOM_CHAM='DEPL',
                   NOEUD='N311',
                   NOM_CMP='DX',
                   VALE_CALC=4.5412099999999998E-4,
                   TOLE_MACHINE=1.E-4,
                   ),
                _F(INST=0.049500000000000002,
                   RESULTAT=RESU,
                   NOM_CHAM='FORC_NODA',
                   NOEUD='N332',
                   NOM_CMP='DX',
                   VALE_CALC=1.3695795000000001E5,
                   TOLE_MACHINE=1.E-4,
                   ),
                ),
          )

FIN()
