# TITRE PROPAGATION DE FISSURE DEBOUCHANTE DANS UNE PLAQUE 3D DE LARGEUR FINIE AVEC X-FEM
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# person_in_charge: daniele.colombo at ifpen.fr

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),DEBUG=_F(SDVERI='OUI'),
      IGNORE_ALARM='XFEM2_18',)

#----------------------------------------------
#                 MAILLAGE
#----------------------------------------------
E=205000.0E6
nu=0.3
rho=7800.
#
# Pour Sc, on choisit 2 MPa
# On prend une longueur cohesive de 1
#
Gc = 17.75
Sc = 2.E6
#
pena_lagr = 10.
da_max = 8.
c_mult_pilo = 1.
nb_pts = 2
#
nbcalc = 2
#-----------------------------------------
# SEQUENCE D INSTANTS MAITRE
#-----------------------------------------
#
L_INS1=[0., 1., 2.]
PRE_GMSH();
MAILLAG1=LIRE_MAILLAGE(INFO=1,);
#
MAILLAG1=DEFI_GROUP(reuse =MAILLAG1,
                    MAILLAGE=MAILLAG1,
                    CREA_GROUP_MA=(_F(NOM='P4',GROUP_MA='GM157'),
                                   _F(NOM='ORIG',GROUP_MA='GM163'),
                                   _F(NOM='LIG1',GROUP_MA='GM158'),
                                   _F(NOM='FONDINI',GROUP_MA='GM162'),
                                   _F(NOM='SURFINF',GROUP_MA='GM159'),
                                   _F(NOM='SURFSUP',GROUP_MA='GM160'),
                                   _F(NOM='LEVINF',GROUP_MA='GM164'),
                                   _F(NOM='LEVSUP',GROUP_MA='GM165'),
                                   _F(NOM='VOL',GROUP_MA='GM161'),),
                    );
MAILLAG1=DEFI_GROUP(reuse =MAILLAG1,
                    MAILLAGE=MAILLAG1,
                    CREA_GROUP_NO=_F(GROUP_MA=('VOL','SURFINF','LIG1','P4','ORIG'),),
                    );

#
#----------------------------------------------
#                   MODELE
#----------------------------------------------


MODELE=AFFE_MODELE(MAILLAGE=MAILLAG1,
                      AFFE=(_F(GROUP_MA=('VOL',),
                               PHENOMENE='MECANIQUE',
                               MODELISATION='3D',),
                            _F(GROUP_MA=('SURFINF','SURFSUP',),
                               PHENOMENE='MECANIQUE',
                               MODELISATION='3D',),),);

MAILLAG1=MODI_MAILLAGE(reuse =MAILLAG1,
                       MAILLAGE=MAILLAG1,
                       ORIE_PEAU_3D=_F(GROUP_MA=('SURFSUP','SURFINF',),),
                       );

#----------------------------------------------
#                   MATERIAU
#----------------------------------------------
# materiau: on ajoute la partie RUPT_FRAG
ACIER=DEFI_MATERIAU(ELAS=_F(E=E,NU=nu,RHO=rho,),
                    RUPT_FRAG=_F(GC=Gc,SIGM_C=Sc,PENA_LAGR=pena_lagr,),);

CHAMPMA=AFFE_MATERIAU(MAILLAGE=MAILLAG1,
                      MODELE=MODELE,
                      AFFE=_F(TOUT = 'OUI',
                               MATER=ACIER,
                               ),
                            );

# modif

# --------------------------------------------
# FISSURE INITIALE
# --------------------------------------------

# ON FAIT UN DEFI_FOND_FISS POUR ANGLE INITIAL

FONDFI = DEFI_FOND_FISS(MAILLAGE=MAILLAG1,
                        FOND_FISS=_F(GROUP_MA='FONDINI',
                                     GROUP_NO_ORIG='ORIG'),
                        LEVRE_SUP=_F(GROUP_MA='LEVSUP'),
                        LEVRE_INF=_F(GROUP_MA='LEVINF '),);

# ON FAIT UN MECA_STATIQUE
PRES=-1.E6
CHIN =AFFE_CHAR_MECA(MODELE=MODELE,
                     DDL_IMPO=(_F(GROUP_NO='SURFINF',DZ=0.0,),
                               _F(GROUP_MA='LIG1',DX=0.0,),
                               _F(GROUP_NO='P4',DY=0.0,),),
                     PRES_REP=_F(GROUP_MA=('SURFSUP',),PRES=PRES,),);
                     
RESUIN =MECA_STATIQUE(MODELE=MODELE,
                      CHAM_MATER=CHAMPMA,
                      EXCIT=(
                             _F(CHARGE=CHIN,),),
                      INST=1.0,
                      SOLVEUR=_F(METHODE='MULT_FRONT',
                                 NPREC=12,),
                      INFO=1,);

SIF = [None]*(nbcalc+1)

# POST TRAITEMENT POUR CALCUL DE G
RI = 0.1
RS = 1.0
SIF[0]=CALC_G (RESULTAT=RESUIN,
               OPTION='CALC_K_G',
               THETA=_F( FOND_FISS=FONDFI,
                         R_INF=RI,
                         R_SUP=RS,),
               LISSAGE=_F( DEGRE=0,),);
IMPR_TABLE(TABLE=SIF[0],UNITE=6)
# partie fixe
# partie pilotee



#----------------------------------------------
#              FISSURE INITIALE
#----------------------------------------------

# Fissure pour initialisation
FISB=DEFI_FISS_XFEM(MAILLAGE=MAILLAG1,
                    TYPE_DISCONTINUITE='COHESIF',
                    DEFI_FISS=_F(
                             FORM_FISS = 'DEMI_PLAN',
                             PFON      =(0. , 2. , 9.),
                             NORMALE   =(0. , -0.5 , 0.5),
                             DTAN      =(0. , 0.5 , 0.5),
                             GROUP_MA_BORD = 'FONDINI',),
                    );

FISS = [None]*nbcalc
FISS[0] = CO('FISS_0')
# On remplace la definition initiale par une etape de propagation

PROPA_FISS(MODELE=MODELE,
           OPERATION='PROPA_COHESIF',
           METHODE_PROPA='GEOMETRIQUE',
           FISSURE=_F(FISS_ACTUELLE=FISB,
                      FISS_PROPAGEE=FISS[0],
                      TABLE=SIF[0],),
           ZONE_MAJ='TOUT',
           DA_MAX=da_max,
           INFO=2,);

DETRUIRE(CONCEPT=_F(NOM=CHIN),INFO=1);
DETRUIRE(CONCEPT=_F(NOM=FISB),INFO=1);
DETRUIRE(CONCEPT=_F(NOM=RESUIN),INFO=1);
DETRUIRE(CONCEPT=_F(NOM=FONDFI),INFO=1);
#----------------------------------------------
#         PROPAGATION SUR 3 PAS DE TEMPS
#----------------------------------------------
                             
MODELX = [None]*nbcalc
CTX = [None]*nbcalc
RESU = [None]*nbcalc
INST = [None]*nbcalc
GRP = [None]*nbcalc
TRACT = [None]*nbcalc
ENCAS = [None]*nbcalc
# on ajoute une table pour les fissures propagees
FISP = [None]*nbcalc
COHE = [None]*nbcalc

# la premiere liste d instants est definie a la main
# plus besoin des rayons de calcul de G

for i in range(nbcalc) :
#
#  on definit du contact
   MODELX[i]=MODI_MODELE_XFEM(MODELE_IN=MODELE,
                              FISSURE=FISS[i],
                              CONTACT='MORTAR',
                              DECOUPE_FACETTE='SOUS_ELEMENTS',
                              INFO=1,);
   TRACT[i]=AFFE_CHAR_MECA(MODELE=MODELX[i],
                           PRES_REP=_F(GROUP_MA=('SURFSUP',),PRES=PRES,),);
   ENCAS[i] =AFFE_CHAR_MECA(MODELE=MODELX[i],
                            DDL_IMPO=(_F(GROUP_NO='SURFINF',DZ=0.0,),
                                      _F(GROUP_MA='LIG1',DX=0.0,),
                                      _F(GROUP_NO='P4',DY=0.0,),),);
#
#  charge de contact dependant du modele
   CTX[i] = DEFI_CONTACT(MODELE         = MODELX[i],
                         FORMULATION    = 'XFEM',
                         FROTTEMENT     = 'SANS',ELIM_ARETE='ELIM',
                         ZONE=(_F(INTEGRATION='GAUSS',
                                  ORDRE_INT=4,
                                  ALGO_CONT='CZM',
                                  FISS_MAIT=FISS[i],
                                  ALGO_LAGR='VERSION2',
                                  RELATION='CZM_LIN_MIX',
                         )));
#
#  groupe de mailles pour le pilotage
   GRP[i] = 'GRP_%d'%i
   MAILLAG1=DEFI_GROUP(reuse=MAILLAG1,
                       MAILLAGE=MAILLAG1,
                       CREA_GROUP_MA=_F(FISSURE=FISS[i],
                                        NOM=GRP[i],
                                        OPTION='FISS_XFEM',
                                        TYPE_GROUP='HEAVISIDE',
                                        TYPE_MAILLE='3D'));  
#
#  on remplace MECA_STATIQUE par STAT_NON_LINE
#  si premier instant, pas d etat initial a gerer
   if(i==0) :
       #
       #  LISTE D INSTANTS
       step = L_INS1[i]+1.E-4
       step2 = L_INS1[i]+0.1
       step3 = L_INS1[i]+0.5
       INST[i] = DEFI_LIST_REEL(VALE=(L_INS1[i], step, step2, step3, L_INS1[i+1]),);
       #
       RESU[i]=STAT_NON_LINE(MODELE=MODELX[i],
                             CHAM_MATER=CHAMPMA,
                             EXCIT=(_F(CHARGE=ENCAS[i],),
                                    _F(CHARGE=TRACT[i],
                                       TYPE_CHARGE='FIXE_PILO',
                                       ),
                                    ),
                             CONTACT=CTX[i],
                             COMPORTEMENT = _F(RELATION = 'ELAS' , GROUP_MA = 'VOL',),
                             INCREMENT = _F(LIST_INST = INST[i],),
                             PILOTAGE  = _F(TYPE = 'PRED_ELAS',
                                            SELECTION='RESIDU',
                                            GROUP_MA = GRP[i],
                                            COEF_MULT = c_mult_pilo,
                                            ETA_PILO_R_MIN=0.0,
                                            ),
                             NEWTON  = _F(REAC_ITER = 1),
                             CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-6,
                                              ITER_GLOB_MAXI = 15),
                             SOLVEUR    = _F(METHODE = 'MUMPS',
                                             NPREC=-1,
                                             ),
                             ARCHIVAGE = _F(CHAM_EXCLU=('VARI_ELGA',),INST=L_INS1[i+1]),
                             INFO=1,);
#  si instants suivants, etat initial a donner
   if(i!=0) :
       #
       #  LISTE D INSTANTS
       step = L_INS1[i]+1.E-4
       step2 = L_INS1[i]+0.1
       step3 = L_INS1[i]+0.5
       step4 = L_INS1[i]+0.8
       INST[i] = DEFI_LIST_REEL(VALE=(L_INS1[i], step, step2, step3, step4, L_INS1[i+1]),);
       #
       RESU[i]=STAT_NON_LINE(ETAT_INIT=_F(COHE=COHE[i-1]),
                             MODELE=MODELX[i],
                             CHAM_MATER=CHAMPMA,
                             EXCIT=(_F(CHARGE=ENCAS[i],),
                                    _F(CHARGE=TRACT[i],
                                       TYPE_CHARGE='FIXE_PILO',
                                       ),
                                    ),
                             CONTACT=CTX[i],
                             COMPORTEMENT = _F(RELATION = 'ELAS' , GROUP_MA = 'VOL',),
                             INCREMENT = _F(LIST_INST = INST[i],),
                             PILOTAGE  = _F(TYPE = 'PRED_ELAS',
                                            SELECTION='RESIDU',
                                            GROUP_MA = GRP[i],
                                            COEF_MULT = c_mult_pilo,
                                            ETA_PILO_R_MIN=0.0,
                                            ),
                             NEWTON  = _F(REAC_ITER = 1),
                             CONVERGENCE = _F(RESI_GLOB_RELA = 5.E-5,
                                              ITER_GLOB_MAXI = 15),
                             SOLVEUR    = _F(METHODE = 'MUMPS',
                                             NPREC=-1,
                                             ),
                             ARCHIVAGE = _F(CHAM_EXCLU=('VARI_ELGA',),
                                            INST=L_INS1[i+1]),
                             INFO=1,);
#
   COHE[i]= CREA_CHAMP (OPERATION= 'EXTR' ,
                        TYPE_CHAM='ELNO_NEUT_R',
                        RESULTAT= RESU[i], 
                        NOM_CHAM= 'COHE_ELEM',
                        INST = L_INS1[i+1]);
#   on insere une etape de detection
   FISP[i] = CO('FISP_%d'%i)
   if(i==0):
       PROPA_FISS(MODELE=MODELX[i],
                  METHODE_PROPA='GEOMETRIQUE',
                  OPERATION = 'DETECT_COHESIF',
                  RESULTAT=RESU[i],
                  ZONE_MAJ='TOUT',
                  FISSURE=_F(FISS_ACTUELLE=FISS[i],
                             FISS_PROPAGEE=FISP[i],
                             NB_POINT_FOND=3,
                             TABLE=SIF[i],),
                  INFO=1,);
   if(i!=0):
       PROPA_FISS(MODELE=MODELX[i],
                  METHODE_PROPA='GEOMETRIQUE',
                  OPERATION = 'DETECT_COHESIF',
                  RESULTAT=RESU[i],
                  ZONE_MAJ='TOUT',
                  FISSURE=_F(FISS_ACTUELLE=FISS[i],
                             FISS_PROPAGEE=FISP[i],
                             NB_POINT_FOND=nb_pts,
                             TABLE=SIF[i],),
                  INFO=1,);
#  LISSAGE, auparavant degre 0
   SIF[i+1]=CALC_G(RESULTAT=RESU[i],
                   OPTION='CALC_K_G',
                   INST=L_INS1[i+1],
                   THETA=_F(FISSURE=FISP[i],NUME_FOND=1,NB_POINT_FOND=nb_pts,),
                   LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                              LISSAGE_G='LAGRANGE',),);

   IMPR_TABLE(TABLE=SIF[i+1],UNITE=6,);

   if ( i != (nbcalc-1) ) :
      FISS[i+1] = CO('FISS_%d'%(i+1))
#     on remplace le PROPA_FISS, methode GEOMETRIQUE
#     par un PROPA_FISS, methode COHESIVE
#     cette fois on a besoin de la table
      PROPA_FISS(MODELE=MODELX[i],
                 OPERATION='PROPA_COHESIF',
                 METHODE_PROPA='GEOMETRIQUE',
                 FISSURE=_F(FISS_ACTUELLE=FISP[i],
                            FISS_PROPAGEE=FISS[i+1],
                            NB_POINT_FOND=nb_pts,
                            TABLE=SIF[i+1],),
                 ZONE_MAJ='TOUT',
                 DA_MAX=da_max,
                 INFO=1,);
#
#     on extrait la table du fond de fissure
TB_FRONT=RECU_TABLE(CO=FISP[nbcalc-1],NOM_TABLE='FOND_FISS');
#
IMPR_TABLE(TABLE=TB_FRONT,UNITE=6,);
#----------------------------------------------
#         POST TRAITEMENT
#----------------------------------------------
# i=nbcalc-1

# *********************************************
# VERIFICATION DE LA POSITION DU FOND DE FISSURE
# *********************************************

# LES COORDONNES DU FOND DE FISSURE ONT ETE CALCULEES
# PAR LA METHODE PAR PROJECTION (SSLV314B):

# A VOIR LES POSITIONS DES LSN ET LST

# ON PEUT DONC CALCULER LA VALEUR DES LEVEL SETS POUR CES NOEUDS:

# pour l instant post traitement commente
# TABLSN= POST_RELEVE_T(ACTION=_F(INTITULE='Test LSN',
#                                 NOEUD=('N1130','N1028','N926',),                                
#                                 CHAM_GD=LSN[i],
#                                 TOUT_CMP='OUI',
#                                 OPERATION='EXTRACTION',),);
# 
# TABLST= POST_RELEVE_T(ACTION=_F(INTITULE='Test LST',
#                                 NOEUD=('N1130','N1028','N926',),
#                                 CHAM_GD=LST[i],
#                                 TOUT_CMP='OUI',
#                                 OPERATION='EXTRACTION',),);
# 
# IMPR_TABLE(TABLE=TABLSN,);
# IMPR_TABLE(TABLE=TABLST,);
# fin commentaire

# ON PEUT ENFIN VERIFIER QUE LE FOND DE FISSURE CALCULE PAR PROPA_FISS
# EST DANS L'ELEMENT EN VERIFIENT QUE LA VALEUR DES LEVEL SETS EST
# INFERIEURE A LA DISTANCE MAXIMALE ENTRE LES QUATRE NOEUDS (EGAL A 1/3)

# pour l instant post-traitement commente
DISTMAX=1./3.

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='NON_DEFINI',
           VALE_CALC=3.090765691,
           VALE_REFE=3.090765691,
           PRECISION=2.E-2,
           NOM_PARA='COOR_Y',
           TYPE_TEST='MAX',
           TABLE=TB_FRONT,
           )

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='NON_DEFINI',
           VALE_CALC=3.09075510002,
           VALE_REFE=3.09075510002,
           PRECISION=2.E-2,
           NOM_PARA='COOR_Y',
           TYPE_TEST='MIN',
           TABLE=TB_FRONT,
           )

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='NON_DEFINI',
           VALE_CALC=9.11518719782,
           VALE_REFE=9.11518719782,
           PRECISION=2.E-2,
           NOM_PARA='COOR_Z',
           TYPE_TEST='MAX',
           TABLE=TB_FRONT,
           )

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='NON_DEFINI',
           VALE_CALC=9.11513426391,
           VALE_REFE=9.11513426391,
           PRECISION=2.E-2,
           NOM_PARA='COOR_Z',
           TYPE_TEST='MIN',
           TABLE=TB_FRONT,
           )
# fin commentaire

FIN();
