# -*- coding: utf-8 -*-
# TITRE VALIDATION DE L'ÉLÉMENT CABLE_GAINE
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#-----------------------------------------------------------------------
#
DEBUT(CODE=_F(NOM = 'ZZZZ347C',NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'),PAR_LOT='NON')

import numpy
#

MAILLAGE=LIRE_MAILLAGE(FORMAT='MED',UNITE=20,)

#
MAILLAGE=DEFI_GROUP(reuse=MAILLAGE,
                 MAILLAGE=MAILLAGE,
                 CREA_GROUP_NO=_F(GROUP_MA=('BETON','CABLE')))

MODELE=AFFE_MODELE(
                 MAILLAGE=MAILLAGE,AFFE=(
                     _F(  GROUP_MA = 'BETON',
                            PHENOMENE = 'MECANIQUE',
                            MODELISATION = '3D'),
                     _F(  GROUP_MA = 'CABLE',
                            PHENOMENE = 'MECANIQUE',
                            MODELISATION = 'CABLE_GAINE')) )

#

CARAELEM=AFFE_CARA_ELEM(
                      MODELE=MODELE,
                       BARRE=_F(  GROUP_MA = 'CABLE',
                               SECTION = 'GENERALE',
                               CARA = ( 'A', ),
                               VALE = ( 2.5E-3, )) )

#

BETON=DEFI_MATERIAU(
                       ELAS=_F(  E = 4.5E+10,
                              NU = 0.),
                 BPEL_BETON=_F() )

#

ACIER=DEFI_MATERIAU(
                       ELAS=_F(  E = 1.85E+11,
                              NU = 0.),
                       CABLE_GAINE_FROT=_F(TYPE='GLISSANT',PENA_LAGR=1.),
                 BPEL_ACIER=_F(  F_PRG = 1.77E+9,
                              FROT_COURB = 0.,
                              FROT_LINE = 0.) )

#

CHMATER=AFFE_MATERIAU(
                   MAILLAGE=MAILLAGE,AFFE=(
                       _F(  GROUP_MA = 'BETON',
                              MATER = BETON),
                       _F(  GROUP_MA = 'CABLE',
                              MATER = ACIER)) )

#

CABLEPR=DEFI_CABLE_BP(            MODELE=MODELE,
                                  CHAM_MATER=CHMATER,
                                   CARA_ELEM=CARAELEM,
                              GROUP_MA_BETON='BETON',
                              ADHERENT='NON',
                                  DEFI_CABLE=_F(
                               GROUP_MA = 'CABLE',
                               GROUP_NO_ANCRAGE = ( 'ANCR1',  'ANCR2', ),),
                               TYPE_ANCRAGE = ( 'PASSIF',  'ACTIF',  ),
                                TENSION_INIT=1.0E+6,
                               RECUL_ANCRAGE=0. )

#

CHARMECA=AFFE_CHAR_MECA(
                      MODELE=MODELE,
                    DDL_IMPO=(_F(  GROUP_MA = ('BETON','CABLE'),
                               DX = 0.,
                               DY = 0.,
                               DZ = 0.,
                               ),
                              _F(  GROUP_NO = 'ANCR1',
                               GLIS = 0.,
                               ),
                              _F(  GROUP_NO = 'ANCR2',
                               GLIS = 0.1,
                               ),
                             ),
                RELA_CINE_BP=_F(  CABLE_BP = CABLEPR,
                               SIGM_BPEL = 'NON',
                               RELA_CINE = 'NON'),
                        INFO=1 )

#

LINST=DEFI_LIST_REEL(    VALE=( 0.0,  1.0, ) )

EVOLNOLI=STAT_NON_LINE(
                            MODELE=MODELE,
                        CHAM_MATER=CHMATER,
                         CARA_ELEM=CARAELEM,
                             EXCIT=_F(
                                    CHARGE = CHARMECA),
                         COMPORTEMENT=(_F( RELATION = 'KIT_CG',
                                        RELATION_KIT=('ELAS','CABLE_GAINE_FROT'),
                                        DEFORMATION = 'PETIT',
                                        GROUP_MA='CABLE'),
                                    _F( RELATION = 'ELAS',
                                        DEFORMATION = 'PETIT',
                                        GROUP_MA='BETON'),
                                   ),
                         INCREMENT=_F(
                LIST_INST = LINST),
                          NEWTON=_F(REAC_ITER=1),
                           SOLVEUR=_F(
                METHODE = 'MUMPS',
                                      ),
                       CONVERGENCE=_F(
                          ITER_GLOB_MAXI = 5,
                          #ARRET='NON',
                          #RESI_GLOB_RELA = 1.E-10,
                          RESI_REFE_RELA = 1.E-4,
                          FORC_REFE = (1.E5,0),
                          SIGM_REFE = 1.E6,
                          DEPL_REFE = 1.E-1),
                              INFO=1
              )


#IMPR_RESU(
          #RESU=_F(RESULTAT=EVOLNOLI,
                  #NOM_CHAM=('DEPL','SIEF_ELGA'),GROUP_MA = ('BETON'),NUME_ORDRE=1))
EVOLNOLI=CALC_CHAMP(reuse =EVOLNOLI,
                    FORCE=('FORC_NODA','REAC_NODA'),
                    GROUP_MA=('CABLE'),
                    #MAILLE=('M95'),
                    RESULTAT=EVOLNOLI,);

EVOLNOL2=CALC_CHAMP(
                    FORCE=('FORC_NODA','REAC_NODA'),
                    #GROUP_MA=('CABLE'),
                    MAILLE=('M95'),
                    RESULTAT=EVOLNOLI,);

REACDY=POST_RELEVE_T(ACTION=_F(OPERATION='EXTRACTION',
                                INTITULE='REACDY',
                                NOEUD=('N1','N40'),
                                RESULTANTE='DY',
                                NUME_ORDRE=1,
                                RESULTAT=EVOLNOLI,
                                NOM_CHAM='REAC_NODA',),);

IMPR_RESU(
          RESU=_F(RESULTAT=EVOLNOLI,
                  NOM_CHAM=('DEPL',),GROUP_MA = ('CABLE'),NUME_ORDRE=1, NOM_CMP=('DX','DY','DZ','GLIS')))
IMPR_RESU(
          RESU=_F(RESULTAT=EVOLNOLI,
                  NOM_CHAM=('DEPL',),GROUP_MA = ('BETON'),NUME_ORDRE=1, NOM_CMP=('DX','DY','DZ')))

IMPR_RESU(
          RESU=_F(RESULTAT=EVOLNOLI,
                  NOM_CHAM=('SIEF_ELGA'),GROUP_MA = ('CABLE'),NUME_ORDRE=1,NOM_CMP='N'))

IMPR_RESU(
          RESU=_F(RESULTAT=EVOLNOLI,
                  NOM_CHAM=('FORC_NODA'),GROUP_MA = ('CABLE'),NUME_ORDRE=1,))
IMPR_RESU(
          RESU=_F(RESULTAT=EVOLNOL2,
                  NOM_CHAM=('FORC_NODA'),GROUP_MA = ('CABLE'),NUME_ORDRE=1,))

TEST_RESU(RESU=(
                _F(NUME_ORDRE=1,
                   REFERENCE='ANALYTIQUE',
                   POINT=1,
                   RESULTAT=EVOLNOLI,
                   NOM_CHAM='SIEF_ELGA',
                   NOM_CMP='N',
                   VALE_CALC= 2.94436706927087E+06,
                   VALE_REFE=2.9443664E6,
                   CRITERE='RELATIF',
                   PRECISION=1.E-3,
                   MAILLE='M89',),
                ),
          )

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-2,
           VALE_CALC=-5.88870311194e6,
           VALE_REFE=-5.888734e6,
           NOM_PARA='DY',
           TABLE=REACDY,)

tan12=(-0.40451E+01/5,0.29389E+01/5)
tan14=(0.44550E+01/5,-0.22700E+01/5)
CH=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='NOEU_DEPL_R', RESULTAT=EVOLNOL2,
                    NOM_CHAM='FORC_NODA',  INFO=1, NUME_ORDRE=1)

forcX = numpy.sum(numpy.array(CH.EXTR_COMP("DX",[],1).valeurs))
forcY = numpy.sum(numpy.array(CH.EXTR_COMP("DY",[],1).valeurs))

resX=forcX+2.9443664E6*(tan12[0]+tan14[0])
resY=forcY+2.9443664E6*(tan12[1]+tan14[1])

res=numpy.sqrt(resX**2+resY**2)

print 'RESULTANTE'
print forcX,forcY
print resX,resY
print res

TABREAC = CREA_TABLE(
             LISTE=(_F(
                LISTE_R = [0,],
                PARA    = 'INST'
                ),
                _F(
                LISTE_R = [res,],
                PARA    = 'REAC'
                )
              )
            )

TEST_TABLE(CRITERE='RELATIF',
           REFERENCE='ANALYTIQUE',
           PRECISION=1.E-2,
           VALE_CALC=4.619729534846E+05,
           VALE_REFE=462500.,
           NOM_PARA='REAC',
           TABLE=TABREAC,)
FIN()
#
