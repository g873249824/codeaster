# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2019 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
#
# --------------------------------------------------------------------------------------------------
#
#                   DISCRET COMPORTEMENT ECROUISSAGE TRACTION
#
#   Validation du comportement avec DYNA_VIBRA Schéma RK54
#
#
# --------------------------------------------------------------------------------------------------
import numpy as NU

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',))

MAIL=LIRE_MAILLAGE(FORMAT="ASTER",)
#
# Modèle
Modele=AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(
        _F(GROUP_MA=('MASSE','GM0203'), PHENOMENE='MECANIQUE', MODELISATION='DIS_T',),
        _F(MAILLE=('PT01'), PHENOMENE='MECANIQUE', MODELISATION='DIS_T',),
    ),
)

#
ZERO=DEFI_CONSTANTE(VALE=0.0)

def Rampe(t):
    if (t<= 0.0): return 0.0
    if (t<= 5.0): return t/5.0
    if (t<=15.0): return 1.0
    if (t<=20.0): return (20.0-t)/5.0
    return 0.0

def DRampe(t):
    if (t<= 0.0): return  0.0
    if (t<= 5.0): return  1.0/5.0
    if (t<=15.0): return  0.0
    if (t<=20.0): return -1.0/5.0
    return 0.0

def FDeplax(t):
    uu = 0.20; ff = 1.0;  ww = 2.0*NU.pi
    zz = uu*sin(ww*t*ff)*Rampe(t)
    return zz

def FDeplay(t):
    uu = [ 0.20 , 0.15 , 0.10 ]
    ff = [ 0.80 , 1.50 , 3.00 ]
    ww = 2.0*NU.pi
    zz = 0.0
    for u,f in zip(uu,ff):
        zz += u*sin(ww*t*f)*Rampe(t)
    return zz

def FDeplaz(t):
    uu = [ -0.20 , 0.15 , -0.10 ]
    ff = [  0.90 , 2.00 ,  2.80 ]
    ww = 2.0*NU.pi
    zz = 0.0
    for u,f in zip(uu,ff):
        zz += u*sin(ww*t*f)*Rampe(t)
    return zz

def FVitex(t):
    uu = 0.20; ff = 1.0;  ww = 2.0*NU.pi
    zz = uu*ww*ff*cos(ww*t*ff)*Rampe(t) + uu*sin(ww*t*ff)*DRampe(t)
    return zz

def FVitey(t):
    uu = [ 0.20 , 0.15 , 0.10 ]
    ff = [ 0.80 , 1.50 , 3.00 ]
    ww = 2.0*NU.pi
    zz = 0.0
    for u,f in zip(uu,ff):
        zz += u*ww*f*cos(ww*t*f)*Rampe(t) + u*sin(ww*t*f)*DRampe(t)
    return zz

def FVitez(t):
    uu = [ -0.20 , 0.15 , -0.10 ]
    ff = [  0.90 , 2.00 ,  2.80 ]
    ww = 2.0*NU.pi
    zz = 0.0
    for u,f in zip(uu,ff):
        zz += u*ww*f*cos(ww*t*f)*Rampe(t) + u*sin(ww*t*f)*DRampe(t)
    return zz

def FAccex(t):
    uu = 0.20; ff = 1.0;  ww = 2.0*NU.pi
    zz = -uu*ww*ww*ff*ff*sin(ww*t*ff)*Rampe(t) + uu*ww*ff*cos(ww*t*ff)*DRampe(t) + uu*ww*ff*cos(ww*t*ff)*DRampe(t)
    return zz

def FAccey(t):
    uu = [ 0.20 , 0.15 , 0.10 ]
    ff = [ 0.80 , 1.50 , 3.00 ]
    ww = 2.0*NU.pi
    zz = 0.0
    for u,f in zip(uu,ff):
        zz += -u*ww*ww*f*f*sin(ww*t*f)*Rampe(t) + u*ww*f*cos(ww*t*f)*DRampe(t) + u*ww*f*cos(ww*t*f)*DRampe(t)
    return zz

def FAccez(t):
    uu = [ -0.20 , 0.15 , -0.10 ]
    ff = [  0.90 , 2.00 ,  2.80 ]
    ww = 2.0*NU.pi
    zz = 0.0
    for u,f in zip(uu,ff):
        zz += -u*ww*ww*f*f*sin(ww*t*f)*Rampe(t) + u*ww*f*cos(ww*t*f)*DRampe(t) + u*ww*f*cos(ww*t*f)*DRampe(t)
    return zz


# Fonction d'écrouissage
ldepla   = NU.array( [0.00 , 0.100 , 20.1 ] )
lforce   = NU.array( [0.00 , 100.0 , 350.0 ] )
Kp = 1000.0
LaMasse = 200.0

fctsy=DEFI_FONCTION(NOM_PARA='DTAN',
    ABSCISSE=ldepla,
    ORDONNEE=lforce,
)

# Caractéristiques : Ressorts / Masse
caraElem=AFFE_CARA_ELEM(
    MODELE=Modele,
    DISCRET=(
        _F( REPERE='LOCAL',CARA='M_T_D_N', MAILLE='PT01', VALE=( 0.0, ), ),
        _F( REPERE='LOCAL',CARA='K_T_D_N', MAILLE='PT01', VALE=( Kp, Kp, Kp,), ),

        _F( REPERE='LOCAL',CARA='M_T_D_N', GROUP_MA='MASSE', VALE=( LaMasse ), ),
        _F( REPERE='LOCAL',CARA='K_T_D_N', GROUP_MA='MASSE', VALE=( 0.0,0.0,0.0,), ),

        _F( REPERE='LOCAL',CARA='M_T_D_L', GROUP_MA='GM0203', VALE=( 0.0,), ),
        _F( REPERE='LOCAL',CARA='K_T_D_L', GROUP_MA='GM0203', VALE=( Kp, Kp, Kp,), ),
    ),
)
#
# condition aux limites en déplacement
Blocage=AFFE_CHAR_MECA(
   MODELE=Modele,
   DDL_IMPO= (
        _F(NOEUD='N01', DX=0.0, DY=0.0, DZ=0.0,),
        _F(NOEUD='N03', DX=0.0, DY=0.0, DZ=0.0,),
    ),
)
#
# Liste d'instant
TempsMaxi = 20.0
DeltaPas  = 0.02
# pour l'interpolation des fonctions
LinstF = DEFI_LIST_REEL(
    DEBUT=0.0,
    INTERVALLE=_F(JUSQU_A = TempsMaxi, PAS = DeltaPas/30.0),)
#
DEPLX  = FORMULE(VALE='FDeplax(INST)',FDeplax=FDeplax,NOM_PARA='INST',)
DEPLY  = FORMULE(VALE='FDeplay(INST)',FDeplay=FDeplay,NOM_PARA='INST',)
DEPLZ  = FORMULE(VALE='FDeplaz(INST)',FDeplaz=FDeplaz,NOM_PARA='INST',)
VITEX  = FORMULE(VALE='FVitex(INST)', FVitex =FVitex ,NOM_PARA='INST',)
VITEY  = FORMULE(VALE='FVitey(INST)', FVitey =FVitey ,NOM_PARA='INST',)
VITEZ  = FORMULE(VALE='FVitez(INST)', FVitez =FVitez ,NOM_PARA='INST',)
ACCEX  = FORMULE(VALE='FAccex(INST)', FAccex =FAccex ,NOM_PARA='INST',)
ACCEY  = FORMULE(VALE='FAccey(INST)', FAccey =FAccey ,NOM_PARA='INST',)
ACCEZ  = FORMULE(VALE='FAccez(INST)', FAccez =FAccez ,NOM_PARA='INST',)
#
DEPLIX = CALC_FONC_INTERP(NOM_RESU='DEPLIX',
    FONCTION=DEPLX, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
DEPLIY = CALC_FONC_INTERP(NOM_RESU='DEPLIY',
    FONCTION=DEPLY, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
DEPLIZ = CALC_FONC_INTERP(NOM_RESU='DEPLIZ',
    FONCTION=DEPLZ, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
VITEIX = CALC_FONC_INTERP(NOM_RESU='VITEIX',
    FONCTION=VITEX, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
VITEIY = CALC_FONC_INTERP(NOM_RESU='VITEIY',
    FONCTION=VITEY, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
VITEIZ = CALC_FONC_INTERP(NOM_RESU='VITEIZ',
    FONCTION=VITEZ, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
ACCEIX = CALC_FONC_INTERP(NOM_RESU='ACCEIX',
    FONCTION=ACCEX, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
ACCEIY = CALC_FONC_INTERP(NOM_RESU='ACCEIY',
    FONCTION=ACCEY, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
ACCEIZ = CALC_FONC_INTERP(NOM_RESU='ACCEIZ',
    FONCTION=ACCEZ, LIST_PARA=LinstF, NOM_PARA = 'INST',
    PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT',
)
#
ASSEMBLAGE(
    MODELE=Modele, CARA_ELEM=caraElem, CHARGE=Blocage,
    NUME_DDL=CO('NumeDDL'),
    MATR_ASSE=(
        _F(MATRICE=CO('Rigidite'), OPTION='RIGI_MECA',),
        _F(MATRICE=CO('Masse'),    OPTION='MASS_MECA',),
    ),
)
#
# Mode de la structure
ModeStr=CALC_MODES(
    MATR_RIGI=Rigidite, OPTION='BANDE',
    CALC_FREQ=_F( FREQ=(0.0,3.0,), ),
    MATR_MASS=Masse,
)
ModeStr=NORM_MODE(reuse=ModeStr, MODE=ModeStr, NORME='MASS_GENE')
#
# calcul des modes statiques aux points d'ancrage et des chargements sismiques
ModeSta=MODE_STATIQUE(
    MATR_RIGI=Rigidite,
    MATR_MASS=Masse,
    MODE_STAT=(
        _F(GROUP_NO='GPT01',AVEC_CMP=('DX','DY','DZ'),),
        _F(GROUP_NO='GPT03',AVEC_CMP=('DX','DY','DZ'),),
    ),
)
#
DSis1X=CALC_CHAR_SEISME(MATR_MASS=Masse,MODE_STAT=ModeSta, NOEUD='N01', DIRECTION=(1.0, 0.0, 0.0),)
DSis1Y=CALC_CHAR_SEISME(MATR_MASS=Masse,MODE_STAT=ModeSta, NOEUD='N01', DIRECTION=(0.0, 1.0, 0.0),)
DSis1Z=CALC_CHAR_SEISME(MATR_MASS=Masse,MODE_STAT=ModeSta, NOEUD='N01', DIRECTION=(0.0, 0.0, 1.0),)
DSis3X=CALC_CHAR_SEISME(MATR_MASS=Masse,MODE_STAT=ModeSta, NOEUD='N03', DIRECTION=(1.0, 0.0, 0.0),)
DSis3Y=CALC_CHAR_SEISME(MATR_MASS=Masse,MODE_STAT=ModeSta, NOEUD='N03', DIRECTION=(0.0, 1.0, 0.0),)
DSis3Z=CALC_CHAR_SEISME(MATR_MASS=Masse,MODE_STAT=ModeSta, NOEUD='N03', DIRECTION=(0.0, 0.0, 1.0),)
#
# projection des matrices et vecteurs sur la base modale
PROJ_BASE(
    BASE=ModeStr,
    STOCKAGE='DIAG',
    MATR_ASSE_GENE=(
        _F(MATRICE = CO("MasseGen"), MATR_ASSE = Masse),
        _F(MATRICE = CO("RigidGen"), MATR_ASSE = Rigidite),
    ),
    VECT_ASSE_GENE=(
        _F(VECTEUR = CO("D1GenX"), VECT_ASSE = DSis1X, TYPE_VECT='FORC'),
        _F(VECTEUR = CO("D1GenY"), VECT_ASSE = DSis1Y, TYPE_VECT='FORC'),
        _F(VECTEUR = CO("D1GenZ"), VECT_ASSE = DSis1Z, TYPE_VECT='FORC'),
        _F(VECTEUR = CO("D3GenX"), VECT_ASSE = DSis3X, TYPE_VECT='FORC'),
        _F(VECTEUR = CO("D3GenY"), VECT_ASSE = DSis3Y, TYPE_VECT='FORC'),
        _F(VECTEUR = CO("D3GenZ"), VECT_ASSE = DSis3Z, TYPE_VECT='FORC'),
    ),
)

#
# --------------------------------------------------------------------------------------------------
#
dt = 1.0/4000.0

archivedInstants =(  0.178500,  1.451000,  2.774250,  4.404750,  5.214750,  5.826500,  6.671250,  7.478500,
                     8.079750,  8.611500,  9.593000, 10.126750, 10.961750, 11.676250, 12.135250, 13.089250,
                    14.090000, 14.768500, 15.609250, 16.668500, 17.700000, 18.315500, 18.998000, )
unite = 39
Resultat=DYNA_VIBRA(
    TYPE_CALCUL='TRAN', BASE_CALCUL='GENE',
    MATR_MASS=MasseGen, MATR_RIGI=RigidGen,
    SCHEMA_TEMPS=_F(SCHEMA='RUNGE_KUTTA_54', PAS_MINI=dt, PAS_MAXI=dt),
    INCREMENT=_F(PAS=dt, INST_INIT=0.0, INST_FIN=TempsMaxi),
    MODE_STAT=ModeSta,
    EXCIT=(
        _F(VECT_ASSE_GENE=D1GenX, ACCE=ACCEIX, VITE=VITEIX, DEPL=DEPLIX,),
        _F(VECT_ASSE_GENE=D1GenY, ACCE=ACCEIY, VITE=VITEIY, DEPL=DEPLIY,),
        _F(VECT_ASSE_GENE=D1GenZ, ACCE=ACCEIZ, VITE=VITEIZ, DEPL=DEPLIZ,),
        _F(VECT_ASSE_GENE=D3GenX, ACCE=ACCEIX, VITE=VITEIX, DEPL=DEPLIX,),
        _F(VECT_ASSE_GENE=D3GenY, ACCE=ACCEIY, VITE=VITEIY, DEPL=DEPLIY,),
        _F(VECT_ASSE_GENE=D3GenZ, ACCE=ACCEIZ, VITE=VITEIZ, DEPL=DEPLIZ,),
    ),
    COMPORTEMENT=_F(RELATION='DIS_ECRO_TRAC',
                    NOEUD_1='N01', NOEUD_2='N02', FTAN= fctsy, ECROUISSAGE='CINEMATIQUE'),
    ARCHIVAGE=_F(PAS_ARCH=1.E8, INST=archivedInstants),
    IMPRESSION=_F(UNITE_DIS_ECRO_TRAC =unite),
)
#
ForY=LIRE_FONCTION(UNITE=unite,NOM_PARA='INST',NOM_RESU='ForY',INDIC_PARA=[1,1],INDIC_RESU=[1,4])
DepY=LIRE_FONCTION(UNITE=unite,NOM_PARA='INST',NOM_RESU='DepY',INDIC_PARA=[1,1],INDIC_RESU=[1,5])
ForZ=LIRE_FONCTION(UNITE=unite,NOM_PARA='INST',NOM_RESU='ForZ',INDIC_PARA=[1,1],INDIC_RESU=[1,6])
DepZ=LIRE_FONCTION(UNITE=unite,NOM_PARA='INST',NOM_RESU='DepZ',INDIC_PARA=[1,1],INDIC_RESU=[1,7])
Puis=LIRE_FONCTION(UNITE=unite,NOM_PARA='INST',NOM_RESU='Puis',INDIC_PARA=[1,1],INDIC_RESU=[1,8])
#
# INST               FY                  UY                  FZ                  UZ                  PUISS
ResuIntgr = {
 1: (1.785000E-001, -9.5228505800E+000, -9.5228505800E-003,  1.7377262357E+000,  1.7377262357E-003,  0.0000000000E+000,),
 2: (1.451000E+000, -8.8310491686E+001, -1.6221737816E-001,  4.9487888268E+001,  1.1665576505E-001,  1.0097853089E+001,),
 3: (2.774250E+000, -9.8107059148E+001, -2.5673938557E-001, -2.7856098355E+001, -4.3481957939E-002,  6.7968448551E+001,),
 4: (4.404750E+000,  6.1559412809E+001,  8.8562584232E-002,  8.0833792604E+001,  2.2000044915E-001,  2.8022015580E+002,),
 5: (5.214750E+000,  3.6404700664E+001, -3.3210766180E-002, -9.5713962490E+001, -3.2679589942E-001,  4.1457523497E+002,),
 6: (5.826500E+000,  8.7348358347E+001,  3.4134471498E-001,  5.8893489520E+001,  4.4138267692E-001,  5.5433937655E+002,),
 7: (6.671250E+000, -9.7205997268E+001, -1.8178558861E-001, -2.9777474268E+001, -2.0719687445E-001,  6.4995520706E+002,),
 8: (7.478500E+000, -8.2454895255E+001, -1.6615420434E-001, -5.9731660318E+001, -1.8918531269E-001,  8.6754501881E+002,),
 9: (8.079750E+000, -3.7027027143E+001, -2.8983691265E-001, -9.2343800099E+001,  4.6788602786E-002,  9.5896170545E+002,),
10: (8.611500E+000, -6.0289722733E+001,  2.9566365681E-001, -6.4442307381E+001, -3.5865550679E-001,  1.0627125328E+003,),
11: (9.593000E+000,  7.8234421736E+001,  2.5135777533E-001, -6.9501433999E+001, -4.2969608137E-001,  1.2828603828E+003,),
12: (1.012675E+001, -1.0182981521E+002, -3.7225216283E-001,  1.8539421022E+001,  7.8552530841E-002,  1.3719484398E+003,),
13: (1.096175E+001,  5.7943506129E+001,  2.4141335817E-001, -8.4892212140E+001, -2.2615169934E-001,  1.5297912876E+003,),
14: (1.167625E+001,  1.9421896665E+001, -2.0146919240E-001, -9.9254714487E+001, -2.3782978405E-001,  1.6657982150E+003,),
15: (1.213525E+001, -5.5378286778E+001,  5.3518642972E-002,  6.3261132778E+001, -2.4012541421E-001,  1.7509039092E+003,),
16: (1.308925E+001,  5.3724878661E+001,  1.3376539743E-002, -8.9051275268E+001, -4.8692037651E-001,  1.9277420093E+003,),
17: (1.409000E+001, -5.3588310579E+001, -4.7238399555E-001, -9.0392697266E+001, -3.1345104774E-001,  2.1057295422E+003,),
18: (1.476850E+001, -7.7247787869E+001, -2.7458845633E-003,  6.6862856772E+001,  4.2421861114E-001,  2.2759576035E+003,),
19: (1.560925E+001,  9.2114154564E+001,  3.7140331734E-005, -3.7608887278E+001, -1.6152397001E-001,  2.3996773966E+003,),
20: (1.666850E+001, -9.9511237052E+001, -1.2582484754E-001, -1.4485064119E+001, -1.4802250779E-001,  2.5273757019E+003,),
21: (1.770000E+001, -9.7217373852E+001, -1.1037738085E-001, -2.4414878857E+001, -4.8732995676E-002,  2.6423886029E+003,),
22: (1.831550E+001,  9.8731268871E+001,  8.5302737856E-002, -1.3702931239E+001,  7.1640887906E-002,  2.6622602634E+003,),
23: (1.899800E+001, -6.2193331024E+001, -5.0468471274E-002,  7.7730307792E+001,  4.1495840350E-002,  2.6876724031E+003,),
}

for nume_ordre in list(ResuIntgr.keys()):
    TEST_FONCTION(
        VALEUR= (
            _F(FONCTION=ForY, NOM_PARA='INST', VALE_PARA=ResuIntgr[nume_ordre][0],
               VALE_CALC=ResuIntgr[nume_ordre][1],
               REFERENCE='AUTRE_ASTER', VALE_REFE=ResuIntgr[nume_ordre][1], PRECISION=1.0E-02,),

            _F(FONCTION=DepY, NOM_PARA='INST', VALE_PARA=ResuIntgr[nume_ordre][0],
               VALE_CALC=ResuIntgr[nume_ordre][2],
               REFERENCE='AUTRE_ASTER', VALE_REFE=ResuIntgr[nume_ordre][2], PRECISION=1.0E-02,),

            _F(FONCTION=ForZ, NOM_PARA='INST', VALE_PARA=ResuIntgr[nume_ordre][0],
               VALE_CALC=ResuIntgr[nume_ordre][3],
               REFERENCE='AUTRE_ASTER', VALE_REFE=ResuIntgr[nume_ordre][3], PRECISION=1.0E-02,),

            _F(FONCTION=DepZ, NOM_PARA='INST', VALE_PARA=ResuIntgr[nume_ordre][0],
               VALE_CALC=ResuIntgr[nume_ordre][4],
               REFERENCE='AUTRE_ASTER', VALE_REFE=ResuIntgr[nume_ordre][4], PRECISION=1.0E-02,),

            _F(FONCTION=Puis, NOM_PARA='INST', VALE_PARA=ResuIntgr[nume_ordre][0],
               VALE_CALC=ResuIntgr[nume_ordre][5],
               REFERENCE='AUTRE_ASTER', VALE_REFE=ResuIntgr[nume_ordre][5], PRECISION=1.0E-02,),
        ),
    )

FIN()
