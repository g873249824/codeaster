# TITRE : VALIDATION DE LA MACRO POST_CZM_FISS / OPTION = 'TRIAXIALITE'
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'),)

# ------------------------------------------------------------
#                         maillage
# ------------------------------------------------------------
# massif  -> HEXA20/PENTA15
# fissure -> HEXA20/PENTA15
# ------------------------------------------------------------

MAL = LIRE_MAILLAGE(FORMAT='MED')

MA = CREA_MAILLAGE(MAILLAGE = MAL,
                   LINE_QUAD = _F(TOUT = 'OUI'))

MA = MODI_MAILLAGE(reuse =MA,
                   MAILLAGE=MA,
                   ORIE_FISSURE=_F(GROUP_MA='CZM',),)

MA = DEFI_GROUP(reuse = MA,
                MAILLAGE = MA,
                CREA_GROUP_MA = _F(NOM = 'MRELEVE',
                                   TYPE_MAILLE = '3D',
                                   OPTION = 'SPHERE',
                                   POINT = (50., 50., 100.),
                                   RAYON = 1.,),
                CREA_GROUP_NO = _F(NOM = 'NRELEVE',
                                   OPTION = 'ENV_SPHERE',
                                   POINT = (50., 50., 0.5),
                                   RAYON = 1.e-2,
                                   PRECISION = 1.e-2 ,)
                )

# ------------------------------------------------------------
#                        materiau
# ------------------------------------------------------------

UnTiers = 1./3.

E  = 30000.
NU = 0.0

Sc     = 3.
Gc     = 0.1
dc     = 2*Gc/Sc

L   = 99.5
U_c = L*Sc/E

MAT = DEFI_MATERIAU(ELAS      = _F(E=E, NU=NU,),
                    RUPT_FRAG = _F(GC = Gc, SIGM_C = Sc, PENA_LAGR = 1000.*Sc/dc,))

GC_TRX = DEFI_FONCTION(NOM_PARA = 'NEUT1',
                       PROL_DROITE = 'LINEAIRE',
                       VALE = (0., 0.,
                              UnTiers, Gc,))

SC_TRX = DEFI_FONCTION(NOM_PARA = 'NEUT1',
                       PROL_DROITE = 'LINEAIRE',
                       VALE = (0., 0.,
                               UnTiers, Sc,))

#GC_TRX = DEFI_FONCTION(NOM_PARA = 'NEUT1',
#                       PROL_DROITE = 'LINEAIRE',
#                       VALE = (0., 0.,1., 1.,))
#SC_TRX = DEFI_FONCTION(NOM_PARA = 'NEUT1',
#                       PROL_DROITE = 'LINEAIRE',
#                       VALE = (0., 0.,1., 1.,))
 
MATELAS = DEFI_MATERIAU(ELAS=_F(E=E, NU=NU,),)

MATCZMF = DEFI_MATERIAU(RUPT_FRAG_FO = _F(GC = GC_TRX,
                                          SIGM_C = SC_TRX,
                                          PENA_LAGR = 1000.*Sc/dc))

CHMAT=AFFE_MATERIAU(AFFE = _F(MATER=MAT,TOUT='OUI',),
                    MAILLAGE = MA,)

# ------------------------------------------------------------
#                        modele
# ------------------------------------------------------------

MOD=AFFE_MODELE(MAILLAGE = MA,
                AFFE = (
                        _F(GROUP_MA     = ('mat_hau','mat_bas','face_hau','face_bas'),
                           PHENOMENE    = 'MECANIQUE',
                           MODELISATION = '3D'),
                        _F(GROUP_MA  = 'CZM',
                           PHENOMENE = 'MECANIQUE',
                           MODELISATION = '3D_INTERFACE')
                        )
                )
 
ORIEFI=AFFE_CARA_ELEM(MODELE = MOD,
                       MASSIF = (_F(GROUP_MA = ('CZM',),
                                    ANGL_REP = (0.,0.,0.))))

# ------------------------------------------------------------
#                        chargement
# ------------------------------------------------------------

TRACTIO = AFFE_CHAR_MECA(DDL_IMPO = (_F(DZ= 1.,GROUP_MA='face_hau',),
                                      _F(DZ=-1.,GROUP_MA='face_bas',),),                   
                          MODELE = MOD,)

BLOCRIG = AFFE_CHAR_MECA(DDL_IMPO = (
                                      _F(DX= 0., GROUP_MA='face_hau',),
                                      _F(DX= 0., GROUP_MA='face_bas',),
                                      _F(DY= 0., GROUP_MA='face_hau',),
                                      _F(DY= 0., GROUP_MA='face_bas',),
                                      ),
                          MODELE = MOD,)

# ------------------------------------------------------------
#                   discretisation en temps
# ------------------------------------------------------------

INSTANTS = DEFI_LIST_REEL(DEBUT = 0.,
                          INTERVALLE = (
                                        _F(JUSQU_A=1.,NOMBRE=1),
                                        _F(JUSQU_A=2.,NOMBRE=4),
                                       ),
                         )
           
L_INST = DEFI_LIST_INST(DEFI_LIST = _F(LIST_INST = INSTANTS),
                        ECHEC = _F(SUBD_METHODE = 'MANUEL',
                                   SUBD_NIVEAU = 6,
                                   SUBD_PAS = 4,
                                   SUBD_PAS_MINI = 1.E-6,),)

RAMPE = DEFI_FONCTION(NOM_PARA = 'INST',
                      PROL_DROITE = 'LINEAIRE',
                      VALE = (0., 0.,
                              1., U_c,))

# ------------------------------------------------------------
#                     calcul : inst = 0. -> 1.5
# ------------------------------------------------------------

EVOL = STAT_NON_LINE(
  MODELE = MOD,
  CHAM_MATER = CHMAT,
  CARA_ELEM  = ORIEFI,
  EXCIT = (
    _F(CHARGE = BLOCRIG),
    _F(CHARGE = TRACTIO, FONC_MULT = RAMPE),
    ),
  COMPORTEMENT = (
                  _F(RELATION = 'CZM_TAC_MIX',   GROUP_MA = 'CZM',),  
                  _F(RELATION = 'ELAS', GROUP_MA = ('mat_hau','mat_bas'),),
                  ),
  INCREMENT = _F(
    LIST_INST = L_INST,
    INST_FIN  = 1.5,
    ),
  NEWTON  = _F(
    MATRICE   = 'TANGENTE',
    REAC_ITER = 1,
    ),
  CONVERGENCE = _F(
    SIGM_REFE      = Sc,
    DEPL_REFE      = dc,
    RESI_REFE_RELA = 1.E-6,
    ITER_GLOB_MAXI = 10,
    ),
  SOLVEUR   = _F(
    METHODE     = 'MUMPS',
    ),
  ARCHIVAGE = _F(
    LIST_INST      = INSTANTS,
    ),
  ) 

#IMPR_RESU(FORMAT='MED',RESU=_F(RESULTAT=EVOL,),RESTREINT=_F(GROUP_MA=('mat_hau','mat_bas')))

# ------------------------------------------------------------
#         recuperation de la carte de triaxialite 
#                pour les elements cohesifs
# ------------------------------------------------------------

CARTRX = POST_CZM_FISS(RESULTAT = EVOL,
                       OPTION   = 'TRIAXIALITE')

# ------------------------------------------------------------
#            on utilise cette carte pour AFFE_VARC
# ------------------------------------------------------------

CHMATV = AFFE_MATERIAU(MAILLAGE=MA,
                        AFFE=(_F(GROUP_MA=('mat_hau','mat_bas'), MATER=MATELAS),
                              _F(GROUP_MA='CZM'   , MATER=MATCZMF),),
                        AFFE_VARC=_F(NOM_VARC='NEUT1',CHAM_GD=CARTRX),)

# ------------------------------------------------------------
#      poursuite du calcul sans VARC : inst = 1.5 -> 2.
# ------------------------------------------------------------

EVOL = STAT_NON_LINE(
  reuse = EVOL,
  ETAT_INIT=_F(EVOL_NOLI = EVOL,
               INST = 1.5),
  MODELE = MOD,
  CHAM_MATER = CHMAT,
  CARA_ELEM  = ORIEFI,
  EXCIT = (
    _F(CHARGE = BLOCRIG),
    _F(CHARGE = TRACTIO, FONC_MULT = RAMPE),
    ),
  COMPORTEMENT = (
                  _F(RELATION = 'CZM_TAC_MIX',   GROUP_MA = 'CZM',),  
                  _F(RELATION = 'ELAS', GROUP_MA = ('mat_hau','mat_bas'),),
                  ),
  INCREMENT = _F(
    LIST_INST = L_INST,
    INST_FIN  = 2.,
    ),
  NEWTON  = _F(
    MATRICE   = 'TANGENTE',
    REAC_ITER = 1,
    ),
  CONVERGENCE = _F(
    SIGM_REFE      = Sc,
    DEPL_REFE      = dc,
    RESI_REFE_RELA = 1.E-6,
    ITER_GLOB_MAXI = 10,
    ),
  SOLVEUR   = _F(
    METHODE     = 'MUMPS',
    ),
  ARCHIVAGE = _F(
    LIST_INST      = INSTANTS,
    ),
  ) 

# ------------------------------------------------------------
#      poursuite du calcul avec VARC : inst = 1.5 -> 2.
# ------------------------------------------------------------

EVOLBIS = STAT_NON_LINE(
  ETAT_INIT=_F(EVOL_NOLI = EVOL,
               INST = 1.5),
  MODELE = MOD,
  CHAM_MATER = CHMATV,
  CARA_ELEM  = ORIEFI,
  EXCIT = (
    _F(CHARGE = BLOCRIG),
    _F(CHARGE = TRACTIO, FONC_MULT = RAMPE),
    ),
  COMPORTEMENT = (
                  _F(RELATION = 'CZM_TAC_MIX',   GROUP_MA = 'CZM',),  
                  _F(RELATION = 'ELAS', GROUP_MA = ('mat_hau','mat_bas'),),
                  ),
  INCREMENT = _F(
    LIST_INST = L_INST,
    INST_FIN  = 2.,
    ),
  NEWTON  = _F(
    MATRICE   = 'TANGENTE',
    REAC_ITER = 1,
    ),
  CONVERGENCE = _F(
    SIGM_REFE      = Sc,
    DEPL_REFE      = dc,
    RESI_REFE_RELA = 1.E-6,
    ITER_GLOB_MAXI = 10,
    ),
  SOLVEUR   = _F(
    METHODE     = 'MUMPS',
    ),
  ARCHIVAGE = _F(
    LIST_INST      = INSTANTS,
    ),
  ) 


# ------------------------------------------------------------
#           comparaison avec les valeurs analytiques
# ------------------------------------------------------------

U_imp  = 2.*U_c
sigref = (U_imp-0.5*dc)/(L/E-0.5*dc/Sc)
delta  = dc*(1.-sigref/Sc)
depref = 0.5*delta

TSIG = CREA_TABLE(RESU=_F(RESULTAT  = EVOL,
                          INST      = 2.,
                          NOM_CHAM  = 'SIEF_ELGA',
                          NOM_CMP   = 'SIZZ',
                          GROUP_MA  = 'MRELEVE',),)

TSIGBIS = CREA_TABLE(RESU=_F(RESULTAT  = EVOLBIS,
                             INST      = 2.,
                             NOM_CHAM  = 'SIEF_ELGA',
                             NOM_CMP   = 'SIZZ',
                             GROUP_MA  = 'MRELEVE',),)

TSIG = CALC_TABLE(reuse  = TSIG,
                  TABLE  = TSIG,
                  ACTION = _F(OPERATION = 'FILTRE',
                              NOM_PARA  = 'POINT',
                              CRIT_COMP = 'EQ',
                              VALE      = 1),)

TSIGBIS = CALC_TABLE(reuse  = TSIGBIS,
                     TABLE  = TSIGBIS,
                     ACTION = _F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'POINT',
                                 CRIT_COMP = 'EQ',
                                 VALE      = 1),)

TDEP = CREA_TABLE(RESU=_F(RESULTAT  = EVOL,
                          INST      = 2.,
                          NOM_CHAM  = 'DEPL',
                          NOM_CMP   = 'DZ',
                          GROUP_NO  = 'NRELEVE',),)

TDEPBIS = CREA_TABLE(RESU=_F(RESULTAT  = EVOLBIS,
                             INST      = 2.,
                             NOM_CHAM  = 'DEPL',
                             NOM_CMP   = 'DZ',
                             GROUP_NO  = 'NRELEVE',),)

IMPR_TABLE(TABLE = TSIG)
IMPR_TABLE(TABLE = TSIGBIS)
IMPR_TABLE(TABLE = TDEP)
IMPR_TABLE(TABLE = TDEPBIS)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC=1.723449750537,
           VALE_REFE=sigref,
           NOM_PARA='SIZZ',
           TABLE=TSIG,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC=1.7234497505253,
           VALE_REFE=sigref,
           NOM_PARA='SIZZ',
           TABLE=TSIGBIS,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC=0.014183891660709,
           VALE_REFE=depref,
           NOM_PARA='DZ',
           TABLE=TDEP,)

TEST_TABLE(REFERENCE='ANALYTIQUE',
           VALE_CALC=0.014183891660772,
           VALE_REFE=depref,
           NOM_PARA='DZ',
           TABLE=TDEPBIS,)

FIN()
