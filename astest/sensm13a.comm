# MODIF  DATE 10/07/2006   AUTEUR LEBOUVIE F.LEBOUVIER 
# RESPONSABLE F6BHHBO P.DEBONNIERES
# TITRE ETUDE  : ESSAI TRIAXIAL AVEC LE MODELE DE TYPE (3D)
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2004  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
#            CONFIGURATION MANAGEMENT OF EDF VERSION
#
DEBUT(CODE=_F( NOM = 'SENSM13A',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
          BASE=_F( FICHIER = 'GLOBALE',LONG_REPE = 15000), PAR_LOT='NON' ) 
#
#......................................................................
# ESSAI TRIAXIAL EN 3D
# PLASTICITE DRUCKER-PRAGER
# SENSIBILITE AUX PARAMETRES MATERIAU
#......................................................................
#
#
# 1. Definition/memorisation des fonctions constantes
#

PS_UN = DEFI_CONSTANTE(VALE = 1.0);
MEMO_NOM_SENSI(NOM_UN = PS_UN);

PS_ZERO = DEFI_CONSTANTE(VALE = 0.0);
MEMO_NOM_SENSI(NOM_ZERO = PS_ZERO);

#
# 2. Definition du dictionnaire des parametres
#

mot_cle = [ "E", "NU", "ALPHA", "P_ULTM", "SY", "SY_ULTM" ]
sensible = [ 5800.0E6,  0.3,  0.33, 0.01, 2.57E6, 0.57E6 ]

#
# 3. Definition des parametres sensibles
#

n = len(sensible)

PS = [None]*n

for i in range(n):
  PS[i] = DEFI_PARA_SENSI(VALE = sensible[i])
  MEMO_NOM_SENSI(NOM = _F(NOM_SD = PS[i].nom,
                          PARA_SENSI = PS[i],
                          NOM_COMPOSE = PS_UN.nom));

#
# 4. Maillage
#

MAILLAGE = LIRE_MAILLAGE()

#
# 5. Modele
#

MODEMECA = AFFE_MODELE(MAILLAGE = MAILLAGE,
                       AFFE = _F(TOUT = 'OUI',
                                 PHENOMENE = 'MECANIQUE',
                                 MODELISATION = '3D')
                      )

MAILLAGE = MODI_MAILLAGE(reuse = MAILLAGE,
                         MAILLAGE = MAILLAGE,
                         ORIE_PEAU_3D = _F( GROUP_MA = ('HAUT',
                                                        'DEVANT',
                                                        'GAUCHE',
                                                        'BAS',
                                                        'DERRIERE',
                                                        'DROITE')
                                          )
                        )

#
# 6. Mise en place des materiaux
#

MAT = DEFI_MATERIAU(ELAS_FO = _F(E = PS[0],
                                 NU = PS[1]),
                    DRUCK_PRAGER_FO = _F(ECROUISSAGE = 'PARABOLIQUE',
                                         ALPHA = PS[2],
                                         P_ULTM = PS[3],
                                         SY = PS[4],
                                         SY_ULTM = PS[5])
                   );

MATS = [None]*n

for i in range(n):
  PSFONC = [PS_ZERO]*n
  PSFONC[i] = PS_UN
  MATS[i] = DEFI_MATERIAU(ELAS_FO = _F(E = PSFONC[0],
                                       NU = PSFONC[1]),
                          DRUCK_PRAGER_FO = _F(ECROUISSAGE = 'PARABOLIQUE',
                                               ALPHA = PSFONC[2],
                                               P_ULTM = PSFONC[3],
                                               SY = PSFONC[4],
                                               SY_ULTM = PSFONC[5])
                                              );
  if i<2 :
    MEMO_NOM_SENSI(NOM = _F(NOM_SD = 'MAT',
                            PARA_SENSI = PS[i],
                            NOM_COMPOSE = MATS[i].nom,
                            MOT_CLE = mot_cle[i],
                            MOT_FACT='ELAS_FO',
                            VALEUR = PS[i].nom ),);
  else :
    MEMO_NOM_SENSI(NOM = _F(NOM_SD = 'MAT',
                            PARA_SENSI = PS[i],
                            NOM_COMPOSE = MATS[i].nom,
                            MOT_CLE = mot_cle[i],
                            MOT_FACT='DRUCK_PRAGER_FO',
                            VALEUR = PS[i].nom ),);

#
# 7. Affectation des materiaux
#

MATEMAIL = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                         AFFE = _F(TOUT = 'OUI', MATER = MAT));

CHMS = [None]*n

for i in range(n):
  CHMS[i] = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT = 'OUI', MATER = MATS[i]));
  MEMO_NOM_SENSI(NOM = _F(NOM_SD = 'MATEMAIL',
                          PARA_SENSI = PS[i],
                          NOM_COMPOSE = CHMS[i].nom,
                          MOT_CLE = 'MATER',
                          MOT_FACT = 'AFFE',
                          VALEUR = 'MAT' ));

#
# 8. Chargements
#

TEMPS1 = DEFI_LIST_REEL(DEBUT = 0.,
                        INTERVALLE = _F(JUSQU_A = 1.0, NOMBRE = 1)
                       )
     
TEMPS2 = DEFI_LIST_REEL(DEBUT = 1.,
                        INTERVALLE = _F(JUSQU_A = 2.0, NOMBRE = 100)
                       )

PR_LATE = AFFE_CHAR_MECA(MODELE = MODEMECA,
                         PRES_REP = _F(GROUP_MA = ( 'DEVANT', 'DROITE'),
                                       PRES = 1.
                                      )
                        )

PR_V = AFFE_CHAR_MECA(MODELE = MODEMECA,
                      PRES_REP=_F(GROUP_MA = 'HAUT', PRES = 1.)
                     )

DEP_SYM = AFFE_CHAR_MECA(MODELE = MODEMECA,FACE_IMPO = (
                               _F(  GROUP_MA = 'BAS',      DZ = 0.,   ),
                               _F(  GROUP_MA = 'DERRIERE', DX = 0.,   ),
                               _F(  GROUP_MA = 'GAUCHE',   DY = 0.,   ))
                            )

DEP_V=AFFE_CHAR_MECA( MODELE    = MODEMECA,
                      FACE_IMPO = _F( GROUP_MA = 'HAUT', DZ = 1., )
                     )

COEF1 = DEFI_FONCTION(NOM_PARA = 'INST',
                      PROL_DROITE = 'CONSTANT',
                      VALE = (0.0, 0.0,
                              1.0, 2.0E6)
                     )

COEF2 = DEFI_FONCTION(NOM_PARA = 'INST',
                      PROL_DROITE = 'LINEAIRE',
                      PROL_GAUCHE = 'CONSTANT',
                      VALE = (1.0,  0.0,
                              2.0, -0.015)
                     )

#
# 9. Calcul
#

for i in range(n):
  MEMO_NOM_SENSI(NOM = _F(NOM_SD = 'RES',
                          PARA_SENSI = PS[i],
                          NOM_COMPOSE = ('RES_'+PS[i].nom)));

RES = STAT_NON_LINE(MODELE = MODEMECA,
                   CHAM_MATER = MATEMAIL,
                   EXCIT = (_F(CHARGE = PR_LATE, FONC_MULT = COEF1),
                            _F( CHARGE = DEP_SYM),
                            _F( CHARGE = DEP_V, FONC_MULT = COEF2)),
                   COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER',
                                    RESI_INTE_RELA = 1.E-6,
                                    ITER_INTE_MAXI = 100,
                                    ITER_INTE_PAS  = -10,),
                   INCREMENT = _F(LIST_INST = TEMPS2),
                   NEWTON = _F(MATRICE = 'TANGENTE',
                               REAC_ITER = 1),
                   CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-6,
                                    ITER_GLOB_MAXI = 100),
                   SENSIBILITE= tuple(PS),
                  )

#
# Verification par differences finies (contraintes)
#

epsilon = 1.E-4
for i in range(n):
  eps = [1.]*n
  eps[i]=1.0 + epsilon
  MAT2 = DEFI_MATERIAU(ELAS = _F(E = sensible[0]*eps[0],
                                 NU = sensible[1]*eps[1]),
                       DRUCK_PRAGER = _F(ECROUISSAGE = 'PARABOLIQUE',
                                         ALPHA = sensible[2]*eps[2],
                                         P_ULTM = sensible[3]*eps[3],
                                         SY = sensible[4]*eps[4],
                                         SY_ULTM = sensible[5]*eps[5])
                      );

  MATEMA2 = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT = 'OUI', MATER = MAT2));

  RES2 = STAT_NON_LINE(MODELE = MODEMECA,
                       CHAM_MATER = MATEMA2,
                   EXCIT = (_F(CHARGE = PR_LATE, FONC_MULT = COEF1),
                            _F( CHARGE = DEP_SYM),
                            _F( CHARGE = DEP_V, FONC_MULT = COEF2)),
                       COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER',
                                        RESI_INTE_RELA = 1.E-6,
                                        ITER_INTE_MAXI = 100,
                                        ITER_INTE_PAS  = -10,),
                       INCREMENT = _F(LIST_INST = TEMPS2),
                       NEWTON = _F(MATRICE = 'TANGENTE',
                                   REAC_ITER = 1),
                       CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-6,
                                        ITER_GLOB_MAXI = 100)
                      );

  for j in [1, 5, 10, 15, 20, 30, 40, 45, 48, 49, 50, 51, 75, 100]:
    TAB_REF = CREA_CHAMP(TYPE_CHAM = 'ELGA_SIEF_R',
                         OPERATION = 'EXTR',
                         RESULTAT = RES,
                         NOM_CHAM = 'SIEF_ELGA',
                         NUME_ORDRE = j
                        )
    TAB_REFNP = TAB_REF.EXTR_COMP('SIZZ',[],1)

    TAB_DIF = CREA_CHAMP(TYPE_CHAM = 'ELGA_SIEF_R',
                         OPERATION = 'EXTR',
                         RESULTAT = RES2,
                         NOM_CHAM = 'SIEF_ELGA',
                         NUME_ORDRE = j
                        )
    TAB_DIFNP = TAB_DIF.EXTR_COMP('SIZZ',[])

    diff = (TAB_DIFNP.valeurs[0]-TAB_REFNP.valeurs[0])/(sensible[i]*epsilon)
    if j>=50 and (i==0 or i==1 or i == 3 or i == 4):
      TEST_RESU(RESU=(
         _F(  RESULTAT = RES,   NUME_ORDRE = j,
              NOM_CHAM = 'SIEF_ELGA', MAILLE = 'MA1', POINT = 1,
              CRITERE = 'ABSOLU', PRECISION = 1.E-5,
              NOM_CMP = 'SIZZ',   SENSIBILITE = PS[i],
              VALE = 0.0, REFERENCE = 'ANALYTIQUE' )))
    else :
      CRIT = 'RELATIF'
      PREC = 1.E-2
      if diff == 0.:
          CRIT = 'ABSOLU'
          PREC = 0.
      TEST_RESU(RESU=(
         _F(  RESULTAT = RES,   NUME_ORDRE = j,
              NOM_CHAM = 'SIEF_ELGA', MAILLE = 'MA1', POINT = 1,
              CRITERE = CRIT, PRECISION = PREC,
              NOM_CMP = 'SIZZ',   SENSIBILITE = PS[i],
              VALE = diff, REFERENCE = 'AUTRE_ASTER' )))

    DETRUIRE( CONCEPT =_F(NOM = TAB_REF ))
    DETRUIRE( CONCEPT =_F(NOM = TAB_DIF ))
  DETRUIRE( CONCEPT =_F(NOM = RES2 ))
  DETRUIRE( CONCEPT =_F(NOM = MAT2 ))
  DETRUIRE( CONCEPT =_F(NOM = MATEMA2 ))

#
# Verification par differences finies (plasticite)
#

epsilon = 1.E-4
for i in range(n):
  eps = [1.]*n
  eps[i]=1.0 + epsilon
  MAT2 = DEFI_MATERIAU(ELAS = _F(E = sensible[0]*eps[0],
                                 NU = sensible[1]*eps[1]),
                       DRUCK_PRAGER = _F(ECROUISSAGE = 'PARABOLIQUE',
                                         ALPHA = sensible[2]*eps[2],
                                         P_ULTM = sensible[3]*eps[3],
                                         SY = sensible[4]*eps[4],
                                         SY_ULTM = sensible[5]*eps[5])
                      );

  MATEMA2 = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT = 'OUI', MATER = MAT2));

  RES2 = STAT_NON_LINE(MODELE = MODEMECA,
                       CHAM_MATER = MATEMA2,
                       EXCIT = (_F(CHARGE = PR_LATE, FONC_MULT = COEF1),
                            _F( CHARGE = DEP_SYM),
                            _F( CHARGE = DEP_V, FONC_MULT = COEF2)),
                       COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER',
                                        RESI_INTE_RELA = 1.E-6,
                                        ITER_INTE_MAXI = 100,
                                        ITER_INTE_PAS  = -10,),
                       INCREMENT = _F(LIST_INST = TEMPS2),
                       NEWTON = _F(MATRICE = 'TANGENTE',
                                   REAC_ITER = 1),
                       CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-6,
                                        ITER_GLOB_MAXI = 100)
                      );

  for j in [1, 5, 10, 15, 20, 30, 40, 45, 48, 49, 50, 51, 75, 100]:
    TAB_REF = CREA_CHAMP(TYPE_CHAM = 'ELGA_VARI_R',
                         OPERATION = 'EXTR',
                         RESULTAT = RES,
                         NOM_CHAM = 'VARI_ELGA',
                         NUME_ORDRE = j
                        )
    TAB_REFNP = TAB_REF.EXTR_COMP('V1',[])

    TAB_DIF = CREA_CHAMP(TYPE_CHAM = 'ELGA_VARI_R',
                         OPERATION = 'EXTR',
                         RESULTAT = RES2,
                         NOM_CHAM = 'VARI_ELGA',
                         NUME_ORDRE = j
                        )
    TAB_DIFNP = TAB_DIF.EXTR_COMP('V1',[])

    diff = (TAB_DIFNP.valeurs[0]-TAB_REFNP.valeurs[0])/(sensible[i]*epsilon)

    if j>=50 and (i==3 or i==4):
      TEST_RESU(RESU=(
         _F(  RESULTAT = RES,   NUME_ORDRE = j,
              NOM_CHAM = 'VARI_ELGA', MAILLE = 'MA1', POINT = 1,
              CRITERE = 'ABSOLU', PRECISION = 1.E-14,
              NOM_CMP = 'V1',   SENSIBILITE = PS[i],
              VALE = 0.0, REFERENCE = 'ANALYTIQUE' )))
    else :
      CRIT = 'RELATIF'
      PREC = 1.E-2
      if diff == 0.:
          CRIT = 'ABSOLU'
          PREC = 0.
 
      TEST_RESU(RESU=(
         _F(  RESULTAT = RES,   NUME_ORDRE = j,
              NOM_CHAM = 'VARI_ELGA', MAILLE = 'MA1', POINT = 1,
              CRITERE = CRIT, PRECISION = PREC,
              NOM_CMP = 'V1',   SENSIBILITE = PS[i],
              VALE = diff, REFERENCE = 'AUTRE_ASTER' )))

    DETRUIRE( CONCEPT =_F(NOM = TAB_REF ))
    DETRUIRE( CONCEPT =_F(NOM = TAB_DIF ))
  DETRUIRE( CONCEPT =_F(NOM = RES2 ))
  DETRUIRE( CONCEPT =_F(NOM = MAT2 ))
  DETRUIRE( CONCEPT =_F(NOM = MATEMA2 ))

FIN()

