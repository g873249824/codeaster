# MODIF  DATE 09/04/2013   AUTEUR PELLET J.PELLET 
# TITRE METHODE DES SOLUTIONS MANUFACTUREES : CONTACT GRANDES DEFORMATIONS 2D
# ssnp150b.para = tps_job 600 mem_job 512Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2013  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================

import math

try:
  # Import du module de calcul symbolique Sympy
  import sympy
  sympy_available = True
except ImportError:
  sympy_available = False


# ================================================================================================================================================================================
def NormeAster(RESULTAT, Depl_Ana, P_ana, MAIL, MODELE, GROUP_MA_VOL, GROUP_MA_SUR):
     """ RESULTAT  : SD Resultat contenant la solution calculee
         Depl_Ana  : Solution analytique sous forme d une liste de FORMULEs Aster du deplacement
         P_Ana     : Solution analytique sous forme d une liste de FORMULEs Aster de la pression de contact
         MAIL      : SD Maillage
         MODELE    : SD Modele de la solution calculee
         GROUP_MA  : Entitee sur laquelle on veut calculer la norme

         OUT : {'NormeL2ErreurU':NormeL2ErreurU,'NormeInfSolAna':NormeInfSolAna,'NormeInfErreur':NormeInfErreur}
     """

     # ========================================================================================
     #          Creation de la solution analytique en deplacement
     # ========================================================================================
     CHXN=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='NOEU_GEOM_R',
                     NOM_CHAM='GEOMETRIE', MAILLAGE=MAIL, INFO=1);

     TEMP1=CREA_CHAMP(OPERATION='AFFE',
                      TYPE_CHAM='NOEU_NEUT_F',
                      MAILLAGE=MAIL,
                      AFFE=(_F( GROUP_MA=GROUP_MA_VOL, NOM_CMP = 'X1', VALE_F = Depl_Ana[0]),
                            _F( GROUP_MA=GROUP_MA_VOL, NOM_CMP = 'X2', VALE_F = Depl_Ana[1]),
                           ),);

     TEMP2=CREA_CHAMP(OPERATION='EVAL',
                      TYPE_CHAM='NOEU_NEUT_R',
                      CHAM_F=TEMP1,
                      CHAM_PARA=CHXN);

     Uana=CREA_CHAMP(OPERATION='ASSE',
                     TYPE_CHAM='NOEU_DEPL_R',
                     MAILLAGE=MAIL,
                     ASSE=(_F(GROUP_MA=GROUP_MA_VOL,
                              CHAM_GD = TEMP2,
                              NOM_CMP = 'X1',
                              NOM_CMP_RESU = 'DX',),
                           _F(GROUP_MA=GROUP_MA_VOL,
                              CHAM_GD = TEMP2,
                              NOM_CMP = 'X2',
                              NOM_CMP_RESU = 'DY',),
                           ));

     Ucalc = CREA_CHAMP(OPERATION='EXTR',
                        INST=1.,
                        NOM_CHAM = 'DEPL' , TYPE_CHAM = 'NOEU_DEPL_R',
                        RESULTAT = RESULTAT ,);

     # ========================================================================================
     #          Creation de la solution analytique en pression
     # ========================================================================================

     TEMP1P=CREA_CHAMP(OPERATION='AFFE',
                      TYPE_CHAM='NOEU_NEUT_F',
                      MAILLAGE=MAIL,
                      AFFE=(_F( GROUP_MA=GROUP_MA_SUR, NOM_CMP='X1', VALE_F=P_ana),
                           )
                     );

     TEMP2P=CREA_CHAMP(OPERATION='EVAL',
                      TYPE_CHAM='NOEU_NEUT_R',
                      CHAM_F=TEMP1P,
                      CHAM_PARA=CHXN);

     Pana=CREA_CHAMP(OPERATION='ASSE',
                     TYPE_CHAM='NOEU_DEPL_R',
                     MAILLAGE=MAIL,
                     ASSE=(_F(GROUP_MA=GROUP_MA_SUR,
                              CHAM_GD = TEMP2P,
                              NOM_CMP = 'X1',
                              NOM_CMP_RESU = 'LAGS_C',),)
                     );

     Pcalc = CREA_CHAMP(OPERATION='EXTR',
                        INST=1.,
                        NOM_CHAM = 'DEPL' , TYPE_CHAM = 'NOEU_DEPL_R',
                        RESULTAT = RESULTAT ,);


     # ========================================================================================
     #          Creation de la solution analytique en deplacement aux points d'integration
     # ========================================================================================

     CHXG=CREA_CHAMP(OPERATION='DISC', TYPE_CHAM='ELGA_GEOM_R',PROL_ZERO='OUI',
                     CHAM_GD=CHXN, MODELE=MODELE, );


     TEMP3=CREA_CHAMP(OPERATION='AFFE',
                      TYPE_CHAM='ELGA_NEUT_F',
                      MODELE=MODELE,
                      PROL_ZERO='OUI',
                      AFFE=(_F(GROUP_MA=GROUP_MA_VOL,
                               NOM_CMP = 'X1',
                               VALE_F = Depl_Ana[0]),
                            _F(GROUP_MA=GROUP_MA_VOL,
                               NOM_CMP = 'X2',
                               VALE_F = Depl_Ana[1]),
                            ),);

     UanaG=CREA_CHAMP(OPERATION='EVAL',
                      TYPE_CHAM='ELGA_NEUT_R',
                      CHAM_F=TEMP3,
                      CHAM_PARA=CHXG,
                      );

     # ========================================================================================
     #          Creation de la solution analytique en pression
     # ========================================================================================

     TEMP3P=CREA_CHAMP(OPERATION='AFFE',
                      TYPE_CHAM='ELGA_NEUT_F',
                      MODELE=MODELE,
                      PROL_ZERO='OUI',
                      AFFE=(_F(GROUP_MA=GROUP_MA_SUR,
                               NOM_CMP = 'X1',
                               VALE_F = P_ana),
                            ),);

     PanaG=CREA_CHAMP(OPERATION='EVAL',
                      TYPE_CHAM='ELGA_NEUT_R',
                      CHAM_F=TEMP3P,
                      CHAM_PARA=CHXG,
                      );


     # ========================================================================================
     #          Creation de la solution calculee en deplacement aux points d'integration
     # ========================================================================================

     Ucalc1=CREA_CHAMP(OPERATION='ASSE',
                       TYPE_CHAM='NOEU_NEUT_R',
                       MAILLAGE=MAIL,
                       ASSE=(_F(GROUP_MA=GROUP_MA_VOL,
                                CHAM_GD = Ucalc,
                                NOM_CMP = 'DX',
                                NOM_CMP_RESU = 'X1',),
                             _F(GROUP_MA=GROUP_MA_VOL,
                                CHAM_GD = Ucalc,
                                NOM_CMP = 'DY',
                                NOM_CMP_RESU = 'X2',),
                             ),);

     UcalcG=CREA_CHAMP(OPERATION='DISC',
                       TYPE_CHAM='ELGA_NEUT_R',
                       MODELE=MODELE,
                       PROL_ZERO='OUI',
                       CHAM_GD=Ucalc1,
                       );

     # ========================================================================================
     #          Creation de la pression calculee en deplacement aux points d'integration
     # ========================================================================================

     Pcalc1=CREA_CHAMP(OPERATION='ASSE',
                       TYPE_CHAM='NOEU_NEUT_R',
                       MAILLAGE=MAIL,
                       ASSE=(_F(GROUP_MA=GROUP_MA_SUR,
                                CHAM_GD = Ucalc,
                                NOM_CMP = 'LAGS_C',
                                NOM_CMP_RESU = 'X1',),
                             ),);

     PcalcG=CREA_CHAMP(OPERATION='DISC',
                       TYPE_CHAM='ELGA_NEUT_R',
                       MODELE=MODELE,
                       PROL_ZERO='OUI',
                       CHAM_GD=Pcalc1,
                       );


     # ========================================================================================
     #          Calcul de la norme L2 de l'erreur en deplacement et de la repartition de l'erreur
     # ========================================================================================

     DIFFUG=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='ELGA_DEPL_R',MODELE=MODELE,
                      PROL_ZERO='OUI',
                      ASSE=(_F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=UcalcG,CUMUL='OUI',COEF_R=1., NOM_CMP='X1',NOM_CMP_RESU='DX',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=UanaG, CUMUL='OUI',COEF_R=-1.,NOM_CMP='X1',NOM_CMP_RESU='DX',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=UcalcG,CUMUL='OUI',COEF_R=1., NOM_CMP='X2',NOM_CMP_RESU='DY',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=UanaG, CUMUL='OUI',COEF_R=-1.,NOM_CMP='X2',NOM_CMP_RESU='DY',),
                            ),);

     DIFFUN=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R',MODELE=MODELE,

                      ASSE=(_F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Ucalc,CUMUL='OUI',COEF_R=1., NOM_CMP='DX',NOM_CMP_RESU='DX',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Uana, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DX',NOM_CMP_RESU='DX',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Ucalc,CUMUL='OUI',COEF_R=1., NOM_CMP='DY',NOM_CMP_RESU='DY',),
                            _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Uana, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DY',NOM_CMP_RESU='DY',),
                            ),);

     tabU=POST_ELEM(NORME=_F(TYPE_NORM='L2',
                            GROUP_MA=GROUP_MA_VOL,
                            CHAM_GD=DIFFUG,
                            MODELE=MODELE,
                            ),)
     NormeL2ErreurU=tabU['VALE_NORM',1]
     IMPR_TABLE(TABLE=tabU)

     # ========================================================================================
     #          Calcul de la norme L2 de l'erreur en pression et de la repartition de l'erreur
     # ========================================================================================

     DIFFPG=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='ELGA_DEPL_R',MODELE=MODELE,
                       PROL_ZERO='OUI',
                       ASSE=(_F(GROUP_MA=GROUP_MA_SUR, CHAM_GD=PcalcG,CUMUL='OUI',COEF_R=1., NOM_CMP='X1',NOM_CMP_RESU='DX',),
                             _F(GROUP_MA=GROUP_MA_SUR, CHAM_GD=PanaG, CUMUL='OUI',COEF_R=-1.,NOM_CMP='X1',NOM_CMP_RESU='DX',),
                             ),);

     DIFFPN=CREA_CHAMP(OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R',MODELE=MODELE,

                       ASSE=(_F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Pcalc,CUMUL='OUI',COEF_R=1., NOM_CMP='DX',NOM_CMP_RESU='LAGS_C',),
                             _F(GROUP_MA=GROUP_MA_VOL, CHAM_GD=Pana, CUMUL='OUI',COEF_R=-1.,NOM_CMP='DX',NOM_CMP_RESU='LAGS_C',),
                             ),);

     tabP=POST_ELEM(NORME=_F(TYPE_NORM='L2',
                             GROUP_MA=GROUP_MA_SUR,
                             CHAM_GD=DIFFPG,
                             MODELE=MODELE,
                             ),)
     NormeL2ErreurP=tabP['VALE_NORM',1]
     IMPR_TABLE(TABLE=tabP)


     DETRUIRE(CONCEPT=(_F(NOM=CHXN),
                       _F(NOM=TEMP1),
                       _F(NOM=TEMP1P),
                       _F(NOM=TEMP2),
                       _F(NOM=TEMP2P),
                       _F(NOM=TEMP3),
                       _F(NOM=TEMP3P),
                       _F(NOM=CHXG),
                       _F(NOM=UanaG),
                       _F(NOM=PanaG),
                       _F(NOM=Ucalc1),
                       _F(NOM=Pcalc1),
                       _F(NOM=UcalcG),
                       _F(NOM=PcalcG),
                       _F(NOM=DIFFUG),
                       _F(NOM=DIFFPG),
                       _F(NOM=tabU),
                       _F(NOM=tabP),
                       ),
               INFO=1,
              );

     return {'NormeL2ErreurU':NormeL2ErreurU,'NormeL2ErreurP':NormeL2ErreurP,'Ucalc':Ucalc,'Uana':Uana,'Pcalc':Pcalc,'Pana':Pana, 'DIFFUN':DIFFUN, 'DIFFPN':DIFFPN}
# ================================================================================================================================================================================







DEBUT(CODE=_F(NOM='SSNP150B',NIV_PUB_WEB='INTERNET',),
      DEBUG=_F(SDVERI='OUI'),
      PAR_LOT='NON',
      IGNORE_ALARM=('CALCULEL2_63','SUPERVIS_1','CONTACT3_16'))

#================================================================================================
# Definition des caracteristiques du materiau
#================================================================================================
E=1;
NU=0.;

#================================================================================================
# Calcul de la solution de reference
#================================================================================================

INCLUDE(UNITE=38)

#================================================================================================
# Debut de l'etude de la convergence
#================================================================================================

# Nombre de remaillage
Nb_Raffinement=5;

# Initialisation des listes
MA                  =[None]*(Nb_Raffinement);
MALine              =[None]*(Nb_Raffinement);
NormeInfErreur      =[None]*(Nb_Raffinement);
NormeL2ErreurU      =[None]*(Nb_Raffinement);
NormeL2ErreurP      =[None]*(Nb_Raffinement);
NormeInfErreurGauss =[None]*(Nb_Raffinement);

TailleMaille        =[(1./2.**(i+1)) for i in range(Nb_Raffinement)]

MA[0]=LIRE_MAILLAGE();

MA[0]=MODI_MAILLAGE(reuse=MA[0],
                    MAILLAGE=MA[0],
                    ORIE_PEAU_2D=(_F(GROUP_MA='MAITRE'),
                                  _F(GROUP_MA='BAS'),
                                  )
                            );


#Definition du materiau cas isotrope
acier=DEFI_MATERIAU(ELAS=_F(E=E, NU=NU,),);

#Definition du transitoire
LINST=DEFI_LIST_REEL(DEBUT=0.0,
                     INTERVALLE=(
                                 _F(JUSQU_A=1., NOMBRE=10,),
                     ),);

RAMPE=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0, 0.0,
                          1.,  1.0,),
                    PROL_DROITE='LINEAIRE',
                    PROL_GAUCHE='LINEAIRE',);


for Raff in range(0,Nb_Raffinement):


   # ========================================================================================
   #          Preparation de calcul sur le nouveau maillage
   # ========================================================================================

   modl=AFFE_MODELE(MAILLAGE=MA[Raff],
                    AFFE=_F(TOUT='OUI',
                            PHENOMENE='MECANIQUE',
                            MODELISATION='D_PLAN',),
                    );

   chmat=AFFE_MATERIAU(MAILLAGE=MA[Raff],
                       AFFE=_F(TOUT='OUI',
                               MATER=acier,),
                      );

   Dirich=AFFE_CHAR_MECA_F(MODELE=modl,
                           DDL_IMPO=_F(GROUP_MA='HAUT', DX=FUx, DY=FUy,),
                           );

   Neumann=AFFE_CHAR_MECA_F(MODELE=modl,
                           FORCE_CONTOUR=(_F(GROUP_MA='DROITE', FX=FsurfXD, FY=FsurfYD,),
                                          _F(GROUP_MA='GAUCHE', FX=FsurfXG, FY=FsurfYG,),
                                          _F(GROUP_MA='BAS',    FX=FsurfTX, FY=FsurfTY,),
                                         ),);

   ForceInt=AFFE_CHAR_MECA_F(MODELE=modl,
                             FORCE_INTERNE=_F(GROUP_MA='SURFACE', FX=FvolX, FY=FvolY,),
                            );

   Contact=DEFI_CONTACT(MODELE=modl,
                        FORMULATION='CONTINUE',
                        ALGO_RESO_GEOM = 'NEWTON',
                        ALGO_RESO_CONT='NEWTON',
                        ZONE=_F(GROUP_MA_MAIT=('MAITRE',),
                                GROUP_MA_ESCL=('BAS',),
                                INTEGRATION='GAUSS',
                                ),
                         );

   BlocBase=AFFE_CHAR_CINE(MODELE=modl,
                           MECA_IMPO=_F(GROUP_MA='MAITRE',
                                        DX=0,DY=0),
                          );

   EVOLNOLI=STAT_NON_LINE(MODELE=modl,
                          CHAM_MATER=chmat,
                          COMP_INCR=_F(RELATION='ELAS',
                                       DEFORMATION='GROT_GDEP',
                                       TOUT='OUI',),
                          INCREMENT=_F(LIST_INST=LINST,),
                          NEWTON=_F(REAC_ITER=1,),
                          CONVERGENCE=_F(ITER_GLOB_MAXI=100),
                          CONTACT=Contact,
                          EXCIT=(
                                 _F(CHARGE=Neumann, FONC_MULT=RAMPE),
                                 _F(CHARGE=Dirich,  FONC_MULT=RAMPE),
                                 _F(CHARGE=ForceInt,FONC_MULT=RAMPE),
                                 _F(CHARGE=BlocBase,),
                                 ),
                          SOLVEUR=_F(SYME='OUI'),
                          INFO=1,
                          );


   # ========================================================================================
   #          Calcul des normes d'erreur
   # ========================================================================================

   dicResu=NormeAster(EVOLNOLI, [FUx, FUy], FcontNN, MA[Raff], modl, 'SURFACE','BAS');

   NormeL2ErreurU [Raff]=dicResu['NormeL2ErreurU']
   NormeL2ErreurP [Raff]=dicResu['NormeL2ErreurP']


   # ========================================================================================
   #          Adaptationn de maillage proprement dite
   # ========================================================================================

   if Raff<(Nb_Raffinement-1) :
         MA[Raff+1]=CO('MA_%d' % (Raff+1))
         MACR_ADAP_MAIL(ADAPTATION = 'RAFFINEMENT_UNIFORME',
                        GROUP_MA='SURFACE',
                        MAILLAGE_N =MA[Raff],
                        MAILLAGE_NP1 =MA[Raff+1],
                        )

         # DESTRUCTION DES CONCEPTS INUTILISES DANS LES PROCHAINES ETAPES DE LA BOUCLE
         DETRUIRE(CONCEPT=(_F(NOM=modl,),
                           _F(NOM=chmat),
                           _F(NOM=BlocBase),
                           _F(NOM=Neumann),
                           _F(NOM=Dirich),
                           _F(NOM=Contact),
                           _F(NOM=ForceInt),
                           _F(NOM=EVOLNOLI),
                           _F(NOM=Uana),
                           _F(NOM=Ucalc),
                           _F(NOM=DIFFUN),
                           _F(NOM=Pana),
                           _F(NOM=Pcalc),
                           _F(NOM=DIFFPN),
                           ),
                   INFO=1,
                  );

#================================================================================================
# Impression de la courbe de convergence
#================================================================================================


print 'Norme L2 de l erreur= %e' %dicResu['NormeL2ErreurU']

PenteL2U=-math.log( NormeL2ErreurU[-1]/NormeL2ErreurU[-2])/math.log(2.)
PenteL2P=-math.log( NormeL2ErreurP[-1]/NormeL2ErreurP[-2])/math.log(2.)


print 'norme L2 U', NormeL2ErreurU


sous_titreU='Element P%i, Ordre de convergence = %f '%(2 , PenteL2U)
sous_titreP='Element P%i, Ordre de convergence = %f '%(2 , PenteL2P)

IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=82,
              PILOTE='EPS',
              BORNE_X=(min(TailleMaille)*0.7,max(TailleMaille)*1.3),
              BORNE_Y=(min(NormeL2ErreurU)*0.7,max(NormeL2ErreurU)*1.3),
              COURBE=(_F(ABSCISSE=TailleMaille,
                         ORDONNEE=NormeL2ErreurU,
                         ),
                     ),
              TITRE='Erreur ||\qU\sh\N-\2U\N\Q || en norme L\s2\N',
              SOUS_TITRE=sous_titreU,
              LEGENDE_X='h',
              LEGENDE_Y='L\s2\N(Erreur)',
              ECHELLE_X='LOG',
              ECHELLE_Y='LOG',
              INFO=2,)

IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=83,
              PILOTE='EPS',
              BORNE_X=(min(TailleMaille)*0.7,max(TailleMaille)*1.3),
              BORNE_Y=(min(NormeL2ErreurP)*0.7,max(NormeL2ErreurP)*1.3),
              COURBE=(_F(ABSCISSE=TailleMaille,
                         ORDONNEE=NormeL2ErreurP,
                         ),
                     ),
              TITRE='Erreur ||\qP\sh\N-\2P\N\Q || en norme L\s2\N',
              SOUS_TITRE=sous_titreP,
              LEGENDE_X='h',
              LEGENDE_Y='L\s2\N(Erreur)',
              ECHELLE_X='LOG',
              ECHELLE_Y='LOG',
              INFO=2,)



# Impression des deplacements
# ----------------------------
IMPR_RESU(FORMAT='GMSH',
          UNITE=80,
          RESU=(_F(CHAM_GD=dicResu['Ucalc'], NOM_CMP=('DX','DY'),TYPE_CHAM='VECT_2D'),
                _F(CHAM_GD=dicResu['Uana'],  NOM_CMP=('DX','DY'),TYPE_CHAM='VECT_2D'),
                _F(CHAM_GD=dicResu['DIFFUN'],NOM_CMP=('DX','DY'),TYPE_CHAM='VECT_2D'),
               ),
          );


# Impression de la pression de contact
# -------------------------------------

# Pression issue du calcul
# ------------------------------
MA[Nb_Raffinement-1]=DEFI_GROUP(reuse =MA[Nb_Raffinement-1],
                                MAILLAGE=MA[Nb_Raffinement-1],
                                CREA_GROUP_NO=_F(OPTION='NOEUD_ORDO',
                                                 NOM='BAS_ord',
                                                 GROUP_MA='BAS',),);

PCalcTab=POST_RELEVE_T(ACTION=_F(OPERATION='EXTRACTION',
                                 INTITULE='EXTRAPOL',
                                 CHAM_GD=Pcalc,
                                 GROUP_NO='BAS_ord',
                                 NOM_CMP='LAGS_C',),);

LAGSC=RECU_FONCTION(TABLE=PCalcTab,
                    PARA_X='COOR_X',
                    PARA_Y='LAGS_C',);


# Pression de contact analytique
# ------------------------------
lt = DEFI_LIST_REEL(DEBUT = 0., INTERVALLE=_F(JUSQU_A=1., NOMBRE=20),)
Exact=CALC_FONC_INTERP(FONCTION = FcontNN,
                       LIST_PARA = lt,)

# Impression de la pression de contact
# -------------------------------------
IMPR_FONCTION(FORMAT='XMGRACE',
              UNITE=84,
              PILOTE='EPS',
              BORNE_X=(0.,1.),
              COURBE=(_F(FONCTION=Exact,),_F(FONCTION=LAGSC,)),
              TITRE='Pression de contact',
              LEGENDE_X='X',
              LEGENDE_Y='Lambda',
              )


#================================================================================================
#               Verifications
#================================================================================================

# Deplacement
# -----------

TEST_RESU(CHAM_NO=_F(REFERENCE='ANALYTIQUE',
                     PRECISION=5.0000000000000002E-11,
                     TYPE_TEST='MAX',
                     CHAM_GD=DIFFUN,
                     VALE_CALC= 3.5630505970E-07,
                     VALE_REFE=3.5630505969622002E-07,
                     TOLE_MACHINE=5.0000000000000002E-11,),
          )

# On cree une liste bidon pour pouvoir
# definir une fonction testable par TEST_RESU
BIDON=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0., 1.,
                          1., PenteL2U));

TEST_FONCTION(VALEUR=_F(VALE_CALC=3.00529417224,
                        VALE_REFE=3.0,
                        VALE_PARA=1.0,
                        REFERENCE='ANALYTIQUE',
                        PRECISION=1.E-2,
                        FONCTION=BIDON,),
              )

# Pression de contact
# -------------------

# On cree une liste bidon pour pouvoir
# definir une fonction testable par TEST_RESU
BIDONP=DEFI_FONCTION(NOM_PARA='INST',
                     VALE=(0., 1.,
                           1., PenteL2P));

TEST_FONCTION(VALEUR=_F(VALE_CALC=2.6039430000000001,
                        TOLE_MACHINE=1.9999999999999999E-07,
                        VALE_PARA=1.0,
                        FONCTION=BIDONP,
                        ),
              )

TEST_FONCTION(VALEUR=_F(VALE_CALC=2.6039425744,
                        VALE_REFE=2.5,
                        VALE_PARA=1.0,
                        REFERENCE='ANALYTIQUE',
                        PRECISION=0.050000000000000003,
                        FONCTION=BIDONP,),
              )

FIN();




