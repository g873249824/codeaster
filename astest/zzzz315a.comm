# TITRE VALIDATION DE LA COMMANDE PROD_MATR_CHAM (MATRICE REELLE)
# ======================================================================
# COPYRIGHT (C) 1991 - 2015  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# person_in_charge: jacques.pellet at edf.fr
DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'))

#------------------------------------------------------------------------------------------
# Le but du test est de valider la programmation de la commande PROD_MATR_CHAM pour les
# matrices relles (routine mrmult.f).
#
# On verifie 3 cas de figure pour des conditions aux limites NON homogenes :
# 1) C.L. eliminees (AFFE_CHAR_CINE)
# 2) C.L. dualisees (AFFE_CHAR_MECA + DDL_IMPO + LIAISON_DDL)
# 3) melange C.L. dualisees et eliminees
#
#
#------------------------------------------------------------------------------------------

MA=LIRE_MAILLAGE(FORMAT='MED',);
MO=AFFE_MODELE(MAILLAGE=MA,
               AFFE=_F(TOUT='OUI', PHENOMENE='MECANIQUE', MODELISATION='3D',),);
MAT=DEFI_MATERIAU(ELAS=_F(E=1., NU=0.3,),);
CHMAT=AFFE_MATERIAU(MAILLAGE=MA, AFFE=_F(TOUT='OUI', MATER=MAT,),);


#------------------------------------------------------------------------------------------
# 1. C.L. ELIMINE :
#-------------------
# On utilise des C.L. eliminees pour :
#    - imposer des ddls avec des valeurs non nulles

CHA1=AFFE_CHAR_CINE(MODELE=MO, MECA_IMPO=_F(NOEUD=('N1','N8','N7'), DX=0.02,DY=0.03,DZ=0.01,))
MEL1=CALC_MATR_ELEM(OPTION='RIGI_MECA', MODELE=MO, CHAM_MATER=CHMAT)
NU1=NUME_DDL(MATR_RIGI=MEL1, );
SECM1=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R', NUME_DDL=NU1, OPERATION='AFFE', MAILLAGE=MA,
                 AFFE=_F(TOUT='OUI', NOM_CMP=('DX','DY','DZ',),  VALE=(1.,2.,3.,),),);
MATAS1=ASSE_MATRICE(MATR_ELEM=MEL1, NUME_DDL=NU1, CHAR_CINE=CHA1)
VCINE1=CALC_CHAR_CINE(NUME_DDL=NU1, CHAR_CINE=CHA1,);
MATAS1=FACTORISER(reuse=MATAS1,MATR_ASSE=MATAS1, METHODE='MULT_FRONT',);
SOLU1=RESOUDRE(MATR=MATAS1, CHAM_NO=SECM1, CHAM_CINE=VCINE1,)
PRODUIT1=PROD_MATR_CHAM(MATR_ASSE=MATAS1, CHAM_NO=SOLU1,);
IMPR_RESU(FORMAT='RESULTAT', RESU=_F(CHAM_GD=SECM1,),);
IMPR_RESU(FORMAT='RESULTAT', RESU=_F(CHAM_GD=PRODUIT1,),);
IMPR_CO(CONCEPT=_F(NOM=(SECM1,PRODUIT1)))

# VALIDATION : on doit trouver les memes valeurs pour secm1 et produit1 sur les
# ddls non contraints.
# sur les ddls contraints, on ne peut pas retrouver le second membre
TEST_RESU(CHAM_NO=(_F(NOEUD='N4',
                      NOM_CMP='DY',
                      CHAM_GD=SECM1,
                      VALE_CALC=2.0,),
                   _F(NOEUD='N4',
                      REFERENCE='AUTRE_ASTER',
                      NOM_CMP='DY',
                      PRECISION=9.9999999999999995E-08,
                      CHAM_GD=PRODUIT1,
                      VALE_CALC=2.0,
                      VALE_REFE=2.0,),
                   _F(NOEUD='N3',
                      NOM_CMP='DZ',
                      CHAM_GD=SECM1,
                      VALE_CALC=3.0,),
                   _F(NOEUD='N3',
                      REFERENCE='AUTRE_ASTER',
                      NOM_CMP='DZ',
                      PRECISION=9.9999999999999995E-08,
                      CHAM_GD=PRODUIT1,
                      VALE_CALC=3.0,
                      VALE_REFE=3.0,),
                   ),
          )

#------------------------------------------------------------------------------------------
# 2. C.L. DUALISE :
#--------------------
# On utilise des C.L. dualisees pour :
#    - imposer des ddls avec des valeurs non nulles
#    - imposer une relation lineaire avec second membre non nul

CHA21=AFFE_CHAR_MECA(MODELE=MO,
        DDL_IMPO= _F(NOEUD=('N1','N8'), DX=0.02, DY=0.03, DZ=0.01,))
CHA22=AFFE_CHAR_MECA(MODELE=MO, LIAISON_DDL=(
        _F(  NOEUD = ('N1', 'N2',), DDL = ('DX', 'DZ',), COEF_MULT = (-1.2, 0.7, ), COEF_IMPO = 0.9)))
MEL2=CALC_MATR_ELEM(OPTION='RIGI_MECA', MODELE=MO, CHAM_MATER=CHMAT, CHARGE=(CHA21,CHA22))
NU2=NUME_DDL(MATR_RIGI=MEL2);
SECM2=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R', NUME_DDL=NU2, OPERATION='AFFE', MAILLAGE=MA,
                 AFFE=_F(TOUT='OUI', NOM_CMP=('DX','DY','DZ',),  VALE=(1.,2.,3.,),),);
VECEL2=CALC_VECT_ELEM(OPTION='CHAR_MECA', CHARGE=(CHA21,CHA22), CHAM_MATER=CHMAT)
VECAS2=ASSE_VECTEUR(VECT_ELEM=VECEL2, NUME_DDL=NU2,)
SECM2B=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R', OPERATION='COMB',
                  COMB=(_F(CHAM_GD=SECM2,  COEF_R=+1.0,),
                        _F(CHAM_GD=VECAS2, COEF_R=+1.0,),
                  ))

MATAS2=ASSE_MATRICE(MATR_ELEM=MEL2, NUME_DDL=NU2)
MATAS2=FACTORISER(reuse=MATAS2,MATR_ASSE=MATAS2, METHODE='MUMPS',);
SOLU2=RESOUDRE(MATR=MATAS2, CHAM_NO=SECM2B)

PRODUIT2=PROD_MATR_CHAM(MATR_ASSE=MATAS2, CHAM_NO=SOLU2,);

# VALIDATION : on doit trouver la meme valeur pour secm2b et produit2 :
TEST_RESU(OBJET=_F(VALE_CALC=49.74,
                   NOM='SECM2B             .VALE',
                   ),
          )

TEST_RESU(OBJET=_F(VALE_CALC=49.74,
                   VALE_REFE=49.740000000000002,
                   REFERENCE='AUTRE_ASTER',
                   NOM='PRODUIT2           .VALE',
                   PRECISION=9.9999999999999995E-08,),
          )

#------------------------------------------------------------------------------------------
# 3. MELANGE C.L. DUALISE + C.L. ELIMINEE:
#------------------------------------------
# On utilise des C.L. dualisees pour :
#    - imposer des ddls avec des valeurs non nulles
#    - imposer une relation lineaire avec second membre non nul

CHA31=AFFE_CHAR_CINE(MODELE=MO, MECA_IMPO=(
   _F(NOEUD=('N8',), DX=0.02,DY=0.03,DZ=0.01,),
   _F(NOEUD=('N2',), DZ=0.01,)))
CHA32=AFFE_CHAR_MECA(MODELE=MO,
        DDL_IMPO= _F(NOEUD=('N1',), DX=0.02, DY=0.03, DZ=0.01,))
CHA33=AFFE_CHAR_MECA(MODELE=MO, LIAISON_DDL=(
        _F(  NOEUD = ('N1', 'N3',), DDL = ('DX', 'DZ',), COEF_MULT = (-1.3, 0.7, ), COEF_IMPO = 0.9)))
MEL3=CALC_MATR_ELEM(OPTION='RIGI_MECA', MODELE=MO, CHAM_MATER=CHMAT, CHARGE=(CHA32,CHA33))
NU3=NUME_DDL(MATR_RIGI=MEL3);
SECM3=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R', NUME_DDL=NU3, OPERATION='AFFE', MAILLAGE=MA,
                 AFFE=_F(TOUT='OUI', NOM_CMP=('DX','DY','DZ',),  VALE=(1.,2.,3.,),),);
VECEL3=CALC_VECT_ELEM(OPTION='CHAR_MECA', CHARGE=(CHA32,CHA33), CHAM_MATER=CHMAT)
VECAS3=ASSE_VECTEUR(VECT_ELEM=VECEL3, NUME_DDL=NU3,)
SECM3B=CREA_CHAMP(TYPE_CHAM='NOEU_DEPL_R', OPERATION='COMB',
                  COMB=(_F(CHAM_GD=SECM3,  COEF_R=+1.0,),
                        _F(CHAM_GD=VECAS3, COEF_R=+1.0,),
                  ))

MATAS3=ASSE_MATRICE(MATR_ELEM=MEL3, NUME_DDL=NU3, CHAR_CINE=CHA31)
VCINE3=CALC_CHAR_CINE(NUME_DDL=NU3, CHAR_CINE=CHA31,);
MATAS3=FACTORISER(reuse=MATAS3,MATR_ASSE=MATAS3, METHODE='MUMPS',);
SOLU3=RESOUDRE(MATR=MATAS3, CHAM_NO=SECM3B, CHAM_CINE=VCINE3,)

PRODUIT3=PROD_MATR_CHAM(MATR_ASSE=MATAS3, CHAM_NO=SOLU3,);
#IMPR_RESU(FORMAT='RESULTAT', RESU=_F(CHAM_GD=SECM3B,),);
#IMPR_RESU(FORMAT='RESULTAT', RESU=_F(CHAM_GD=PRODUIT3,),);

# VALIDATION : on doit trouver les memes valeurs pour secm3b et produit3 sur les
# ddls qui ne sont pas contraints par une charge cinematique
TEST_RESU(CHAM_NO=(_F(NOEUD='N1',
                      NOM_CMP='DY',
                      CHAM_GD=SECM3B,
                      VALE_CALC=2.0,),
                   _F(NOEUD='N1',
                      REFERENCE='AUTRE_ASTER',
                      NOM_CMP='DY',
                      PRECISION=9.9999999999999995E-08,
                      CHAM_GD=PRODUIT3,
                      VALE_CALC=2.0,
                      VALE_REFE=2.0,),
                   _F(NOEUD='N2',
                      NOM_CMP='DX',
                      CHAM_GD=SECM3B,
                      VALE_CALC=1.0,),
                   _F(NOEUD='N2',
                      REFERENCE='AUTRE_ASTER',
                      NOM_CMP='DX',
                      PRECISION=9.9999999999999995E-08,
                      CHAM_GD=PRODUIT3,
                      VALE_CALC=1.0,
                      VALE_REFE=1.0,),
                   _F(NOEUD='N4',
                      NOM_CMP='DZ',
                      CHAM_GD=SECM3B,
                      VALE_CALC=3.0,),
                   _F(NOEUD='N4',
                      REFERENCE='AUTRE_ASTER',
                      NOM_CMP='DZ',
                      PRECISION=9.9999999999999995E-08,
                      CHAM_GD=PRODUIT3,
                      VALE_CALC=3.0,
                      VALE_REFE=3.0,),
                   ),
          )

FIN();
