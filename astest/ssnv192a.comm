# TITRE EPROUVETTE AVEC FISSURE CENTRALE XFEM
# ======================================================================
# COPYRIGHT (C) 1991 - 2016  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================


DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
      DEBUG=_F(SDVERI='OUI'),
      IGNORE_ALARM=('MODELE1_63'),
      PAR_LOT='NON')

# le PAR_LOT='NON' est necessaire a la recuperation dans un entier du nombre de fonds de fissure (EXTR_TABLE)

#----------------------------------------------
#                   PARAMETRES
#----------------------------------------------

#**********************************************
#    GEOMETRIE (A modifier avec le maillage)
#
# EPAISSEUR DE L EPROUVETTE SELON X
B = 1. ;
# DEMI-LONGUEUR DE L EPROUVETTE SELON Y
W = 5. ;
# DEMI-LONGUEUR DE L EPROUVETTE SELON Z
L = 10. ;
#**********************************************

#*********************************************************
#          BLOCAGE DES MODES RIGIDES ET SYMETRIE
#
# PRECISION POUR LES CREA_GROUP_NO
PRECIS = 1.E-5;
#
# LONGUEUR D ARETE AUTOUR DES NOEUDS A BLOQUER
#  (inutile si blocage = 1)
LAR = 2.;
#
blocage = 1;
#
# blocage=1 :
#  Le nombre d elements exterieur selon z est pair
#  On bloque les ddls sur trois noeuds
#
# blocage=2 :
#  Le nombre d elements exterieur selon z est impair
#  On bloque trois noeuds par rapport a leurs symetriques
#*********************************************************

# DEMI-LONGUEUR DE LA FISSURE CENTRALE
A = 1. ;

# ANGLE D INCLINAISON DE LA FISSURE CENTRALE
ALPHA = 0.*pi/180. ;

# COURONNES POUR LE CALCUL DES SIF
RI = [ 0.1 , 0.2 , 0.3 , 0.1 , 0.1 , 0.2 ];
RS = [ 0.2 , 0.3 , 0.4 , 0.3 , 0.4 , 0.4 ];

# PROPRIETES DE L ACIER UTILISE
E   = 1.E6;
nu  = 0.;
rho = 7800.0;


# COEFFICIENT DE FROTTEMENT
COULOM = 0. ;

# ACTIVATION DE L ALGO_LAGR DE DEFI_FISS_XFEM
ALGOLAG='NON' ;

#************************************************************
#  PRESSION APPLIQUEE SUR LES FACES INFERIEURE ET SUPERIEURE
#
fonction = 0;
# fonction=0 : la pression PRES est constante
# fonction=1 : la pression PRES est une fonction de l espace
#
PRES = -1.;
FCTPRES = FORMULE(NOM_PARA=('X','Y','Z'),VALE='PRES*Y');
#************************************************************


#----------------------------------------------
#                   MAILLAGE
#----------------------------------------------

MAILLAG1=LIRE_MAILLAGE(FORMAT='MED')

if blocage == 1 :
   PT1 = [ 0. , -W , 0. ]
   PT2 = [ 0. ,  W , 0. ]
   PT3 = [ B  , -W , 0. ]
elif blocage == 2 :
   PT1 = [ 0. , -W , -LAR/2 ]
   PT2 = [ 0. ,  W , -LAR/2 ]
   PT3 = [ B  , -W , -LAR/2 ]
   PT1S = [ 0. , -W , LAR/2 ]
   PT2S = [ 0. ,  W , LAR/2 ]
   PT3S = [ B  , -W , LAR/2 ]

MAILLAG1=DEFI_GROUP( reuse =MAILLAG1,
                     MAILLAGE=MAILLAG1,
                     CREA_GROUP_NO=( _F(NOM='NOEUD1',
                                        OPTION='ENV_SPHERE',
                                        POINT=PT1,
                                        PRECISION=PRECIS,
                                        RAYON=PRECIS),
                                     _F(NOM='NOEUD2',
                                        OPTION='ENV_SPHERE',
                                        POINT=PT2,
                                        PRECISION=PRECIS,
                                        RAYON=PRECIS),
                                     _F(NOM='NOEUD3',
                                        OPTION='ENV_SPHERE',
                                        POINT=PT3,
                                        PRECISION=PRECIS,
                                        RAYON=PRECIS),
                                    ),
                      INFO=1, );

if blocage == 2 :
   MAILLAG1=DEFI_GROUP( reuse =MAILLAG1,
                        MAILLAGE=MAILLAG1,
                        CREA_GROUP_NO=( _F(NOM='NOEUD1S',
                                           OPTION='ENV_SPHERE',
                                           POINT=(PT1S[0],PT1S[1],PT1S[2]),
                                           PRECISION=PRECIS,
                                           RAYON=PRECIS),
                                        _F(NOM='NOEUD2S',
                                           OPTION='ENV_SPHERE',
                                           POINT=(PT2S[0],PT2S[1],PT2S[2]),
                                           PRECISION=PRECIS,
                                           RAYON=PRECIS),
                                        _F(NOM='NOEUD3S',
                                           OPTION='ENV_SPHERE',
                                           POINT=(PT3S[0],PT3S[1],PT3S[2]),
                                           PRECISION=PRECIS,
                                           RAYON=PRECIS),
                                       ),
                      )

#----------------------------------------------
#                   MODELE
#----------------------------------------------

MODELEIN=AFFE_MODELE(MAILLAGE=MAILLAG1,
                     AFFE=(_F(GROUP_MA=('VOL','SURFSUP','SURFINF',),
                              PHENOMENE='MECANIQUE',
                              MODELISATION='3D',),
                           ),
                     );

MAILLAG1=MODI_MAILLAGE(reuse =MAILLAG1,
                       MAILLAGE=MAILLAG1,
                       ORIE_PEAU_3D=_F(GROUP_MA=('SURFSUP','SURFINF'))
                       );

#----------------------------------------------
#                   FISSURE
#----------------------------------------------

LN = FORMULE(VALE='Z*cos(ALPHA)-Y*sin(ALPHA)',
             NOM_PARA=('X','Y','Z'));
LT = FORMULE(VALE='abs(Z*sin(ALPHA)+Y*cos(ALPHA))-A',
             NOM_PARA=('X','Y','Z'));

XFONI = 0. ;
YFONI = -A*cos(ALPHA) ;
ZFONI = -A*sin(ALPHA) ;
XORI = B/2. ;
YORI = 0. ;
ZORI = 0. ;
XVECT = 0. ;
YVECT = -sin(ALPHA) ;
ZVECT = cos(ALPHA) ;

FISS=DEFI_FISS_XFEM(MAILLAGE=MAILLAG1,
                    DEFI_FISS=_F(FONC_LT=LT,
                                 FONC_LN=LN),
                     )

# RECUPERATION DE LA TABLE CONTENANT LE NOMBRE DE FONDS DE FISSURE
NB_FOND=RECU_TABLE(CO=FISS,NOM_TABLE='NB_FOND_FISS')

IMPR_TABLE(TABLE=NB_FOND)

# RECUPERATION DE LA TABLE DES COORDONNEES DES FONDS DE FISSURE
TB_FOND=RECU_TABLE(CO=FISS,NOM_TABLE='FOND_FISS')

IMPR_TABLE(TABLE=TB_FOND)



#----------------------------------------------
#               MODELE FISSURE
#----------------------------------------------

MODELEK=MODI_MODELE_XFEM(MODELE_IN=MODELEIN,
                         FISSURE=FISS,
                         )

#----------------------------------------------
#                   MATERIAU
#----------------------------------------------

ACIER=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=nu,
                            RHO=rho))

CHAMPMA1=AFFE_MATERIAU(MAILLAGE=MAILLAG1,
                       MODELE=MODELEK,
                       AFFE=_F(TOUT='OUI',
                               MATER=ACIER,
                               ))

#----------------------------------------------
#         BLOCAGE DES MODES RIGIDES
#----------------------------------------------

if blocage == 1 :
   CHRIGI=AFFE_CHAR_MECA(MODELE=MODELEK,
                         DDL_IMPO=( _F(GROUP_NO='NOEUD1',
                                       DX=0.0,
                                       DY=0.0,
                                       DZ=0.0,),
                                    _F(GROUP_NO='NOEUD2',
                                       DX=0.0,
                                       DZ=0.0,),
                                    _F(GROUP_NO='NOEUD3',
                                       DZ=0.0,),   ), );

elif blocage == 2 :
   CHRIGI=AFFE_CHAR_MECA(MODELE=MODELEK,
                         LIAISON_DDL=(_F(GROUP_NO=('NOEUD1','NOEUD1S',),
                                         DDL=('DX','DX',),
                                         COEF_MULT=(1.0,1.0),
                                         COEF_IMPO=0.0,),
                                      _F(GROUP_NO=('NOEUD1','NOEUD1S',),
                                         DDL=('DY','DY',),
                                         COEF_MULT=(1.0,1.0),
                                         COEF_IMPO=0.0,),
                                      _F(GROUP_NO=('NOEUD1','NOEUD1S',),
                                         DDL=('DZ','DZ',),
                                         COEF_MULT=(1.0,1.0),
                                         COEF_IMPO=0.0,),

                                      _F(GROUP_NO=('NOEUD2','NOEUD2S',),
                                         DDL=('DX','DX',),
                                         COEF_MULT=(1.0,1.0),
                                         COEF_IMPO=0.0,),
                                      _F(GROUP_NO=('NOEUD2','NOEUD2S',),
                                         DDL=('DZ','DZ',),
                                         COEF_MULT=(1.0,1.0),
                                         COEF_IMPO=0.0,),

                                      _F(GROUP_NO=('NOEUD3','NOEUD3S',),
                                         DDL=('DZ','DZ',),
                                         COEF_MULT=(1.0,1.0),
                                         COEF_IMPO=0.0,), ), );

#----------------------------------------------
#              CHARGEMENT
#----------------------------------------------
if fonction == 0 :
   CHPRES=AFFE_CHAR_MECA(MODELE=MODELEK,
                         PRES_REP=_F(GROUP_MA=('SURFSUP','SURFINF',),
                                     PRES=PRES,),
                         );
elif fonction == 1 :
   CHPRES=AFFE_CHAR_MECA_F(MODELE=MODELEK,
                           PRES_REP=_F(GROUP_MA=('SURFSUP','SURFINF',),
                                       PRES=FCTPRES,),
                           );

#----------------------------------------------
#                   RESOLUTION
#----------------------------------------------

RESU1=MECA_STATIQUE(MODELE=MODELEK,
                    CHAM_MATER=CHAMPMA1,
                    EXCIT=(
                           _F(CHARGE=CHRIGI),
                           _F(CHARGE=CHPRES),
                           ),
                    SOLVEUR=_F(METHODE='MUMPS',
                               RESI_RELA=-1.0),
                     )
#------------------------------------------------------------------------
# POST-TRAITEMENT : CALCUL DES SIFS PAR LA METHODE ENERGETIQUE AVEC X-FEM
#------------------------------------------------------------------------

# recuperation du nombre de fonds de fissure
dict = NB_FOND.EXTR_TABLE().values()
nb_fond = dict['NOMBRE'][0]

n=len(RI)
SIF = [None] * n * nb_fond
SIF2 = [None] * nb_fond

VAL_CALC = [
   1.847391611694   ,
   1.8494049051518   ,
   1.845719932257   ,
   1.8489202141256   ,
   1.8108600247066   ,
   1.8128706307279   ,
   1.8089296821941   ,
   1.8121310468327   ,
   1.7987068605033   ,
   1.8007288197688   ,
   1.7967924863683   ,
   1.8000042418175   ,
   1.8291258182003   ,
   1.8311377679398   ,
   1.8273248072255   ,
   1.8305256304792   ,
   1.8189861656346   ,
   1.8210014518828   ,
   1.8171473669398   ,
   1.8203518342586   ,
   1.804783442605   ,
   1.8067997252483   ,
   1.8028610842812   ,
   1.8060676443251   ,
   1.7984266038779   ,
   1.8004474897786   ,
   1.7965457975599   ,
   1.7997579121549   ,
   1.8217032536645   ,
   1.8250934827174   ,
   1.8223647893748     ,
   1.826356095256   , ]

ct = -1

# pour toutes les couronnes d'integration, pour tous les fonds de fissure
for i in range(n) :

   for j in range(nb_fond) :

      k = i*nb_fond + j
      ifond = j+1

      SIF[k]=CALC_G(RESULTAT=RESU1,
                    OPTION='CALC_K_G',
                    THETA=_F( FISSURE=FISS,
                              R_INF=RI[i],
                              R_SUP=RS[i],
                              NUME_FOND=ifond),
                    LISSAGE=_F( LISSAGE_THETA='LAGRANGE',
                                LISSAGE_G='LAGRANGE',),
                  )

      IMPR_TABLE(TABLE=SIF[k])

for j in range(nb_fond) :

      ifond = j+1

      SIF2[j]=CALC_G(RESULTAT=RESU1,
                    OPTION='CALC_K_G',
                    THETA=_F( FISSURE=FISS,
                              NUME_FOND=ifond),
                    LISSAGE=_F( LISSAGE_THETA='LAGRANGE',
                                LISSAGE_G='LAGRANGE',),
                  )

      IMPR_TABLE(TABLE=SIF2[j])

# SOLUTION ANALYTIQUE
P=abs(PRES)*(B*2*W)
FAW = sqrt(pi*A/(4*W*cos(pi*A/(2*W))))*(1-0.025*(A/W)**2.+0.06*(A/W)**4.)
K1REF =  P/(B*sqrt(W))*FAW

# test du min et du max pour toutes les couronnes d'integration, pour tous les fonds de fissure
ltest = ['MIN','MAX']
for i in range(n) :
   for j in range(nb_fond) :
      k = i*nb_fond + j
      for itest in ltest :
         ct = ct +1 
         TEST_TABLE(TABLE=SIF[k],
                    NOM_PARA='K1',
                    TYPE_TEST=itest,
                    VALE_CALC=VAL_CALC[ct], VALE_REFE=K1REF,    
                    PRECISION=0.03 ,
                    REFERENCE='ANALYTIQUE')

for j in range(nb_fond) :
      for itest in ltest :
         ct = ct +1 
         TEST_TABLE(TABLE=SIF2[j],
                    NOM_PARA='K1',
                    TYPE_TEST=itest,
                    VALE_CALC=VAL_CALC[ct], VALE_REFE=K1REF,    
                    PRECISION=0.03 ,
                    REFERENCE='ANALYTIQUE')

#------------------------------------------------------------------------
# POST-TRAITEMENT : CALCUL DES SIFS PAR INTERPOLATION DES SAUTS DE DEP.
#------------------------------------------------------------------------

PK = [None] * nb_fond

for j in range(nb_fond) :

   ifond = j+1
   PK[j]=POST_K1_K2_K3( FISSURE=FISS,
                        RESULTAT=RESU1,
                        NUME_FOND=ifond,
                        )

   IMPR_TABLE(TABLE=PK[j])

   for itest in ltest :
      ct = ct +1
      TEST_TABLE(TABLE=PK[j],
                 NOM_PARA='K1',
                 TYPE_TEST=itest,
                 VALE_CALC=VAL_CALC[ct], VALE_REFE=K1REF,    
                 PRECISION=0.12 ,
                 REFERENCE='ANALYTIQUE')
        
# -------------------------------------------------------------   
#            POST-TRAITEMENT POUR LA VISUALISATION X-FEM   
# -------------------------------------------------------------   

MA_XFEM=POST_MAIL_XFEM(MODELE= MODELEK,
                       INFO  = 2)

MOD_VISU=AFFE_MODELE(MAILLAGE=MA_XFEM,
                     AFFE=_F(TOUT='OUI',
                              PHENOMENE='MECANIQUE',
                              MODELISATION='3D',),) 

RES_XFEM=POST_CHAM_XFEM(MODELE_VISU = MOD_VISU,
                        RESULTAT    = RESU1,
                        INFO        = 2)
 
FIN()
