# MODIF  DATE 18/05/2004   AUTEUR DURAND C.DURAND 
# RESPONSABLE DURAND C.DURAND
# TITRE  SUPERVISEUR : DEFI_VALEUR ET POURSUITE
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2003  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
DEBUT(CODE=_F( NOM = 'EFICA02A',NIV_PUB_WEB='INTERNET'),PAR_LOT="NON")

#######################################################################
# cas test du superviseur dedie a l appel de la methode getvectjev    #
# Il valide aussi la recuperation en poursuite des parametres python  #
# de la premiere execution en plus des concepts ASTER standards       #
#######################################################################

import aster

MA=LIRE_MAILLAGE(VERI_MAIL=_F(VERIF='NON'), )
print aster.getvectjev("MA      .COORDO    .VALE        ")
print aster.getcolljev("MA      .CONNEX         ")
print aster.getvectjev("MA      .NOMMAI                 ")
print aster.getvectjev("MA      .NOMNOE                 ")

UN=1
DEUX=2
TUP=(10.,11.,12.,13.)

I02=DEFI_LIST_ENTI(VALE=UN)
I03=DEFI_LIST_ENTI(VALE=(5,6,7))
print aster.getvectjev("I02                .VALE")

FO3=DEFI_FONCTION(  NOM_PARA='X',
                    NOM_RESU='Y',
                    VALE=TUP )

#
# on teste la methode LIST_VALEURS de la SD fonction : on doit retrouver TUP3
# et F04 est une fonction identique a F03
# LIST_VALEURS fait appel a getvectjev (voir sa definition dans accas.capy)
#

FO4=DEFI_FONCTION(  NOM_PARA='X',
                    NOM_RESU='Y',
                    VALE=FO3.LIST_VALEURS() )

TEST_FONCTION(VALEUR=( 
               _F(  FONCTION  = FO4,  PRECISION = 1.E-08,
                    VALE_PARA = 10.,  VALE_REFE = 11.,
                    REFERENCE = 'NON_REGRESSION'      ),
               _F(  FONCTION  = FO4,  PRECISION = 1.E-08,
                    VALE_PARA = 12.,  VALE_REFE = 13.,
                    REFERENCE = 'NON_REGRESSION'      ), ) )

xxx=34.5

FIN()
