# -*- coding: utf-8 -*-
from random import random
from numpy import pi, arccos

# construite DEFI_COMPOR:POLYCRISTAL avec des orientations aleatoires gloalement isotropes

def homogeneous_orientation(Ng, angle='radian'):
    """
    generate random orientation and homogeneous volume fraction for a polycrystal
    input number of grain orientation to introduce
    return a table
    """
    lst_ori = []
    lst_frac = Ng * [1. / float(Ng)]
    for ig in range(Ng):
        #il faut voir la precession comme une prerotation visant a preparer le positionnement de Z par nutation!
        #la position de Z est ainsi similaire a celle du vecteur position des coordonnees spheriques a pi/2 pres du fait de la rotation au tour de u (tourne de x par precession)
        #on peut alors raisonner sur les coordonnees spheriques pour deduire l'expression de l'element de surface balaye et en deduire la partition homogene.
        #enfin dS=d(prec)d(nut)sin(nut)=-d(prec)d(cos(nut))
        if angle == 'radian':
            angles = (2 * pi * random(), arccos(2. * (random() - 1. / 2.)), 2 * pi * random())
        elif angle == 'degree':
            angles = (360. * random(), 180. / pi * arccos(2. * (random() - 1. / 2.)), 360. * random())
        else:
            raise Exception("angle can be 'radian' or 'degree' only !")
        lst_ori.append(angles)
    return lst_frac, lst_ori


def generate_aster_orientation_list(lst_frac, lst_ori, compor_name='COMPORT'):
    """
    This function create an aster object for polycrystalline material
    """
    txt = "COMPORP=DEFI_COMPOR(\n" + 20 * " " + "POLYCRISTAL=(\n"
    for i in range(len(lst_frac)):
        txt += 33 * " " + "_F(MONOCRISTAL=" + compor_name + ",FRAC_VOL=" + str(lst_frac[i]) + ",ANGL_EULER=" + str(lst_ori[i]) + ",),\n"
    txt += 33 * " " + "),LOCALISATION='BZ',\n" + 20 * " " + ")"
    return txt

if  __name__ == "__main__":
    nb_gr = 100
    gr = homogeneous_orientation(nb_gr, 'degree')
    mes_orientation_aster = generate_aster_orientation_list(gr[0], gr[1])
    fout = open("./orientation_" + str(nb_gr) + ".91", 'w')
    fout.write(mes_orientation_aster)
    fout.close()
    print 'ok'
    #print mes_orientation_aster
