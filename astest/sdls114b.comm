# MODIF  DATE 11/07/2006   AUTEUR CIBHHLV L.VIVAN 
# TITRE CALCUL DES FACTEURS D INTENSITE DES CONTRAINTES 
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2005  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# PAR RECOMBINAISON MODALE SUR UNE PLAQUE FISSUREE
# RESPONSABLE GALENNE E.GALENNE

DEBUT(CODE=_F( NOM = 'SDLS114B',NIV_PUB_WEB='INTERNET',VISU_EFICAS='NON'),
      PAR_LOT = 'NON', )

# DEFINITION DES PARAMETRES DU CALCUL
tau = 0.001
n_mode = 50
tfin = 0.005
pas = 5E-7
nbpas = 100

#PRE_IDEAS();

M = LIRE_MAILLAGE();

MO=AFFE_MODELE(MAILLAGE=M,
               AFFE=_F(TOUT = 'OUI',
                       PHENOMENE='MECANIQUE',
                       MODELISATION='3D',),);


M=DEFI_GROUP(reuse=M,
             MAILLAGE=M,
             CREA_GROUP_NO=(_F(NOM = 'LEVSUP',
                               GROUP_MA = 'LEV_SUP',),
                            _F(NOM = 'LEVINF',
                               GROUP_MA = 'LEV_INF',),
                            _F(NOM = 'FOND',
                               GROUP_MA = 'FN_FS',),),
            );


M = MODI_MAILLAGE(reuse = M,
                  MAILLAGE = M,
                  ORIE_PEAU_3D = (_F(
                                     GROUP_MA='SR_INF'),),
                 );

MA=DEFI_MATERIAU(ELAS=_F(E=200.0E+9,
                         NU=0.3,
                         ALPHA = 0.0,
                         RHO=7800),);
                         

CM=AFFE_MATERIAU(MAILLAGE=M,
                 AFFE=_F(TOUT='OUI',
                         MATER=MA,
                         TEMP_REF=0.0,),);  


BLOCAGE=AFFE_CHAR_MECA(MODELE=MO,
                       DDL_IMPO=_F(GROUP_MA='SR_SUP',
                                    DX = 0,
                                    DY = 0,
                                    DZ = 0,),);
                         
CHAR=AFFE_CHAR_MECA(MODELE=MO,
                    FORCE_FACE=_F(GROUP_MA='SR_INF',
                                  FX=-1.0E+6,
                                  FY=-5E+6,
                                  FZ=-0.4E+6,),);
                                                                                                                            
RAMPE=DEFI_FONCTION(NOM_PARA='INST',
                    VALE=(0.0,0.0,
                          tau,1.0,
                          0.2, 1.0,),
                    PROL_DROITE='CONSTANT',
                    PROL_GAUCHE='LINEAIRE',);

##################################
#  CONSTRUCTION DES MATRICES
##################################

MRIGI=CALC_MATR_ELEM(OPTION='RIGI_MECA',
                     MODELE=MO,
                     CHAM_MATER=CM,
                     CHARGE=BLOCAGE,);

MMASSE=CALC_MATR_ELEM(OPTION='MASS_MECA',
                      MODELE=MO,
                      CHAM_MATER=CM,
                      CHARGE=BLOCAGE,);

MAMOR=CALC_MATR_ELEM(OPTION='AMOR_MECA',
                     MODELE=MO,
                     RIGI_MECA = MRIGI,
                     MASS_MECA = MMASSE,
                     CHAM_MATER=CM,
                     CHARGE=BLOCAGE,);

VCHA=CALC_VECT_ELEM(OPTION='CHAR_MECA',
                    CHARGE =(BLOCAGE, CHAR),);


NUM=NUME_DDL(MODELE= MO,
             CHARGE=BLOCAGE,);

RIG_ASS=ASSE_MATRICE(MATR_ELEM=MRIGI,
                     NUME_DDL=NUM,);

MA_ASS=ASSE_MATRICE(MATR_ELEM=MMASSE,
                    NUME_DDL=NUM,);

AMO_ASS=ASSE_MATRICE(MATR_ELEM=MAMOR,
                     NUME_DDL=NUM,);


VE_ASS=ASSE_VECTEUR(VECT_ELEM=VCHA,
                    NUME_DDL=NUM,);


###################################
#  CALCUL DES MODES PROPRES ET DES K MODAUX
###################################

MODE=MODE_ITER_SIMULT(MATR_A=RIG_ASS,
                      MATR_B=MA_ASS,
                      CALC_FREQ=_F(NMAX_FREQ=n_mode,),);


MODE=NORM_MODE(reuse=MODE,
               MODE=MODE,
               NORME='MASS_GENE',);


FF1=DEFI_FOND_FISS(MAILLAGE=M,
                   FOND_FISS=_F(GROUP_NO='FOND',),
                                #GROUP_NO_ORIG='PFINI',),
                   LEVRE_SUP=_F(GROUP_MA='LEV_SUP',),
                   LEVRE_INF=_F(GROUP_MA='LEV_INF',),
                   );


FF2=DEFI_FISS_XFEM(MODELE=MO,  
                   DEFI_FISS=_F(
                                GROUP_MA_FISS='LEV_SUP',
                                GROUP_MA_FOND='FN_FS',               
                                ),
                   GROUP_MA_ENRI='VVOLTOT',
                   ORIE_FOND=_F(PFON_INI=(-0.005, 0.0, 0.0),
                                VECT_ORIE=(0.0, 1.0, 0.0),
                                PT_ORIGIN=(0.0, 0.0, 0.0),),
                   INFO=1,
                   CONTACT=_F(),
                  );

GLMO1=CALC_G(MODELE=MO,
             CHAM_MATER=CM,
             OPTION='K_G_MODA',
             RESULTAT=MODE,
             TOUT_MODE = 'OUI',
             THETA=_F( FISSURE=FF2,
                       R_INF=9.E-5,
                       R_SUP=3.E-4,),
             LISSAGE=_F(LISSAGE_THETA='LAGRANGE',
                        LISSAGE_G='LAGRANGE',),
            );

#IMPR_TABLE(TABLE = GLMO1);

D_SUP = [None]*n_mode
D_INF = [None]*n_mode
T1_K = [None]*n_mode
Kmodu = [None]*n_mode

for i in range(0,n_mode) :
   
   imode = i + 1
   
   D_SUP[i]=POST_RELEVE_T(ACTION=_F(INTITULE='lev sup',
                                    GROUP_NO='LEVSUP',
                                    RESULTAT=MODE,
                                    NUME_MODE=imode,
                                    NOM_CHAM='DEPL',
                                    NOM_CMP=('DX','DY','DZ',),
                                    OPERATION='EXTRACTION',),);
   
   
   D_INF[i]=POST_RELEVE_T(ACTION=_F(INTITULE='lev inf',
                                    GROUP_NO='LEVINF',
                                    RESULTAT=MODE,
                                    NUME_MODE=imode,
                                    NOM_CHAM='DEPL',
                                    NOM_CMP=('DX','DY','DZ',),
                                    OPERATION='EXTRACTION',
                                   ),
                         );
   
   
   T1_K[i] = POST_K1_K2_K3(MODELISATION='3D',
                           MATER=MA,
                           MAILLAGE=M,
                           FOND_FISS=FF1,
                           #INFO = 2,
                           TABL_DEPL_SUP=D_SUP[i],
                           TABL_DEPL_INF=D_INF[i],
                           VECT_K1 = (0., 1., 0.),
                           ABSC_CURV_MAXI=2.E-4,
                           TOUT_ORDRE='OUI',
                          );


   Kmodu[i] = T1_K[i]['K1_MAX',12] 

# TEST DE NON REGRESSION SUR LES 5 PREMIERS MODES
Ku_ref = [5.6306E+09,8.5989E+09,6.9401E+10,-2.70165E+11,-9.6372E+10]
Kg_ref =[4.7767E+09,7.2709E+09,5.88088E+10,-2.8887E+11,-8.1421E+10]

for i in range(0,5) :
   imode = i + 1
   TEST_TABLE(TABLE=GLMO1,
              NOM_PARA='K1_LOCAL',
              FILTRE=(_F(NOM_PARA = 'NUME_MODE',
                         VALE_I = imode),
                      _F(NOM_PARA = 'NUM_PT',
                         VALE_I = 3),),  
              VALE=Kg_ref[i],
              PRECISION=1E-5,
              REFERENCE = 'NON_REGRESSION',
             );
             
   TEST_TABLE(TABLE=T1_K[i],
              NOM_PARA='K1_MAX',
              FILTRE=(_F(NOM_PARA = 'METHODE',
                        VALE_I = 3), 
                      _F(NOM_PARA = 'ABSC_CURV',
                         VALE = 2.00000E-03),),
              VALE=Ku_ref[i],
              PRECISION=1.E-5,
              REFERENCE = 'NON_REGRESSION',
             );

##############################################
# CALCUL TRANSITOIRE EN COORDONNEES MODALES
##############################################

MACRO_PROJ_BASE(BASE=MODE,
                MATR_ASSE_GENE=(_F(MATRICE=CO('MASS_GE'),
                                   MATR_ASSE=MA_ASS,),
                                _F(MATRICE=CO('RIGI_GE'),
                                   MATR_ASSE=RIG_ASS,),
                                _F(MATRICE=CO('AMOR_GE'),
                                   MATR_ASSE=AMO_ASS,),), 
                VECT_ASSE_GENE=_F(VECTEUR=CO('CHA_ASS'),
                                  VECT_ASSE=VE_ASS,),);



RES_DYNA=DYNA_TRAN_MODAL(MASS_GENE=MASS_GE,
                         RIGI_GENE=RIGI_GE,
                         AMOR_GENE=AMOR_GE,
                         INCREMENT=_F(INST_INIT=0.,
                                      INST_FIN=tfin,
                                      VERI_PAS = 'OUI',
                                      PAS=pas,),
                         EXCIT=_F(VECT_GENE=CHA_ASS,
                                  FONC_MULT=RAMPE,),
                         ARCHIVAGE=_F(PAS_ARCH = nbpas,),
                         IMPRESSION = _F(TOUT='OUI',),);



RESUDYNA = REST_BASE_PHYS(RESU_GENE = RES_DYNA, 
                          NOM_CHAM='DEPL',);
            

npt = 6
nptca = 3

coef = aster.getvectjev("RES_DYNA           .DEPL        ")
l_inst = aster.getvectjev("RES_DYNA           .INST        ")

nbarch = len(l_inst)

alpha = [None]*n_mode
Kmod = [None]*n_mode
K1 = [None]*nbarch

for k in range(0,n_mode) :
   alpha[k] = [None]*nbarch
   
for inst in range(0,nbarch) :
   for k in range(0,n_mode) :
      r = npt*k+nptca
      Kmod[k] = GLMO1['K1_LOCAL',r]
      alpha[k][inst] = coef[n_mode*inst+k]

for inst in range(0,nbarch) :
   K1[inst] = 0.0
   for k in range(0,n_mode) :
      K1[inst] = K1[inst] + alpha[k][inst]*Kmod[k]
   #print 'inst = ',l_inst[inst],'K1 = ',K1[inst]

# CALCUL DE L ERREUR PAR RAPPORT A LA SOLUTION DE REFERENCE
# aux instants : 0.0005 0.001 0.002 0.003 0.004

Kt_ref = [696752.4, 1153703.3, 997675.6, 1305429.9, 870347.2]
t = [10, 20, 40, 60, 80]

for i in range(0,5) :
   inst = t[i]
   erreur = 100*(Kt_ref[i]-K1[inst])/Kt_ref[i]
   print 'K1(t) =',K1[inst],'--> Erreur (%) : ', erreur
   

                        
FIN();         

