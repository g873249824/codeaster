# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'))

#-----------------------------------------------------------------------
# UNE SEULE MAILLE : ABCD
#
# CE CAS TEST COMPARE CALCUL ET STAT_NON_LINE AVEC ELEMENTS COQUE_3D
#
# ELASTIQUE EN PETITE DEFORMATION / GROT_GDEP
#-----------------------------------------------------------------------
T=0.05

P=5000

MATER=DEFI_MATERIAU(  ELAS=_F( E=2.E11 ,
                              NU=0.2,
                              RHO=7800.) )

MAILL=LIRE_MAILLAGE(FORMAT='MED'  )

DEFI_GROUP( reuse=MAILL,   MAILLAGE=MAILL,
                          CREA_GROUP_MA=_F(  NOM = 'TOUT', TOUT = 'OUI'))

CHMAT=AFFE_MATERIAU(  MAILLAGE=MAILL,
                      AFFE=_F(  TOUT = 'OUI',   MATER = MATER) )

MODEL=AFFE_MODELE(  MAILLAGE=MAILL,
                    AFFE=_F(  TOUT = 'OUI',   MODELISATION = 'COQUE_3D',
                              PHENOMENE = 'MECANIQUE') )

CH_MODE = AFFE_CHAR_MECA(DDL_IMPO=_F(DX=0.0,
                                    DY=0.0,
                                    DZ=0.0,
                                    GROUP_MA=('AB', 'BC', 'CD', 'AD')),
                        MODELE=MODEL)

CHARGE=AFFE_CHAR_MECA(  MODELE=MODEL,
                        DDL_IMPO=(_F( GROUP_MA = ('AB',), DX = 0.,  DRY = 0., DZ = 0., ),
                                  _F(  GROUP_NO='A', DY = 0.,),),
                        FORCE_NODALE=(_F(GROUP_NO=('C','D'), FZ= P), ),
                        )

CARELEM=AFFE_CARA_ELEM(  MODELE=MODEL,
                         COQUE=_F(  GROUP_MA = 'TOUT', COQUE_NCOU=3,
                                    EPAIS = T,  #ANGL_REP = (0., 0.,),
                                  ))

#======================================================================
#               STAT_NON_LINE EN ELASTICITE
#======================================================================

LINST=DEFI_LIST_REEL( VALE=( 0., 1.,)  )

RAMPE=DEFI_FONCTION(   NOM_PARA='INST',
                       PROL_GAUCHE='LINEAIRE',  PROL_DROITE='LINEAIRE',
                       VALE=(0.0,0.0,1.0,1.0,))

# PETITE DEFORMATION
#-----------------------------------------------------------------
UREF=STAT_NON_LINE(MODELE=MODEL,
                   CHAM_MATER=CHMAT,
                   CARA_ELEM=CARELEM,
                   EXCIT=_F(CHARGE = CHARGE,
                            FONC_MULT = RAMPE
                            ),
                   COMPORTEMENT=_F(
                                   RELATION = 'ELAS'),
                   INCREMENT=_F(LIST_INST = LINST,
                                NUME_INST_FIN = 1),
                   NEWTON=_F(PREDICTION='ELASTIQUE',
                             ),
                   ####
                   # NE PAS FAIRE D'ITERATIONS
                   ####
                   CONVERGENCE = _F(ITER_GLOB_MAXI = 0,
                                    ARRET = 'NON'),
              )

UREF=CALC_CHAMP(   reuse=UREF,
                   TOUT_ORDRE='OUI',
                   TOUT='OUI',
                   FORCE='FORC_NODA',
                   RESULTAT=UREF,);

SIG_REF=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='ELGA_SIEF_R',
                   NOM_CHAM='SIEF_ELGA', RESULTAT=UREF,
                   INST=1.
                    )

FOR_REF=CREA_CHAMP(OPERATION='EXTR', TYPE_CHAM='NOEU_DEPL_R',
                   NOM_CHAM='FORC_NODA', RESULTAT=UREF,
                   NUME_ORDRE=1,
                    )

#
#======================================================================
#               CALCUL EN ELASTICITE
#======================================================================
#

# definir les champs initiaux : attention pour les sous-points

UP = CREA_CHAMP(AFFE=_F(NOM_CMP=('DX', 'DY', 'DZ', 'DRX', 'DRY', 'DRZ', ),
                       TOUT='OUI',
                       VALE=(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)),
               AFFE_SP=_F(CARA_ELEM = CARELEM,),
               MAILLAGE=MAILL,
               OPERATION='AFFE',
               TYPE_CHAM='NOEU_DEPL_R')

SIGP = CREA_CHAMP(AFFE=_F(NOM_CMP=('SIXX', 'SIYY', 'SIZZ', 'SIXY', 'SIYZ', 'SIXZ'),
                          TOUT='OUI',
                          VALE=(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)),
                  AFFE_SP=_F(CARA_ELEM = CARELEM,),
                  MODELE=MODEL,
                  OPERATION='AFFE',
                  TYPE_CHAM='ELGA_SIEF_R')

VARIP = CREA_CHAMP(AFFE=_F(NOM_CMP=('V1',),
                           TOUT='OUI',
                           VALE=(0.0, )),
                   AFFE_SP=_F(CARA_ELEM = CARELEM,),
                   PROL_ZERO='OUI',
                   MODELE=MODEL,
                   OPERATION='AFFE',
                   TYPE_CHAM='ELGA_VARI_R')

# champ initial de l'incrément de deplacement : utiliser la prédiction élastique

M_EL = CALC_MATR_ELEM(CHAM_MATER=CHMAT,
                      CARA_ELEM=CARELEM,
                      CHARGE=(CHARGE, ),
                      MODELE=MODEL,
                      OPTION='RIGI_MECA')

NU = NUME_DDL(MATR_RIGI=M_EL)

CHAREL = CALC_VECT_ELEM( CHARGE=(CHARGE,),
                         CARA_ELEM=CARELEM,
                         OPTION='CHAR_MECA')

CHAR = ASSE_VECTEUR(NUME_DDL=NU,
                    VECT_ELEM=CHAREL)

MATAS = ASSE_MATRICE(MATR_ELEM=M_EL,
                     NUME_DDL=NU)

MATAS = FACTORISER(reuse=MATAS,
                      MATR_ASSE=MATAS)

DU = RESOUDRE(CHAM_NO=CHAR,
              MATR=MATAS,)

# PETITE DEFORMATION
#--------------------------------

CALC_TT=CALCUL(
               MODELE=MODEL,
               CHAM_MATER=CHMAT,
               CARA_ELEM=CARELEM,
               COMPORTEMENT=_F(
                               RELATION='ELAS',
                               TOUT='OUI'),
               DEPL=UP,
               SIGM=SIGP,
               VARI=VARIP,
               INCR_DEPL=DU,
               EXCIT=_F( CHARGE = CHARGE),
               INCREMENT=_F(NUME_ORDRE=1,LIST_INST=LINST,),
               OPTION=('COMPORTEMENT', 'MATR_TANG_ELEM', 'FORC_INTE_ELEM', 'FORC_NODA_ELEM'),
                         )


FORC=EXTR_TABLE(TYPE_RESU='VECT_ELEM_DEPL_R',
                 TABLE=CALC_TT,
                 NOM_PARA='NOM_SD',
                 FILTRE=_F(NOM_PARA='NOM_OBJET',
                           VALE_K='FORC_NODA_ELEM'),)

FORCAS=ASSE_VECTEUR(VECT_ELEM=FORC,
                    NUME_DDL=NU,);

SIGM=EXTR_TABLE(TYPE_RESU='CHAM_GD_SDASTER',
                 TABLE=CALC_TT,
                 NOM_PARA='NOM_SD',
                 FILTRE=_F(NOM_PARA='NOM_OBJET',
                           VALE_K='SIEF_ELGA'),)

#
#======================================================================
#               COMPARAISON ENTRE CALCUL ET STAT_NON_LINE
#======================================================================
#
# PETITE DEFORMATION
#-----------------------------------------
# DIF_FOR = FOR_REF - FORCAS : FORC_NODA
DIF_FOR=CREA_CHAMP(OPERATION='ASSE',
                   MODELE=MODEL,
                   TYPE_CHAM='NOEU_DEPL_R',
                   ASSE=(_F(CHAM_GD=FORCAS,
                            TOUT='OUI',
                            CUMUL='OUI',
                            COEF_R=1.),
                         _F(CHAM_GD=FOR_REF,
                            TOUT='OUI',
                            CUMUL='OUI',
                            COEF_R=-1.),
                        ))

# DIF_SIG = SIG_REF - SIGM : CONTRAINTE
DIF_SIG=CREA_CHAMP(OPERATION='ASSE',
                   MODELE=MODEL,
                   TYPE_CHAM='ELGA_SIEF_R',
                   ASSE=(_F(CHAM_GD=SIG_REF,
                            TOUT='OUI',
                            CUMUL='OUI',
                            COEF_R=1.),
                         _F(CHAM_GD=SIGM,
                            TOUT='OUI',
                            CUMUL='OUI',
                            COEF_R=-1.),
                        ))

TEST_RESU(CHAM_NO=(_F(CRITERE='ABSOLU',
                        REFERENCE='AUTRE_ASTER',
                        TYPE_TEST='MIN',
                        CHAM_GD=DIF_FOR,
                        VALE_CALC= 2.36E-09,
                        VALE_REFE=1.E-8,
                        VALE_ABS='OUI',),
                     _F(CRITERE='ABSOLU',
                        REFERENCE='AUTRE_ASTER',
                        TYPE_TEST='MAX',
                        CHAM_GD=DIF_FOR,
                        VALE_CALC= 5.47E-09,
                        VALE_REFE=1.E-8,
                        VALE_ABS='OUI',),
                     ),
          ### --------- erreur pour non regression a l echelle de 1.0e-6
          #CHAM_ELEM=(_F(CRITERE='ABSOLU',
                        #REFERENCE='AUTRE_ASTER',
                        #TYPE_TEST='MIN',
                        #CHAM_GD=DIF_SIG,
                        #VALE_CALC= 2.57E-06,
                        #VALE_REFE= 1.E-8,
                        #VALE_ABS='OUI',),
                     #_F(CRITERE='ABSOLU',
                        #REFERENCE='AUTRE_ASTER',
                        #TYPE_TEST='MAX',
                        #CHAM_GD=DIF_SIG,
                        #VALE_CALC= 2.57E-06,
                        #VALE_REFE= 1.E-8,
                        #VALE_ABS='OUI',),
                     #),
          )

FIN()
#
