# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2019 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------
# person_in_charge: sofiane.hendili at edf.fr
import os
os.rename('fort.91', 'comp003a.py')

DEBUT(CODE=_F(NIV_PUB_WEB='INTERNET',),DEBUG=_F(SDVERI='NON'),
IMPR_MACRO='OUI',
)
# SDVERI='NON' car la verification est trop couteuse en CPU


CREA_LIB_MFRONT(UNITE_MFRONT=38,UNITE_LIBRAIRIE=39)

# def des materiaux
MATA = [None]*2
MATF = [None]*2
compor=[None]*2
#unite en Pa
C_Pa = 1.e+6
RYOUNG=80000
RNU=0.35

C_Pa=1.e6
MATF[0]=DEFI_MATERIAU(
                  ELAS=_F( E=80000.*C_Pa, NU=0.35, ALPHA=0.),

                  MFRONT=_F(LISTE_COEF=(80000.*C_Pa,0.35,2.40*C_Pa,0.20*C_Pa,9.40*C_Pa,0.0,0.80E-04,0.99E-04,4.40,3.0,6.1,19900.,21000.,6200.,1.,1.,1.,0.75,0.75,0.75,1.,1.,1.,0.75,0.75,0.75,
                            ),)
                        ,)

#a_0  =2.40*C_Pa,       ## F1_A=2.40,
#a_1  =0.20*C_Pa,       ## F2_A=0.20,
#a_2  =9.40*C_Pa,       ## C_A=9.40,
#m_0  =0.0,        ## F1_M=0.0,
#m_1  =0.80E-04,   ## F2_M=0.80E-04,
#m_2  =0.99E-04,   ## C_M=0.99E-04,
#pn_0 =4.40,       ## F1_N=4.40,
#pn_1 =3.0,        ## F2_N=3.0,
#pn_2 =6.1,        ## C_N=6.1,
#Q_0  =19900.,     ## F1_Q=19900.,
#Q_1  =21000.,     ## F2_Q=21000.,
#Q_2  =6200.,      ## C_Q=6200.,
#M1_0 =1.,         ## F_MRR_RR
#M1_1 =1.,         ## F_MTT_TT
#M1_2 =1.,         ## F_MZZ_ZZ
#M1_3 =0.75,       ## F_MRT_RT
#M1_4 =0.75,       ## F_MTZ_TZ
#M1_5 =0.75,       ## F_MRZ_RZ
#M3_0 =1.,         ## C_MRR_RR
#M3_1 =1.,         ## C_MTT_TT
#M3_2 =1.,         ## C_MZZ_ZZ
#M3_3 =0.75,       ## C_MRT_RT
#M3_4 =0.75,       ## C_MRZ_RZ
#M3_5 =0.75,       ## C_MTZ_TZ

MATF[1]=DEFI_MATERIAU(
                  ELAS=_F( E=80000., NU=0.35, ALPHA=0.),

                  MFRONT=_F(LISTE_COEF=(80000.,0.35,2.40,0.20,9.40,0.0,0.80E-04,0.99E-04,4.40,3.0,6.1,19900.,21000.,6200.,1.,1.,1.,0.75,0.75,0.75,1.,1.,1.,0.75,0.75,0.75,
                            ),)
                        ,)


compor[1]='MFRONT'

##################################################################################
#Discretisation du calcul. nbequi = nombre de calculs "equivalents" : Pa, Rot
Ncal = 4
N_pas = 2*[5] + [5, 10]
nbequi=2
# les differents calculs effectues
label_cal=['_Pa_','_rot_'] + 2* ['_N']
#pointeur materiau
P_imat = [0] + [1] + (Ncal-2)*[1]

#parametres vitesse de sollicitation
vitesse = 1.e-2
t_0 = 5.e-2/(8.0*vitesse)
# calibrage des deformations maximum dans l'extension 93
calibrage = 5.0e-1;

# liste d'archivage
temps_ar=DEFI_LIST_REEL( VALE =[t_0*i for i in range(9)],)

# angles utilises pour la rotation : non permise pour META_LEMA_ANI en attendant que m soit en repere cartesien
angle2=30.
angle0=0.
angles=[angle0,angle2] + (Ncal-2)*[angle0]

## les precisions sur chaque TEST_RESU
prec_ecart=[[1.E-10, 1.E-10, 0.02,     1.E-10],
            [1.E-10, 1.E-10, 0.02,   1.E-10],
            [1.E-10, 1.E-10, 1.E-10,  1.E-10]]
vale_calc=[
  [0.0E+00,             0.0E+00,             0.0183648497087,     0.0E+00],
  [0.00    ,            0.0,                 0.0101290459789,     0.0E+00],
  [0.0E+00,             0.0E+00,             0.0E+00,             0.0E+00],
    ]


prec_tgt=2.e-2
prec_zero=[1.E-10, 0.01, 0.01]


# coefficients pour ch_param2 pour calculer l'erreur sur le cas "Pa"
coef_para=[1.,C_Pa,C_Pa]
CALIB_E=RYOUNG
CALIB_NU=RNU

# definition de la temperature imposee et des phase metallurgiques
TEMP=DEFI_CONSTANTE(VALE=700.)

phase1=DEFI_CONSTANTE(VALE=1)

phase0=DEFI_CONSTANTE(VALE=0)

FIN()
