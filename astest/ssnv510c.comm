# MODIF  DATE 21/12/2010   AUTEUR MASSIN P.MASSIN 
# TITRE COMPRESSION UNIAXIALE D UN BLOC MULTI-FISSURE
# ssnv510c.para = tps_job 50 mem_job 128Mo ncpus 1 liste_test S
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2010  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
# tps_job 30 mem_job 128Mo ncpus 1 liste_test R

#
# CE TEST VALIDE LES ELEMENTS XFEM 3D MULTI-HEAVISIDE
#

DEBUT(CODE=_F(NOM='SSNV510C',NIV_PUB_WEB='INTERNET'),DEBUG=_F(SDVERI='OUI'));

PRE_GIBI();


MAILLAG=LIRE_MAILLAGE(INFO=1,);


# Re-orientation du maillage de peau
MAILLAG=MODI_MAILLAGE(reuse =MAILLAG,
                      MAILLAGE=MAILLAG,
                      ORIE_PEAU_3D=(_F(GROUP_MA='SURG',),),
                      );

MODELEIN=AFFE_MODELE(MAILLAGE=MAILLAG,
                     AFFE=(_F(GROUP_MA=('VOLU','SURG',),
                              PHENOMENE='MECANIQUE',
                              MODELISATION='3D',),),);

LN1=FORMULE(NOM_PARA=('X','Y','Z'),VALE='Y-0.5');
LN2=FORMULE(NOM_PARA=('X','Y','Z'),VALE='Y-1.5');
LN3=FORMULE(NOM_PARA=('X','Y','Z'),VALE='Y-2.5');
LN4=FORMULE(NOM_PARA=('X','Y','Z'),VALE='Y-3.5');

FISS1=DEFI_FISS_XFEM(MODELE=MODELEIN,
                     TYPE_DISCONTINUITE='INTERFACE',
                     DEFI_FISS=_F(FONC_LN=LN1,),
                     INFO=1,);
FISS2=DEFI_FISS_XFEM(MODELE=MODELEIN,
                     TYPE_DISCONTINUITE='INTERFACE',
                     DEFI_FISS=_F(FONC_LN=LN2,),
                     INFO=1,);
FISS3=DEFI_FISS_XFEM(MODELE=MODELEIN,
                     TYPE_DISCONTINUITE='INTERFACE',
                     DEFI_FISS=_F(FONC_LN=LN3,),
                     INFO=1,);
FISS4=DEFI_FISS_XFEM(MODELE=MODELEIN,
                     TYPE_DISCONTINUITE='INTERFACE',
                     DEFI_FISS=_F(FONC_LN=LN4,),
                     INFO=1,);

MODELEK=MODI_MODELE_XFEM(MODELE_IN=MODELEIN,
                         FISSURE=(FISS1,FISS2,FISS3,FISS4),
                         INFO=1,);

E=100.0E6
nu=0.0
ACIER=DEFI_MATERIAU(ELAS=_F(E=E,
                            NU=nu,
                            RHO=7800.0,),);

CHAMPMAT=AFFE_MATERIAU(MAILLAGE=MAILLAG,
                       MODELE=MODELEK,
                       AFFE=_F(TOUT='OUI',
                                MATER=ACIER,),);

def pression(y) :
   if y >=3.5 : return 40e6
   if y < 3.5 and y >= 2.5 : return 30e6
   if y < 2.5 and y >= 1.5 : return 20e6
   if y < 1.5 and y >= 0.5 : return 10e6
   if y < 0.5 : return 0

PRESSION = FORMULE(VALE='pression(Y)',NOM_PARA='Y',);

def depx(y) :
   return y/5

def depy(y) :
   return 0

CH1=AFFE_CHAR_MECA_F(MODELE=MODELEK,
                     PRES_REP=(_F(GROUP_MA='SURG',PRES = PRESSION,),),);

CH2=AFFE_CHAR_MECA(MODELE=MODELEK,
                   DDL_IMPO=(_F(GROUP_MA='SURD',DX=0,DY=0,DZ=0,
                                                H1X=0,H1Y=0,H1Z=0,
                                                H2X=0,H2Y=0,H2Z=0,),),);

CHXFEM=AFFE_CHAR_MECA(MODELE=MODELEK,
                      LIAISON_XFEM='OUI',
                      INFO=1,);

L_INST=DEFI_LIST_REEL(DEBUT=0.0,
                      INTERVALLE=_F(JUSQU_A=1.0,
                                    NOMBRE=1,),);

UTOT1=STAT_NON_LINE(MODELE=MODELEK,INFO=1,
                    CHAM_MATER=CHAMPMAT,            
                    EXCIT=(_F(CHARGE=CHXFEM,),                                    
                           _F(CHARGE=CH1),
                           _F(CHARGE=CH2),),
                    COMP_ELAS=_F(RELATION='ELAS',
                                 GROUP_MA='VOLU',),
                    INCREMENT=_F(LIST_INST=L_INST,),
                    NEWTON=_F(REAC_ITER=1,),
                    ARCHIVAGE=_F(CHAM_EXCLU='VARI_ELGA',),
                    );

#-----------------------------------------------------------
#             POST-TRAITEMENT POUR LA VISUALISATION
#-----------------------------------------------------------

MA_XFEM=POST_MAIL_XFEM(MODELE=MODELEK);


MOD_VISU=AFFE_MODELE(MAILLAGE=MA_XFEM,
                     AFFE=_F(GROUP_MA='VOLU',
                     PHENOMENE='MECANIQUE',
                     MODELISATION='3D',
                ),)

RES_XFEM=POST_CHAM_XFEM(MODELE_VISU  = MOD_VISU,
                        RESULTAT        = UTOT1,)

TABDEP=POST_RELEVE_T(ACTION=_F(INTITULE='DEPLACEMENT SUR LES LEVRES',
                               RESULTAT=RES_XFEM,
                               NOM_CHAM='DEPL',
                               INST=1.0,
                               GROUP_NO=('NFISSU',),
                               TOUT_CMP='OUI',
                               OPERATION='EXTRACTION',),);

TABDEP = CALC_TABLE(reuse = TABDEP,
                     TABLE = TABDEP,
                     ACTION=_F(OPERATION='TRI',
                               NOM_PARA='COOR_Y',
                               ORDRE='CROISSANT',),);

# FILTRE SUR LES NOMS DES NOEUDS POUR NE GARDER QUE LES NP (COTE MAITRE)

depl_p = FORMULE(NOM_PARA=('DX','COOR_X','COOR_Y',),
                   VALE='DX+depx(COOR_Y+0.5)*(COOR_X-2)/2');

TABDEPP = CALC_TABLE(TABLE = TABDEP,
                     ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'NOEUD',
                                 CRIT_COMP = 'REGEXP',
                                 VALE_K    = 'NP',),
                              _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DXP',
                                 FORMULE = depl_p,),
                              _F(OPERATION = 'EXTR',
                                 NOM_PARA=('NOEUD','INST','COOR_X','COOR_Y','DX','DY','DX-DXP',),),),);

IMPR_TABLE(TABLE=TABDEPP,
           TRI=_F(NOM_PARA = ('COOR_Y','COOR_X',),
                  ORDRE ='CROISSANT'),);

# FILTRE SUR LES NOMS DES NOEUDS POUR NE GARDER QUE LES NM (COTE ESCLAVE)

depl_m = FORMULE(NOM_PARA=('DX','COOR_X','COOR_Y'),
                   VALE='DX+depx(COOR_Y-0.5)*(COOR_X-2)/2');

TABDEPM = CALC_TABLE(TABLE = TABDEP,
                     ACTION =(_F(OPERATION = 'FILTRE',
                                 NOM_PARA  = 'NOEUD',
                                 CRIT_COMP = 'REGEXP',
                                 VALE_K    = 'NM',),
                              _F(OPERATION = 'OPER',
                                 NOM_PARA  = 'DX-DXM',
                                 FORMULE = depl_m,),
                              _F(OPERATION = 'EXTR',
                                 NOM_PARA=('NOEUD','INST','COOR_X','COOR_Y','DX','DY','DX-DXM',),),),);

IMPR_TABLE(TABLE=TABDEPM,
           TRI=_F(NOM_PARA = ('COOR_Y','COOR_X',),
                  ORDRE ='CROISSANT'),);

TEST_TABLE(TABLE=TABDEPP,
                 NOM_PARA='DX-DXP',
                 TYPE_TEST='SOMM_ABS',
                 VALE=0.0,
                 REFERENCE ='ANALYTIQUE',
                 CRITERE='ABSOLU',
                 PRECISION=1E-12,);
TEST_TABLE(TABLE=TABDEPP,
                 NOM_PARA='DY',
                 TYPE_TEST='SOMM_ABS',
                 VALE=0.0,
                 REFERENCE ='ANALYTIQUE',
                 CRITERE='ABSOLU',
                 PRECISION=1E-12,);

TEST_TABLE(TABLE=TABDEPM,
                 NOM_PARA='DX-DXM',
                 TYPE_TEST='SOMM_ABS',
                 VALE=0.0,
                 REFERENCE ='ANALYTIQUE',
                 CRITERE='ABSOLU',
                 PRECISION=1E-12,);

TEST_TABLE(TABLE=TABDEPM,
                 NOM_PARA='DY',
                 TYPE_TEST='SOMM_ABS',
                 VALE=0.0,
                 REFERENCE ='ANALYTIQUE',
                 CRITERE='ABSOLU',
                 PRECISION=1E-12,);

FIN();                 
