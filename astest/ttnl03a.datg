# -*- coding: iso-8859-1 -*-

### This file is generated by SALOME automatically by dump python functionality

import sys
import salome

salome.salome_init()

import salome_notebook
notebook = salome_notebook.notebook
sys.path.insert( 0, r'/home/haelewyn/sources_modifiees/ttnl03')

import iparameters
ipar = iparameters.IParameters(salome.myStudy.GetCommonParameters("Interface Applicative", 1))

#Set up visual properties:
ipar.setProperty("AP_WORKSTACK_INFO", "0000000100000000000000020100000000")
ipar.setProperty("AP_SAVEPOINT_NAME", "GUI state: 1")


import ttnl03ac_GEOM
ttnl03ac_GEOM.RebuildData(salome.myStudy)
import ttnl03ac_SMESH
ttnl03ac_SMESH.RebuildData(salome.myStudy)

if salome.sg.hasDesktop():
	salome.sg.updateObjBrowser(1)
	iparameters.getSession().restoreVisualState(1)
# -*- coding: iso-8859-1 -*-
### This file is generated by SALOME automatically by dump python functionality
### of GEOM component

import GEOM
import geompy
import math
import SALOMEDS

def RebuildData(theStudy):
	geompy.init_geom(theStudy)

	global dessus1, cote1, Fuse_2, Vertex_7, Extrusion_1, Face_5, Fuse_3, Extrusion_2, Vertex_4, Line_3, Vertex_5, Face_1, Line_1, Vertex_2, dessus2, Face_4, cote2, Vertex_3, Fuse_1, Face_6, Face_2, Vertex_8, Face_3, Line_4, Vertex_1, Line_2, Vertex_6
	Vertex_1 = geompy.MakeVertex(0.25, 0.25, 0)
	Vertex_2 = geompy.MakeVertex(0.25, 0.25, 1)
	Vertex_3 = geompy.MakeVertex(0.25, 0.75, 1)
	Vertex_4 = geompy.MakeVertex(0.25, 0.75, 0)
	Vertex_5 = geompy.MakeVertex(0.75, 0.25, 0)
	Vertex_6 = geompy.MakeVertex(0.75, 0.25, 1)
	Vertex_7 = geompy.MakeVertex(0.75, 0.75, 1)
	Vertex_8 = geompy.MakeVertex(0.75, 0.75, 0)
	Line_1 = geompy.MakeLineTwoPnt(Vertex_1, Vertex_2)
	Vertex_1 = geompy.GetMainShape(Line_1)
	Line_2 = geompy.MakeLineTwoPnt(Vertex_5, Vertex_6)
	Vertex_5 = geompy.GetMainShape(Line_2)
	Line_3 = geompy.MakeLineTwoPnt(Vertex_8, Vertex_7)
	Vertex_8 = geompy.GetMainShape(Line_3)
	Line_4 = geompy.MakeLineTwoPnt(Vertex_4, Vertex_3)
	Vertex_4 = geompy.GetMainShape(Line_4)
	Face_1 = geompy.MakeFaceObjHW(Line_2, 0.5, 0.5)
	Face_2 = geompy.MakeFaceObjHW(Line_3, 0.5, 0.5)
	Face_3 = geompy.MakeFaceObjHW(Line_1, 0.5, 0.5)
	Face_4 = geompy.MakeFaceObjHW(Line_4, 0.5, 0.5)
	Fuse_1 = geompy.MakeFuse(Face_1, Face_2)
	Fuse_2 = geompy.MakeFuse(Face_4, Face_3)
	Fuse_3 = geompy.MakeFuse(Fuse_1, Fuse_2)
	Extrusion_1 = geompy.MakePrismVecH(Fuse_1, Line_2, 1)
	Extrusion_2 = geompy.MakePrismVecH(Fuse_2, Line_1, 1)
	[geomObj_1,geomObj_2,geomObj_3,geomObj_4,dessus1,geomObj_5,geomObj_6,geomObj_7,geomObj_8,geomObj_9,geomObj_10] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_11,geomObj_12,geomObj_13,geomObj_14,geomObj_15,geomObj_16,geomObj_17,dessus2,geomObj_18,geomObj_19,geomObj_20] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_21,geomObj_22,cote1,geomObj_23,geomObj_24,geomObj_25,geomObj_26,geomObj_27,geomObj_28,geomObj_29,geomObj_30] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_31,geomObj_32,geomObj_33,geomObj_34,geomObj_35,geomObj_36,geomObj_37,geomObj_38,cote2,geomObj_39,geomObj_40] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_41,geomObj_42,geomObj_43,geomObj_44,geomObj_45,geomObj_46,geomObj_47,geomObj_48,geomObj_49,Face_5,geomObj_50] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	[geomObj_51,geomObj_52,geomObj_53,geomObj_54,geomObj_55,geomObj_56,geomObj_57,geomObj_58,geomObj_59,geomObj_60,Face_6] = geompy.SubShapeAllSorted(Extrusion_2, geompy.ShapeType["FACE"])
	geompy.addToStudy( Vertex_1, "Vertex_1" )
	geompy.addToStudy( Vertex_2, "Vertex_2" )
	geompy.addToStudy( Vertex_3, "Vertex_3" )
	geompy.addToStudy( Vertex_4, "Vertex_4" )
	geompy.addToStudy( Vertex_5, "Vertex_5" )
	geompy.addToStudy( Vertex_6, "Vertex_6" )
	geompy.addToStudy( Vertex_7, "Vertex_7" )
	geompy.addToStudy( Vertex_8, "Vertex_8" )
	geompy.addToStudyInFather( Vertex_1, Line_1, "Line_1" )
	geompy.addToStudyInFather( Vertex_5, Line_2, "Line_2" )
	geompy.addToStudyInFather( Vertex_8, Line_3, "Line_3" )
	geompy.addToStudyInFather( Vertex_4, Line_4, "Line_4" )
	geompy.addToStudy( Face_1, "Face_1" )
	geompy.addToStudy( Face_2, "Face_2" )
	geompy.addToStudy( Face_3, "Face_3" )
	geompy.addToStudy( Face_4, "Face_4" )
	geompy.addToStudy( Fuse_1, "Fuse_1" )
	geompy.addToStudy( Fuse_2, "Fuse_2" )
	geompy.addToStudy( Fuse_3, "Fuse_3" )
	geompy.addToStudy( Extrusion_1, "Extrusion_1" )
	geompy.addToStudy( Extrusion_2, "Extrusion_2" )
	geompy.addToStudyInFather( Extrusion_2, dessus1, "dessus1" )
	geompy.addToStudyInFather( Extrusion_2, dessus2, "dessus2" )
	geompy.addToStudyInFather( Extrusion_2, cote1, "cote1" )
	geompy.addToStudyInFather( Extrusion_2, cote2, "cote2" )
	geompy.addToStudyInFather( Extrusion_2, Face_5, "Face_5" )
	geompy.addToStudyInFather( Extrusion_2, Face_6, "Face_6" )

	### Store presentation parameters of displayed objects
	import iparameters
	ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "GEOM", 1))


	pass
# -*- coding: iso-8859-1 -*-
### This file is generated by SALOME automatically by dump python functionality of SMESH component

import salome, SMESH, SALOMEDS
import smesh

## import GEOM dump file ## 
import string, os, sys, re
sys.path.insert( 0, os.path.dirname(__file__) )
exec("from "+re.sub("SMESH$","GEOM",__name__)+" import *")


def RebuildData(theStudy):
	smesh.SetCurrentStudy(theStudy)
	import StdMeshers
	import NETGENPlugin
	smeshObj_1 = smesh.Mesh(Fuse_3)
	Netgen_1D_2D = smeshObj_1.Triangle(algo=smesh.NETGEN)
	isDone = smeshObj_1.Compute()
	smeshObj_2 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'A' )
	nbAdd = smeshObj_2.Add( [ 6 ] )
	smeshObj_3 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'B' )
	nbAdd = smeshObj_3.Add( [ 3 ] )
	smeshObj_4 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'C' )
	nbAdd = smeshObj_4.Add( [ 7 ] )
	smeshObj_5 = smeshObj_1.CreateEmptyGroup( SMESH.NODE, 'D' )
	nbAdd = smeshObj_5.Add( [ 9 ] )
	smeshObj_6 = smeshObj_1.CreateEmptyGroup( SMESH.EDGE, 'DC' )
	nbAdd = smeshObj_6.Add( [ 12, 10 ] )
	smesh.SetName(smeshObj_1, 'Mesh_1')
	smeshObj_1.ExportMED( '/home/haelewyn/ther_hydr/ttnl03jm.med', 0, SMESH.MED_V2_2 )
	qua12 = smesh.Mesh(Fuse_1)
	tri12 = smesh.Mesh(Fuse_2)
	Regular_1D = qua12.Segment()
	Nb_Segments_1 = Regular_1D.NumberOfSegments(1)
	Nb_Segments_1.SetDistrType( 0 )
	Quadrangle_2D = qua12.Quadrangle()
	isDone = qua12.Compute()
	Average_length_1 = smesh.CreateHypothesis('NETGEN_Parameters_2D', 'NETGENEngine')
	Regular_1D_1 = tri12.Segment()
	status = tri12.AddHypothesis(Nb_Segments_1)
	Netgen_2D = tri12.Triangle(algo=smesh.NETGEN_2D)
	isDone = tri12.Compute()
	tri_quad = smesh.Concatenate([tri12.GetMesh(), qua12.GetMesh()], 1, 1, 1e-05,True)
	[ smeshObj_7, smeshObj_8, smeshObj_9, smeshObj_10, smeshObj_11, smeshObj_12 ] = tri_quad.GetGroups()
	DC = tri_quad.CreateEmptyGroup( SMESH.EDGE, 'DC' )
	nbAdd = DC.Add( [ 3, 17 ] )
	A = tri_quad.CreateEmptyGroup( SMESH.NODE, 'A' )
	nbAdd = A.Add( [ 5 ] )
	B = tri_quad.CreateEmptyGroup( SMESH.NODE, 'B' )
	nbAdd = B.Add( [ 9 ] )
	C = tri_quad.CreateEmptyGroup( SMESH.NODE, 'C' )
	nbAdd = C.Add( [ 12 ] )
	D = tri_quad.CreateEmptyGroup( SMESH.NODE, 'D' )
	nbAdd = D.Add( [ 2 ] )
	smesh.SetName(tri_quad, 'tri_quad')
	tri_quad.ExportMED( '/home/haelewyn/ther_hydr/tri_quad.med', 0, SMESH.MED_V2_2 )
	tri_quad.RemoveGroup( smeshObj_12 )
	tri_quad.RemoveGroup( smeshObj_9 )
	tri_quad.RemoveGroup( smeshObj_11 )
	tri_quad.RemoveGroup( smeshObj_8 )
	smesh.SetName(tri_quad, 'tri_quad')
	tri_quad.ExportMED( '/home/haelewyn/ther_hydr/tri_quad.med', 0, SMESH.MED_V2_2 )
	tri_quad.RemoveGroup( smeshObj_7 )
	tri_quad.RemoveGroup( smeshObj_10 )
	smesh.SetName(tri_quad, 'tri_quad')
	tri_quad.ExportMED( '/home/haelewyn/ther_hydr/tri_quad.med', 0, SMESH.MED_V2_2 )
	mesh_editor_2 = tri_quad.GetMeshEditor()
	isDone = mesh_editor_2.Make2DMeshFrom3D()
	mesh_editor_1 = tri12.GetMeshEditor()
	isDone = mesh_editor_1.Make2DMeshFrom3D()
	Nb_Segments_1.SetNumberOfSegments( 1 )
	Nb_Segments_1.SetDistrType( 0 )
	smeshObj_13 = smesh.Mesh(Extrusion_1)
	status = smeshObj_13.AddHypothesis(Nb_Segments_1)
	Regular_1D_2 = smeshObj_13.Segment()
	Netgen_2D_1 = smeshObj_13.Triangle(algo=smesh.NETGEN_2D)
	Tetrahedron_Netgen = smeshObj_13.Tetrahedron(algo=smesh.NETGEN)
	isDone = smeshObj_13.Compute()
	Average_length_1 = smesh.CreateHypothesis('LocalLength')
	Average_length_1.SetLength( 0.5 )
	Average_length_1.SetPrecision( 1e-07 )
	status = smeshObj_13.RemoveHypothesis(Nb_Segments_1)
	status = smeshObj_13.AddHypothesis(Average_length_1)
	isDone = smeshObj_13.Compute()
	smeshObj_14 = smesh.Mesh(Extrusion_2)
	Prism_3D = smesh.CreateHypothesis('Prism_3D')
	isDone = qua12.Compute()
	isDone = tri12.Compute()
	status = smeshObj_13.RemoveHypothesis(Tetrahedron_Netgen)
	status = smeshObj_13.RemoveHypothesis(Netgen_2D)
	status = smeshObj_13.RemoveHypothesis(Regular_1D)
	status = smeshObj_13.RemoveHypothesis(Average_length_1)
	smeshObj_1.RemoveGroup( smeshObj_6 )
	smeshObj_1.RemoveGroup( smeshObj_5 )
	smeshObj_1.RemoveGroup( smeshObj_4 )
	smeshObj_1.RemoveGroup( smeshObj_3 )
	smeshObj_1.RemoveGroup( smeshObj_2 )
	status = smeshObj_1.RemoveHypothesis(Netgen_1D_2D)

	A.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	B.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	C.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	D.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	DC.SetColor(SALOMEDS.Color(0, 0.666667, 1 ))
	## some objects were removed
	aStudyBuilder = theStudy.NewBuilder()
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_1.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_2))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_3))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_4))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_5))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_6))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_7))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_8))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_9))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_10))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_11))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_12))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_13.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	SO = theStudy.FindObjectIOR(theStudy.ConvertObjectToIOR(smeshObj_14.GetMesh()))
	if SO is not None: aStudyBuilder.RemoveObjectWithChildren(SO)
	## set object names
	smesh.SetName(Netgen_1D_2D.GetAlgorithm(), 'Netgen 1D-2D')
	smesh.SetName(qua12.GetMesh(), 'qua12')
	smesh.SetName(tri12.GetMesh(), 'tri12')
	smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
	smesh.SetName(Nb_Segments_1, 'Nb. Segments_1')
	smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
	smesh.SetName(Average_length_1, 'Average length_1')
	smesh.SetName(Netgen_2D.GetAlgorithm(), 'Netgen 2D')
	smesh.SetName(tri_quad.GetMesh(), 'tri_quad')
	smesh.SetName(DC, 'DC')
	smesh.SetName(A, 'A')
	smesh.SetName(B, 'B')
	smesh.SetName(C, 'C')
	smesh.SetName(D, 'D')
	smesh.SetName(Tetrahedron_Netgen.GetAlgorithm(), 'Tetrahedron (Netgen)')
	smesh.SetName(Prism_3D, 'Prism_3D')
	if salome.sg.hasDesktop():
		salome.sg.updateObjBrowser(0)

	### Store presentation parameters of displayed objects
	import iparameters
	ipar = iparameters.IParameters(theStudy.GetModuleParameters("Interface Applicative", "SMESH", 1))



	pass
