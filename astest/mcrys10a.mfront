/*!
 * \file   GdefMono_Jacnum.mfront
 * \brief
 * \author Jean-Michel Proix - Helfer Thomas
 * \date   20 mars 2014
 */

@Parser    ImplicitFiniteStrain;
@Behaviour GdefMono_Jacnum;
@Author TH/JMP;
@Description{
  "Test d'implantation d'une loi "
  "monocristalline en grandes déformations"
}

@ModellingHypothesis Tridimensional;
@OrthotropicBehaviour;
@RequireStiffnessTensor;

@Algorithm NewtonRaphson_NumericalJacobian;
@Theta 1.;
@Epsilon 1.e-9;

@IntegrationVariable StrainStensor eel;
@StateVariable strain g[12];

// Mandel stress tensor
@LocalVariable StressTensor M;
// multiplicative increment fo the deformation gradient
@LocalVariable Tensor dF;
/*!
 * Estimation élastique de la partie élastique du gradient de la
 * transformation
 */
@LocalVariable Tensor Fe_tr;
/*!
 * Partie élastique du gradient de la
 * transformation en début de pas
 */
@LocalVariable Tensor Fe0;
/*!
 * Second tenseur de Piola-Kirchhoff calculé dans la configuration
 * intermédaire.
 */
@LocalVariable StressStensor S;
/*!
 * inverse de l'incrément de gradient de transformation plastique
 */
@LocalVariable DeformationGradientTensor inv_dFp;


@AuxiliaryStateVariable Tensor Fe;
@AuxiliaryStateVariable real p[12];
@AuxiliaryStateVariable real a[12];

@Includes{
#include"TFEL/Math/General/CubicRoots.hxx"
#include"TFEL/Material/MetallicCFCSlidingSystems.hxx"
#include"TFEL/Material/MetallicCFCGenericSlidingSystemsInteractionMatrix.hxx"
}

@Members{
  // Mono crystal gliding system
  typedef MetallicCFCSlidingSystems<real> SlidingSystems;
  // Interaction matrix
  typedef MetallicCFCGenericSlidingSystemsInteractionMatrix<real> InteractionMatrix;
  // number of sliding systems
  static const unsigned short Nss = SlidingSystems::Nss;
}

//! interaction matrix
@LocalVariable tfel::math::tmatrix<12,12,real> mh;

@Parameter h1 = 1.  ;
@Parameter h2 = 1.  ;
@Parameter h3 = 0.6 ;
@Parameter h4 = 12.3;
@Parameter h5 = 1.6 ;
@Parameter h6 = 1.8 ;

@MaterialProperty real m;
@MaterialProperty real K;
@MaterialProperty real C;
@MaterialProperty real R0;
@MaterialProperty real Q;
@MaterialProperty real b;
@MaterialProperty real d1;

@InitLocalVariables{
  dF  = F1*invert(F0);
  // sauvegarde de la partie élastique du gradient de la
  // transformation en début de pas pour le calcul de l'opérateur
  // tangent
  Fe0 = Fe;
  // estimation élastique du tenseur d'élasticité en fin de pas
  Fe_tr = dF*Fe;
  // déformation élastique en début de pas
  eel = computeGreenLagrangeTensor(Fe);
  // la matrice d'interaction construite une fois pour toute
  mh = InteractionMatrix::getInteractionMatrix(h1,h2,h3,
					       h4,h5,h6);
} // end of @InitLocalVars

@Integrator{
  const SlidingSystems& ss = SlidingSystems::getSlidingSystems();
  // second piola-kirchhoff stress tensor
  S = D*(eel+deel);
  // Mandel stress tensor
  const StrainStensor tmp(StrainStensor::Id() + 2*(eel+deel));
  M  = tmp*S;
  // approximation de l'inverse de l'incrément de la partie plastique
  // du gradient de la transformation
  inv_dFp = Tensor::Id();
  for(unsigned short i=0;i!=12;++i){
    inv_dFp -= dg[i]*ss.mu[i];
  }
  real J_inv_dFp = det(inv_dFp);
  inv_dFp /= CubicRoots::cbrt(J_inv_dFp);
  // Fe en fin de pas de temps
  Fe  = Fe_tr*inv_dFp;
  // équation associée à l'incrément de déformation élastique
  feel = eel+deel-computeGreenLagrangeTensor(Fe);
  // increment de déformation plastique
  real vp[Nss];
  real ag[Nss];
  real pe[Nss];
  for(unsigned short i=0;i!=Nss;++i){
    ag[i] = abs(dg[i]);
    pe[i] = Q*(1.-exp(-b*(p[i]+theta*ag[i]))) ;
  }
  for(unsigned short i=0;i!=Nss;++i){
    real Rp = R0;
    for(unsigned short j=0;j!=Nss;++j){
      Rp += mh(i,j)*pe[j] ;
    }
    const real tau = ss.mu[i] | M ;
    const real va  = (dg[i]-d1*a[i]*ag[i])/(1.+d1*theta*ag[i]);
    const real tma = tau-C*(a[i]+theta*va) ;
    const real tmR = abs(tma)-Rp;
    if (tmR>0.){
      if(tmR>1.2*K){
	return false;
      }
      real sgn=tma/abs(tma);
      vp[i]  = dt*sgn*pow((tmR/K),m);
    } else{
      vp[i]=0.;
    }
    fg[i]  -= vp[i];
  }
} // end of @Integrator


@ComputeFinalStress{
  const SlidingSystems& ss = SlidingSystems::getSlidingSystems();
  // approximation de l'inverse de \(\Delta\,F_p\)
  inv_dFp = Tensor::Id();
  for(unsigned short i=0;i!=12;++i){
    inv_dFp -= dg[i]*ss.mu[i];
  }
  real J_inv_dFp = det(inv_dFp);
  inv_dFp /= CubicRoots::cbrt(J_inv_dFp);
  // Fe en fin de pas de temps
  Fe  = Fe_tr*inv_dFp;
  // Piola-Kirchhoff II
  S = D*eel;
  // Cauchy
  sig = convertSecondPiolaKirchhoffStressToCauchyStress(S,Fe);
}

@UpdateAuxiliaryStateVars{
  for(unsigned short i=0;i!=Nss;++i){
    p[i]+=abs(dg[i]);
    a[i]+=(dg[i]-d1*a[i]*abs(dg[i]))/(1.+d1*abs(dg[i]));
  }
}

@TangentOperator<DTAU_DDF>{
  const SlidingSystems& ss = SlidingSystems::getSlidingSystems();
  /*!
   * Nous utilisons ici un opérateur naturel pour le code aux éléments
   * finis Code-Aster~: on laissera MFront généré les autres
   * opérateurs.
   *
   * Le point de départ du calcul est la relation~:
   * \[
   * \deriv{\tenseur{\tau}}{\Delta\,\tns{F}}=\deriv{\tenseur{\tau}}{\tns{F}_{e}}\deriv{\tns{F}_{e}}{\Delta\,\tns{F}}
   * \]
   *
   * Nous calculons maintenant chacun des termes du produit.
   */

  /*!
   * La contrainte de Kirchhoff \(\tenseur{\tau}\) se calcule par le
   * transport dans la configuration finale du second tenseur de
   * Piola-Kirchhoff calculé dans la configuration intermédiaire.
   *\[
   * \tenseur{\tau} = \tns{F}_{e}\,\star\,\tenseur{S}\,\star\,\transpose{\tns{F}_{e}}
   *\]
   *où \(\star\) représente le produit matriciel.
   *
   * TFEL propose la méthode computePushForwardDerivative permettant
   * de relier la dérivée \(\deriv{\tenseur{\tau}}{\tns{F}_{e}}\) à la
   * dérivée du second tenseur de Piola-Kirchhoff
   * \(\deriv{\tenseur{S}}{\tns{F}_{e}}\). Cette dérivée se calcule
   * par dérivation en chaînes~:
   * \[
   * \deriv{\tenseur{S}}{\tns{F}_{e}}=\deriv{\tenseur{S}}{\tepsilonel_{GL}}\deriv{\tepsilonel_{GL}}{\tenseur{C}_{e}}\deriv{\tenseur{C}_{e}}{\tns{F}_{e}}
   * \]
   * soit:
   * \[
   * \deriv{\tenseur{S}}{\tns{F}_{e}}=0.5\,D\,\deriv{\tenseur{C}_{e}}{\tns{F}_{e}}
   * \]
   *
   * La dérivée \(\deriv{\tenseur{C}_{e}}{\tns{F}_{e}}\) se calcule
   * par la méthode statique dCdF de la classe t2tost2.
   */
  const t2tost2<N,stress> dC_dFe = t2tost2<N,real>::dCdF(Fe);
  const t2tost2<N,stress> dS_dFe = 0.5*D*dC_dFe;
  t2tost2<N,stress> dtau_dFe;
  computePushForwardDerivative(dtau_dFe,dS_dFe,S,Fe);
  /*!
   * Il nous fait maintenant calculer le terme \(\deriv{\tns{F}_{e}}{\Delta\,\tns{F}}\).
   *
   * Nous savons que~:
   * \[
   * \tns{F}_{e}=\tns{F}_{e}^{\mathrm{tr}}\,\star\,\paren{\Delta\,\tns{F}_{p}}^{-1}
   * \]
   * Par dérivation, nous obtenons~:
   * \[
   * \deriv{\tns{F}_{e}}{\Delta\,\tns{F}}=
   * \partial^{l}_{\star}\paren{\paren{\Delta\,\tns{F}_{p}}^{-1}}\,\deriv{\tns{F}_{e}^{\mathrm{tr}}}{\Delta\,\tns{F}}+
   * \partial^{r}_{\star}\paren{\tns{F}_{e}^{\mathrm{tr}}}\,\deriv{\paren{\Delta\,\tns{F}_{p}}^{-1}}{\Delta\,\tns{F}}
   * \]
   *
   * Le calcul du terme
   * \(\deriv{\tns{F}_{e}^{\mathrm{tr}}}{\Delta\,\tns{F}}\) est
   * aisé~:
   * \[
   * \deriv{\tns{F}_{e}^{\mathrm{tr}}}{\Delta\,\tns{F}}=
   * \partial^{l}_{\star}\paren{\bts{\tns{F}_e}}
   * \]
   *
   * Pour le calcul de la dérivée
   * \(\deriv{\paren{\Delta\,\tns{F}_{p}}^{-1}}{\Delta\,\tns{F}}\),
   * nous pouvons nous baser sur l'approximation faite lors de
   * l'intégration. Nous avons alors directement~:
   * \[
   * \deriv{\paren{\Delta\,\tns{F}_{p}}^{-1}}{\Delta\,\tns{F}}=
   * -\sum_{i=1}^{12}\tns{\mu}_{i}\,\otimes\,\deriv{\Delta\,g_{i}}{\Delta\,\tns{F}}
   * \]
   *
   * Le calcul de \(\deriv{\Delta\,g_{i}}{\Delta\,\tns{F}}\)
   * représente la seule vraie difficulté. Son calcul peut se faire en
   * généralisant les techniques utilisées en petites déformations.
   *
   * Pour toute variation de \(\delta\,\Delta\,\tns{F}\) de
   * \(\Delta\,\tns{F}\), la variation du système implicite
   * \(\delta\,F\) est nulle~: \[
   * \delta\,F\paren{\Delta\,Y\paren{\delta\,\Delta\,\tns{F}},\delta\,\Delta\,\tns{F}}
   * =J\,\delta\,\Delta\,Y+
   * \left.\deriv{F}{\Delta\,\tns{F}}\right|_{\paren{\Delta\,\tepsilonel,\Delta\,g_{i}}}\,\delta\,\Delta\,\tns{F}=0
   * \]
   *
   * Nous avons explicitement spécifié, en utilisant la notation
   * classique de la thermodynamique, que le calcul du terme
   * \(\left.\deriv{F}{\Delta\,\tns{F}}\right|_{\paren{\Delta\,\tepsilonel,\Delta\,g_{i}}}\)
   * se faisait en supposant que \(\Delta\,\tepsilonel\) et
   * \(\Delta\,g_{i}\) étaient des variables indépendantes.
   *
   * Il est donc nécessaire de calculer la dérivée
   * \(\left.\deriv{F}{\Delta\,\tns{F}}\right|_{\paren{\Delta\,\tepsilonel,\Delta\,g_{i}}}\) dont la seule composante non nulle
   * est \(\left.\deriv{f_{\tepsilonel}}{\Delta\,\tns{F}}\right|_{\paren{\Delta\,\tepsilonel,\Delta\,g_{i}}}\)~:
   * \[
   * \left.\deriv{f_{\tepsilonel}}{\Delta\,\tns{F}}\right|_{\paren{\Delta\,\tepsilonel,\Delta\,g_{i}}}=
   * -\Frac{1}{2}\,\deriv{\tenseur{C}_{e}}{\tns{F}_{e}}\,.\,
   * \deriv{\tns{F}_{e}}{\Delta\,\tns{F}}=
   * -\Frac{1}{2}\,\deriv{\tenseur{C}_{e}}{\tns{F}_{e}}\,.\,
   * \deriv{}{\Delta\,\tns{F}}\paren{\tns{F}_{e}^{\mathrm{tr}}\,\star\,\paren{\Delta\,\tns{F}_{p}}^{-1}}
   * \]
   *
   * \[
   * \deriv{}{\Delta\,\tns{F}}\paren{\tns{F}_{e}^{\mathrm{tr}}\,\star\,\paren{\Delta\,\tns{F}_{p}}^{-1}}=
   * \partial^{l}_{\star}\paren{\paren{\Delta\,\tns{F}_{p}}^{-1}}\,.\,
   * \deriv{\tns{F}_{e}^{\mathrm{tr}}}{\Delta\,\tns{F}}=
   * \partial^{l}_{\star}\paren{\paren{\Delta\,\tns{F}_{p}}^{-1}}\,.\,
   * \partial^{l}_{\star}\paren{\bts{\tns{F}_{e}}}
   * \]
   *
   * Finalement, \(\deriv{f_{\tepsilonel}}{\Delta\,\tns{F}}\) s'écrit~:
   * \[
   * \deriv{f_{\tepsilonel}}{\Delta\,\tns{F}}=-\Frac{1}{2}\,\deriv{\tenseur{C}_{e}}{\tns{F}_{e}}\,.\,
   * \partial^{l}_{\star}\paren{\paren{\Delta\,\tns{F}_{p}}^{-1}}\,.\,
   * \partial^{l}_{\star}\paren{\bts{\tns{F}_{e}}}
   * \]
   */
  const t2tot2<N,real>  dFe_dDF_tot = t2tot2<N,real>::tpld(inv_dFp,t2tot2<N,real>::tpld(Fe0));
  const t2tost2<N,real> dfeel_dDF  = -0.5*dC_dFe*dFe_dDF_tot;
  /*!
   * La dérivée \(\deriv{\Delta\,g_{i}}{\Delta\,\tns{F}}\) est alors~:
   * \[
   * \deriv{\Delta\,g_{i}}{\Delta\,\tns{F}}=-J^{-1}_{\Delta\,g_{i}}|\deriv{f_{\tepsilonel}}{\Delta\,\tns{F}}
   * \]
   */
  st2tost2<N,real> Je;
  tvector<12u,Stensor> Jg;
  getPartialJacobianInvert(Je,Jg);
  // calcul de dinv_Fp_dDF
  t2tot2<N,real> dinv_Fp_dDF((ss.mu[0])^(Jg[0]|dfeel_dDF));
  for(unsigned short i=1;i!=12;++i){
    dinv_Fp_dDF += (ss.mu[i])^(Jg[i]|dfeel_dDF);
  }
  // On peut maintenant calculer dFe_dDF
  const t2tot2<N,real> dFe_dDF=
    dFe_dDF_tot+t2tot2<N,real>::tprd(Fe_tr,dinv_Fp_dDF);
  // et enfin, l'opérateur tangent
  Dt = dtau_dFe*dFe_dDF;
}
