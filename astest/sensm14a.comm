# MODIF  DATE 31/01/2005   AUTEUR F6BHHBO P.DEBONNIERES 
# RESPONSABLE F6BHHBO P.DEBONNIERES
# TITRE CAVITE 2D CALCUL DE SENSIBILITE (LOI DE DRUCKER-PRAGER)
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2005  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY  
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY  
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR     
# (AT YOUR OPTION) ANY LATER VERSION.                                                    
#                                                                       
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT   
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF            
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU      
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.                              
#                                                                       
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE     
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,         
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.        
# ======================================================================
#            CONFIGURATION MANAGEMENT OF EDF VERSION
#
DEBUT(CODE=_F(NOM='SENSM14A',NIV_PUB_WEB='INTERNET'),PAR_LOT='NON');
#
#......................................................................
# CREUSEMENT D'UNE CAVITE CIRCULAIRE
# CALCUL 2D TIRE D'UN BENCHMARK MOMAS
# LOI DE DRUCKER-PRAGER (ECROUISSAGE LINEAIRE)
# SENSIBILITE AUX PARAMETRES MATERIAU
#......................................................................
#

#
# 1. Definition/memorisation des fonctions constantes
#

PS_UN = DEFI_CONSTANTE(VALE = 1.0);
MEMO_NOM_SENSI(NOM_UN = PS_UN);

PS_ZERO = DEFI_CONSTANTE(VALE = 0.0);
MEMO_NOM_SENSI(NOM_ZERO = PS_ZERO);

#
# 2. Definition du dictionnaire des parametres
#

mot_cle = [ "E", "NU", "ALPHA", "P_ULTM", "SY", "H" ]
sensible = [ 5800.0E6,  0.3,  0.328, 1.225E-2, 2.11E6, 1.7E10 ]

#
# 3. Definition des parametres sensibles
#

n = len(sensible)
PS = [None]*n
for i in range(n):
  PS[i] = DEFI_PARA_SENSI(VALE = sensible[i]);
  MEMO_NOM_SENSI(NOM = _F(NOM_SD = PS[i].nom,
                          PARA_SENSI = PS[i],
                          NOM_COMPOSE = PS_UN.nom));

#
# 4. Maillage
#

PRE_GIBI();
MAILLAGE = LIRE_MAILLAGE();

#
# 5. Modele
#

MODEMECA = AFFE_MODELE(MAILLAGE = MAILLAGE,
                       AFFE = _F(TOUT = 'OUI',
                                 PHENOMENE = 'MECANIQUE',
                                 MODELISATION = 'D_PLAN')
                      );

MAILLAGE = MODI_MAILLAGE(reuse = MAILLAGE,
                         MAILLAGE = MAILLAGE,
                         MODELE = MODEMECA,
                         ORIE_PEAU_2D = _F(GROUP_MA = ('HAUT',
                                                       'BAS',
                                                       'GAUCHE',
                                                       'CAVITE',
                                                       'DERECHA',
                                                      )
                                          ),
                         INFO = 1);

MAILLAGE = DEFI_GROUP(reuse = MAILLAGE,
                      MAILLAGE = MAILLAGE,
                      CREA_GROUP_NO = ( _F(GROUP_MA='ROCHE',),
                                        _F(GROUP_MA='DERECHA',),
                                        _F(GROUP_MA='GAUCHE',),
                                        _F(GROUP_MA='CAVITE',),
                                        _F(GROUP_MA='DIAGON',),
                                        _F(GROUP_MA='HAUT',),
                                        _F(GROUP_MA='BAS',),
                                        _F(NOM='DERECHM', DIFFE=('DERECHA', 'D4',),),
                                        _F(NOM='GAUCHM', DIFFE=('GAUCHE', 'G1',),),
                                        _F(NOM='BASM', DIFFE=('BAS', 'B1',),),
                                      )
                     );

#
# 6. Mise en place des materiaux
#

SOL = DEFI_MATERIAU(ELAS_FO = _F(E = PS[0],
                                 NU = PS[1],
                                 RHO = 2764.0,
                                ),
                    DRUCK_PRAGER_FO = _F(ECROUISSAGE = 'LINEAIRE',
                                         ALPHA = PS[2],
                                         P_ULTM = PS[3],
                                         SY = PS[4],
                                         H = PS[5])
                   );

SOLS = [None]*n
for i in range(n):
  PSFONC = [PS_ZERO]*n
  PSFONC[i] = PS_UN
  SOLS[i] = DEFI_MATERIAU(ELAS_FO = _F(E = PSFONC[0],
                                       NU = PSFONC[1],
                                       RHO = 2764.0,
                                      ),
                          DRUCK_PRAGER_FO = _F(ECROUISSAGE = 'LINEAIRE',
                                               ALPHA = PSFONC[2],
                                               P_ULTM = PSFONC[3],
                                               SY = PSFONC[4],
                                               H = PSFONC[5])
                                              );
  if i<2 :
    MEMO_NOM_SENSI(NOM = _F(NOM_SD = 'SOL',
                            PARA_SENSI = PS[i],
                            NOM_COMPOSE = SOLS[i].nom,
                            MOT_CLE = mot_cle[i],
                            MOT_FACT='ELAS_FO',
                            VALEUR = PS[i].nom ),);
  else :
    MEMO_NOM_SENSI(NOM = _F(NOM_SD = 'SOL',
                            PARA_SENSI = PS[i],
                            NOM_COMPOSE = SOLS[i].nom,
                            MOT_CLE = mot_cle[i],
                            MOT_FACT='DRUCK_PRAGER_FO',
                            VALEUR = PS[i].nom ),);

#
# 7. Affectation des materiaux
#

MATEMAIL = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                         AFFE = _F(TOUT='OUI', MATER = SOL));
CHMS = [None]*n
for i in range(n):
  CHMS[i] = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT='OUI', MATER = SOLS[i]));
  MEMO_NOM_SENSI(NOM = _F(NOM_SD = 'MATEMAIL',
                          PARA_SENSI = PS[i],
                          NOM_COMPOSE = CHMS[i].nom,
                          MOT_CLE = 'MATER',
                          MOT_FACT = 'AFFE',
                          VALEUR = 'SOL' ));

#
# 8. Chargements
#

TEMPS = DEFI_LIST_REEL(DEBUT = 0.0,
                       INTERVALLE = (_F(JUSQU_A = 1.000E5, NOMBRE = 1),
                                     _F(JUSQU_A = 1.500E6, NOMBRE = 2),),
                      );

COEF1 = DEFI_FONCTION(NOM_PARA = 'INST',
                      VALE = (0.0, 0.0,
                              1.0E5,  1.0,
                              1.50E6, 1.0, ),
                      PROL_DROITE = 'CONSTANT',);

COEF2 = DEFI_FONCTION(NOM_PARA = 'INST',
                      VALE = (0.0, 0.0,
                              1.0E5, 1.0,
                              1.50E6, 0.0, ),
                      PROL_DROITE = 'CONSTANT',);

FX = DEFI_FONCTION(NOM_PARA = 'X',
                   VALE = (0.0, 0.0,
                           3.0, 1.1E7,),
                  );

FY = DEFI_FONCTION(NOM_PARA = 'Y',
                   VALE = (0.0, 0.0,
                           3.0, 1.54E7,),
                  );

CALDEM = AFFE_CHAR_MECA(MODELE=MODEMECA,
                        DDL_IMPO=(_F(GROUP_NO=('GAUCHM',),
                                     DX=0.0,),
                                  _F(GROUP_NO='BASM',
                                     DY=0,),),);

CALDEP = AFFE_CHAR_MECA(MODELE=MODEMECA,
                        DDL_IMPO=(_F(GROUP_NO=('GAUCHE',),
                                     DX=0.0,),
                                  _F(GROUP_NO='BAS',
                                     DY=0,),),);

CALEXT = AFFE_CHAR_MECA(MODELE=MODEMECA,
                        PRES_REP=_F(GROUP_MA = 'DERECHA',
                                    PRES = 1.1E7,),);

CALHAU = AFFE_CHAR_MECA(MODELE=MODEMECA,
                        PRES_REP=_F(GROUP_MA = 'HAUT',
                                    PRES = 1.54E7,),);

FCAVITE = AFFE_CHAR_MECA_F(MODELE = MODEMECA,
                           FORCE_CONTOUR = _F(GROUP_MA = 'CAVITE',
                                              FX = FX,
                                              FY = FY,),
                          );

PRES_CAV = AFFE_CHAR_MECA(MODELE = MODEMECA,
                          PRES_REP = _F(GROUP_MA = 'CAVITE',
                                        PRES = 1.0E7,),
                         );

#
# 9. Calcul
#

for i in range(n):
  MEMO_NOM_SENSI(NOM = _F(NOM_SD = 'RES',
                          PARA_SENSI = PS[i],
                          NOM_COMPOSE = ('RES_'+PS[i].nom)));

RES = STAT_NON_LINE(MODELE = MODEMECA,
                    CHAM_MATER = MATEMAIL,
                    EXCIT = (_F(CHARGE = CALDEP,),
                             _F(CHARGE = FCAVITE, FONC_MULT = COEF2),
                             #_F(CHARGE = PRES_CAV, FONC_MULT = COEF2),
                             _F(CHARGE = CALEXT, FONC_MULT = COEF1),
                             _F(CHARGE = CALHAU, FONC_MULT = COEF1),
                            ),
                    COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER'),
                    INCREMENT = _F(LIST_INST = TEMPS,
                                   SUBD_PAS = 4,
                                   SUBD_PAS_MINI = 1,),
                    NEWTON = _F(MATRICE = 'TANGENTE',
                                REAC_ITER = 1),
                    CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-09,
                                     ITER_GLOB_MAXI = 20,
                                     RESI_INTE_RELA = 1E-09,
                                     ITER_INTE_MAXI = 5,
                                     ITER_INTE_PAS = 10,),
                    SENSIBILITE= tuple(PS),
                   );








#
# Verification par differences finies (deplacements)
#

epsilon = 1.E-5
for i in range(n):
  eps2 = [1.]*n
  eps3 = [1.]*n
  eps2[i]=1.0 + epsilon
  eps3[i]=1.0 - epsilon

  SOL2 = DEFI_MATERIAU(ELAS = _F(E = sensible[0]*eps2[0],
                                 NU = sensible[1]*eps2[1],
                                 RHO = 2764.0,
                                ),
                       DRUCK_PRAGER = _F(ECROUISSAGE = 'LINEAIRE',
                                         ALPHA = sensible[2]*eps2[2],
                                         P_ULTM = sensible[3]*eps2[3],
                                         SY = sensible[4]*eps2[4],
                                         H = sensible[5]*eps2[5])
                      );

  SOL3 = DEFI_MATERIAU(ELAS = _F(E = sensible[0]*eps3[0],
                                 NU = sensible[1]*eps3[1],
                                 RHO = 2764.0,
                                ),
                       DRUCK_PRAGER = _F(ECROUISSAGE = 'LINEAIRE',
                                         ALPHA = sensible[2]*eps3[2],
                                         P_ULTM = sensible[3]*eps3[3],
                                         SY = sensible[4]*eps3[4],
                                         H = sensible[5]*eps3[5])
                      );

  MATEMA2 = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT='OUI', MATER = SOL2));

  MATEMA3 = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT='OUI', MATER = SOL3));

  RES2 = STAT_NON_LINE(MODELE = MODEMECA,
                      CHAM_MATER = MATEMA2,
                      EXCIT = (_F(CHARGE = CALDEP,),
                               _F(CHARGE = FCAVITE, FONC_MULT = COEF2),
                               #_F(CHARGE = PRES_CAV, FONC_MULT = COEF2),
                               _F(CHARGE = CALEXT, FONC_MULT = COEF1),
                               _F(CHARGE = CALHAU, FONC_MULT = COEF1),
                              ),
                      COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER'),
                      INCREMENT = _F(LIST_INST = TEMPS,
                                     SUBD_PAS = 4,
                                     SUBD_PAS_MINI = 1,),
                      NEWTON = _F(MATRICE = 'TANGENTE',
                                  REAC_ITER = 1),
                      CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-06,
                                       ITER_GLOB_MAXI = 20,
                                       RESI_INTE_RELA = 1E-06,
                                       ITER_INTE_MAXI = 5,
                                       ITER_INTE_PAS = 10,),
                     );

  RES3 = STAT_NON_LINE(MODELE = MODEMECA,
                      CHAM_MATER = MATEMA3,
                      EXCIT = (_F(CHARGE = CALDEP,),
                               _F(CHARGE = FCAVITE, FONC_MULT = COEF2),
                               #_F(CHARGE = PRES_CAV, FONC_MULT = COEF2),
                               _F(CHARGE = CALEXT, FONC_MULT = COEF1),
                               _F(CHARGE = CALHAU, FONC_MULT = COEF1),
                              ),
                      COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER'),
                      INCREMENT = _F(LIST_INST = TEMPS,
                                     SUBD_PAS = 4,
                                     SUBD_PAS_MINI = 1,),
                      NEWTON = _F(MATRICE = 'TANGENTE',
                                  REAC_ITER = 1),
                      CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-06,
                                       ITER_GLOB_MAXI = 20,
                                       RESI_INTE_RELA = 1E-06,
                                       ITER_INTE_MAXI = 5,
                                       ITER_INTE_PAS = 10,),
                     );

  for j in range(1, 4):
    for k in ['DX', 'DY']:
      TAB_REF = POST_RELEVE_T(ACTION = _F(INTITULE = 'SENSIBILITE',
                                          NOEUD = 'N1000',
                                          RESULTAT = RES3,
                                          NOM_CHAM = 'DEPL',
                                          NUME_ORDRE = j,
                                          NOM_CMP = k,
                                          OPERATION = 'EXTRACTION'));

      TAB_DIF = POST_RELEVE_T(ACTION = _F(INTITULE = 'SENSIBILITE',
                                          NOEUD = 'N1000',
                                          RESULTAT = RES2,
                                          NOM_CHAM = 'DEPL',
                                          NUME_ORDRE = j,
                                          NOM_CMP = k,
                                          OPERATION = 'EXTRACTION'));

      diff = (TAB_DIF[k,1]-TAB_REF[k,1])/(2*sensible[i]*epsilon)

      TEST_RESU(RESU=(
       _F(RESULTAT = RES, NUME_ORDRE = j,
          NOM_CHAM = 'DEPL', NOEUD = 'N1000',
          CRITERE = 'RELATIF', PRECISION = 1.E-2,
          NOM_CMP = k,   SENSIBILITE = PS[i],
          VALE = diff, REFERENCE = 'NON_REGRESSION' )))
    
      DETRUIRE( CONCEPT =_F(NOM = TAB_REF ))
      DETRUIRE( CONCEPT =_F(NOM = TAB_DIF ))
  DETRUIRE( CONCEPT =_F(NOM = RES2 ))
  DETRUIRE( CONCEPT =_F(NOM = SOL2 ))
  DETRUIRE( CONCEPT =_F(NOM = MATEMA2 ))
  DETRUIRE( CONCEPT =_F(NOM = RES3 ))
  DETRUIRE( CONCEPT =_F(NOM = SOL3 ))
  DETRUIRE( CONCEPT =_F(NOM = MATEMA3 ))








#
# Verification par differences finies (contraintes)
#

epsilon = 1.E-5
for i in range(n):
  eps2 = [1.]*n
  eps3 = [1.]*n
  eps2[i]=1.0 + epsilon
  eps3[i]=1.0 - epsilon

  SOL2 = DEFI_MATERIAU(ELAS = _F(E = sensible[0]*eps2[0],
                                 NU = sensible[1]*eps2[1],
                                 RHO = 2764.0,
                                ),
                       DRUCK_PRAGER = _F(ECROUISSAGE = 'LINEAIRE',
                                         ALPHA = sensible[2]*eps2[2],
                                         P_ULTM = sensible[3]*eps2[3],
                                         SY = sensible[4]*eps2[4],
                                         H = sensible[5]*eps2[5])
                      );

  SOL3 = DEFI_MATERIAU(ELAS = _F(E = sensible[0]*eps3[0],
                                 NU = sensible[1]*eps3[1],
                                 RHO = 2764.0,
                                ),
                       DRUCK_PRAGER = _F(ECROUISSAGE = 'LINEAIRE',
                                         ALPHA = sensible[2]*eps3[2],
                                         P_ULTM = sensible[3]*eps3[3],
                                         SY = sensible[4]*eps3[4],
                                         H = sensible[5]*eps3[5])
                      );

  MATEMA2 = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT='OUI', MATER = SOL2));

  MATEMA3 = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT='OUI', MATER = SOL3));

  RES2 = STAT_NON_LINE(MODELE = MODEMECA,
                      CHAM_MATER = MATEMA2,
                      EXCIT = (_F(CHARGE = CALDEP,),
                               _F(CHARGE = FCAVITE, FONC_MULT = COEF2),
                               #_F(CHARGE = PRES_CAV, FONC_MULT = COEF2),
                               _F(CHARGE = CALEXT, FONC_MULT = COEF1),
                               _F(CHARGE = CALHAU, FONC_MULT = COEF1),
                              ),
                      COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER'),
                      INCREMENT = _F(LIST_INST = TEMPS,
                                     SUBD_PAS = 4,
                                     SUBD_PAS_MINI = 1,),
                      NEWTON = _F(MATRICE = 'TANGENTE',
                                  REAC_ITER = 1),
                      CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-06,
                                       ITER_GLOB_MAXI = 20,
                                       RESI_INTE_RELA = 1E-06,
                                       ITER_INTE_MAXI = 5,
                                       ITER_INTE_PAS = 10,),
                     );

  RES3 = STAT_NON_LINE(MODELE = MODEMECA,
                      CHAM_MATER = MATEMA3,
                      EXCIT = (_F(CHARGE = CALDEP,),
                               _F(CHARGE = FCAVITE, FONC_MULT = COEF2),
                               #_F(CHARGE = PRES_CAV, FONC_MULT = COEF2),
                               _F(CHARGE = CALEXT, FONC_MULT = COEF1),
                               _F(CHARGE = CALHAU, FONC_MULT = COEF1),
                              ),
                      COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER'),
                      INCREMENT = _F(LIST_INST = TEMPS,
                                     SUBD_PAS = 4,
                                     SUBD_PAS_MINI = 1,),
                      NEWTON = _F(MATRICE = 'TANGENTE',
                                  REAC_ITER = 1),
                      CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-06,
                                       ITER_GLOB_MAXI = 20,
                                       RESI_INTE_RELA = 1E-06,
                                       ITER_INTE_MAXI = 5,
                                       ITER_INTE_PAS = 10,),
                     );

  for j in range(1, 4):
    for k in ['SIXX', 'SIYY', 'SIZZ', 'SIXY']:
      TAB_REF = CREA_CHAMP(TYPE_CHAM = 'ELGA_SIEF_R',
                           OPERATION = 'EXTR',
                           RESULTAT = RES3,
                           NOM_CHAM = 'SIEF_ELGA',
                           NUME_ORDRE = j
                          )
      TAB_REFNP = TAB_REF.EXTR_COMP(k, [], 1)

      TAB_DIF = CREA_CHAMP(TYPE_CHAM = 'ELGA_SIEF_R',
                           OPERATION = 'EXTR',
                           RESULTAT = RES2,
                           NOM_CHAM = 'SIEF_ELGA',
                           NUME_ORDRE = j
                          )
      TAB_DIFNP = TAB_DIF.EXTR_COMP(k, [], 1)

      diff = (TAB_DIFNP.valeurs[3 * 90 + 1 - 4]-TAB_REFNP.valeurs[3 * 90 + 1 - 4])/(2*sensible[i]*epsilon)

      if i>1 :
        TEST_RESU(RESU=(
           _F(RESULTAT = RES,   NUME_ORDRE = j,
              NOM_CHAM = 'SIEF_ELGA', MAILLE = 'M90', POINT = 1,
              CRITERE = 'RELATIF', PRECISION = 1.E-2,
              NOM_CMP = k,   SENSIBILITE = PS[i],
              VALE = diff, REFERENCE = 'AUTRE_ASTER' )))

      else :
        if i<1 :
          if j>1 :
            TEST_RESU(RESU=(
               _F(RESULTAT = RES,   NUME_ORDRE = j,
                  NOM_CHAM = 'SIEF_ELGA', MAILLE = 'M90', POINT = 1,
                  CRITERE = 'RELATIF', PRECISION = 1.E-2,
                  NOM_CMP = k,   SENSIBILITE = PS[i],
                  VALE = diff, REFERENCE = 'AUTRE_ASTER' )))
        else :
          if j>1 :     
            TEST_RESU(RESU=(
               _F(RESULTAT = RES,   NUME_ORDRE = j,
                  NOM_CHAM = 'SIEF_ELGA', MAILLE = 'M90', POINT = 1,
                  CRITERE = 'RELATIF', PRECISION = 1.E-2,
                  NOM_CMP = k,   SENSIBILITE = PS[i],
                  VALE = diff, REFERENCE = 'AUTRE_ASTER' )))
      
      DETRUIRE( CONCEPT =_F(NOM = TAB_REF ))
      DETRUIRE( CONCEPT =_F(NOM = TAB_DIF ))
  DETRUIRE( CONCEPT =_F(NOM = RES2 ))
  DETRUIRE( CONCEPT =_F(NOM = SOL2 ))
  DETRUIRE( CONCEPT =_F(NOM = MATEMA2 ))
  DETRUIRE( CONCEPT =_F(NOM = RES3 ))
  DETRUIRE( CONCEPT =_F(NOM = SOL3 ))
  DETRUIRE( CONCEPT =_F(NOM = MATEMA3 ))

#
# Verification par differences finies (plasticite)
#

epsilon = 1.E-5
for i in range(n):
  eps2 = [1.]*n
  eps3 = [1.]*n
  eps2[i]=1.0 + epsilon
  eps3[i]=1.0 - epsilon

  SOL2 = DEFI_MATERIAU(ELAS = _F(E = sensible[0]*eps2[0],
                                 NU = sensible[1]*eps2[1],
                                 RHO = 2764.0,
                                ),
                       DRUCK_PRAGER = _F(ECROUISSAGE = 'LINEAIRE',
                                         ALPHA = sensible[2]*eps2[2],
                                         P_ULTM = sensible[3]*eps2[3],
                                         SY = sensible[4]*eps2[4],
                                         H = sensible[5]*eps2[5])
                      );

  SOL3 = DEFI_MATERIAU(ELAS = _F(E = sensible[0]*eps3[0],
                                 NU = sensible[1]*eps3[1],
                                 RHO = 2764.0,
                                ),
                       DRUCK_PRAGER = _F(ECROUISSAGE = 'LINEAIRE',
                                         ALPHA = sensible[2]*eps3[2],
                                         P_ULTM = sensible[3]*eps3[3],
                                         SY = sensible[4]*eps3[4],
                                         H = sensible[5]*eps3[5])
                      );

  MATEMA2 = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT = 'OUI', MATER = SOL2));

  MATEMA3 = AFFE_MATERIAU(MAILLAGE = MAILLAGE,
                          AFFE = _F(TOUT='OUI', MATER = SOL3));

  RES2 = STAT_NON_LINE(MODELE = MODEMECA,
                      CHAM_MATER = MATEMA2,
                      EXCIT = (_F(CHARGE = CALDEP,),
                               _F(CHARGE = FCAVITE, FONC_MULT = COEF2),
                               #_F(CHARGE = PRES_CAV, FONC_MULT = COEF2),
                               _F(CHARGE = CALEXT, FONC_MULT = COEF1),
                               _F(CHARGE = CALHAU, FONC_MULT = COEF1),
                              ),
                      COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER'),
                      INCREMENT = _F(LIST_INST = TEMPS,
                                     SUBD_PAS = 4,
                                     SUBD_PAS_MINI = 1,),
                      NEWTON = _F(MATRICE = 'TANGENTE',
                                  REAC_ITER = 1),
                      CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-06,
                                       ITER_GLOB_MAXI = 20,
                                       RESI_INTE_RELA = 1E-06,
                                       ITER_INTE_MAXI = 5,
                                       ITER_INTE_PAS = 10,),
                     );

  RES3 = STAT_NON_LINE(MODELE = MODEMECA,
                      CHAM_MATER = MATEMA3,
                      EXCIT = (_F(CHARGE = CALDEP,),
                               _F(CHARGE = FCAVITE, FONC_MULT = COEF2),
                               #_F(CHARGE = PRES_CAV, FONC_MULT = COEF2),
                               _F(CHARGE = CALEXT, FONC_MULT = COEF1),
                               _F(CHARGE = CALHAU, FONC_MULT = COEF1),
                              ),
                      COMP_INCR = _F(RELATION = 'DRUCKER_PRAGER'),
                      INCREMENT = _F(LIST_INST = TEMPS,
                                     SUBD_PAS = 4,
                                     SUBD_PAS_MINI = 1,),
                      NEWTON = _F(MATRICE = 'TANGENTE',
                                  REAC_ITER = 1),
                      CONVERGENCE = _F(RESI_GLOB_RELA = 1.E-06,
                                       ITER_GLOB_MAXI = 20,
                                       RESI_INTE_RELA = 1E-06,
                                       ITER_INTE_MAXI = 5,
                                       ITER_INTE_PAS = 10,),
                     );

  for j in range(1, 4):
    TAB_REF = CREA_CHAMP(TYPE_CHAM = 'ELGA_VARI_R',
                         OPERATION = 'EXTR',
                         RESULTAT = RES3,
                         NOM_CHAM = 'VARI_ELGA',
                         NUME_ORDRE = j
                        )
    TAB_REFNP = TAB_REF.EXTR_COMP('V1', [], 1)

    TAB_DIF = CREA_CHAMP(TYPE_CHAM = 'ELGA_VARI_R',
                         OPERATION = 'EXTR',
                         RESULTAT = RES2,
                         NOM_CHAM = 'VARI_ELGA',
                         NUME_ORDRE = j
                        )
    TAB_DIFNP = TAB_DIF.EXTR_COMP('V1', [], 1)

    diff = (TAB_DIFNP.valeurs[3 * 90 + 1 - 4]-TAB_REFNP.valeurs[3 * 90 + 1 - 4])/(2*sensible[i]*epsilon)

    TEST_RESU(RESU=(
       _F(  RESULTAT = RES,   NUME_ORDRE = j,
            NOM_CHAM = 'VARI_ELGA', MAILLE = 'M90', POINT = 1,
            CRITERE = 'RELATIF', PRECISION = 1.E-2,
            NOM_CMP = 'V1',   SENSIBILITE = PS[i],
            VALE = diff, REFERENCE = 'AUTRE_ASTER' )))

    DETRUIRE( CONCEPT =_F(NOM = TAB_REF ))
    DETRUIRE( CONCEPT =_F(NOM = TAB_DIF ))
  DETRUIRE( CONCEPT =_F(NOM = RES2 ))
  DETRUIRE( CONCEPT =_F(NOM = SOL2 ))
  DETRUIRE( CONCEPT =_F(NOM = MATEMA2 ))
  DETRUIRE( CONCEPT =_F(NOM = RES3 ))
  DETRUIRE( CONCEPT =_F(NOM = SOL3 ))
  DETRUIRE( CONCEPT =_F(NOM = MATEMA3 ))

FIN()

