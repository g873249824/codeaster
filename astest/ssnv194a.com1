
# COPYRIGHT (C) 1991 - 2013  EDF R&D                WWW.CODE-ASTER.ORG
#
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
# 1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
POURSUITE(CODE='OUI',);

NB_GRAINS=10

#####################################################################
# Calcul des min et max
#####################################################################


CUBE=DEFI_GROUP(reuse =CUBE,
              MAILLAGE=CUBE,
              CREA_GROUP_MA=_F(TOUT='OUI',NOM='ALL'),)

MAX_SI=POST_ELEM(
                   MINMAX=_F(NOM_CHAM='SIEF_ELGA',
                                NOM_CMP=('SIXX','SIYY','SIZZ'),
                                TOUT='OUI',RESULTAT=SOLNL,))

TEST_TABLE(REFERENCE='AUTRE_ASTER',
           VALE_CALC=221.57023698834,
           VALE_REFE=221.56999999999999,
           NOM_PARA='MAX_SIXX',
           TABLE=MAX_SI,
           FILTRE=_F(NOM_PARA='INST',
                     VALE=5.0E-3,),
           )

VIMAX=CREA_CHAMP( OPERATION='EXTR',
                   TYPE_CHAM='ELGA_VARI_R',
                   RESULTAT=SOLNL,
                   NOM_CHAM='VARI_ELGA',
                   TYPE_MAXI='MAXI',
                   TYPE_RESU='VALE',
                 ) ;


MAX_VI=POST_ELEM(
                   MINMAX=_F(NOM_CHAM='VARI_ELGA',
                   CHAM_GD=VIMAX, MODELE=TROISD,
                                NOM_CMP=('V1','V2','V3'),
                                TOUT='OUI'),)


TEST_TABLE(REFERENCE='AUTRE_ASTER',
           VALE_CALC= 9.3330808079547E-04,
           VALE_REFE=9.3330799999999999E-4,
           NOM_PARA='MIN_V3',
           TABLE=MAX_VI,)

MAX_EP=POST_ELEM(
                   MINMAX=_F(NOM_CHAM='EPSP_ELGA',RESULTAT=SOLNL,
                                NOM_CMP=('EPXX','EPYY','EPZZ'),
                                GROUP_MA='ALL'),)

TEST_TABLE(REFERENCE='AUTRE_ASTER',
           VALE_CALC= 9.3330808151363E-04,
           VALE_REFE=9.3330799999999999E-4,
           NOM_PARA='MIN_EPZZ',
           TABLE=MAX_EP,
           FILTRE=_F(NOM_PARA='INST',
                     VALE=5.0E-3,),
           )

MAX_DE1=POST_ELEM(
                   MINMAX=_F(NOM_CHAM='DEPL',RESULTAT=SOLNL,
                                TOUT='OUI',
                                NOM_CMP=('DY','DZ'),
                                NUME_ORDRE=1),)


TEST_TABLE(
           VALE_CALC=-3.E-4,
           NOM_PARA='MIN_DY',
           TABLE=MAX_DE1,
           )

TEST_TABLE(
           VALE_CALC=1.E-3,
           NOM_PARA='MAX_DZ',
           TABLE=MAX_DE1,
           )

MAX_DE2=POST_ELEM(
                   MINMAX=_F(NOM_CHAM='DEPL',RESULTAT=SOLNL,
                                TOUT='OUI',
                                NOM_CMP=('DX'),
                                NUME_ORDRE=1),)

TEST_TABLE(
           VALE_CALC=-3.E-4,
           NOM_PARA='MIN_DX',
           TABLE=MAX_DE2,
           )

#####################################################################
# Calcul des moyennes
#####################################################################

INT_SI=POST_ELEM(  RESULTAT=SOLNL,
                   INTEGRALE=_F(NOM_CHAM='SIEF_ELGA',
                                NOM_CMP=('SIXX','SIYY','SIZZ'),
                                TOUT='OUI',
                                TYPE_MAILLE='3D'),)


INT_EP=POST_ELEM(  RESULTAT=SOLNL,
                   INTEGRALE=_F(NOM_CHAM='EPSP_ELGA',
                                NOM_CMP=('EPXX','EPYY','EPZZ'),
                                TOUT='OUI',
                                TYPE_MAILLE='3D'),)

# --------  VALIDATION DE POST_ELEM/INTEGRALE  CHAM_NO  -------------- #

INT1EPX=POST_ELEM(  RESULTAT=SOLNL,
                    INTEGRALE=(_F(NOM_CHAM='EPSP_ELGA',
                                NOM_CMP=('EPXX'),
                                TOUT='OUI',
                                TYPE_MAILLE='3D'),
                              _F(NOM_CHAM='EPSP_ELNO',
                                NOM_CMP=('EPXX'),
                                TOUT='OUI',
                                TYPE_MAILLE='3D'),
                              _F(NOM_CHAM='EPSP_NOEU',
                                NOM_CMP=('EPXX'),
                                TOUT='OUI',
                                TYPE_MAILLE='3D'),),)
TEST_TABLE(
           VALE_CALC=-1.3935522297381E-3,
           NOM_PARA='INTE_EPXX',
           TABLE=INT1EPX,
           FILTRE=(_F(NOM_PARA='NUME_ORDRE',
                      VALE_I=9,),
                   _F(NOM_PARA='NOM_CHAM',
                      VALE_K='EPSP_ELGA',),
                   ),
           )

TEST_TABLE(
           VALE_CALC=-1.3935522297381E-3,
           NOM_PARA='INTE_EPXX',
           TABLE=INT1EPX,
           FILTRE=(_F(NOM_PARA='NUME_ORDRE',
                      VALE_I=9,),
                   _F(NOM_PARA='NOM_CHAM',
                      VALE_K='EPSP_ELNO',),
                   ),
           )

TEST_TABLE(
           VALE_CALC=-1.3935176817989E-3,
           NOM_PARA='INTE_EPXX',
           TABLE=INT1EPX,
           FILTRE=(_F(NOM_PARA='NUME_ORDRE',
                      VALE_I=9,),
                   _F(NOM_PARA='NOM_CHAM',
                      VALE_K='EPSP_NOEU',),
                   ),
           )

CH1=CREA_CHAMP(OPERATION = 'EXTR',TYPE_CHAM='ELGA_EPSI_R',NOM_CHAM  = 'EPSP_ELGA',
               RESULTAT  = SOLNL, NUME_ORDRE=9,);

CH2=CREA_CHAMP(TYPE_CHAM = 'ELGA_NEUT_R', OPERATION = 'ASSE',MODELE = TROISD, PROL_ZERO = 'OUI',
                  ASSE = _F(TOUT='OUI',
                            CHAM_GD = CH1,
                            NOM_CMP=('EPXX','EPYY','EPZZ','EPXY','EPXZ','EPYZ'),
                            NOM_CMP_RESU =('X1','X2','X3','X4','X5','X6'),),)

CH3=CREA_CHAMP(OPERATION = 'DISC', TYPE_CHAM = 'NOEU_NEUT_R',
                 CHAM_GD=CH2, MODELE = TROISD);

CH4=CREA_CHAMP(TYPE_CHAM = 'NOEU_EPSI_R', OPERATION = 'ASSE',MODELE = TROISD,
                  ASSE = _F(TOUT='OUI',
                            CHAM_GD = CH3,
                            NOM_CMP_RESU=('EPXX','EPYY','EPZZ','EPXY','EPXZ','EPYZ'),
                            NOM_CMP =('X1','X2','X3','X4','X5','X6'),),)

INT2EPX=POST_ELEM(  CHAM_GD=CH4,
                    CHAM_MATER=MAT,
                    MODELE=TROISD,
                    INTEGRALE=_F( NOM_CMP='EPXX',TOUT='OUI',
                                TYPE_MAILLE='3D'),)

TEST_TABLE(REFERENCE='AUTRE_ASTER',
           VALE_CALC=-1.3935176817989E-03,
           VALE_REFE=-1.3935200000000001E-3,
           NOM_PARA='INTE_EPXX',
           TABLE=INT2EPX,)

# correction AL 20129
INT3EPX=POST_ELEM(  RESULTAT=SOLNL,
                    INTEGRALE=(_F(NOM_CHAM='EPSP_ELGA',
                                NOM_CMP=('EPXX'),
                                TOUT='OUI',
                                TYPE_MAILLE='3D'),
                              _F(NOM_CHAM='EPSP_ELNO',
                                NOM_CMP=('EPXX'),
                                TOUT='OUI',
                                TYPE_MAILLE='3D'),
                              _F(NOM_CHAM='EPSP_NOEU',
                                NOM_CMP=('EPXX'),
                                TOUT='OUI',
                                TYPE_MAILLE='3D'),),)

# IMPR_TABLE(TABLE=INT_SI)
# IMPR_TABLE(TABLE=INT_EP)

# --------  VALIDATION DE POST_ELEM/INTEGRALE SUR N GROUPES correction issue20129

ng=10
prefix='GM'
intesig = {}
intesig['INTEGRALE'] = []                        
for IP in range (ng):
   intesig['INTEGRALE'].append(_F(NOM_CHAM='SIEF_ELGA', NOM_CMP=('SIXX','SIYY','SIZZ'),
                                                        TYPE_MAILLE='3D',
                                                        GROUP_MA=prefix+str(IP+1)))

INSIG=POST_ELEM(MODELE=TROISD,RESULTAT=SOLNL, **intesig);

# la table contient tous les instants et tous les grains

IMPR_TABLE(TABLE=INSIG)



########################################################################
# ---------  VALIDATION DE POST_ELEM/VOLUMOGRAMME   ------------------ #
########################################################################


# --- CHAMP NOEU ---

def masque(X1):
    val=0.
    if (-3.041313578E-03<=X1<-2.023665544E-03):
      val=100.
    else:
      val=0.
    return val

MASQ = FORMULE(NOM_PARA=('X1'),VALE='masque(X1)')

CHFON=CREA_CHAMP(OPERATION='AFFE',
                 TYPE_CHAM='NOEU_NEUT_F',
                 MODELE=TROISD,
                 AFFE=(_F( TOUT='OUI', NOM_CMP = 'X1', VALE_F = MASQ),
                      )
                );
CHEXT=CREA_CHAMP(OPERATION = 'EXTR',TYPE_CHAM='NOEU_EPSI_R',NOM_CHAM  = 'EPSP_NOEU',
               RESULTAT  = SOLNL, NUME_ORDRE=10,);


CHNEXT=CREA_CHAMP(TYPE_CHAM = 'NOEU_NEUT_R', OPERATION = 'ASSE',MODELE = TROISD,
                  ASSE = _F(TOUT='OUI',
                            CHAM_GD = CHEXT,
                            NOM_CMP='EPXX',
                            NOM_CMP_RESU ='X1',),)


CHEVA=CREA_CHAMP(OPERATION='EVAL',
                 TYPE_CHAM='NOEU_NEUT_R',
                 CHAM_F=CHFON,
                 CHAM_PARA=CHNEXT);


INTVOL=POST_ELEM( CHAM_GD=CHEVA,
                  CHAM_MATER=MAT,
                  MODELE=TROISD,
                  INTEGRALE=_F( NOM_CMP='X1',TOUT='OUI',
                                TYPE_MAILLE='3D'),)

TEST_TABLE(REFERENCE='AUTRE_ASTER',
           PRECISION=1.E-2,
           VALE_CALC=29.459658356606,
           VALE_REFE=29.724499999999999,
           NOM_PARA='INTE_X1',
           TABLE=INTVOL,)

# --- CHAMP ELGA ---

def masque2(X1):
    val=0.
    if (-3.69933E-03<=X1<-2.45001E-03):
      val=100.
    else:
      val=0.
    return val

MASQ2 = FORMULE(NOM_PARA=('X1'),VALE='masque2(X1)')

CHFON2=CREA_CHAMP(OPERATION='AFFE',
                 TYPE_CHAM='ELGA_NEUT_F',
                 MODELE=TROISD,PROL_ZERO='OUI',
                 AFFE=(_F( TOUT='OUI', NOM_CMP = 'X1', VALE_F = MASQ2),
                      )
                );

CHEXT2=CREA_CHAMP(OPERATION = 'EXTR',TYPE_CHAM='ELGA_EPSI_R',NOM_CHAM  = 'EPSP_ELGA',
               RESULTAT  = SOLNL, NUME_ORDRE=10,);

CHNEX2=CREA_CHAMP(TYPE_CHAM = 'ELGA_NEUT_R', OPERATION = 'ASSE',MODELE = TROISD, PROL_ZERO = 'OUI',
                  ASSE = _F(TOUT='OUI',
                            CHAM_GD = CHEXT2,
                            NOM_CMP=('EPXX'),
                            NOM_CMP_RESU =('X1'),),),

CHEVA2=CREA_CHAMP(OPERATION='EVAL',
                 TYPE_CHAM='ELGA_NEUT_R',
                 CHAM_F=CHFON2,
                 CHAM_PARA=CHNEX2);

CHEVA3=CREA_CHAMP(TYPE_CHAM = 'ELGA_NEUT_R', OPERATION = 'ASSE',MODELE = TROISD, PROL_ZERO = 'OUI',
                  ASSE = _F(TOUT='OUI',
                            CHAM_GD = CHEVA2,
                            NOM_CMP=('X1'),
                            NOM_CMP_RESU =('X1'),),),


INTVO2=POST_ELEM( CHAM_GD=CHEVA3,
                  CHAM_MATER=MAT,
                  MODELE=TROISD,
                  INTEGRALE=_F( NOM_CMP='X1',TOUT='OUI',
                                TYPE_MAILLE='3D'),)


TEST_TABLE(REFERENCE='AUTRE_ASTER',
           VALE_CALC=21.582351677335,
           VALE_REFE=21.5824,
           NOM_PARA='INTE_X1',
           TABLE=INTVO2,)

VEPXX=POST_ELEM(MODELE=TROISD,
                RESULTAT=SOLNL,
                NUME_ORDRE=10,
                VOLUMOGRAMME=(_F(NOM_CHAM='EPSP_ELGA',
                                 NOM_CMP=('EPXX'),
                                 TOUT='OUI',
                                 NB_INTERV=5,),
                              _F(NOM_CHAM='EPSP_ELNO',
                                 NOM_CMP=('EPXX'),
                                 TOUT='OUI',
                                 NB_INTERV=5,),
                              _F(NOM_CHAM='EPSP_NOEU',
                                 NOM_CMP=('EPXX'),
                                 TOUT='OUI',
                                 NB_INTERV=5,),),)

VEPXX2=POST_ELEM(MODELE=TROISD,
                RESULTAT=SOLNL,
                NUME_ORDRE=10,
                VOLUMOGRAMME=(_F(NOM_CHAM='EPSP_ELGA',
                                 NOM_CMP=('EPXX'),
                                 TOUT='OUI',
                                 NB_INTERV=5,),
                              _F(NOM_CHAM='EPSP_ELNO',
                                 NOM_CMP=('EPXX'),
                                 TOUT='OUI',
                                 NB_INTERV=5,),
                              _F(NOM_CHAM='EPSP_NOEU',
                                 NOM_CMP=('EPXX'),
                                 TOUT='OUI',
                                 NB_INTERV=5,),),)
TEST_TABLE(
           VALE_CALC=32.595917138232,
           NOM_PARA='DISTRIBUTION',
           TABLE=VEPXX,
           FILTRE=(_F(NOM_PARA='NOM_CHAM',
                      VALE_K='EPSP_ELGA',),
                   _F(NOM_PARA='INTERVALLE',
                      VALE_I=5,),
                   ),
           )

TEST_TABLE(
           VALE_CALC=32.595917138232,
           NOM_PARA='DISTRIBUTION',
           TABLE=VEPXX,
           FILTRE=(_F(NOM_PARA='NOM_CHAM',
                      VALE_K='EPSP_ELNO',),
                   _F(NOM_PARA='INTERVALLE',
                      VALE_I=5,),
                   ),
           )

TEST_TABLE(
           VALE_CALC=28.037462323085,
           NOM_PARA='DISTRIBUTION',
           TABLE=VEPXX,
           FILTRE=(_F(NOM_PARA='NOM_CHAM',
                      VALE_K='EPSP_NOEU',),
                   _F(NOM_PARA='INTERVALLE',
                      VALE_I=5,),
                   ),
           )

CSIXX=CREA_CHAMP(TYPE_CHAM='ELGA_SIEF_R',
                 OPERATION='EXTR',
                 RESULTAT=SOLNL,NUME_ORDRE=10,
                 NOM_CHAM='SIEF_ELGA');

VSIXX=POST_ELEM(MODELE=TROISD,
                CHAM_MATER=MAT,
                CHAM_GD=CSIXX,
                VOLUMOGRAMME=_F(NOM_CMP=('SIXX'),
                                TYPE_MAILLE='3D',
                                TOUT='OUI',
                                NB_INTERV=5,),)

TEST_TABLE(
           VALE_CALC=64.60035160535,
           NOM_PARA='DISTRIBUTION',
           TABLE=VSIXX,
           FILTRE=(_F(NOM_PARA='CHAM_GD',
                      VALE_K='CSIXX',),
                   _F(NOM_PARA='INTERVALLE',
                      VALE_I=3,),
                   ),
           )

# --------  VALIDATION DE POST_ELEM/VOLUMOGRAMME SUR N GROUPES correction issue20129

ng=10
prefix='GM'
intesig = {}
intesig['VOLUMOGRAMME'] = []                        
for IP in range (ng):
   intesig['VOLUMOGRAMME'].append(_F(NOM_CHAM='EPSP_ELGA',
                                     NOM_CMP=('EPXX'),
                                     GROUP_MA=prefix+str(IP+1),
                                     NB_INTERV=5,))

VEPXX3=POST_ELEM(MODELE=TROISD,RESULTAT=SOLNL, **intesig);

# la table contient tous les instants et tous les grains

IMPR_TABLE(TABLE=VEPXX3)
# -------------------------------------------------------------------- #

########################################################################


INS=[None]*NB_GRAINS
EPS=[None]*NB_GRAINS
INSX=[None]*NB_GRAINS
EPSX=[None]*NB_GRAINS
COMX=[None]*NB_GRAINS
INSY=[None]*NB_GRAINS
EPSY=[None]*NB_GRAINS
COMY=[None]*NB_GRAINS
INSZ=[None]*NB_GRAINS
EPSZ=[None]*NB_GRAINS
COMZ=[None]*NB_GRAINS
FSX=[None]*NB_GRAINS
FSY=[None]*NB_GRAINS
FSZ=[None]*NB_GRAINS
FEX=[None]*NB_GRAINS
FEY=[None]*NB_GRAINS
FEZ=[None]*NB_GRAINS

for IP in range (NB_GRAINS):
  print 'GM'+str(IP+1)

  INS[IP]=POST_ELEM( RESULTAT=SOLNL,
                   INTEGRALE=_F(NOM_CHAM='SIEF_ELGA',
                                NOM_CMP=('SIXX','SIYY','SIZZ'),
                                TYPE_MAILLE='3D',
                                GROUP_MA = 'GM'+str(IP+1),
                                ),)
  EPS[IP]=POST_ELEM( RESULTAT=SOLNL,
                   INTEGRALE=_F(NOM_CHAM='EPSI_ELGA',
                                NOM_CMP=('EPXX','EPYY','EPZZ'),
                                TYPE_MAILLE='3D',
                                GROUP_MA = 'GM'+str(IP+1),
                                ),)
  INSX[IP]=CALC_TABLE(TABLE=INS[IP],
                 ACTION=(_F(OPERATION ='EXTR',
                            NOM_PARA=('INST','INTE_SIXX'),),),)

  EPSX[IP]=CALC_TABLE(TABLE=EPS[IP],
                 ACTION=(_F(OPERATION ='EXTR',
                            NOM_PARA=('INST','INTE_EPXX'),),),)

  COMX[IP]=CALC_TABLE(TABLE=EPSX[IP],
                 ACTION=(_F(OPERATION ='COMB',TABLE=INSX[IP],NOM_PARA='INST',),),)

  INSY[IP]=CALC_TABLE(TABLE=INS[IP],
                 ACTION=(_F(OPERATION ='EXTR',
                            NOM_PARA=('INST','INTE_SIYY'),),),)

  EPSY[IP]=CALC_TABLE(TABLE=EPS[IP],
                 ACTION=(_F(OPERATION ='EXTR',
                           NOM_PARA=('INST','INTE_EPYY'),),),)

  COMY[IP]=CALC_TABLE(TABLE=EPSY[IP],
                 ACTION=(_F(OPERATION ='COMB',TABLE = INSY[IP], NOM_PARA='INST',),),)

  INSZ[IP]=CALC_TABLE(TABLE=INS[IP],
                 ACTION=(_F(OPERATION ='EXTR',
                            NOM_PARA=('INST','INTE_SIZZ'),),),)

  EPSZ[IP]=CALC_TABLE(TABLE=EPS[IP],
                 ACTION=(_F(OPERATION ='EXTR',
                            NOM_PARA=('INST','INTE_EPZZ'),),),)

  COMZ[IP]=CALC_TABLE(TABLE=EPS[IP],
                 ACTION=(_F(OPERATION ='COMB',TABLE = INS[IP], NOM_PARA='INST',),),)

  FSX[IP]=RECU_FONCTION(TABLE=COMX[IP],
                           PARA_X='INST',
                           PARA_Y='INTE_SIXX',);

  FSY[IP]=RECU_FONCTION(TABLE=COMY[IP],
                           PARA_X='INST',
                           PARA_Y='INTE_SIYY',);

  FSZ[IP]=RECU_FONCTION(TABLE=COMZ[IP],
                           PARA_X='INST',
                           PARA_Y='INTE_SIZZ',);

  FEX[IP]=RECU_FONCTION(TABLE=COMX[IP],
                           PARA_X='INST',
                           PARA_Y='INTE_EPXX',);
                
  FEY[IP]=RECU_FONCTION(TABLE=COMY[IP],
                           PARA_X='INST',
                           PARA_Y='INTE_EPYY',);
                
  FEZ[IP]=RECU_FONCTION(TABLE=COMZ[IP],
                           PARA_X='INST',
                           PARA_Y='INTE_EPZZ',);


motcles = {}
motcles['COURBE'] = []                        
for IP in range (NB_GRAINS):
   motcles['COURBE'].append(_F(FONC_X=FEX[IP], FONC_Y=FSX[IP]))
   motcles['COURBE'].append(_F(FONC_X=FEY[IP], FONC_Y=FSY[IP]))
   motcles['COURBE'].append(_F(FONC_X=FEZ[IP], FONC_Y=FSZ[IP]))

IMPR_FONCTION(FORMAT ='XMGRACE',PILOTE='POSTSCRIPT', UNITE = 24, **motcles);

FIN () ;
