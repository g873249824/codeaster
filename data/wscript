# coding=utf-8

"""
Build some data files (dest: share/aster)

- 'profile.sh': environment script
- 'config.txt': needed by as_run
"""

import sys
import os
import os.path as osp
from itertools import chain
from subprocess import Popen, PIPE
import cPickle

from waflib import Configure, Utils, Logs, Errors


def options(self):
    group = self.get_option_group("Code_Aster options")
    # default=False in libaster, True in Code_Aster
    group.add_option('--legacy', dest='legacy',
                    default=True, action='store_true',
                    help='create some legacy files')
    group.add_option('--nolegacy', dest='legacy',
                    action='store_false',
                    help='do not create legacy files')

def configure(self):
    self.add_os_flags('ADDMEM')
    self.env.legacy = self.options.legacy
    dict_conv = self.env2dict(osp.dirname(self.path.abspath()))
    self.env['ASTER_ENVIRON'] = cPickle.dumps(dict_conv)
    self.getAsrunTmp()

def build(self):
    if not self.env.legacy:
        return
    try:
        dict_conv = cPickle.loads(self.env['ASTER_ENVIRON'])
    except:
        Logs.error("ASTER_ENVIRON not found. Please run 'waf configure...'")
        raise Errors.BuildError
    change_tests(dict_conv, self.env.install_tests)
    self(
        features = 'subst',
            name = 'data_files',
          source = ('config.txt.tmpl', 'profile.sh.tmpl', 'CTestTestfile.cmake.tmpl'),
          target = ('config.txt', 'profile.sh', 'CTestTestfile.cmake'),
    install_path = '${ASTERDATADIR}',
            vars = ['ASTER_ENVIRON', 'install_tests'],
     **dict_conv
    )

SRCTEST_TMPL = """SRCTEST        | src     | -     | %s"""

@Configure.conf
def env2dict(self, src):
    """build dict informations"""
    self.start_msg('Store execution environment')
    env = self.env.derive()
    env['LD_LIBRARY_PATH'] = os.environ.get('LD_LIBRARY_PATH', '').split(os.pathsep)
    ld_path = self.remove_duplicates(chain(*[Utils.to_list(env[name])
                for name in ('LIBPATH', 'LIBDIR', 'LD_LIBRARY_PATH',
                             'ASTERLIBDIR') if env[name]]))
    sep = os.pathsep + '\\\n'
    dico = {}
    dico['DEFINES'] = ' '.join([d.split('=')[0] for d in env['DEFINES']])
    py_path = self.remove_duplicates(Utils.to_list(env['CFG_PYTHONPATH']))
    dico['PYTHONHOME'] = sys.prefix + '' if sys.prefix == sys.exec_prefix \
                                         else ':' + sys.exec_prefix
    dico['PYTHON_DIRNAME'] = osp.dirname(env['PYTHON'][0])
    # as_run compatibility
    if env.ASRUN_MPI_VERSION:
        dico['DEFINES'] += ' _USE_MPI'
    dico['LD_LIBRARY_PATH'] = sep.join(ld_path)
    dico['CFG_PYTHONPATH'] = sep.join(py_path)
    dico['SRC'] = src
    dico['FC'] = env['FC']
    flags = [' '.join(env[i]) for i in env.keys() if i.startswith('FCFLAGS')]
    dico['FCFLAGS'] = ' '.join(flags)
    dico['OPT_ENV'] = env['OPT_ENV'] and os.linesep.join(env['OPT_ENV']) or ''
    try:
        addmem = env['ADDMEM']
        if addmem and type(addmem) in (list, tuple):
            addmem = addmem[0]
        env['ADDMEM'] = int(addmem)
    except TypeError:
        env['ADDMEM'] = 250
    dico['ADDMEM'] = env['ADDMEM']
    dico['srctest'] = os.linesep.join([
        SRCTEST_TMPL % '%(SRC)s/astest' % dico,
        SRCTEST_TMPL % '%(SRC)s/../validation/astest' % dico])
    text = ""
    if env['MFRONT']:
        tfel = osp.dirname( osp.dirname(env['MFRONT']) )
        text += os.linesep.join([
            "# MFront specific",
            "export TFELHOME={}".format( tfel ),
            "export PATH=${TFELHOME}/bin:$PATH"
        ])
    dico['MFRONT_SPECIFIC'] = text
    dico['ASRUN_TMPDIR'] = env.ASRUN_TMPDIR
    self.end_msg("yes")
    return dico

def change_tests(dico, install_tests):
    """Because install_tests can be added at build stage"""
    if install_tests:
        dico['srctest'] = SRCTEST_TMPL % '$ASTER_VERSION_DIR/tests'

@Configure.conf
def getAsrunTmp(self):
    """Ask as_run for tmpdir"""
    self.start_msg('Set tmp directory for `salome test`')
    # cmake syntax
    tmpdir = "$ENV{ASTER_TMPDIR}"
    if os.environ.get('ASTER_TMPDIR'):
        tmpdir = os.environ['ASTER_TMPDIR']
    self.end_msg(tmpdir)
    self.env.ASRUN_TMPDIR = tmpdir
    return tmpdir
