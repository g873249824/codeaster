# coding=utf-8

import os
import os.path as osp
import re
from time import localtime, strftime
from pprint import pformat
from subprocess import Popen, PIPE

from waflib import TaskGen, Utils, Errors


def configure(self):
    self.start_msg('Getting Code_Aster version')
    try:
        values = check_aster_version(self)
    except Exception, exc:
        raise Errors.ConfigurationError(str(exc))
    # check values
    try:
        assert type(values) in (list, tuple), (1, values)
        assert len(values) == 7, (2, values)
        vers, revid, branch, date, frbr, chg, loc = values
        assert len(vers) == 3, (3, values)
        assert [type(i) for i in vers] == [int, int, int], (4, values)
        assert type(revid) is str, (5, values)
        assert type(branch) is str, (6, values)
        assert type(date) is str, (7, values)
        assert type(frbr) is str, (8, values)
        assert type(chg) is int, (9, values)
        assert type(loc) in (list, tuple), (10, values)
        if loc:
            types = list(set([type(i) for i in loc]))
            assert len(types) == 1, (11, types)
            assert types[0] is str, (12, values)
    except AssertionError, exc:
        raise Errors.ConfigurationError("Can not find official parent "
            "revision. Unexpected values: {0}".format(str(exc)))
    self.env.append_value('ASTER_VERSION', values)
    self.end_msg(self.env.ASTER_VERSION[:-1])

def build(self):
    get_srcs = self.path.get_src().ant_glob
    env = self.all_envs[self.variant]

    self(
        features = 'py',
            name = 'bibpyt',
          source = get_srcs('**/*.py'),
    install_from = '.',
    install_path = env.ASTERLIBDIR,
    )

    self(
        features = 'subst py',
            name = 'aster_pkginfo',
          source = 'aster_pkginfo.pytmpl',
          target = 'aster_pkginfo.py',
    install_path = env.ASTERLIBDIR,
             use = ['bibpyt'],
    VERSION_INFO = pformat(env['ASTER_VERSION']),
    )


def check_aster_version(self):
    """Set ASTER_VERSION to the tuple = (
        version_as_tuple : last tag found in parents,
        revision_id      : hex identifier of the parent (join by '+' if
                           more than one),
        branch           : branch name,
        date             : date of the revision,
        from_branch      : 'official' parent branch,
        changes          : number of changes after the tagged revision (0 means
                           no change since the tag was set)
    )
    """
    get_srcs = self.path.get_src().ant_glob
    # just use the file if it is already in the source tree
    pkginfo = get_srcs('*/pkginfo.py')
    if pkginfo:
        d = {}
        execfile(pkginfo[0].abspath(), d)
        return d['pkginfo']
    # get revision informations
    return get_revision_info()


MAXLEVEL = 25

def get_revision_info_cmd(from_rev=None, rev="."):
    """Return details about changes on `rev` or the current revision
    between last official tagged revision"""
    def exec_cmd(cmd):
        return Popen(cmd, stdout=PIPE).communicate()[0].strip()

    if not from_rev:
        from_rev = "({0})~{1}".format(rev, MAXLEVEL)
    ancestors = "({0})::({1})".format(from_rev, rev)
    BR = ['default'] + ['v%d' % i for i in range(10, 20)]
    loc = exec_cmd(["hg", "status", "-namrdu"]).split()
    logs = exec_cmd(["hg", "log", "-r", ancestors,
                     "--template", "{rev}:{node}:{tags}:{branch}:"
                                   "{date|shortdate}:{files}\n"]).splitlines()
    if not logs:
        raise ValueError("empty revs range: {0}".format(ancestors))
    last = logs[-1].split(":")
    # print "\n".join(logs)
    _revn, revid, _tag, branch, date, _files = last
    Y, m, d = date.strip().split('-')
    date = '/'.join([d, m, Y])
    brs = [i.split(":")[3] for i in logs]
    # search official branch
    frbr = "?"
    while brs:
        br_i = brs.pop()
        if br_i in BR:
            frbr = br_i
            break
    # search last tag
    vers = "?"
    chg = 0
    for info in reversed(logs):
        rev, node, tag, br, idat, files = info.split(":")
        # ignore revs that just add tags
        if files.strip() == ".hgtags":
            continue
        # ignore non official branches
        if br not in BR:
            continue
        if tag not in ("", "tip"):
            vers = version2tuple(tag)[:3]
            break
        chg += 1
    return [vers, revid, branch, date, frbr, chg, loc]

def get_revision_info(from_rev=None, rev="."):
    """Return details about changes on `rev` or the current revision
    between last official tagged revision"""
    # quick search on last revisions
    infos = get_revision_info_cmd(from_rev, rev)
    if infos[0] == "?":
        infos = get_revision_info_cmd("testing or stable", rev)
    return infos

def version2tuple(vers_string):
    """1.7.9alpha --> (1, 7, 9, 'alpha')"""
    tupl0 = vers_string.split('.')
    val = []
    for v in tupl0:
        m = re.search('(^[ 0-9]+)(.*)', v)
        if m:
            val.append(int(m.group(1)))
            if m.group(2):
                val.append(m.group(2).replace('-', '').replace('_', '').strip())
        else:
            val.append(v)
    val.extend([0]*(3-len(val)))
    return tuple(val)
