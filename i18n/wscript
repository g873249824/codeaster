# coding=utf-8

"""
Internationalization of Code_Aster messages
-------------------------------------------

Content of src/i18n
~~~~~~~~~~~~~~~~~~~

* ``$LANG/aster_messages.po``: current state of translated messages for each language

* These files are created by ``msginit`` from the ``.pot`` file::

    msginit -i build/release/i18n/aster_messages.pot --locale=$LANG --no-translator

  or by adding a new language on crowdin and download a fresh package.


Configure step
~~~~~~~~~~~~~~

* search the tool to extract the messages from the source files (xgettext),
  to merge ``.po`` and new ``.pot`` files (msgmerge), and to compile
  a ``.po`` file into a ``.mo`` file (msgfmt).

* if ``--install-i18n`` option is set, the configuration fails if the tool
  required at installation is missing.


Build steps
~~~~~~~~~~~

* ``waf build`` compiles the ``.po`` files from ``src/i18n/``.

* ``waf install`` installs the ``.mo`` files into ``share/locale/aster/...``.

* workflow with the crowdin project (https://crowdin.net/project/code-aster)

  - download already translated strings from crowdin (ex. ``/tmp/code-aster.zip``)

  - extract the ``aster_messages*`` files::

      cd i18n
      unzip -u /tmp/code-aster.zip '*/aster_messages*' -x 'fr*'
      cd ..

  - extract all the strings from the source files and update the ``.po`` files::

      waf i18n

  - update the 'src' tree by running::

      cp -r build/release/i18n_updated/* i18n/
      hg add i18n/*/*.po
      hg ci -m '[i18n] update translations from Crowdin Code_Aster project' i18n

  - pushed to crowdin the ``aster_messages.pot`` file

"""

import os
import os.path as osp
from glob import glob

from waflib import Configure, TaskGen, Task, Errors, Logs

def options(self):
    group = self.get_option_group('Code_Aster options')
    group.add_option('--install-i18n', dest='install_i18n',
                    action='store_true', default=None,
                    help='If the option is enabled, configure fails if a tool '
                         'is missing to install or build the i18n files')

def configure(self):
    self.env['do_i18n_gettext'] = \
        self.check_i18n_tool('msgfmt', 'MSGFMT') and \
        self.check_i18n_tool('xgettext', 'XGETTEXT') and \
        self.check_i18n_tool('msgmerge', 'MSGMERGE')
    self.env['do_i18n_qtlinguist'] = \
        self.check_i18n_tool('lrelease', 'LRELEASE') and \
        self.check_i18n_tool('pylupdate4', 'PYLUPDATE')

def build(self):
    self(
        features = 'gettext_compile',
    install_path = self.env.ASTERLOCALEDIR,
    )
    # the .qm files are used by eficas, so they are installed near cata.py
    self(
        features = 'qtlinguist_compile',
    install_path = osp.join(self.env.ASTERLIBDIR, 'Cata'),
    )

def update_i18n(self):
    update_gettext(self)
    update_qtlinguist(self)
    Logs.warn('<i18n> update the source tree by copying the new `.po/.ts` files:')
    Logs.warn('       cp -r {}_updated/* i18n/'.format(self.path.get_bld().abspath()))

###############################################################################
@Configure.conf
def check_i18n_tool(self, program, varname):
    """Check a tool for a i18n program and store it using varname"""
    self.start_msg('Check for {} programs'.format(program))
    try:
        self.find_program(program, var=varname)
    except Errors.ConfigurationError:
        self.end_msg('not found', 'YELLOW')
        if self.options.install_i18n is True:
            raise
    else:
        self.end_msg(self.env[varname])
        return True

class CaptureTask(Task.Task):
    """Capture stderr/stdout and logs them only in case of failure"""

    def exec_command(self, cmd, **kw):
        try:
            self.generator.bld.cmd_and_log(cmd, quiet=0, **kw)
        except Errors.WafError, err:
            if hasattr(err, 'stdout'):
                Logs.warn('stdout: %s' % err.stdout)
                Logs.warn('stderr: %s' % err.stderr)
            raise

###############################################################################
def update_gettext(self):
    if not self.env['do_i18n_gettext']:
        raise Errors.WafError('Required tools missing. Run `waf configure` '
            'with the option `--install-i18n` to check what is missing.')
    get_srcs = self.path.get_src().parent.ant_glob
    pysrc = get_srcs('bibpyt/**/*.py')
    pot = self.path.get_bld().make_node('aster_messages.pot')
    self(
        features = 'i18n_pot',
            name = 'i18n_pot',
            deps = pysrc,
          target = pot,
    )
    self(
        features = 'i18n_update',
            name = 'i18n_update',
             pot = pot,
           podir = 'i18n_updated',
             use = ['i18n_pot'],
    )

class xgettext(CaptureTask):
    """Build the .pot file from a list of source files"""
    run_str = '${XGETTEXT} -o ${TGT[0].abspath()} --package-name=Code_Aster --package-version=default ${I18NFILES}'
    color   = 'BLUE'

class merge_po(CaptureTask):
    """Merge a .po file and a new .pot file"""
    run_str = '${MSGMERGE} -q -o ${TGT[0].abspath()} ${SRC[0].abspath()} ${SRC[1].abspath()}'
    color   = 'BLUE'

class compile_po(CaptureTask):
    """Compile .po files into .mo files"""
    run_str = '${MSGFMT} -o ${TGT[0].abspath()} ${SRC[0].abspath()}'
    color   = 'BLUE'


@TaskGen.feature('gettext_compile')
def run_gettext_compile(self):
    """compile .po files into .mo and install them.

	:param install_path: installation directory
	:type install_path: string
    """
    if not self.env['do_i18n_gettext']:
        return
    inst = getattr(self, 'install_path')
    for subd in self.path.listdir():
        node = self.path.find_resource(osp.join(subd, 'aster_messages.po'))
        if node:
            task = self.create_task('compile_po', node.get_src(), node.change_ext('.mo'))
            if inst:
                lang = task.outputs[0].srcpath().split(os.sep)[-2]
                path = osp.join(inst, lang, 'LC_MESSAGES')
                self.bld.install_files(path, task.outputs[0])

@TaskGen.feature('i18n_pot')
def make_pot(self):
    """Create task to build the pot file
    
    :param deps: list of the python files to run xgettext on
    :type deps: nodes
    :param target: name of the ``.pot`` file
    :type target: string
    """
    target = self.target
    deps = getattr(self, 'deps', [])
    self.env.I18NFILES = []
    for node in deps:
        self.env.append_value('I18NFILES', node.abspath())
    target.parent.mkdir()
    self.create_task('xgettext', deps, target)

@TaskGen.feature('i18n_update')
@TaskGen.after('i18n_pot')
def update_po(self):
    """Create task to update the po files
    
    :param pot: updated .pot file
    :type pot: string
    """
    pot = self.pot
    podir = self.path.parent.get_bld().make_node(self.podir)
    for subd in self.path.listdir():
        node = self.path.find_resource(osp.join(subd, 'aster_messages.po'))
        if node:
            tail = node.get_src().abspath().split(os.sep)[-2:]
            output = podir.make_node(tail)
            output.parent.mkdir()
            self.create_task('merge_po', [node.get_src(), pot], output)

###############################################################################
class update_ts(CaptureTask):
    """Update .ts files using a .pro definition"""
    run_str = '${PYLUPDATE} ${SRC[0].abspath()}'
    color   = 'BLUE'

class compile_ts(CaptureTask):
    """Compile .ts file into .qm file"""
    run_str = '${LRELEASE} ${SRC[0].abspath()} -qm ${TGT[0].abspath()}'
    color   = 'BLUE'

class copy(CaptureTask):
    """Copy a file"""
    run_str = 'cp ${SRC[0].abspath()} ${TGT[0].abspath()}'

def update_qtlinguist(self):
    if not self.env['do_i18n_qtlinguist']:
        raise Errors.WafError('Required tools missing. Run `waf configure` '
            'with the option `--install-i18n` to check what is missing.')
    catapy = self.bldnode.find_node('cata.py')
    # create a catapy.pro file
    pro = self.path.get_bld().make_node('catapy.pro')
    translations = ["TRANSLATIONS += {}".format(osp.basename(i)) \
                    for i in glob(osp.join(self.path.abspath(), '*.ts'))]
    self(
        features = 'subst',
            name = 'i18n_pro_file',
          source = 'catapy.pro.tmpl',
          target = pro,
     catapy_path = catapy.get_bld().abspath(),
    translations = os.linesep.join(translations),
    )
    # copy .ts files in build and update them using cata.py
    self(
        features = 'update_all_ts',
            name = 'update_all_ts',
          source = catapy,
             pro = pro,
           tsdir = 'i18n_updated',
          always = True,
    )
    
@TaskGen.feature('qtlinguist_compile')
def run_qtlinguist_compile(self):
    """compile .ts files into .qm and install them.

	:param install_path: installation directory
	:type install_path: string
    """
    if not self.env['do_i18n_qtlinguist']:
        return
    inst = getattr(self, 'install_path')
    for tsfile in glob(osp.join(self.path.abspath(), '*.ts')):
        tsfile = osp.basename(tsfile)
        node = self.path.find_resource(tsfile)
        if node:
            tgt = node.change_ext('.qm').get_bld()
            task = self.create_task('compile_ts', node.get_src(), tgt)
            if inst:
                self.bld.install_files(inst, task.outputs[0])

@TaskGen.feature('update_all_ts')
def make_all_ts(self):
    """Create task to create the working .ts files"""
    tsdir = self.path.parent.get_bld().make_node(self.tsdir)
    newts = []
    for tsfile in glob(osp.join(self.path.abspath(), '*.ts')):
        tsfile = osp.basename(tsfile)
        node = self.path.find_resource(tsfile)
        if node:
            wrkts = tsdir.make_node(tsfile)
            self.create_task('copy', node.get_src(), wrkts)
            newts.append(wrkts)
    self.create_task('update_ts', [self.pro] + newts)
